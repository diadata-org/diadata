// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package whirlpool

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CollectReward is the `collectReward` instruction.
type CollectReward struct {
	RewardIndex *uint8

	// [0] = [] whirlpool
	//
	// [1] = [SIGNER] positionAuthority
	//
	// [2] = [WRITE] position
	//
	// [3] = [] positionTokenAccount
	//
	// [4] = [WRITE] rewardOwnerAccount
	//
	// [5] = [WRITE] rewardVault
	//
	// [6] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCollectRewardInstructionBuilder creates a new `CollectReward` instruction builder.
func NewCollectRewardInstructionBuilder() *CollectReward {
	nd := &CollectReward{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	return nd
}

// SetRewardIndex sets the "rewardIndex" parameter.
func (inst *CollectReward) SetRewardIndex(rewardIndex uint8) *CollectReward {
	inst.RewardIndex = &rewardIndex
	return inst
}

// SetWhirlpoolAccount sets the "whirlpool" account.
func (inst *CollectReward) SetWhirlpoolAccount(whirlpool ag_solanago.PublicKey) *CollectReward {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(whirlpool)
	return inst
}

// GetWhirlpoolAccount gets the "whirlpool" account.
func (inst *CollectReward) GetWhirlpoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPositionAuthorityAccount sets the "positionAuthority" account.
func (inst *CollectReward) SetPositionAuthorityAccount(positionAuthority ag_solanago.PublicKey) *CollectReward {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(positionAuthority).SIGNER()
	return inst
}

// GetPositionAuthorityAccount gets the "positionAuthority" account.
func (inst *CollectReward) GetPositionAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPositionAccount sets the "position" account.
func (inst *CollectReward) SetPositionAccount(position ag_solanago.PublicKey) *CollectReward {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(position).WRITE()
	return inst
}

// GetPositionAccount gets the "position" account.
func (inst *CollectReward) GetPositionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPositionTokenAccountAccount sets the "positionTokenAccount" account.
func (inst *CollectReward) SetPositionTokenAccountAccount(positionTokenAccount ag_solanago.PublicKey) *CollectReward {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(positionTokenAccount)
	return inst
}

// GetPositionTokenAccountAccount gets the "positionTokenAccount" account.
func (inst *CollectReward) GetPositionTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetRewardOwnerAccountAccount sets the "rewardOwnerAccount" account.
func (inst *CollectReward) SetRewardOwnerAccountAccount(rewardOwnerAccount ag_solanago.PublicKey) *CollectReward {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(rewardOwnerAccount).WRITE()
	return inst
}

// GetRewardOwnerAccountAccount gets the "rewardOwnerAccount" account.
func (inst *CollectReward) GetRewardOwnerAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetRewardVaultAccount sets the "rewardVault" account.
func (inst *CollectReward) SetRewardVaultAccount(rewardVault ag_solanago.PublicKey) *CollectReward {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(rewardVault).WRITE()
	return inst
}

// GetRewardVaultAccount gets the "rewardVault" account.
func (inst *CollectReward) GetRewardVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *CollectReward) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *CollectReward {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *CollectReward) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

func (inst CollectReward) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CollectReward,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CollectReward) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CollectReward) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.RewardIndex == nil {
			return errors.New("RewardIndex parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Whirlpool is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.PositionAuthority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Position is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.PositionTokenAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.RewardOwnerAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.RewardVault is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *CollectReward) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CollectReward")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("RewardIndex", *inst.RewardIndex))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        whirlpool", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("positionAuthority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("         position", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("    positionToken", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("      rewardOwner", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("      rewardVault", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("     tokenProgram", inst.AccountMetaSlice.Get(6)))
					})
				})
		})
}

func (obj CollectReward) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RewardIndex` param:
	err = encoder.Encode(obj.RewardIndex)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CollectReward) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RewardIndex`:
	err = decoder.Decode(&obj.RewardIndex)
	if err != nil {
		return err
	}
	return nil
}

// NewCollectRewardInstruction declares a new CollectReward instruction with the provided parameters and accounts.
func NewCollectRewardInstruction(
	// Parameters:
	rewardIndex uint8,
	// Accounts:
	whirlpool ag_solanago.PublicKey,
	positionAuthority ag_solanago.PublicKey,
	position ag_solanago.PublicKey,
	positionTokenAccount ag_solanago.PublicKey,
	rewardOwnerAccount ag_solanago.PublicKey,
	rewardVault ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *CollectReward {
	return NewCollectRewardInstructionBuilder().
		SetRewardIndex(rewardIndex).
		SetWhirlpoolAccount(whirlpool).
		SetPositionAuthorityAccount(positionAuthority).
		SetPositionAccount(position).
		SetPositionTokenAccountAccount(positionTokenAccount).
		SetRewardOwnerAccountAccount(rewardOwnerAccount).
		SetRewardVaultAccount(rewardVault).
		SetTokenProgramAccount(tokenProgram)
}
