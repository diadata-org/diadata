// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package whirlpool

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// InitializeReward is the `initializeReward` instruction.
type InitializeReward struct {
	RewardIndex *uint8

	// [0] = [SIGNER] rewardAuthority
	//
	// [1] = [WRITE, SIGNER] funder
	//
	// [2] = [WRITE] whirlpool
	//
	// [3] = [] rewardMint
	//
	// [4] = [WRITE, SIGNER] rewardVault
	//
	// [5] = [] tokenProgram
	//
	// [6] = [] systemProgram
	//
	// [7] = [] rent
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializeRewardInstructionBuilder creates a new `InitializeReward` instruction builder.
func NewInitializeRewardInstructionBuilder() *InitializeReward {
	nd := &InitializeReward{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	return nd
}

// SetRewardIndex sets the "rewardIndex" parameter.
func (inst *InitializeReward) SetRewardIndex(rewardIndex uint8) *InitializeReward {
	inst.RewardIndex = &rewardIndex
	return inst
}

// SetRewardAuthorityAccount sets the "rewardAuthority" account.
func (inst *InitializeReward) SetRewardAuthorityAccount(rewardAuthority ag_solanago.PublicKey) *InitializeReward {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(rewardAuthority).SIGNER()
	return inst
}

// GetRewardAuthorityAccount gets the "rewardAuthority" account.
func (inst *InitializeReward) GetRewardAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetFunderAccount sets the "funder" account.
func (inst *InitializeReward) SetFunderAccount(funder ag_solanago.PublicKey) *InitializeReward {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(funder).WRITE().SIGNER()
	return inst
}

// GetFunderAccount gets the "funder" account.
func (inst *InitializeReward) GetFunderAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetWhirlpoolAccount sets the "whirlpool" account.
func (inst *InitializeReward) SetWhirlpoolAccount(whirlpool ag_solanago.PublicKey) *InitializeReward {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(whirlpool).WRITE()
	return inst
}

// GetWhirlpoolAccount gets the "whirlpool" account.
func (inst *InitializeReward) GetWhirlpoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetRewardMintAccount sets the "rewardMint" account.
func (inst *InitializeReward) SetRewardMintAccount(rewardMint ag_solanago.PublicKey) *InitializeReward {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(rewardMint)
	return inst
}

// GetRewardMintAccount gets the "rewardMint" account.
func (inst *InitializeReward) GetRewardMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetRewardVaultAccount sets the "rewardVault" account.
func (inst *InitializeReward) SetRewardVaultAccount(rewardVault ag_solanago.PublicKey) *InitializeReward {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(rewardVault).WRITE().SIGNER()
	return inst
}

// GetRewardVaultAccount gets the "rewardVault" account.
func (inst *InitializeReward) GetRewardVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *InitializeReward) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *InitializeReward {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *InitializeReward) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *InitializeReward) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitializeReward {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *InitializeReward) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetRentAccount sets the "rent" account.
func (inst *InitializeReward) SetRentAccount(rent ag_solanago.PublicKey) *InitializeReward {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *InitializeReward) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst InitializeReward) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitializeReward,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializeReward) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializeReward) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.RewardIndex == nil {
			return errors.New("RewardIndex parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.RewardAuthority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Funder is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Whirlpool is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.RewardMint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.RewardVault is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *InitializeReward) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitializeReward")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("RewardIndex", *inst.RewardIndex))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("rewardAuthority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("         funder", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("      whirlpool", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("     rewardMint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("    rewardVault", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("   tokenProgram", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("  systemProgram", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("           rent", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj InitializeReward) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RewardIndex` param:
	err = encoder.Encode(obj.RewardIndex)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InitializeReward) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RewardIndex`:
	err = decoder.Decode(&obj.RewardIndex)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializeRewardInstruction declares a new InitializeReward instruction with the provided parameters and accounts.
func NewInitializeRewardInstruction(
	// Parameters:
	rewardIndex uint8,
	// Accounts:
	rewardAuthority ag_solanago.PublicKey,
	funder ag_solanago.PublicKey,
	whirlpool ag_solanago.PublicKey,
	rewardMint ag_solanago.PublicKey,
	rewardVault ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *InitializeReward {
	return NewInitializeRewardInstructionBuilder().
		SetRewardIndex(rewardIndex).
		SetRewardAuthorityAccount(rewardAuthority).
		SetFunderAccount(funder).
		SetWhirlpoolAccount(whirlpool).
		SetRewardMintAccount(rewardMint).
		SetRewardVaultAccount(rewardVault).
		SetTokenProgramAccount(tokenProgram).
		SetSystemProgramAccount(systemProgram).
		SetRentAccount(rent)
}
