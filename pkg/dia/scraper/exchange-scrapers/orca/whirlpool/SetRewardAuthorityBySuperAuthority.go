// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package whirlpool

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SetRewardAuthorityBySuperAuthority is the `setRewardAuthorityBySuperAuthority` instruction.
type SetRewardAuthorityBySuperAuthority struct {
	RewardIndex *uint8

	// [0] = [] whirlpoolsConfig
	//
	// [1] = [WRITE] whirlpool
	//
	// [2] = [SIGNER] rewardEmissionsSuperAuthority
	//
	// [3] = [] newRewardAuthority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSetRewardAuthorityBySuperAuthorityInstructionBuilder creates a new `SetRewardAuthorityBySuperAuthority` instruction builder.
func NewSetRewardAuthorityBySuperAuthorityInstructionBuilder() *SetRewardAuthorityBySuperAuthority {
	nd := &SetRewardAuthorityBySuperAuthority{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetRewardIndex sets the "rewardIndex" parameter.
func (inst *SetRewardAuthorityBySuperAuthority) SetRewardIndex(rewardIndex uint8) *SetRewardAuthorityBySuperAuthority {
	inst.RewardIndex = &rewardIndex
	return inst
}

// SetWhirlpoolsConfigAccount sets the "whirlpoolsConfig" account.
func (inst *SetRewardAuthorityBySuperAuthority) SetWhirlpoolsConfigAccount(whirlpoolsConfig ag_solanago.PublicKey) *SetRewardAuthorityBySuperAuthority {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(whirlpoolsConfig)
	return inst
}

// GetWhirlpoolsConfigAccount gets the "whirlpoolsConfig" account.
func (inst *SetRewardAuthorityBySuperAuthority) GetWhirlpoolsConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetWhirlpoolAccount sets the "whirlpool" account.
func (inst *SetRewardAuthorityBySuperAuthority) SetWhirlpoolAccount(whirlpool ag_solanago.PublicKey) *SetRewardAuthorityBySuperAuthority {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(whirlpool).WRITE()
	return inst
}

// GetWhirlpoolAccount gets the "whirlpool" account.
func (inst *SetRewardAuthorityBySuperAuthority) GetWhirlpoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetRewardEmissionsSuperAuthorityAccount sets the "rewardEmissionsSuperAuthority" account.
func (inst *SetRewardAuthorityBySuperAuthority) SetRewardEmissionsSuperAuthorityAccount(rewardEmissionsSuperAuthority ag_solanago.PublicKey) *SetRewardAuthorityBySuperAuthority {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(rewardEmissionsSuperAuthority).SIGNER()
	return inst
}

// GetRewardEmissionsSuperAuthorityAccount gets the "rewardEmissionsSuperAuthority" account.
func (inst *SetRewardAuthorityBySuperAuthority) GetRewardEmissionsSuperAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetNewRewardAuthorityAccount sets the "newRewardAuthority" account.
func (inst *SetRewardAuthorityBySuperAuthority) SetNewRewardAuthorityAccount(newRewardAuthority ag_solanago.PublicKey) *SetRewardAuthorityBySuperAuthority {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(newRewardAuthority)
	return inst
}

// GetNewRewardAuthorityAccount gets the "newRewardAuthority" account.
func (inst *SetRewardAuthorityBySuperAuthority) GetNewRewardAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst SetRewardAuthorityBySuperAuthority) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SetRewardAuthorityBySuperAuthority,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SetRewardAuthorityBySuperAuthority) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SetRewardAuthorityBySuperAuthority) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.RewardIndex == nil {
			return errors.New("RewardIndex parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.WhirlpoolsConfig is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Whirlpool is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.RewardEmissionsSuperAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.NewRewardAuthority is not set")
		}
	}
	return nil
}

func (inst *SetRewardAuthorityBySuperAuthority) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SetRewardAuthorityBySuperAuthority")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("RewardIndex", *inst.RewardIndex))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("             whirlpoolsConfig", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                    whirlpool", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("rewardEmissionsSuperAuthority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("           newRewardAuthority", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj SetRewardAuthorityBySuperAuthority) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RewardIndex` param:
	err = encoder.Encode(obj.RewardIndex)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SetRewardAuthorityBySuperAuthority) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RewardIndex`:
	err = decoder.Decode(&obj.RewardIndex)
	if err != nil {
		return err
	}
	return nil
}

// NewSetRewardAuthorityBySuperAuthorityInstruction declares a new SetRewardAuthorityBySuperAuthority instruction with the provided parameters and accounts.
func NewSetRewardAuthorityBySuperAuthorityInstruction(
	// Parameters:
	rewardIndex uint8,
	// Accounts:
	whirlpoolsConfig ag_solanago.PublicKey,
	whirlpool ag_solanago.PublicKey,
	rewardEmissionsSuperAuthority ag_solanago.PublicKey,
	newRewardAuthority ag_solanago.PublicKey) *SetRewardAuthorityBySuperAuthority {
	return NewSetRewardAuthorityBySuperAuthorityInstructionBuilder().
		SetRewardIndex(rewardIndex).
		SetWhirlpoolsConfigAccount(whirlpoolsConfig).
		SetWhirlpoolAccount(whirlpool).
		SetRewardEmissionsSuperAuthorityAccount(rewardEmissionsSuperAuthority).
		SetNewRewardAuthorityAccount(newRewardAuthority)
}
