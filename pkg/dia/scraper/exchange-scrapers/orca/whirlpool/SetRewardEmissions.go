// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package whirlpool

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SetRewardEmissions is the `setRewardEmissions` instruction.
type SetRewardEmissions struct {
	RewardIndex           *uint8
	EmissionsPerSecondX64 *ag_binary.Uint128

	// [0] = [WRITE] whirlpool
	//
	// [1] = [SIGNER] rewardAuthority
	//
	// [2] = [] rewardVault
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSetRewardEmissionsInstructionBuilder creates a new `SetRewardEmissions` instruction builder.
func NewSetRewardEmissionsInstructionBuilder() *SetRewardEmissions {
	nd := &SetRewardEmissions{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetRewardIndex sets the "rewardIndex" parameter.
func (inst *SetRewardEmissions) SetRewardIndex(rewardIndex uint8) *SetRewardEmissions {
	inst.RewardIndex = &rewardIndex
	return inst
}

// SetEmissionsPerSecondX64 sets the "emissionsPerSecondX64" parameter.
func (inst *SetRewardEmissions) SetEmissionsPerSecondX64(emissionsPerSecondX64 ag_binary.Uint128) *SetRewardEmissions {
	inst.EmissionsPerSecondX64 = &emissionsPerSecondX64
	return inst
}

// SetWhirlpoolAccount sets the "whirlpool" account.
func (inst *SetRewardEmissions) SetWhirlpoolAccount(whirlpool ag_solanago.PublicKey) *SetRewardEmissions {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(whirlpool).WRITE()
	return inst
}

// GetWhirlpoolAccount gets the "whirlpool" account.
func (inst *SetRewardEmissions) GetWhirlpoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetRewardAuthorityAccount sets the "rewardAuthority" account.
func (inst *SetRewardEmissions) SetRewardAuthorityAccount(rewardAuthority ag_solanago.PublicKey) *SetRewardEmissions {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(rewardAuthority).SIGNER()
	return inst
}

// GetRewardAuthorityAccount gets the "rewardAuthority" account.
func (inst *SetRewardEmissions) GetRewardAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetRewardVaultAccount sets the "rewardVault" account.
func (inst *SetRewardEmissions) SetRewardVaultAccount(rewardVault ag_solanago.PublicKey) *SetRewardEmissions {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(rewardVault)
	return inst
}

// GetRewardVaultAccount gets the "rewardVault" account.
func (inst *SetRewardEmissions) GetRewardVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst SetRewardEmissions) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SetRewardEmissions,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SetRewardEmissions) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SetRewardEmissions) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.RewardIndex == nil {
			return errors.New("RewardIndex parameter is not set")
		}
		if inst.EmissionsPerSecondX64 == nil {
			return errors.New("EmissionsPerSecondX64 parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Whirlpool is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.RewardAuthority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.RewardVault is not set")
		}
	}
	return nil
}

func (inst *SetRewardEmissions) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SetRewardEmissions")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("          RewardIndex", *inst.RewardIndex))
						paramsBranch.Child(ag_format.Param("EmissionsPerSecondX64", *inst.EmissionsPerSecondX64))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("      whirlpool", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("rewardAuthority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("    rewardVault", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj SetRewardEmissions) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RewardIndex` param:
	err = encoder.Encode(obj.RewardIndex)
	if err != nil {
		return err
	}
	// Serialize `EmissionsPerSecondX64` param:
	err = encoder.Encode(obj.EmissionsPerSecondX64)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SetRewardEmissions) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RewardIndex`:
	err = decoder.Decode(&obj.RewardIndex)
	if err != nil {
		return err
	}
	// Deserialize `EmissionsPerSecondX64`:
	err = decoder.Decode(&obj.EmissionsPerSecondX64)
	if err != nil {
		return err
	}
	return nil
}

// NewSetRewardEmissionsInstruction declares a new SetRewardEmissions instruction with the provided parameters and accounts.
func NewSetRewardEmissionsInstruction(
	// Parameters:
	rewardIndex uint8,
	emissionsPerSecondX64 ag_binary.Uint128,
	// Accounts:
	whirlpool ag_solanago.PublicKey,
	rewardAuthority ag_solanago.PublicKey,
	rewardVault ag_solanago.PublicKey) *SetRewardEmissions {
	return NewSetRewardEmissionsInstructionBuilder().
		SetRewardIndex(rewardIndex).
		SetEmissionsPerSecondX64(emissionsPerSecondX64).
		SetWhirlpoolAccount(whirlpool).
		SetRewardAuthorityAccount(rewardAuthority).
		SetRewardVaultAccount(rewardVault)
}
