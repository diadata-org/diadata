// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package whirlpool

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CollectProtocolFees is the `collectProtocolFees` instruction.
type CollectProtocolFees struct {

	// [0] = [] whirlpoolsConfig
	//
	// [1] = [WRITE] whirlpool
	//
	// [2] = [SIGNER] collectProtocolFeesAuthority
	//
	// [3] = [WRITE] tokenVaultA
	//
	// [4] = [WRITE] tokenVaultB
	//
	// [5] = [WRITE] tokenDestinationA
	//
	// [6] = [WRITE] tokenDestinationB
	//
	// [7] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCollectProtocolFeesInstructionBuilder creates a new `CollectProtocolFees` instruction builder.
func NewCollectProtocolFeesInstructionBuilder() *CollectProtocolFees {
	nd := &CollectProtocolFees{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	return nd
}

// SetWhirlpoolsConfigAccount sets the "whirlpoolsConfig" account.
func (inst *CollectProtocolFees) SetWhirlpoolsConfigAccount(whirlpoolsConfig ag_solanago.PublicKey) *CollectProtocolFees {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(whirlpoolsConfig)
	return inst
}

// GetWhirlpoolsConfigAccount gets the "whirlpoolsConfig" account.
func (inst *CollectProtocolFees) GetWhirlpoolsConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetWhirlpoolAccount sets the "whirlpool" account.
func (inst *CollectProtocolFees) SetWhirlpoolAccount(whirlpool ag_solanago.PublicKey) *CollectProtocolFees {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(whirlpool).WRITE()
	return inst
}

// GetWhirlpoolAccount gets the "whirlpool" account.
func (inst *CollectProtocolFees) GetWhirlpoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetCollectProtocolFeesAuthorityAccount sets the "collectProtocolFeesAuthority" account.
func (inst *CollectProtocolFees) SetCollectProtocolFeesAuthorityAccount(collectProtocolFeesAuthority ag_solanago.PublicKey) *CollectProtocolFees {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(collectProtocolFeesAuthority).SIGNER()
	return inst
}

// GetCollectProtocolFeesAuthorityAccount gets the "collectProtocolFeesAuthority" account.
func (inst *CollectProtocolFees) GetCollectProtocolFeesAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTokenVaultAAccount sets the "tokenVaultA" account.
func (inst *CollectProtocolFees) SetTokenVaultAAccount(tokenVaultA ag_solanago.PublicKey) *CollectProtocolFees {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tokenVaultA).WRITE()
	return inst
}

// GetTokenVaultAAccount gets the "tokenVaultA" account.
func (inst *CollectProtocolFees) GetTokenVaultAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenVaultBAccount sets the "tokenVaultB" account.
func (inst *CollectProtocolFees) SetTokenVaultBAccount(tokenVaultB ag_solanago.PublicKey) *CollectProtocolFees {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenVaultB).WRITE()
	return inst
}

// GetTokenVaultBAccount gets the "tokenVaultB" account.
func (inst *CollectProtocolFees) GetTokenVaultBAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenDestinationAAccount sets the "tokenDestinationA" account.
func (inst *CollectProtocolFees) SetTokenDestinationAAccount(tokenDestinationA ag_solanago.PublicKey) *CollectProtocolFees {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenDestinationA).WRITE()
	return inst
}

// GetTokenDestinationAAccount gets the "tokenDestinationA" account.
func (inst *CollectProtocolFees) GetTokenDestinationAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenDestinationBAccount sets the "tokenDestinationB" account.
func (inst *CollectProtocolFees) SetTokenDestinationBAccount(tokenDestinationB ag_solanago.PublicKey) *CollectProtocolFees {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenDestinationB).WRITE()
	return inst
}

// GetTokenDestinationBAccount gets the "tokenDestinationB" account.
func (inst *CollectProtocolFees) GetTokenDestinationBAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *CollectProtocolFees) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *CollectProtocolFees {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *CollectProtocolFees) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst CollectProtocolFees) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CollectProtocolFees,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CollectProtocolFees) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CollectProtocolFees) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.WhirlpoolsConfig is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Whirlpool is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.CollectProtocolFeesAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TokenVaultA is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenVaultB is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenDestinationA is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenDestinationB is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *CollectProtocolFees) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CollectProtocolFees")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("            whirlpoolsConfig", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                   whirlpool", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("collectProtocolFeesAuthority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                 tokenVaultA", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                 tokenVaultB", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("           tokenDestinationA", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("           tokenDestinationB", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("                tokenProgram", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj CollectProtocolFees) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *CollectProtocolFees) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewCollectProtocolFeesInstruction declares a new CollectProtocolFees instruction with the provided parameters and accounts.
func NewCollectProtocolFeesInstruction(
	// Accounts:
	whirlpoolsConfig ag_solanago.PublicKey,
	whirlpool ag_solanago.PublicKey,
	collectProtocolFeesAuthority ag_solanago.PublicKey,
	tokenVaultA ag_solanago.PublicKey,
	tokenVaultB ag_solanago.PublicKey,
	tokenDestinationA ag_solanago.PublicKey,
	tokenDestinationB ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *CollectProtocolFees {
	return NewCollectProtocolFeesInstructionBuilder().
		SetWhirlpoolsConfigAccount(whirlpoolsConfig).
		SetWhirlpoolAccount(whirlpool).
		SetCollectProtocolFeesAuthorityAccount(collectProtocolFeesAuthority).
		SetTokenVaultAAccount(tokenVaultA).
		SetTokenVaultBAccount(tokenVaultB).
		SetTokenDestinationAAccount(tokenDestinationA).
		SetTokenDestinationBAccount(tokenDestinationB).
		SetTokenProgramAccount(tokenProgram)
}
