// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package whirlpool

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdateFeesAndRewards is the `updateFeesAndRewards` instruction.
type UpdateFeesAndRewards struct {

	// [0] = [WRITE] whirlpool
	//
	// [1] = [WRITE] position
	//
	// [2] = [] tickArrayLower
	//
	// [3] = [] tickArrayUpper
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdateFeesAndRewardsInstructionBuilder creates a new `UpdateFeesAndRewards` instruction builder.
func NewUpdateFeesAndRewardsInstructionBuilder() *UpdateFeesAndRewards {
	nd := &UpdateFeesAndRewards{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetWhirlpoolAccount sets the "whirlpool" account.
func (inst *UpdateFeesAndRewards) SetWhirlpoolAccount(whirlpool ag_solanago.PublicKey) *UpdateFeesAndRewards {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(whirlpool).WRITE()
	return inst
}

// GetWhirlpoolAccount gets the "whirlpool" account.
func (inst *UpdateFeesAndRewards) GetWhirlpoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPositionAccount sets the "position" account.
func (inst *UpdateFeesAndRewards) SetPositionAccount(position ag_solanago.PublicKey) *UpdateFeesAndRewards {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(position).WRITE()
	return inst
}

// GetPositionAccount gets the "position" account.
func (inst *UpdateFeesAndRewards) GetPositionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTickArrayLowerAccount sets the "tickArrayLower" account.
func (inst *UpdateFeesAndRewards) SetTickArrayLowerAccount(tickArrayLower ag_solanago.PublicKey) *UpdateFeesAndRewards {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tickArrayLower)
	return inst
}

// GetTickArrayLowerAccount gets the "tickArrayLower" account.
func (inst *UpdateFeesAndRewards) GetTickArrayLowerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTickArrayUpperAccount sets the "tickArrayUpper" account.
func (inst *UpdateFeesAndRewards) SetTickArrayUpperAccount(tickArrayUpper ag_solanago.PublicKey) *UpdateFeesAndRewards {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tickArrayUpper)
	return inst
}

// GetTickArrayUpperAccount gets the "tickArrayUpper" account.
func (inst *UpdateFeesAndRewards) GetTickArrayUpperAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst UpdateFeesAndRewards) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdateFeesAndRewards,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdateFeesAndRewards) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdateFeesAndRewards) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Whirlpool is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Position is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TickArrayLower is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TickArrayUpper is not set")
		}
	}
	return nil
}

func (inst *UpdateFeesAndRewards) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdateFeesAndRewards")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     whirlpool", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("      position", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("tickArrayLower", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("tickArrayUpper", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj UpdateFeesAndRewards) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *UpdateFeesAndRewards) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewUpdateFeesAndRewardsInstruction declares a new UpdateFeesAndRewards instruction with the provided parameters and accounts.
func NewUpdateFeesAndRewardsInstruction(
	// Accounts:
	whirlpool ag_solanago.PublicKey,
	position ag_solanago.PublicKey,
	tickArrayLower ag_solanago.PublicKey,
	tickArrayUpper ag_solanago.PublicKey) *UpdateFeesAndRewards {
	return NewUpdateFeesAndRewardsInstructionBuilder().
		SetWhirlpoolAccount(whirlpool).
		SetPositionAccount(position).
		SetTickArrayLowerAccount(tickArrayLower).
		SetTickArrayUpperAccount(tickArrayUpper)
}
