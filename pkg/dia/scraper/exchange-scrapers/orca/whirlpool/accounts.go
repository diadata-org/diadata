// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package whirlpool

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type WhirlpoolsConfig struct {
	FeeAuthority                  ag_solanago.PublicKey
	CollectProtocolFeesAuthority  ag_solanago.PublicKey
	RewardEmissionsSuperAuthority ag_solanago.PublicKey
	DefaultProtocolFeeRate        uint16
}

var WhirlpoolsConfigDiscriminator = [8]byte{157, 20, 49, 224, 217, 87, 193, 254}

func (obj WhirlpoolsConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(WhirlpoolsConfigDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `FeeAuthority` param:
	err = encoder.Encode(obj.FeeAuthority)
	if err != nil {
		return err
	}
	// Serialize `CollectProtocolFeesAuthority` param:
	err = encoder.Encode(obj.CollectProtocolFeesAuthority)
	if err != nil {
		return err
	}
	// Serialize `RewardEmissionsSuperAuthority` param:
	err = encoder.Encode(obj.RewardEmissionsSuperAuthority)
	if err != nil {
		return err
	}
	// Serialize `DefaultProtocolFeeRate` param:
	err = encoder.Encode(obj.DefaultProtocolFeeRate)
	if err != nil {
		return err
	}
	return nil
}

func (obj *WhirlpoolsConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(WhirlpoolsConfigDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[157 20 49 224 217 87 193 254]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `FeeAuthority`:
	err = decoder.Decode(&obj.FeeAuthority)
	if err != nil {
		return err
	}
	// Deserialize `CollectProtocolFeesAuthority`:
	err = decoder.Decode(&obj.CollectProtocolFeesAuthority)
	if err != nil {
		return err
	}
	// Deserialize `RewardEmissionsSuperAuthority`:
	err = decoder.Decode(&obj.RewardEmissionsSuperAuthority)
	if err != nil {
		return err
	}
	// Deserialize `DefaultProtocolFeeRate`:
	err = decoder.Decode(&obj.DefaultProtocolFeeRate)
	if err != nil {
		return err
	}
	return nil
}

type FeeTier struct {
	WhirlpoolsConfig ag_solanago.PublicKey
	TickSpacing      uint16
	DefaultFeeRate   uint16
}

var FeeTierDiscriminator = [8]byte{56, 75, 159, 76, 142, 68, 190, 105}

func (obj FeeTier) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(FeeTierDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `WhirlpoolsConfig` param:
	err = encoder.Encode(obj.WhirlpoolsConfig)
	if err != nil {
		return err
	}
	// Serialize `TickSpacing` param:
	err = encoder.Encode(obj.TickSpacing)
	if err != nil {
		return err
	}
	// Serialize `DefaultFeeRate` param:
	err = encoder.Encode(obj.DefaultFeeRate)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FeeTier) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(FeeTierDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[56 75 159 76 142 68 190 105]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `WhirlpoolsConfig`:
	err = decoder.Decode(&obj.WhirlpoolsConfig)
	if err != nil {
		return err
	}
	// Deserialize `TickSpacing`:
	err = decoder.Decode(&obj.TickSpacing)
	if err != nil {
		return err
	}
	// Deserialize `DefaultFeeRate`:
	err = decoder.Decode(&obj.DefaultFeeRate)
	if err != nil {
		return err
	}
	return nil
}

type Position struct {
	Whirlpool            ag_solanago.PublicKey
	PositionMint         ag_solanago.PublicKey
	Liquidity            ag_binary.Uint128
	TickLowerIndex       int32
	TickUpperIndex       int32
	FeeGrowthCheckpointA ag_binary.Uint128
	FeeOwedA             uint64
	FeeGrowthCheckpointB ag_binary.Uint128
	FeeOwedB             uint64
	RewardInfos          [3]PositionRewardInfo
}

var PositionDiscriminator = [8]byte{170, 188, 143, 228, 122, 64, 247, 208}

func (obj Position) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(PositionDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Whirlpool` param:
	err = encoder.Encode(obj.Whirlpool)
	if err != nil {
		return err
	}
	// Serialize `PositionMint` param:
	err = encoder.Encode(obj.PositionMint)
	if err != nil {
		return err
	}
	// Serialize `Liquidity` param:
	err = encoder.Encode(obj.Liquidity)
	if err != nil {
		return err
	}
	// Serialize `TickLowerIndex` param:
	err = encoder.Encode(obj.TickLowerIndex)
	if err != nil {
		return err
	}
	// Serialize `TickUpperIndex` param:
	err = encoder.Encode(obj.TickUpperIndex)
	if err != nil {
		return err
	}
	// Serialize `FeeGrowthCheckpointA` param:
	err = encoder.Encode(obj.FeeGrowthCheckpointA)
	if err != nil {
		return err
	}
	// Serialize `FeeOwedA` param:
	err = encoder.Encode(obj.FeeOwedA)
	if err != nil {
		return err
	}
	// Serialize `FeeGrowthCheckpointB` param:
	err = encoder.Encode(obj.FeeGrowthCheckpointB)
	if err != nil {
		return err
	}
	// Serialize `FeeOwedB` param:
	err = encoder.Encode(obj.FeeOwedB)
	if err != nil {
		return err
	}
	// Serialize `RewardInfos` param:
	err = encoder.Encode(obj.RewardInfos)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Position) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(PositionDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[170 188 143 228 122 64 247 208]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Whirlpool`:
	err = decoder.Decode(&obj.Whirlpool)
	if err != nil {
		return err
	}
	// Deserialize `PositionMint`:
	err = decoder.Decode(&obj.PositionMint)
	if err != nil {
		return err
	}
	// Deserialize `Liquidity`:
	err = decoder.Decode(&obj.Liquidity)
	if err != nil {
		return err
	}
	// Deserialize `TickLowerIndex`:
	err = decoder.Decode(&obj.TickLowerIndex)
	if err != nil {
		return err
	}
	// Deserialize `TickUpperIndex`:
	err = decoder.Decode(&obj.TickUpperIndex)
	if err != nil {
		return err
	}
	// Deserialize `FeeGrowthCheckpointA`:
	err = decoder.Decode(&obj.FeeGrowthCheckpointA)
	if err != nil {
		return err
	}
	// Deserialize `FeeOwedA`:
	err = decoder.Decode(&obj.FeeOwedA)
	if err != nil {
		return err
	}
	// Deserialize `FeeGrowthCheckpointB`:
	err = decoder.Decode(&obj.FeeGrowthCheckpointB)
	if err != nil {
		return err
	}
	// Deserialize `FeeOwedB`:
	err = decoder.Decode(&obj.FeeOwedB)
	if err != nil {
		return err
	}
	// Deserialize `RewardInfos`:
	err = decoder.Decode(&obj.RewardInfos)
	if err != nil {
		return err
	}
	return nil
}

type TickArray struct {
	StartTickIndex int32
	Ticks          [88]Tick
	Whirlpool      ag_solanago.PublicKey
}

var TickArrayDiscriminator = [8]byte{69, 97, 189, 190, 110, 7, 66, 187}

func (obj TickArray) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(TickArrayDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `StartTickIndex` param:
	err = encoder.Encode(obj.StartTickIndex)
	if err != nil {
		return err
	}
	// Serialize `Ticks` param:
	err = encoder.Encode(obj.Ticks)
	if err != nil {
		return err
	}
	// Serialize `Whirlpool` param:
	err = encoder.Encode(obj.Whirlpool)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TickArray) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(TickArrayDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[69 97 189 190 110 7 66 187]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `StartTickIndex`:
	err = decoder.Decode(&obj.StartTickIndex)
	if err != nil {
		return err
	}
	// Deserialize `Ticks`:
	err = decoder.Decode(&obj.Ticks)
	if err != nil {
		return err
	}
	// Deserialize `Whirlpool`:
	err = decoder.Decode(&obj.Whirlpool)
	if err != nil {
		return err
	}
	return nil
}

type Whirlpool struct {
	WhirlpoolsConfig           ag_solanago.PublicKey
	WhirlpoolBump              [1]uint8
	TickSpacing                uint16
	TickSpacingSeed            [2]uint8
	FeeRate                    uint16
	ProtocolFeeRate            uint16
	Liquidity                  ag_binary.Uint128
	SqrtPrice                  ag_binary.Uint128
	TickCurrentIndex           int32
	ProtocolFeeOwedA           uint64
	ProtocolFeeOwedB           uint64
	TokenMintA                 ag_solanago.PublicKey
	TokenVaultA                ag_solanago.PublicKey
	FeeGrowthGlobalA           ag_binary.Uint128
	TokenMintB                 ag_solanago.PublicKey
	TokenVaultB                ag_solanago.PublicKey
	FeeGrowthGlobalB           ag_binary.Uint128
	RewardLastUpdatedTimestamp uint64
	RewardInfos                [3]WhirlpoolRewardInfo
}

var WhirlpoolDiscriminator = [8]byte{63, 149, 209, 12, 225, 128, 99, 9}

func (obj Whirlpool) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(WhirlpoolDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `WhirlpoolsConfig` param:
	err = encoder.Encode(obj.WhirlpoolsConfig)
	if err != nil {
		return err
	}
	// Serialize `WhirlpoolBump` param:
	err = encoder.Encode(obj.WhirlpoolBump)
	if err != nil {
		return err
	}
	// Serialize `TickSpacing` param:
	err = encoder.Encode(obj.TickSpacing)
	if err != nil {
		return err
	}
	// Serialize `TickSpacingSeed` param:
	err = encoder.Encode(obj.TickSpacingSeed)
	if err != nil {
		return err
	}
	// Serialize `FeeRate` param:
	err = encoder.Encode(obj.FeeRate)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeeRate` param:
	err = encoder.Encode(obj.ProtocolFeeRate)
	if err != nil {
		return err
	}
	// Serialize `Liquidity` param:
	err = encoder.Encode(obj.Liquidity)
	if err != nil {
		return err
	}
	// Serialize `SqrtPrice` param:
	err = encoder.Encode(obj.SqrtPrice)
	if err != nil {
		return err
	}
	// Serialize `TickCurrentIndex` param:
	err = encoder.Encode(obj.TickCurrentIndex)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeeOwedA` param:
	err = encoder.Encode(obj.ProtocolFeeOwedA)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeeOwedB` param:
	err = encoder.Encode(obj.ProtocolFeeOwedB)
	if err != nil {
		return err
	}
	// Serialize `TokenMintA` param:
	err = encoder.Encode(obj.TokenMintA)
	if err != nil {
		return err
	}
	// Serialize `TokenVaultA` param:
	err = encoder.Encode(obj.TokenVaultA)
	if err != nil {
		return err
	}
	// Serialize `FeeGrowthGlobalA` param:
	err = encoder.Encode(obj.FeeGrowthGlobalA)
	if err != nil {
		return err
	}
	// Serialize `TokenMintB` param:
	err = encoder.Encode(obj.TokenMintB)
	if err != nil {
		return err
	}
	// Serialize `TokenVaultB` param:
	err = encoder.Encode(obj.TokenVaultB)
	if err != nil {
		return err
	}
	// Serialize `FeeGrowthGlobalB` param:
	err = encoder.Encode(obj.FeeGrowthGlobalB)
	if err != nil {
		return err
	}
	// Serialize `RewardLastUpdatedTimestamp` param:
	err = encoder.Encode(obj.RewardLastUpdatedTimestamp)
	if err != nil {
		return err
	}
	// Serialize `RewardInfos` param:
	err = encoder.Encode(obj.RewardInfos)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Whirlpool) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(WhirlpoolDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[63 149 209 12 225 128 99 9]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `WhirlpoolsConfig`:
	err = decoder.Decode(&obj.WhirlpoolsConfig)
	if err != nil {
		return err
	}
	// Deserialize `WhirlpoolBump`:
	err = decoder.Decode(&obj.WhirlpoolBump)
	if err != nil {
		return err
	}
	// Deserialize `TickSpacing`:
	err = decoder.Decode(&obj.TickSpacing)
	if err != nil {
		return err
	}
	// Deserialize `TickSpacingSeed`:
	err = decoder.Decode(&obj.TickSpacingSeed)
	if err != nil {
		return err
	}
	// Deserialize `FeeRate`:
	err = decoder.Decode(&obj.FeeRate)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeeRate`:
	err = decoder.Decode(&obj.ProtocolFeeRate)
	if err != nil {
		return err
	}
	// Deserialize `Liquidity`:
	err = decoder.Decode(&obj.Liquidity)
	if err != nil {
		return err
	}
	// Deserialize `SqrtPrice`:
	err = decoder.Decode(&obj.SqrtPrice)
	if err != nil {
		return err
	}
	// Deserialize `TickCurrentIndex`:
	err = decoder.Decode(&obj.TickCurrentIndex)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeeOwedA`:
	err = decoder.Decode(&obj.ProtocolFeeOwedA)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeeOwedB`:
	err = decoder.Decode(&obj.ProtocolFeeOwedB)
	if err != nil {
		return err
	}
	// Deserialize `TokenMintA`:
	err = decoder.Decode(&obj.TokenMintA)
	if err != nil {
		return err
	}
	// Deserialize `TokenVaultA`:
	err = decoder.Decode(&obj.TokenVaultA)
	if err != nil {
		return err
	}
	// Deserialize `FeeGrowthGlobalA`:
	err = decoder.Decode(&obj.FeeGrowthGlobalA)
	if err != nil {
		return err
	}
	// Deserialize `TokenMintB`:
	err = decoder.Decode(&obj.TokenMintB)
	if err != nil {
		return err
	}
	// Deserialize `TokenVaultB`:
	err = decoder.Decode(&obj.TokenVaultB)
	if err != nil {
		return err
	}
	// Deserialize `FeeGrowthGlobalB`:
	err = decoder.Decode(&obj.FeeGrowthGlobalB)
	if err != nil {
		return err
	}
	// Deserialize `RewardLastUpdatedTimestamp`:
	err = decoder.Decode(&obj.RewardLastUpdatedTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `RewardInfos`:
	err = decoder.Decode(&obj.RewardInfos)
	if err != nil {
		return err
	}
	return nil
}
