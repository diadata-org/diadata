// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// AaveProtocolDataProviderTokenData is an auto generated low-level Go binding around an user-defined struct.
type AaveProtocolDataProviderTokenData struct {
	Symbol       string
	TokenAddress common.Address
}

// DataTypesReserveConfigurationMap is an auto generated low-level Go binding around an user-defined struct.
type DataTypesReserveConfigurationMap struct {
	Data *big.Int
}

// DataTypesReserveData is an auto generated low-level Go binding around an user-defined struct.
type DataTypesReserveData struct {
	Configuration               DataTypesReserveConfigurationMap
	LiquidityIndex              *big.Int
	VariableBorrowIndex         *big.Int
	CurrentLiquidityRate        *big.Int
	CurrentVariableBorrowRate   *big.Int
	CurrentStableBorrowRate     *big.Int
	LastUpdateTimestamp         *big.Int
	ATokenAddress               common.Address
	StableDebtTokenAddress      common.Address
	VariableDebtTokenAddress    common.Address
	InterestRateStrategyAddress common.Address
	Id                          uint8
}

// DataTypesUserConfigurationMap is an auto generated low-level Go binding around an user-defined struct.
type DataTypesUserConfigurationMap struct {
	Data *big.Int
}

// IUiPoolDataProviderAggregatedReserveData is an auto generated low-level Go binding around an user-defined struct.
type IUiPoolDataProviderAggregatedReserveData struct {
	UnderlyingAsset               common.Address
	Name                          string
	Symbol                        string
	Decimals                      *big.Int
	BaseLTVasCollateral           *big.Int
	ReserveLiquidationThreshold   *big.Int
	ReserveLiquidationBonus       *big.Int
	ReserveFactor                 *big.Int
	UsageAsCollateralEnabled      bool
	BorrowingEnabled              bool
	StableBorrowRateEnabled       bool
	IsActive                      bool
	IsFrozen                      bool
	LiquidityIndex                *big.Int
	VariableBorrowIndex           *big.Int
	LiquidityRate                 *big.Int
	VariableBorrowRate            *big.Int
	StableBorrowRate              *big.Int
	LastUpdateTimestamp           *big.Int
	ATokenAddress                 common.Address
	StableDebtTokenAddress        common.Address
	VariableDebtTokenAddress      common.Address
	InterestRateStrategyAddress   common.Address
	AvailableLiquidity            *big.Int
	TotalPrincipalStableDebt      *big.Int
	AverageStableRate             *big.Int
	StableDebtLastUpdateTimestamp *big.Int
	TotalScaledVariableDebt       *big.Int
	PriceInEth                    *big.Int
	VariableRateSlope1            *big.Int
	VariableRateSlope2            *big.Int
	StableRateSlope1              *big.Int
	StableRateSlope2              *big.Int
}

// IUiPoolDataProviderUserReserveData is an auto generated low-level Go binding around an user-defined struct.
type IUiPoolDataProviderUserReserveData struct {
	UnderlyingAsset                 common.Address
	ScaledATokenBalance             *big.Int
	UsageAsCollateralEnabledOnUser  bool
	StableBorrowRate                *big.Int
	ScaledVariableDebt              *big.Int
	PrincipalStableDebt             *big.Int
	StableBorrowLastUpdateTimestamp *big.Int
}

// ATokenABI is the input ABI used to generate the binding from.
const ATokenABI = "[{\"inputs\":[{\"internalType\":\"contractILendingPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingAssetAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reserveTreasuryAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"incentivesController\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"BalanceTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ATOKEN_REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712_REVISION\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL\",\"outputs\":[{\"internalType\":\"contractILendingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESERVE_TREASURY_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UINT_MAX_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNDERLYING_ASSET_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverOfUnderlying\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getScaledUserBalanceAndSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"underlyingAssetDecimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"mintToTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"scaledBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scaledTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferOnLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferUnderlyingTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ATokenBin is the compiled bytecode used for deploying new contracts.
var ATokenBin = ""

// DeployAToken deploys a new Ethereum contract, binding an instance of AToken to it.
func DeployAToken(auth *bind.TransactOpts, backend bind.ContractBackend, pool common.Address, underlyingAssetAddress common.Address, reserveTreasuryAddress common.Address, tokenName string, tokenSymbol string, incentivesController common.Address) (common.Address, *types.Transaction, *AToken, error) {
	parsed, err := abi.JSON(strings.NewReader(ATokenABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ATokenBin), backend, pool, underlyingAssetAddress, reserveTreasuryAddress, tokenName, tokenSymbol, incentivesController)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AToken{ATokenCaller: ATokenCaller{contract: contract}, ATokenTransactor: ATokenTransactor{contract: contract}, ATokenFilterer: ATokenFilterer{contract: contract}}, nil
}

// AToken is an auto generated Go binding around an Ethereum contract.
type AToken struct {
	ATokenCaller     // Read-only binding to the contract
	ATokenTransactor // Write-only binding to the contract
	ATokenFilterer   // Log filterer for contract events
}

// ATokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type ATokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ATokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ATokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ATokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ATokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ATokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ATokenSession struct {
	Contract     *AToken           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ATokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ATokenCallerSession struct {
	Contract *ATokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ATokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ATokenTransactorSession struct {
	Contract     *ATokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ATokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type ATokenRaw struct {
	Contract *AToken // Generic contract binding to access the raw methods on
}

// ATokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ATokenCallerRaw struct {
	Contract *ATokenCaller // Generic read-only contract binding to access the raw methods on
}

// ATokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ATokenTransactorRaw struct {
	Contract *ATokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAToken creates a new instance of AToken, bound to a specific deployed contract.
func NewAToken(address common.Address, backend bind.ContractBackend) (*AToken, error) {
	contract, err := bindAToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AToken{ATokenCaller: ATokenCaller{contract: contract}, ATokenTransactor: ATokenTransactor{contract: contract}, ATokenFilterer: ATokenFilterer{contract: contract}}, nil
}

// NewATokenCaller creates a new read-only instance of AToken, bound to a specific deployed contract.
func NewATokenCaller(address common.Address, caller bind.ContractCaller) (*ATokenCaller, error) {
	contract, err := bindAToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ATokenCaller{contract: contract}, nil
}

// NewATokenTransactor creates a new write-only instance of AToken, bound to a specific deployed contract.
func NewATokenTransactor(address common.Address, transactor bind.ContractTransactor) (*ATokenTransactor, error) {
	contract, err := bindAToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ATokenTransactor{contract: contract}, nil
}

// NewATokenFilterer creates a new log filterer instance of AToken, bound to a specific deployed contract.
func NewATokenFilterer(address common.Address, filterer bind.ContractFilterer) (*ATokenFilterer, error) {
	contract, err := bindAToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ATokenFilterer{contract: contract}, nil
}

// bindAToken binds a generic wrapper to an already deployed contract.
func bindAToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ATokenABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AToken *ATokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AToken.Contract.ATokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AToken *ATokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AToken.Contract.ATokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AToken *ATokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AToken.Contract.ATokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AToken *ATokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AToken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AToken *ATokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AToken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AToken *ATokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AToken.Contract.contract.Transact(opts, method, params...)
}

// ATOKENREVISION is a free data retrieval call binding the contract method 0x0bd7ad3b.
//
// Solidity: function ATOKEN_REVISION() view returns(uint256)
func (_AToken *ATokenCaller) ATOKENREVISION(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AToken.contract.Call(opts, &out, "ATOKEN_REVISION")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ATOKENREVISION is a free data retrieval call binding the contract method 0x0bd7ad3b.
//
// Solidity: function ATOKEN_REVISION() view returns(uint256)
func (_AToken *ATokenSession) ATOKENREVISION() (*big.Int, error) {
	return _AToken.Contract.ATOKENREVISION(&_AToken.CallOpts)
}

// ATOKENREVISION is a free data retrieval call binding the contract method 0x0bd7ad3b.
//
// Solidity: function ATOKEN_REVISION() view returns(uint256)
func (_AToken *ATokenCallerSession) ATOKENREVISION() (*big.Int, error) {
	return _AToken.Contract.ATOKENREVISION(&_AToken.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_AToken *ATokenCaller) DOMAINSEPARATOR(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _AToken.contract.Call(opts, &out, "DOMAIN_SEPARATOR")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_AToken *ATokenSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _AToken.Contract.DOMAINSEPARATOR(&_AToken.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_AToken *ATokenCallerSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _AToken.Contract.DOMAINSEPARATOR(&_AToken.CallOpts)
}

// EIP712REVISION is a free data retrieval call binding the contract method 0x78160376.
//
// Solidity: function EIP712_REVISION() view returns(bytes)
func (_AToken *ATokenCaller) EIP712REVISION(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _AToken.contract.Call(opts, &out, "EIP712_REVISION")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// EIP712REVISION is a free data retrieval call binding the contract method 0x78160376.
//
// Solidity: function EIP712_REVISION() view returns(bytes)
func (_AToken *ATokenSession) EIP712REVISION() ([]byte, error) {
	return _AToken.Contract.EIP712REVISION(&_AToken.CallOpts)
}

// EIP712REVISION is a free data retrieval call binding the contract method 0x78160376.
//
// Solidity: function EIP712_REVISION() view returns(bytes)
func (_AToken *ATokenCallerSession) EIP712REVISION() ([]byte, error) {
	return _AToken.Contract.EIP712REVISION(&_AToken.CallOpts)
}

// PERMITTYPEHASH is a free data retrieval call binding the contract method 0x30adf81f.
//
// Solidity: function PERMIT_TYPEHASH() view returns(bytes32)
func (_AToken *ATokenCaller) PERMITTYPEHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _AToken.contract.Call(opts, &out, "PERMIT_TYPEHASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PERMITTYPEHASH is a free data retrieval call binding the contract method 0x30adf81f.
//
// Solidity: function PERMIT_TYPEHASH() view returns(bytes32)
func (_AToken *ATokenSession) PERMITTYPEHASH() ([32]byte, error) {
	return _AToken.Contract.PERMITTYPEHASH(&_AToken.CallOpts)
}

// PERMITTYPEHASH is a free data retrieval call binding the contract method 0x30adf81f.
//
// Solidity: function PERMIT_TYPEHASH() view returns(bytes32)
func (_AToken *ATokenCallerSession) PERMITTYPEHASH() ([32]byte, error) {
	return _AToken.Contract.PERMITTYPEHASH(&_AToken.CallOpts)
}

// POOL is a free data retrieval call binding the contract method 0x7535d246.
//
// Solidity: function POOL() view returns(address)
func (_AToken *ATokenCaller) POOL(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AToken.contract.Call(opts, &out, "POOL")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// POOL is a free data retrieval call binding the contract method 0x7535d246.
//
// Solidity: function POOL() view returns(address)
func (_AToken *ATokenSession) POOL() (common.Address, error) {
	return _AToken.Contract.POOL(&_AToken.CallOpts)
}

// POOL is a free data retrieval call binding the contract method 0x7535d246.
//
// Solidity: function POOL() view returns(address)
func (_AToken *ATokenCallerSession) POOL() (common.Address, error) {
	return _AToken.Contract.POOL(&_AToken.CallOpts)
}

// RESERVETREASURYADDRESS is a free data retrieval call binding the contract method 0xae167335.
//
// Solidity: function RESERVE_TREASURY_ADDRESS() view returns(address)
func (_AToken *ATokenCaller) RESERVETREASURYADDRESS(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AToken.contract.Call(opts, &out, "RESERVE_TREASURY_ADDRESS")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RESERVETREASURYADDRESS is a free data retrieval call binding the contract method 0xae167335.
//
// Solidity: function RESERVE_TREASURY_ADDRESS() view returns(address)
func (_AToken *ATokenSession) RESERVETREASURYADDRESS() (common.Address, error) {
	return _AToken.Contract.RESERVETREASURYADDRESS(&_AToken.CallOpts)
}

// RESERVETREASURYADDRESS is a free data retrieval call binding the contract method 0xae167335.
//
// Solidity: function RESERVE_TREASURY_ADDRESS() view returns(address)
func (_AToken *ATokenCallerSession) RESERVETREASURYADDRESS() (common.Address, error) {
	return _AToken.Contract.RESERVETREASURYADDRESS(&_AToken.CallOpts)
}

// UINTMAXVALUE is a free data retrieval call binding the contract method 0xd0fc81d2.
//
// Solidity: function UINT_MAX_VALUE() view returns(uint256)
func (_AToken *ATokenCaller) UINTMAXVALUE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AToken.contract.Call(opts, &out, "UINT_MAX_VALUE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UINTMAXVALUE is a free data retrieval call binding the contract method 0xd0fc81d2.
//
// Solidity: function UINT_MAX_VALUE() view returns(uint256)
func (_AToken *ATokenSession) UINTMAXVALUE() (*big.Int, error) {
	return _AToken.Contract.UINTMAXVALUE(&_AToken.CallOpts)
}

// UINTMAXVALUE is a free data retrieval call binding the contract method 0xd0fc81d2.
//
// Solidity: function UINT_MAX_VALUE() view returns(uint256)
func (_AToken *ATokenCallerSession) UINTMAXVALUE() (*big.Int, error) {
	return _AToken.Contract.UINTMAXVALUE(&_AToken.CallOpts)
}

// UNDERLYINGASSETADDRESS is a free data retrieval call binding the contract method 0xb16a19de.
//
// Solidity: function UNDERLYING_ASSET_ADDRESS() view returns(address)
func (_AToken *ATokenCaller) UNDERLYINGASSETADDRESS(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AToken.contract.Call(opts, &out, "UNDERLYING_ASSET_ADDRESS")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// UNDERLYINGASSETADDRESS is a free data retrieval call binding the contract method 0xb16a19de.
//
// Solidity: function UNDERLYING_ASSET_ADDRESS() view returns(address)
func (_AToken *ATokenSession) UNDERLYINGASSETADDRESS() (common.Address, error) {
	return _AToken.Contract.UNDERLYINGASSETADDRESS(&_AToken.CallOpts)
}

// UNDERLYINGASSETADDRESS is a free data retrieval call binding the contract method 0xb16a19de.
//
// Solidity: function UNDERLYING_ASSET_ADDRESS() view returns(address)
func (_AToken *ATokenCallerSession) UNDERLYINGASSETADDRESS() (common.Address, error) {
	return _AToken.Contract.UNDERLYINGASSETADDRESS(&_AToken.CallOpts)
}

// Nonces is a free data retrieval call binding the contract method 0xb9844d8d.
//
// Solidity: function _nonces(address ) view returns(uint256)
func (_AToken *ATokenCaller) Nonces(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _AToken.contract.Call(opts, &out, "_nonces", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonces is a free data retrieval call binding the contract method 0xb9844d8d.
//
// Solidity: function _nonces(address ) view returns(uint256)
func (_AToken *ATokenSession) Nonces(arg0 common.Address) (*big.Int, error) {
	return _AToken.Contract.Nonces(&_AToken.CallOpts, arg0)
}

// Nonces is a free data retrieval call binding the contract method 0xb9844d8d.
//
// Solidity: function _nonces(address ) view returns(uint256)
func (_AToken *ATokenCallerSession) Nonces(arg0 common.Address) (*big.Int, error) {
	return _AToken.Contract.Nonces(&_AToken.CallOpts, arg0)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_AToken *ATokenCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _AToken.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_AToken *ATokenSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _AToken.Contract.Allowance(&_AToken.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_AToken *ATokenCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _AToken.Contract.Allowance(&_AToken.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address user) view returns(uint256)
func (_AToken *ATokenCaller) BalanceOf(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _AToken.contract.Call(opts, &out, "balanceOf", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address user) view returns(uint256)
func (_AToken *ATokenSession) BalanceOf(user common.Address) (*big.Int, error) {
	return _AToken.Contract.BalanceOf(&_AToken.CallOpts, user)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address user) view returns(uint256)
func (_AToken *ATokenCallerSession) BalanceOf(user common.Address) (*big.Int, error) {
	return _AToken.Contract.BalanceOf(&_AToken.CallOpts, user)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_AToken *ATokenCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _AToken.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_AToken *ATokenSession) Decimals() (uint8, error) {
	return _AToken.Contract.Decimals(&_AToken.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_AToken *ATokenCallerSession) Decimals() (uint8, error) {
	return _AToken.Contract.Decimals(&_AToken.CallOpts)
}

// GetScaledUserBalanceAndSupply is a free data retrieval call binding the contract method 0x0afbcdc9.
//
// Solidity: function getScaledUserBalanceAndSupply(address user) view returns(uint256, uint256)
func (_AToken *ATokenCaller) GetScaledUserBalanceAndSupply(opts *bind.CallOpts, user common.Address) (*big.Int, *big.Int, error) {
	var out []interface{}
	err := _AToken.contract.Call(opts, &out, "getScaledUserBalanceAndSupply", user)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// GetScaledUserBalanceAndSupply is a free data retrieval call binding the contract method 0x0afbcdc9.
//
// Solidity: function getScaledUserBalanceAndSupply(address user) view returns(uint256, uint256)
func (_AToken *ATokenSession) GetScaledUserBalanceAndSupply(user common.Address) (*big.Int, *big.Int, error) {
	return _AToken.Contract.GetScaledUserBalanceAndSupply(&_AToken.CallOpts, user)
}

// GetScaledUserBalanceAndSupply is a free data retrieval call binding the contract method 0x0afbcdc9.
//
// Solidity: function getScaledUserBalanceAndSupply(address user) view returns(uint256, uint256)
func (_AToken *ATokenCallerSession) GetScaledUserBalanceAndSupply(user common.Address) (*big.Int, *big.Int, error) {
	return _AToken.Contract.GetScaledUserBalanceAndSupply(&_AToken.CallOpts, user)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_AToken *ATokenCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _AToken.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_AToken *ATokenSession) Name() (string, error) {
	return _AToken.Contract.Name(&_AToken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_AToken *ATokenCallerSession) Name() (string, error) {
	return _AToken.Contract.Name(&_AToken.CallOpts)
}

// ScaledBalanceOf is a free data retrieval call binding the contract method 0x1da24f3e.
//
// Solidity: function scaledBalanceOf(address user) view returns(uint256)
func (_AToken *ATokenCaller) ScaledBalanceOf(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _AToken.contract.Call(opts, &out, "scaledBalanceOf", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ScaledBalanceOf is a free data retrieval call binding the contract method 0x1da24f3e.
//
// Solidity: function scaledBalanceOf(address user) view returns(uint256)
func (_AToken *ATokenSession) ScaledBalanceOf(user common.Address) (*big.Int, error) {
	return _AToken.Contract.ScaledBalanceOf(&_AToken.CallOpts, user)
}

// ScaledBalanceOf is a free data retrieval call binding the contract method 0x1da24f3e.
//
// Solidity: function scaledBalanceOf(address user) view returns(uint256)
func (_AToken *ATokenCallerSession) ScaledBalanceOf(user common.Address) (*big.Int, error) {
	return _AToken.Contract.ScaledBalanceOf(&_AToken.CallOpts, user)
}

// ScaledTotalSupply is a free data retrieval call binding the contract method 0xb1bf962d.
//
// Solidity: function scaledTotalSupply() view returns(uint256)
func (_AToken *ATokenCaller) ScaledTotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AToken.contract.Call(opts, &out, "scaledTotalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ScaledTotalSupply is a free data retrieval call binding the contract method 0xb1bf962d.
//
// Solidity: function scaledTotalSupply() view returns(uint256)
func (_AToken *ATokenSession) ScaledTotalSupply() (*big.Int, error) {
	return _AToken.Contract.ScaledTotalSupply(&_AToken.CallOpts)
}

// ScaledTotalSupply is a free data retrieval call binding the contract method 0xb1bf962d.
//
// Solidity: function scaledTotalSupply() view returns(uint256)
func (_AToken *ATokenCallerSession) ScaledTotalSupply() (*big.Int, error) {
	return _AToken.Contract.ScaledTotalSupply(&_AToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_AToken *ATokenCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _AToken.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_AToken *ATokenSession) Symbol() (string, error) {
	return _AToken.Contract.Symbol(&_AToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_AToken *ATokenCallerSession) Symbol() (string, error) {
	return _AToken.Contract.Symbol(&_AToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_AToken *ATokenCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AToken.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_AToken *ATokenSession) TotalSupply() (*big.Int, error) {
	return _AToken.Contract.TotalSupply(&_AToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_AToken *ATokenCallerSession) TotalSupply() (*big.Int, error) {
	return _AToken.Contract.TotalSupply(&_AToken.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_AToken *ATokenTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _AToken.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_AToken *ATokenSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _AToken.Contract.Approve(&_AToken.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_AToken *ATokenTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _AToken.Contract.Approve(&_AToken.TransactOpts, spender, amount)
}

// Burn is a paid mutator transaction binding the contract method 0xd7020d0a.
//
// Solidity: function burn(address user, address receiverOfUnderlying, uint256 amount, uint256 index) returns()
func (_AToken *ATokenTransactor) Burn(opts *bind.TransactOpts, user common.Address, receiverOfUnderlying common.Address, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _AToken.contract.Transact(opts, "burn", user, receiverOfUnderlying, amount, index)
}

// Burn is a paid mutator transaction binding the contract method 0xd7020d0a.
//
// Solidity: function burn(address user, address receiverOfUnderlying, uint256 amount, uint256 index) returns()
func (_AToken *ATokenSession) Burn(user common.Address, receiverOfUnderlying common.Address, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _AToken.Contract.Burn(&_AToken.TransactOpts, user, receiverOfUnderlying, amount, index)
}

// Burn is a paid mutator transaction binding the contract method 0xd7020d0a.
//
// Solidity: function burn(address user, address receiverOfUnderlying, uint256 amount, uint256 index) returns()
func (_AToken *ATokenTransactorSession) Burn(user common.Address, receiverOfUnderlying common.Address, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _AToken.Contract.Burn(&_AToken.TransactOpts, user, receiverOfUnderlying, amount, index)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_AToken *ATokenTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _AToken.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_AToken *ATokenSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _AToken.Contract.DecreaseAllowance(&_AToken.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_AToken *ATokenTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _AToken.Contract.DecreaseAllowance(&_AToken.TransactOpts, spender, subtractedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_AToken *ATokenTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _AToken.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_AToken *ATokenSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _AToken.Contract.IncreaseAllowance(&_AToken.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_AToken *ATokenTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _AToken.Contract.IncreaseAllowance(&_AToken.TransactOpts, spender, addedValue)
}

// Initialize is a paid mutator transaction binding the contract method 0x3118724e.
//
// Solidity: function initialize(uint8 underlyingAssetDecimals, string tokenName, string tokenSymbol) returns()
func (_AToken *ATokenTransactor) Initialize(opts *bind.TransactOpts, underlyingAssetDecimals uint8, tokenName string, tokenSymbol string) (*types.Transaction, error) {
	return _AToken.contract.Transact(opts, "initialize", underlyingAssetDecimals, tokenName, tokenSymbol)
}

// Initialize is a paid mutator transaction binding the contract method 0x3118724e.
//
// Solidity: function initialize(uint8 underlyingAssetDecimals, string tokenName, string tokenSymbol) returns()
func (_AToken *ATokenSession) Initialize(underlyingAssetDecimals uint8, tokenName string, tokenSymbol string) (*types.Transaction, error) {
	return _AToken.Contract.Initialize(&_AToken.TransactOpts, underlyingAssetDecimals, tokenName, tokenSymbol)
}

// Initialize is a paid mutator transaction binding the contract method 0x3118724e.
//
// Solidity: function initialize(uint8 underlyingAssetDecimals, string tokenName, string tokenSymbol) returns()
func (_AToken *ATokenTransactorSession) Initialize(underlyingAssetDecimals uint8, tokenName string, tokenSymbol string) (*types.Transaction, error) {
	return _AToken.Contract.Initialize(&_AToken.TransactOpts, underlyingAssetDecimals, tokenName, tokenSymbol)
}

// Mint is a paid mutator transaction binding the contract method 0x156e29f6.
//
// Solidity: function mint(address user, uint256 amount, uint256 index) returns(bool)
func (_AToken *ATokenTransactor) Mint(opts *bind.TransactOpts, user common.Address, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _AToken.contract.Transact(opts, "mint", user, amount, index)
}

// Mint is a paid mutator transaction binding the contract method 0x156e29f6.
//
// Solidity: function mint(address user, uint256 amount, uint256 index) returns(bool)
func (_AToken *ATokenSession) Mint(user common.Address, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _AToken.Contract.Mint(&_AToken.TransactOpts, user, amount, index)
}

// Mint is a paid mutator transaction binding the contract method 0x156e29f6.
//
// Solidity: function mint(address user, uint256 amount, uint256 index) returns(bool)
func (_AToken *ATokenTransactorSession) Mint(user common.Address, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _AToken.Contract.Mint(&_AToken.TransactOpts, user, amount, index)
}

// MintToTreasury is a paid mutator transaction binding the contract method 0x7df5bd3b.
//
// Solidity: function mintToTreasury(uint256 amount, uint256 index) returns()
func (_AToken *ATokenTransactor) MintToTreasury(opts *bind.TransactOpts, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _AToken.contract.Transact(opts, "mintToTreasury", amount, index)
}

// MintToTreasury is a paid mutator transaction binding the contract method 0x7df5bd3b.
//
// Solidity: function mintToTreasury(uint256 amount, uint256 index) returns()
func (_AToken *ATokenSession) MintToTreasury(amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _AToken.Contract.MintToTreasury(&_AToken.TransactOpts, amount, index)
}

// MintToTreasury is a paid mutator transaction binding the contract method 0x7df5bd3b.
//
// Solidity: function mintToTreasury(uint256 amount, uint256 index) returns()
func (_AToken *ATokenTransactorSession) MintToTreasury(amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _AToken.Contract.MintToTreasury(&_AToken.TransactOpts, amount, index)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_AToken *ATokenTransactor) Permit(opts *bind.TransactOpts, owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _AToken.contract.Transact(opts, "permit", owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_AToken *ATokenSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _AToken.Contract.Permit(&_AToken.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_AToken *ATokenTransactorSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _AToken.Contract.Permit(&_AToken.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_AToken *ATokenTransactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _AToken.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_AToken *ATokenSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _AToken.Contract.Transfer(&_AToken.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_AToken *ATokenTransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _AToken.Contract.Transfer(&_AToken.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_AToken *ATokenTransactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _AToken.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_AToken *ATokenSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _AToken.Contract.TransferFrom(&_AToken.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_AToken *ATokenTransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _AToken.Contract.TransferFrom(&_AToken.TransactOpts, sender, recipient, amount)
}

// TransferOnLiquidation is a paid mutator transaction binding the contract method 0xf866c319.
//
// Solidity: function transferOnLiquidation(address from, address to, uint256 value) returns()
func (_AToken *ATokenTransactor) TransferOnLiquidation(opts *bind.TransactOpts, from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _AToken.contract.Transact(opts, "transferOnLiquidation", from, to, value)
}

// TransferOnLiquidation is a paid mutator transaction binding the contract method 0xf866c319.
//
// Solidity: function transferOnLiquidation(address from, address to, uint256 value) returns()
func (_AToken *ATokenSession) TransferOnLiquidation(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _AToken.Contract.TransferOnLiquidation(&_AToken.TransactOpts, from, to, value)
}

// TransferOnLiquidation is a paid mutator transaction binding the contract method 0xf866c319.
//
// Solidity: function transferOnLiquidation(address from, address to, uint256 value) returns()
func (_AToken *ATokenTransactorSession) TransferOnLiquidation(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _AToken.Contract.TransferOnLiquidation(&_AToken.TransactOpts, from, to, value)
}

// TransferUnderlyingTo is a paid mutator transaction binding the contract method 0x4efecaa5.
//
// Solidity: function transferUnderlyingTo(address target, uint256 amount) returns(uint256)
func (_AToken *ATokenTransactor) TransferUnderlyingTo(opts *bind.TransactOpts, target common.Address, amount *big.Int) (*types.Transaction, error) {
	return _AToken.contract.Transact(opts, "transferUnderlyingTo", target, amount)
}

// TransferUnderlyingTo is a paid mutator transaction binding the contract method 0x4efecaa5.
//
// Solidity: function transferUnderlyingTo(address target, uint256 amount) returns(uint256)
func (_AToken *ATokenSession) TransferUnderlyingTo(target common.Address, amount *big.Int) (*types.Transaction, error) {
	return _AToken.Contract.TransferUnderlyingTo(&_AToken.TransactOpts, target, amount)
}

// TransferUnderlyingTo is a paid mutator transaction binding the contract method 0x4efecaa5.
//
// Solidity: function transferUnderlyingTo(address target, uint256 amount) returns(uint256)
func (_AToken *ATokenTransactorSession) TransferUnderlyingTo(target common.Address, amount *big.Int) (*types.Transaction, error) {
	return _AToken.Contract.TransferUnderlyingTo(&_AToken.TransactOpts, target, amount)
}

// ATokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the AToken contract.
type ATokenApprovalIterator struct {
	Event *ATokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ATokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ATokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ATokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ATokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ATokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ATokenApproval represents a Approval event raised by the AToken contract.
type ATokenApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_AToken *ATokenFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*ATokenApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _AToken.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &ATokenApprovalIterator{contract: _AToken.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_AToken *ATokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ATokenApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _AToken.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ATokenApproval)
				if err := _AToken.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_AToken *ATokenFilterer) ParseApproval(log types.Log) (*ATokenApproval, error) {
	event := new(ATokenApproval)
	if err := _AToken.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ATokenBalanceTransferIterator is returned from FilterBalanceTransfer and is used to iterate over the raw logs and unpacked data for BalanceTransfer events raised by the AToken contract.
type ATokenBalanceTransferIterator struct {
	Event *ATokenBalanceTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ATokenBalanceTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ATokenBalanceTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ATokenBalanceTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ATokenBalanceTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ATokenBalanceTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ATokenBalanceTransfer represents a BalanceTransfer event raised by the AToken contract.
type ATokenBalanceTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Index *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterBalanceTransfer is a free log retrieval operation binding the contract event 0x4beccb90f994c31aced7a23b5611020728a23d8ec5cddd1a3e9d97b96fda8666.
//
// Solidity: event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index)
func (_AToken *ATokenFilterer) FilterBalanceTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ATokenBalanceTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _AToken.contract.FilterLogs(opts, "BalanceTransfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ATokenBalanceTransferIterator{contract: _AToken.contract, event: "BalanceTransfer", logs: logs, sub: sub}, nil
}

// WatchBalanceTransfer is a free log subscription operation binding the contract event 0x4beccb90f994c31aced7a23b5611020728a23d8ec5cddd1a3e9d97b96fda8666.
//
// Solidity: event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index)
func (_AToken *ATokenFilterer) WatchBalanceTransfer(opts *bind.WatchOpts, sink chan<- *ATokenBalanceTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _AToken.contract.WatchLogs(opts, "BalanceTransfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ATokenBalanceTransfer)
				if err := _AToken.contract.UnpackLog(event, "BalanceTransfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBalanceTransfer is a log parse operation binding the contract event 0x4beccb90f994c31aced7a23b5611020728a23d8ec5cddd1a3e9d97b96fda8666.
//
// Solidity: event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index)
func (_AToken *ATokenFilterer) ParseBalanceTransfer(log types.Log) (*ATokenBalanceTransfer, error) {
	event := new(ATokenBalanceTransfer)
	if err := _AToken.contract.UnpackLog(event, "BalanceTransfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ATokenBurnIterator is returned from FilterBurn and is used to iterate over the raw logs and unpacked data for Burn events raised by the AToken contract.
type ATokenBurnIterator struct {
	Event *ATokenBurn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ATokenBurnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ATokenBurn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ATokenBurn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ATokenBurnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ATokenBurnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ATokenBurn represents a Burn event raised by the AToken contract.
type ATokenBurn struct {
	From   common.Address
	Target common.Address
	Value  *big.Int
	Index  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBurn is a free log retrieval operation binding the contract event 0x5d624aa9c148153ab3446c1b154f660ee7701e549fe9b62dab7171b1c80e6fa2.
//
// Solidity: event Burn(address indexed from, address indexed target, uint256 value, uint256 index)
func (_AToken *ATokenFilterer) FilterBurn(opts *bind.FilterOpts, from []common.Address, target []common.Address) (*ATokenBurnIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}

	logs, sub, err := _AToken.contract.FilterLogs(opts, "Burn", fromRule, targetRule)
	if err != nil {
		return nil, err
	}
	return &ATokenBurnIterator{contract: _AToken.contract, event: "Burn", logs: logs, sub: sub}, nil
}

// WatchBurn is a free log subscription operation binding the contract event 0x5d624aa9c148153ab3446c1b154f660ee7701e549fe9b62dab7171b1c80e6fa2.
//
// Solidity: event Burn(address indexed from, address indexed target, uint256 value, uint256 index)
func (_AToken *ATokenFilterer) WatchBurn(opts *bind.WatchOpts, sink chan<- *ATokenBurn, from []common.Address, target []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}

	logs, sub, err := _AToken.contract.WatchLogs(opts, "Burn", fromRule, targetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ATokenBurn)
				if err := _AToken.contract.UnpackLog(event, "Burn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurn is a log parse operation binding the contract event 0x5d624aa9c148153ab3446c1b154f660ee7701e549fe9b62dab7171b1c80e6fa2.
//
// Solidity: event Burn(address indexed from, address indexed target, uint256 value, uint256 index)
func (_AToken *ATokenFilterer) ParseBurn(log types.Log) (*ATokenBurn, error) {
	event := new(ATokenBurn)
	if err := _AToken.contract.UnpackLog(event, "Burn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ATokenMintIterator is returned from FilterMint and is used to iterate over the raw logs and unpacked data for Mint events raised by the AToken contract.
type ATokenMintIterator struct {
	Event *ATokenMint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ATokenMintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ATokenMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ATokenMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ATokenMintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ATokenMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ATokenMint represents a Mint event raised by the AToken contract.
type ATokenMint struct {
	From  common.Address
	Value *big.Int
	Index *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterMint is a free log retrieval operation binding the contract event 0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f.
//
// Solidity: event Mint(address indexed from, uint256 value, uint256 index)
func (_AToken *ATokenFilterer) FilterMint(opts *bind.FilterOpts, from []common.Address) (*ATokenMintIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _AToken.contract.FilterLogs(opts, "Mint", fromRule)
	if err != nil {
		return nil, err
	}
	return &ATokenMintIterator{contract: _AToken.contract, event: "Mint", logs: logs, sub: sub}, nil
}

// WatchMint is a free log subscription operation binding the contract event 0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f.
//
// Solidity: event Mint(address indexed from, uint256 value, uint256 index)
func (_AToken *ATokenFilterer) WatchMint(opts *bind.WatchOpts, sink chan<- *ATokenMint, from []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _AToken.contract.WatchLogs(opts, "Mint", fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ATokenMint)
				if err := _AToken.contract.UnpackLog(event, "Mint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMint is a log parse operation binding the contract event 0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f.
//
// Solidity: event Mint(address indexed from, uint256 value, uint256 index)
func (_AToken *ATokenFilterer) ParseMint(log types.Log) (*ATokenMint, error) {
	event := new(ATokenMint)
	if err := _AToken.contract.UnpackLog(event, "Mint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ATokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the AToken contract.
type ATokenTransferIterator struct {
	Event *ATokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ATokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ATokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ATokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ATokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ATokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ATokenTransfer represents a Transfer event raised by the AToken contract.
type ATokenTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_AToken *ATokenFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ATokenTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _AToken.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ATokenTransferIterator{contract: _AToken.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_AToken *ATokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ATokenTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _AToken.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ATokenTransfer)
				if err := _AToken.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_AToken *ATokenFilterer) ParseTransfer(log types.Log) (*ATokenTransfer, error) {
	event := new(ATokenTransfer)
	if err := _AToken.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ATokensAndRatesHelperABI is the input ABI used to generate the binding from.
const ATokensAndRatesHelperABI = "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressesProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolConfigurator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"aToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"deployedContracts\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"baseLTVs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"liquidationThresholds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"liquidationBonuses\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"reserveFactors\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"stableBorrowingEnabled\",\"type\":\"bool[]\"}],\"name\":\"configureReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"},{\"internalType\":\"uint256[6][]\",\"name\":\"rates\",\"type\":\"uint256[6][]\"},{\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"incentivesController\",\"type\":\"address\"}],\"name\":\"initDeployment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"stables\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"variables\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"aTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"strategies\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"reserveDecimals\",\"type\":\"uint8[]\"}],\"name\":\"initReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ATokensAndRatesHelperBin is the compiled bytecode used for deploying new contracts.
var ATokensAndRatesHelperBin = ""

// DeployATokensAndRatesHelper deploys a new Ethereum contract, binding an instance of ATokensAndRatesHelper to it.
func DeployATokensAndRatesHelper(auth *bind.TransactOpts, backend bind.ContractBackend, _pool common.Address, _addressesProvider common.Address, _poolConfigurator common.Address) (common.Address, *types.Transaction, *ATokensAndRatesHelper, error) {
	parsed, err := abi.JSON(strings.NewReader(ATokensAndRatesHelperABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ATokensAndRatesHelperBin), backend, _pool, _addressesProvider, _poolConfigurator)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ATokensAndRatesHelper{ATokensAndRatesHelperCaller: ATokensAndRatesHelperCaller{contract: contract}, ATokensAndRatesHelperTransactor: ATokensAndRatesHelperTransactor{contract: contract}, ATokensAndRatesHelperFilterer: ATokensAndRatesHelperFilterer{contract: contract}}, nil
}

// ATokensAndRatesHelper is an auto generated Go binding around an Ethereum contract.
type ATokensAndRatesHelper struct {
	ATokensAndRatesHelperCaller     // Read-only binding to the contract
	ATokensAndRatesHelperTransactor // Write-only binding to the contract
	ATokensAndRatesHelperFilterer   // Log filterer for contract events
}

// ATokensAndRatesHelperCaller is an auto generated read-only Go binding around an Ethereum contract.
type ATokensAndRatesHelperCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ATokensAndRatesHelperTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ATokensAndRatesHelperTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ATokensAndRatesHelperFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ATokensAndRatesHelperFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ATokensAndRatesHelperSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ATokensAndRatesHelperSession struct {
	Contract     *ATokensAndRatesHelper // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// ATokensAndRatesHelperCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ATokensAndRatesHelperCallerSession struct {
	Contract *ATokensAndRatesHelperCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// ATokensAndRatesHelperTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ATokensAndRatesHelperTransactorSession struct {
	Contract     *ATokensAndRatesHelperTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// ATokensAndRatesHelperRaw is an auto generated low-level Go binding around an Ethereum contract.
type ATokensAndRatesHelperRaw struct {
	Contract *ATokensAndRatesHelper // Generic contract binding to access the raw methods on
}

// ATokensAndRatesHelperCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ATokensAndRatesHelperCallerRaw struct {
	Contract *ATokensAndRatesHelperCaller // Generic read-only contract binding to access the raw methods on
}

// ATokensAndRatesHelperTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ATokensAndRatesHelperTransactorRaw struct {
	Contract *ATokensAndRatesHelperTransactor // Generic write-only contract binding to access the raw methods on
}

// NewATokensAndRatesHelper creates a new instance of ATokensAndRatesHelper, bound to a specific deployed contract.
func NewATokensAndRatesHelper(address common.Address, backend bind.ContractBackend) (*ATokensAndRatesHelper, error) {
	contract, err := bindATokensAndRatesHelper(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ATokensAndRatesHelper{ATokensAndRatesHelperCaller: ATokensAndRatesHelperCaller{contract: contract}, ATokensAndRatesHelperTransactor: ATokensAndRatesHelperTransactor{contract: contract}, ATokensAndRatesHelperFilterer: ATokensAndRatesHelperFilterer{contract: contract}}, nil
}

// NewATokensAndRatesHelperCaller creates a new read-only instance of ATokensAndRatesHelper, bound to a specific deployed contract.
func NewATokensAndRatesHelperCaller(address common.Address, caller bind.ContractCaller) (*ATokensAndRatesHelperCaller, error) {
	contract, err := bindATokensAndRatesHelper(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ATokensAndRatesHelperCaller{contract: contract}, nil
}

// NewATokensAndRatesHelperTransactor creates a new write-only instance of ATokensAndRatesHelper, bound to a specific deployed contract.
func NewATokensAndRatesHelperTransactor(address common.Address, transactor bind.ContractTransactor) (*ATokensAndRatesHelperTransactor, error) {
	contract, err := bindATokensAndRatesHelper(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ATokensAndRatesHelperTransactor{contract: contract}, nil
}

// NewATokensAndRatesHelperFilterer creates a new log filterer instance of ATokensAndRatesHelper, bound to a specific deployed contract.
func NewATokensAndRatesHelperFilterer(address common.Address, filterer bind.ContractFilterer) (*ATokensAndRatesHelperFilterer, error) {
	contract, err := bindATokensAndRatesHelper(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ATokensAndRatesHelperFilterer{contract: contract}, nil
}

// bindATokensAndRatesHelper binds a generic wrapper to an already deployed contract.
func bindATokensAndRatesHelper(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ATokensAndRatesHelperABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ATokensAndRatesHelper *ATokensAndRatesHelperRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ATokensAndRatesHelper.Contract.ATokensAndRatesHelperCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ATokensAndRatesHelper *ATokensAndRatesHelperRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ATokensAndRatesHelper.Contract.ATokensAndRatesHelperTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ATokensAndRatesHelper *ATokensAndRatesHelperRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ATokensAndRatesHelper.Contract.ATokensAndRatesHelperTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ATokensAndRatesHelper *ATokensAndRatesHelperCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ATokensAndRatesHelper.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ATokensAndRatesHelper *ATokensAndRatesHelperTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ATokensAndRatesHelper.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ATokensAndRatesHelper *ATokensAndRatesHelperTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ATokensAndRatesHelper.Contract.contract.Transact(opts, method, params...)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ATokensAndRatesHelper *ATokensAndRatesHelperCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ATokensAndRatesHelper.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ATokensAndRatesHelper *ATokensAndRatesHelperSession) Owner() (common.Address, error) {
	return _ATokensAndRatesHelper.Contract.Owner(&_ATokensAndRatesHelper.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ATokensAndRatesHelper *ATokensAndRatesHelperCallerSession) Owner() (common.Address, error) {
	return _ATokensAndRatesHelper.Contract.Owner(&_ATokensAndRatesHelper.CallOpts)
}

// ConfigureReserves is a paid mutator transaction binding the contract method 0x7f11f88d.
//
// Solidity: function configureReserves(address[] assets, uint256[] baseLTVs, uint256[] liquidationThresholds, uint256[] liquidationBonuses, uint256[] reserveFactors, bool[] stableBorrowingEnabled) returns()
func (_ATokensAndRatesHelper *ATokensAndRatesHelperTransactor) ConfigureReserves(opts *bind.TransactOpts, assets []common.Address, baseLTVs []*big.Int, liquidationThresholds []*big.Int, liquidationBonuses []*big.Int, reserveFactors []*big.Int, stableBorrowingEnabled []bool) (*types.Transaction, error) {
	return _ATokensAndRatesHelper.contract.Transact(opts, "configureReserves", assets, baseLTVs, liquidationThresholds, liquidationBonuses, reserveFactors, stableBorrowingEnabled)
}

// ConfigureReserves is a paid mutator transaction binding the contract method 0x7f11f88d.
//
// Solidity: function configureReserves(address[] assets, uint256[] baseLTVs, uint256[] liquidationThresholds, uint256[] liquidationBonuses, uint256[] reserveFactors, bool[] stableBorrowingEnabled) returns()
func (_ATokensAndRatesHelper *ATokensAndRatesHelperSession) ConfigureReserves(assets []common.Address, baseLTVs []*big.Int, liquidationThresholds []*big.Int, liquidationBonuses []*big.Int, reserveFactors []*big.Int, stableBorrowingEnabled []bool) (*types.Transaction, error) {
	return _ATokensAndRatesHelper.Contract.ConfigureReserves(&_ATokensAndRatesHelper.TransactOpts, assets, baseLTVs, liquidationThresholds, liquidationBonuses, reserveFactors, stableBorrowingEnabled)
}

// ConfigureReserves is a paid mutator transaction binding the contract method 0x7f11f88d.
//
// Solidity: function configureReserves(address[] assets, uint256[] baseLTVs, uint256[] liquidationThresholds, uint256[] liquidationBonuses, uint256[] reserveFactors, bool[] stableBorrowingEnabled) returns()
func (_ATokensAndRatesHelper *ATokensAndRatesHelperTransactorSession) ConfigureReserves(assets []common.Address, baseLTVs []*big.Int, liquidationThresholds []*big.Int, liquidationBonuses []*big.Int, reserveFactors []*big.Int, stableBorrowingEnabled []bool) (*types.Transaction, error) {
	return _ATokensAndRatesHelper.Contract.ConfigureReserves(&_ATokensAndRatesHelper.TransactOpts, assets, baseLTVs, liquidationThresholds, liquidationBonuses, reserveFactors, stableBorrowingEnabled)
}

// InitDeployment is a paid mutator transaction binding the contract method 0x8cd5cc60.
//
// Solidity: function initDeployment(address[] assets, string[] symbols, uint256[6][] rates, address treasuryAddress, address incentivesController) returns()
func (_ATokensAndRatesHelper *ATokensAndRatesHelperTransactor) InitDeployment(opts *bind.TransactOpts, assets []common.Address, symbols []string, rates [][6]*big.Int, treasuryAddress common.Address, incentivesController common.Address) (*types.Transaction, error) {
	return _ATokensAndRatesHelper.contract.Transact(opts, "initDeployment", assets, symbols, rates, treasuryAddress, incentivesController)
}

// InitDeployment is a paid mutator transaction binding the contract method 0x8cd5cc60.
//
// Solidity: function initDeployment(address[] assets, string[] symbols, uint256[6][] rates, address treasuryAddress, address incentivesController) returns()
func (_ATokensAndRatesHelper *ATokensAndRatesHelperSession) InitDeployment(assets []common.Address, symbols []string, rates [][6]*big.Int, treasuryAddress common.Address, incentivesController common.Address) (*types.Transaction, error) {
	return _ATokensAndRatesHelper.Contract.InitDeployment(&_ATokensAndRatesHelper.TransactOpts, assets, symbols, rates, treasuryAddress, incentivesController)
}

// InitDeployment is a paid mutator transaction binding the contract method 0x8cd5cc60.
//
// Solidity: function initDeployment(address[] assets, string[] symbols, uint256[6][] rates, address treasuryAddress, address incentivesController) returns()
func (_ATokensAndRatesHelper *ATokensAndRatesHelperTransactorSession) InitDeployment(assets []common.Address, symbols []string, rates [][6]*big.Int, treasuryAddress common.Address, incentivesController common.Address) (*types.Transaction, error) {
	return _ATokensAndRatesHelper.Contract.InitDeployment(&_ATokensAndRatesHelper.TransactOpts, assets, symbols, rates, treasuryAddress, incentivesController)
}

// InitReserve is a paid mutator transaction binding the contract method 0xf62be749.
//
// Solidity: function initReserve(address[] stables, address[] variables, address[] aTokens, address[] strategies, uint8[] reserveDecimals) returns()
func (_ATokensAndRatesHelper *ATokensAndRatesHelperTransactor) InitReserve(opts *bind.TransactOpts, stables []common.Address, variables []common.Address, aTokens []common.Address, strategies []common.Address, reserveDecimals []uint8) (*types.Transaction, error) {
	return _ATokensAndRatesHelper.contract.Transact(opts, "initReserve", stables, variables, aTokens, strategies, reserveDecimals)
}

// InitReserve is a paid mutator transaction binding the contract method 0xf62be749.
//
// Solidity: function initReserve(address[] stables, address[] variables, address[] aTokens, address[] strategies, uint8[] reserveDecimals) returns()
func (_ATokensAndRatesHelper *ATokensAndRatesHelperSession) InitReserve(stables []common.Address, variables []common.Address, aTokens []common.Address, strategies []common.Address, reserveDecimals []uint8) (*types.Transaction, error) {
	return _ATokensAndRatesHelper.Contract.InitReserve(&_ATokensAndRatesHelper.TransactOpts, stables, variables, aTokens, strategies, reserveDecimals)
}

// InitReserve is a paid mutator transaction binding the contract method 0xf62be749.
//
// Solidity: function initReserve(address[] stables, address[] variables, address[] aTokens, address[] strategies, uint8[] reserveDecimals) returns()
func (_ATokensAndRatesHelper *ATokensAndRatesHelperTransactorSession) InitReserve(stables []common.Address, variables []common.Address, aTokens []common.Address, strategies []common.Address, reserveDecimals []uint8) (*types.Transaction, error) {
	return _ATokensAndRatesHelper.Contract.InitReserve(&_ATokensAndRatesHelper.TransactOpts, stables, variables, aTokens, strategies, reserveDecimals)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ATokensAndRatesHelper *ATokensAndRatesHelperTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ATokensAndRatesHelper.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ATokensAndRatesHelper *ATokensAndRatesHelperSession) RenounceOwnership() (*types.Transaction, error) {
	return _ATokensAndRatesHelper.Contract.RenounceOwnership(&_ATokensAndRatesHelper.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ATokensAndRatesHelper *ATokensAndRatesHelperTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ATokensAndRatesHelper.Contract.RenounceOwnership(&_ATokensAndRatesHelper.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ATokensAndRatesHelper *ATokensAndRatesHelperTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ATokensAndRatesHelper.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ATokensAndRatesHelper *ATokensAndRatesHelperSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ATokensAndRatesHelper.Contract.TransferOwnership(&_ATokensAndRatesHelper.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ATokensAndRatesHelper *ATokensAndRatesHelperTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ATokensAndRatesHelper.Contract.TransferOwnership(&_ATokensAndRatesHelper.TransactOpts, newOwner)
}

// ATokensAndRatesHelperOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ATokensAndRatesHelper contract.
type ATokensAndRatesHelperOwnershipTransferredIterator struct {
	Event *ATokensAndRatesHelperOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ATokensAndRatesHelperOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ATokensAndRatesHelperOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ATokensAndRatesHelperOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ATokensAndRatesHelperOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ATokensAndRatesHelperOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ATokensAndRatesHelperOwnershipTransferred represents a OwnershipTransferred event raised by the ATokensAndRatesHelper contract.
type ATokensAndRatesHelperOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ATokensAndRatesHelper *ATokensAndRatesHelperFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ATokensAndRatesHelperOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ATokensAndRatesHelper.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ATokensAndRatesHelperOwnershipTransferredIterator{contract: _ATokensAndRatesHelper.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ATokensAndRatesHelper *ATokensAndRatesHelperFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ATokensAndRatesHelperOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ATokensAndRatesHelper.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ATokensAndRatesHelperOwnershipTransferred)
				if err := _ATokensAndRatesHelper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ATokensAndRatesHelper *ATokensAndRatesHelperFilterer) ParseOwnershipTransferred(log types.Log) (*ATokensAndRatesHelperOwnershipTransferred, error) {
	event := new(ATokensAndRatesHelperOwnershipTransferred)
	if err := _ATokensAndRatesHelper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ATokensAndRatesHelperDeployedContractsIterator is returned from FilterDeployedContracts and is used to iterate over the raw logs and unpacked data for DeployedContracts events raised by the ATokensAndRatesHelper contract.
type ATokensAndRatesHelperDeployedContractsIterator struct {
	Event *ATokensAndRatesHelperDeployedContracts // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ATokensAndRatesHelperDeployedContractsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ATokensAndRatesHelperDeployedContracts)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ATokensAndRatesHelperDeployedContracts)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ATokensAndRatesHelperDeployedContractsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ATokensAndRatesHelperDeployedContractsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ATokensAndRatesHelperDeployedContracts represents a DeployedContracts event raised by the ATokensAndRatesHelper contract.
type ATokensAndRatesHelperDeployedContracts struct {
	AToken   common.Address
	Strategy common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterDeployedContracts is a free log retrieval operation binding the contract event 0x1c1768aab1796270c7034dc781c2951065e6afb7a946269746521002443b8ea4.
//
// Solidity: event deployedContracts(address aToken, address strategy)
func (_ATokensAndRatesHelper *ATokensAndRatesHelperFilterer) FilterDeployedContracts(opts *bind.FilterOpts) (*ATokensAndRatesHelperDeployedContractsIterator, error) {

	logs, sub, err := _ATokensAndRatesHelper.contract.FilterLogs(opts, "deployedContracts")
	if err != nil {
		return nil, err
	}
	return &ATokensAndRatesHelperDeployedContractsIterator{contract: _ATokensAndRatesHelper.contract, event: "deployedContracts", logs: logs, sub: sub}, nil
}

// WatchDeployedContracts is a free log subscription operation binding the contract event 0x1c1768aab1796270c7034dc781c2951065e6afb7a946269746521002443b8ea4.
//
// Solidity: event deployedContracts(address aToken, address strategy)
func (_ATokensAndRatesHelper *ATokensAndRatesHelperFilterer) WatchDeployedContracts(opts *bind.WatchOpts, sink chan<- *ATokensAndRatesHelperDeployedContracts) (event.Subscription, error) {

	logs, sub, err := _ATokensAndRatesHelper.contract.WatchLogs(opts, "deployedContracts")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ATokensAndRatesHelperDeployedContracts)
				if err := _ATokensAndRatesHelper.contract.UnpackLog(event, "deployedContracts", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeployedContracts is a log parse operation binding the contract event 0x1c1768aab1796270c7034dc781c2951065e6afb7a946269746521002443b8ea4.
//
// Solidity: event deployedContracts(address aToken, address strategy)
func (_ATokensAndRatesHelper *ATokensAndRatesHelperFilterer) ParseDeployedContracts(log types.Log) (*ATokensAndRatesHelperDeployedContracts, error) {
	event := new(ATokensAndRatesHelperDeployedContracts)
	if err := _ATokensAndRatesHelper.contract.UnpackLog(event, "deployedContracts", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AaveOracleABI is the input ABI used to generate the binding from.
const AaveOracleABI = "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"sources\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"fallbackOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"AssetSourceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fallbackOracle\",\"type\":\"address\"}],\"name\":\"FallbackOracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"}],\"name\":\"WethSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getAssetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"}],\"name\":\"getAssetsPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFallbackOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getSourceOfAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"sources\",\"type\":\"address[]\"}],\"name\":\"setAssetSources\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fallbackOracle\",\"type\":\"address\"}],\"name\":\"setFallbackOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// AaveOracleBin is the compiled bytecode used for deploying new contracts.
var AaveOracleBin = "0x60a06040523480156200001157600080fd5b5060405162000ead38038062000ead833981810160405260808110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82518660208202830111640100000000821117156200008c57600080fd5b82525081516020918201928201910280838360005b83811015620000bb578181015183820152602001620000a1565b5050505090500160405260200180516040519392919084640100000000821115620000e557600080fd5b908301906020820185811115620000fb57600080fd5b82518660208202830111640100000000821117156200011957600080fd5b82525081516020918201928201910280838360005b83811015620001485781810151838201526020016200012e565b505050509190910160409081526020830151920151919350909150600090506200017162000222565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350620001c68262000226565b620001d2848462000270565b6001600160601b0319606082901b166080526040516001600160a01b038216907f13a533084dcbb1cfe0dbea708ea977223c27c44d94f2fa3867a167c9cd340bf990600090a250505050620003bc565b3390565b600280546001600160a01b0319166001600160a01b0383169081179091556040517fce7a780d33665b1ea097af5f155e3821b809ecbaa839d3b33aa83ba28168cefb90600090a250565b8051825114620002c7576040805162461bcd60e51b815260206004820152601a60248201527f494e434f4e53495354454e545f504152414d535f4c454e475448000000000000604482015290519081900360640190fd5b60005b8251811015620003b757818181518110620002e157fe5b602002602001015160016000858481518110620002fa57fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508181815181106200035357fe5b60200260200101516001600160a01b03168382815181106200037157fe5b60200260200101516001600160a01b03167f22c5b7b2d8561d39f7f210b6b326a1aa69f15311163082308ac4877db6339dc160405160405180910390a3600101620002ca565b505050565b60805160601c610ace620003df600039806105bc52806106005250610ace6000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80639d23d9f2116100665780639d23d9f214610125578063abfd5310146101e5578063ad5c4648146102a7578063b3596f07146102af578063f2fde38b146102e75761009e565b8063170aee73146100a35780636210308c146100cb578063715018a6146100ef5780638da5cb5b146100f757806392bf2be0146100ff575b600080fd5b6100c9600480360360208110156100b957600080fd5b50356001600160a01b031661030d565b005b6100d3610371565b604080516001600160a01b039092168252519081900360200190f35b6100c9610380565b6100d3610422565b6100d36004803603602081101561011557600080fd5b50356001600160a01b0316610431565b6101956004803603602081101561013b57600080fd5b81019060208101813564010000000081111561015657600080fd5b82018360208201111561016857600080fd5b8035906020019184602083028401116401000000008311171561018a57600080fd5b509092509050610452565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156101d15781810151838201526020016101b9565b505050509050019250505060405180910390f35b6100c9600480360360408110156101fb57600080fd5b81019060208101813564010000000081111561021657600080fd5b82018360208201111561022857600080fd5b8035906020019184602083028401116401000000008311171561024a57600080fd5b91939092909160208101903564010000000081111561026857600080fd5b82018360208201111561027a57600080fd5b8035906020019184602083028401116401000000008311171561029c57600080fd5b5090925090506104ef565b6100d36105ba565b6102d5600480360360208110156102c557600080fd5b50356001600160a01b03166105de565b60408051918252519081900360200190f35b6100c9600480360360208110156102fd57600080fd5b50356001600160a01b03166107c7565b6103156108bf565b6000546001600160a01b03908116911614610365576040805162461bcd60e51b81526020600482018190526024820152600080516020610a79833981519152604482015290519081900360640190fd5b61036e816108c3565b50565b6002546001600160a01b031690565b6103886108bf565b6000546001600160a01b039081169116146103d8576040805162461bcd60e51b81526020600482018190526024820152600080516020610a79833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b6001600160a01b03808216600090815260016020526040902054165b919050565b6060808267ffffffffffffffff8111801561046c57600080fd5b50604051908082528060200260200182016040528015610496578160200160208202803683370190505b50905060005b838110156104e7576104c88585838181106104b357fe5b905060200201356001600160a01b03166105de565b8282815181106104d457fe5b602090810291909101015260010161049c565b509392505050565b6104f76108bf565b6000546001600160a01b03908116911614610547576040805162461bcd60e51b81526020600482018190526024820152600080516020610a79833981519152604482015290519081900360640190fd5b6105b48484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080880282810182019093528782529093508792508691829185019084908082843760009201919091525061090d92505050565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b038082166000818152600160205260408120549092908116917f0000000000000000000000000000000000000000000000000000000000000000909116141561063957670de0b6b3a764000091505061044d565b6001600160a01b0381166106c9576002546040805163b3596f0760e01b81526001600160a01b0386811660048301529151919092169163b3596f07916024808301926020929190829003018186803b15801561069457600080fd5b505afa1580156106a8573d6000803e3d6000fd5b505050506040513d60208110156106be57600080fd5b5051915061044d9050565b6000816001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561070457600080fd5b505afa158015610718573d6000803e3d6000fd5b505050506040513d602081101561072e57600080fd5b50519050600081131561074457915061044d9050565b6002546040805163b3596f0760e01b81526001600160a01b0387811660048301529151919092169163b3596f07916024808301926020929190829003018186803b15801561079157600080fd5b505afa1580156107a5573d6000803e3d6000fd5b505050506040513d60208110156107bb57600080fd5b5051925061044d915050565b6107cf6108bf565b6000546001600160a01b0390811691161461081f576040805162461bcd60e51b81526020600482018190526024820152600080516020610a79833981519152604482015290519081900360640190fd5b6001600160a01b0381166108645760405162461bcd60e51b8152600401808060200182810382526026815260200180610a536026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b600280546001600160a01b0319166001600160a01b0383169081179091556040517fce7a780d33665b1ea097af5f155e3821b809ecbaa839d3b33aa83ba28168cefb90600090a250565b8051825114610963576040805162461bcd60e51b815260206004820152601a60248201527f494e434f4e53495354454e545f504152414d535f4c454e475448000000000000604482015290519081900360640190fd5b60005b8251811015610a4d5781818151811061097b57fe5b60200260200101516001600085848151811061099357fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508181815181106109eb57fe5b60200260200101516001600160a01b0316838281518110610a0857fe5b60200260200101516001600160a01b03167f22c5b7b2d8561d39f7f210b6b326a1aa69f15311163082308ac4877db6339dc160405160405180910390a3600101610966565b50505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220f2d473c7c44ff4aeb5f5df00a1fbf0146d84a2110fba9e25484cc09e378238b564736f6c634300060c0033"

// DeployAaveOracle deploys a new Ethereum contract, binding an instance of AaveOracle to it.
func DeployAaveOracle(auth *bind.TransactOpts, backend bind.ContractBackend, assets []common.Address, sources []common.Address, fallbackOracle common.Address, weth common.Address) (common.Address, *types.Transaction, *AaveOracle, error) {
	parsed, err := abi.JSON(strings.NewReader(AaveOracleABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(AaveOracleBin), backend, assets, sources, fallbackOracle, weth)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AaveOracle{AaveOracleCaller: AaveOracleCaller{contract: contract}, AaveOracleTransactor: AaveOracleTransactor{contract: contract}, AaveOracleFilterer: AaveOracleFilterer{contract: contract}}, nil
}

// AaveOracle is an auto generated Go binding around an Ethereum contract.
type AaveOracle struct {
	AaveOracleCaller     // Read-only binding to the contract
	AaveOracleTransactor // Write-only binding to the contract
	AaveOracleFilterer   // Log filterer for contract events
}

// AaveOracleCaller is an auto generated read-only Go binding around an Ethereum contract.
type AaveOracleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AaveOracleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AaveOracleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AaveOracleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AaveOracleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AaveOracleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AaveOracleSession struct {
	Contract     *AaveOracle       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AaveOracleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AaveOracleCallerSession struct {
	Contract *AaveOracleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// AaveOracleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AaveOracleTransactorSession struct {
	Contract     *AaveOracleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// AaveOracleRaw is an auto generated low-level Go binding around an Ethereum contract.
type AaveOracleRaw struct {
	Contract *AaveOracle // Generic contract binding to access the raw methods on
}

// AaveOracleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AaveOracleCallerRaw struct {
	Contract *AaveOracleCaller // Generic read-only contract binding to access the raw methods on
}

// AaveOracleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AaveOracleTransactorRaw struct {
	Contract *AaveOracleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAaveOracle creates a new instance of AaveOracle, bound to a specific deployed contract.
func NewAaveOracle(address common.Address, backend bind.ContractBackend) (*AaveOracle, error) {
	contract, err := bindAaveOracle(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AaveOracle{AaveOracleCaller: AaveOracleCaller{contract: contract}, AaveOracleTransactor: AaveOracleTransactor{contract: contract}, AaveOracleFilterer: AaveOracleFilterer{contract: contract}}, nil
}

// NewAaveOracleCaller creates a new read-only instance of AaveOracle, bound to a specific deployed contract.
func NewAaveOracleCaller(address common.Address, caller bind.ContractCaller) (*AaveOracleCaller, error) {
	contract, err := bindAaveOracle(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AaveOracleCaller{contract: contract}, nil
}

// NewAaveOracleTransactor creates a new write-only instance of AaveOracle, bound to a specific deployed contract.
func NewAaveOracleTransactor(address common.Address, transactor bind.ContractTransactor) (*AaveOracleTransactor, error) {
	contract, err := bindAaveOracle(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AaveOracleTransactor{contract: contract}, nil
}

// NewAaveOracleFilterer creates a new log filterer instance of AaveOracle, bound to a specific deployed contract.
func NewAaveOracleFilterer(address common.Address, filterer bind.ContractFilterer) (*AaveOracleFilterer, error) {
	contract, err := bindAaveOracle(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AaveOracleFilterer{contract: contract}, nil
}

// bindAaveOracle binds a generic wrapper to an already deployed contract.
func bindAaveOracle(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AaveOracleABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AaveOracle *AaveOracleRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AaveOracle.Contract.AaveOracleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AaveOracle *AaveOracleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AaveOracle.Contract.AaveOracleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AaveOracle *AaveOracleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AaveOracle.Contract.AaveOracleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AaveOracle *AaveOracleCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AaveOracle.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AaveOracle *AaveOracleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AaveOracle.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AaveOracle *AaveOracleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AaveOracle.Contract.contract.Transact(opts, method, params...)
}

// WETH is a free data retrieval call binding the contract method 0xad5c4648.
//
// Solidity: function WETH() view returns(address)
func (_AaveOracle *AaveOracleCaller) WETH(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AaveOracle.contract.Call(opts, &out, "WETH")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// WETH is a free data retrieval call binding the contract method 0xad5c4648.
//
// Solidity: function WETH() view returns(address)
func (_AaveOracle *AaveOracleSession) WETH() (common.Address, error) {
	return _AaveOracle.Contract.WETH(&_AaveOracle.CallOpts)
}

// WETH is a free data retrieval call binding the contract method 0xad5c4648.
//
// Solidity: function WETH() view returns(address)
func (_AaveOracle *AaveOracleCallerSession) WETH() (common.Address, error) {
	return _AaveOracle.Contract.WETH(&_AaveOracle.CallOpts)
}

// GetAssetPrice is a free data retrieval call binding the contract method 0xb3596f07.
//
// Solidity: function getAssetPrice(address asset) view returns(uint256)
func (_AaveOracle *AaveOracleCaller) GetAssetPrice(opts *bind.CallOpts, asset common.Address) (*big.Int, error) {
	var out []interface{}
	err := _AaveOracle.contract.Call(opts, &out, "getAssetPrice", asset)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAssetPrice is a free data retrieval call binding the contract method 0xb3596f07.
//
// Solidity: function getAssetPrice(address asset) view returns(uint256)
func (_AaveOracle *AaveOracleSession) GetAssetPrice(asset common.Address) (*big.Int, error) {
	return _AaveOracle.Contract.GetAssetPrice(&_AaveOracle.CallOpts, asset)
}

// GetAssetPrice is a free data retrieval call binding the contract method 0xb3596f07.
//
// Solidity: function getAssetPrice(address asset) view returns(uint256)
func (_AaveOracle *AaveOracleCallerSession) GetAssetPrice(asset common.Address) (*big.Int, error) {
	return _AaveOracle.Contract.GetAssetPrice(&_AaveOracle.CallOpts, asset)
}

// GetAssetsPrices is a free data retrieval call binding the contract method 0x9d23d9f2.
//
// Solidity: function getAssetsPrices(address[] assets) view returns(uint256[])
func (_AaveOracle *AaveOracleCaller) GetAssetsPrices(opts *bind.CallOpts, assets []common.Address) ([]*big.Int, error) {
	var out []interface{}
	err := _AaveOracle.contract.Call(opts, &out, "getAssetsPrices", assets)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetAssetsPrices is a free data retrieval call binding the contract method 0x9d23d9f2.
//
// Solidity: function getAssetsPrices(address[] assets) view returns(uint256[])
func (_AaveOracle *AaveOracleSession) GetAssetsPrices(assets []common.Address) ([]*big.Int, error) {
	return _AaveOracle.Contract.GetAssetsPrices(&_AaveOracle.CallOpts, assets)
}

// GetAssetsPrices is a free data retrieval call binding the contract method 0x9d23d9f2.
//
// Solidity: function getAssetsPrices(address[] assets) view returns(uint256[])
func (_AaveOracle *AaveOracleCallerSession) GetAssetsPrices(assets []common.Address) ([]*big.Int, error) {
	return _AaveOracle.Contract.GetAssetsPrices(&_AaveOracle.CallOpts, assets)
}

// GetFallbackOracle is a free data retrieval call binding the contract method 0x6210308c.
//
// Solidity: function getFallbackOracle() view returns(address)
func (_AaveOracle *AaveOracleCaller) GetFallbackOracle(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AaveOracle.contract.Call(opts, &out, "getFallbackOracle")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetFallbackOracle is a free data retrieval call binding the contract method 0x6210308c.
//
// Solidity: function getFallbackOracle() view returns(address)
func (_AaveOracle *AaveOracleSession) GetFallbackOracle() (common.Address, error) {
	return _AaveOracle.Contract.GetFallbackOracle(&_AaveOracle.CallOpts)
}

// GetFallbackOracle is a free data retrieval call binding the contract method 0x6210308c.
//
// Solidity: function getFallbackOracle() view returns(address)
func (_AaveOracle *AaveOracleCallerSession) GetFallbackOracle() (common.Address, error) {
	return _AaveOracle.Contract.GetFallbackOracle(&_AaveOracle.CallOpts)
}

// GetSourceOfAsset is a free data retrieval call binding the contract method 0x92bf2be0.
//
// Solidity: function getSourceOfAsset(address asset) view returns(address)
func (_AaveOracle *AaveOracleCaller) GetSourceOfAsset(opts *bind.CallOpts, asset common.Address) (common.Address, error) {
	var out []interface{}
	err := _AaveOracle.contract.Call(opts, &out, "getSourceOfAsset", asset)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetSourceOfAsset is a free data retrieval call binding the contract method 0x92bf2be0.
//
// Solidity: function getSourceOfAsset(address asset) view returns(address)
func (_AaveOracle *AaveOracleSession) GetSourceOfAsset(asset common.Address) (common.Address, error) {
	return _AaveOracle.Contract.GetSourceOfAsset(&_AaveOracle.CallOpts, asset)
}

// GetSourceOfAsset is a free data retrieval call binding the contract method 0x92bf2be0.
//
// Solidity: function getSourceOfAsset(address asset) view returns(address)
func (_AaveOracle *AaveOracleCallerSession) GetSourceOfAsset(asset common.Address) (common.Address, error) {
	return _AaveOracle.Contract.GetSourceOfAsset(&_AaveOracle.CallOpts, asset)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_AaveOracle *AaveOracleCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AaveOracle.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_AaveOracle *AaveOracleSession) Owner() (common.Address, error) {
	return _AaveOracle.Contract.Owner(&_AaveOracle.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_AaveOracle *AaveOracleCallerSession) Owner() (common.Address, error) {
	return _AaveOracle.Contract.Owner(&_AaveOracle.CallOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_AaveOracle *AaveOracleTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AaveOracle.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_AaveOracle *AaveOracleSession) RenounceOwnership() (*types.Transaction, error) {
	return _AaveOracle.Contract.RenounceOwnership(&_AaveOracle.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_AaveOracle *AaveOracleTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _AaveOracle.Contract.RenounceOwnership(&_AaveOracle.TransactOpts)
}

// SetAssetSources is a paid mutator transaction binding the contract method 0xabfd5310.
//
// Solidity: function setAssetSources(address[] assets, address[] sources) returns()
func (_AaveOracle *AaveOracleTransactor) SetAssetSources(opts *bind.TransactOpts, assets []common.Address, sources []common.Address) (*types.Transaction, error) {
	return _AaveOracle.contract.Transact(opts, "setAssetSources", assets, sources)
}

// SetAssetSources is a paid mutator transaction binding the contract method 0xabfd5310.
//
// Solidity: function setAssetSources(address[] assets, address[] sources) returns()
func (_AaveOracle *AaveOracleSession) SetAssetSources(assets []common.Address, sources []common.Address) (*types.Transaction, error) {
	return _AaveOracle.Contract.SetAssetSources(&_AaveOracle.TransactOpts, assets, sources)
}

// SetAssetSources is a paid mutator transaction binding the contract method 0xabfd5310.
//
// Solidity: function setAssetSources(address[] assets, address[] sources) returns()
func (_AaveOracle *AaveOracleTransactorSession) SetAssetSources(assets []common.Address, sources []common.Address) (*types.Transaction, error) {
	return _AaveOracle.Contract.SetAssetSources(&_AaveOracle.TransactOpts, assets, sources)
}

// SetFallbackOracle is a paid mutator transaction binding the contract method 0x170aee73.
//
// Solidity: function setFallbackOracle(address fallbackOracle) returns()
func (_AaveOracle *AaveOracleTransactor) SetFallbackOracle(opts *bind.TransactOpts, fallbackOracle common.Address) (*types.Transaction, error) {
	return _AaveOracle.contract.Transact(opts, "setFallbackOracle", fallbackOracle)
}

// SetFallbackOracle is a paid mutator transaction binding the contract method 0x170aee73.
//
// Solidity: function setFallbackOracle(address fallbackOracle) returns()
func (_AaveOracle *AaveOracleSession) SetFallbackOracle(fallbackOracle common.Address) (*types.Transaction, error) {
	return _AaveOracle.Contract.SetFallbackOracle(&_AaveOracle.TransactOpts, fallbackOracle)
}

// SetFallbackOracle is a paid mutator transaction binding the contract method 0x170aee73.
//
// Solidity: function setFallbackOracle(address fallbackOracle) returns()
func (_AaveOracle *AaveOracleTransactorSession) SetFallbackOracle(fallbackOracle common.Address) (*types.Transaction, error) {
	return _AaveOracle.Contract.SetFallbackOracle(&_AaveOracle.TransactOpts, fallbackOracle)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_AaveOracle *AaveOracleTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _AaveOracle.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_AaveOracle *AaveOracleSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _AaveOracle.Contract.TransferOwnership(&_AaveOracle.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_AaveOracle *AaveOracleTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _AaveOracle.Contract.TransferOwnership(&_AaveOracle.TransactOpts, newOwner)
}

// AaveOracleAssetSourceUpdatedIterator is returned from FilterAssetSourceUpdated and is used to iterate over the raw logs and unpacked data for AssetSourceUpdated events raised by the AaveOracle contract.
type AaveOracleAssetSourceUpdatedIterator struct {
	Event *AaveOracleAssetSourceUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AaveOracleAssetSourceUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AaveOracleAssetSourceUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AaveOracleAssetSourceUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AaveOracleAssetSourceUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AaveOracleAssetSourceUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AaveOracleAssetSourceUpdated represents a AssetSourceUpdated event raised by the AaveOracle contract.
type AaveOracleAssetSourceUpdated struct {
	Asset  common.Address
	Source common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterAssetSourceUpdated is a free log retrieval operation binding the contract event 0x22c5b7b2d8561d39f7f210b6b326a1aa69f15311163082308ac4877db6339dc1.
//
// Solidity: event AssetSourceUpdated(address indexed asset, address indexed source)
func (_AaveOracle *AaveOracleFilterer) FilterAssetSourceUpdated(opts *bind.FilterOpts, asset []common.Address, source []common.Address) (*AaveOracleAssetSourceUpdatedIterator, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}
	var sourceRule []interface{}
	for _, sourceItem := range source {
		sourceRule = append(sourceRule, sourceItem)
	}

	logs, sub, err := _AaveOracle.contract.FilterLogs(opts, "AssetSourceUpdated", assetRule, sourceRule)
	if err != nil {
		return nil, err
	}
	return &AaveOracleAssetSourceUpdatedIterator{contract: _AaveOracle.contract, event: "AssetSourceUpdated", logs: logs, sub: sub}, nil
}

// WatchAssetSourceUpdated is a free log subscription operation binding the contract event 0x22c5b7b2d8561d39f7f210b6b326a1aa69f15311163082308ac4877db6339dc1.
//
// Solidity: event AssetSourceUpdated(address indexed asset, address indexed source)
func (_AaveOracle *AaveOracleFilterer) WatchAssetSourceUpdated(opts *bind.WatchOpts, sink chan<- *AaveOracleAssetSourceUpdated, asset []common.Address, source []common.Address) (event.Subscription, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}
	var sourceRule []interface{}
	for _, sourceItem := range source {
		sourceRule = append(sourceRule, sourceItem)
	}

	logs, sub, err := _AaveOracle.contract.WatchLogs(opts, "AssetSourceUpdated", assetRule, sourceRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AaveOracleAssetSourceUpdated)
				if err := _AaveOracle.contract.UnpackLog(event, "AssetSourceUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssetSourceUpdated is a log parse operation binding the contract event 0x22c5b7b2d8561d39f7f210b6b326a1aa69f15311163082308ac4877db6339dc1.
//
// Solidity: event AssetSourceUpdated(address indexed asset, address indexed source)
func (_AaveOracle *AaveOracleFilterer) ParseAssetSourceUpdated(log types.Log) (*AaveOracleAssetSourceUpdated, error) {
	event := new(AaveOracleAssetSourceUpdated)
	if err := _AaveOracle.contract.UnpackLog(event, "AssetSourceUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AaveOracleFallbackOracleUpdatedIterator is returned from FilterFallbackOracleUpdated and is used to iterate over the raw logs and unpacked data for FallbackOracleUpdated events raised by the AaveOracle contract.
type AaveOracleFallbackOracleUpdatedIterator struct {
	Event *AaveOracleFallbackOracleUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AaveOracleFallbackOracleUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AaveOracleFallbackOracleUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AaveOracleFallbackOracleUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AaveOracleFallbackOracleUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AaveOracleFallbackOracleUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AaveOracleFallbackOracleUpdated represents a FallbackOracleUpdated event raised by the AaveOracle contract.
type AaveOracleFallbackOracleUpdated struct {
	FallbackOracle common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterFallbackOracleUpdated is a free log retrieval operation binding the contract event 0xce7a780d33665b1ea097af5f155e3821b809ecbaa839d3b33aa83ba28168cefb.
//
// Solidity: event FallbackOracleUpdated(address indexed fallbackOracle)
func (_AaveOracle *AaveOracleFilterer) FilterFallbackOracleUpdated(opts *bind.FilterOpts, fallbackOracle []common.Address) (*AaveOracleFallbackOracleUpdatedIterator, error) {

	var fallbackOracleRule []interface{}
	for _, fallbackOracleItem := range fallbackOracle {
		fallbackOracleRule = append(fallbackOracleRule, fallbackOracleItem)
	}

	logs, sub, err := _AaveOracle.contract.FilterLogs(opts, "FallbackOracleUpdated", fallbackOracleRule)
	if err != nil {
		return nil, err
	}
	return &AaveOracleFallbackOracleUpdatedIterator{contract: _AaveOracle.contract, event: "FallbackOracleUpdated", logs: logs, sub: sub}, nil
}

// WatchFallbackOracleUpdated is a free log subscription operation binding the contract event 0xce7a780d33665b1ea097af5f155e3821b809ecbaa839d3b33aa83ba28168cefb.
//
// Solidity: event FallbackOracleUpdated(address indexed fallbackOracle)
func (_AaveOracle *AaveOracleFilterer) WatchFallbackOracleUpdated(opts *bind.WatchOpts, sink chan<- *AaveOracleFallbackOracleUpdated, fallbackOracle []common.Address) (event.Subscription, error) {

	var fallbackOracleRule []interface{}
	for _, fallbackOracleItem := range fallbackOracle {
		fallbackOracleRule = append(fallbackOracleRule, fallbackOracleItem)
	}

	logs, sub, err := _AaveOracle.contract.WatchLogs(opts, "FallbackOracleUpdated", fallbackOracleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AaveOracleFallbackOracleUpdated)
				if err := _AaveOracle.contract.UnpackLog(event, "FallbackOracleUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFallbackOracleUpdated is a log parse operation binding the contract event 0xce7a780d33665b1ea097af5f155e3821b809ecbaa839d3b33aa83ba28168cefb.
//
// Solidity: event FallbackOracleUpdated(address indexed fallbackOracle)
func (_AaveOracle *AaveOracleFilterer) ParseFallbackOracleUpdated(log types.Log) (*AaveOracleFallbackOracleUpdated, error) {
	event := new(AaveOracleFallbackOracleUpdated)
	if err := _AaveOracle.contract.UnpackLog(event, "FallbackOracleUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AaveOracleOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the AaveOracle contract.
type AaveOracleOwnershipTransferredIterator struct {
	Event *AaveOracleOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AaveOracleOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AaveOracleOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AaveOracleOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AaveOracleOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AaveOracleOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AaveOracleOwnershipTransferred represents a OwnershipTransferred event raised by the AaveOracle contract.
type AaveOracleOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_AaveOracle *AaveOracleFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*AaveOracleOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _AaveOracle.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &AaveOracleOwnershipTransferredIterator{contract: _AaveOracle.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_AaveOracle *AaveOracleFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *AaveOracleOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _AaveOracle.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AaveOracleOwnershipTransferred)
				if err := _AaveOracle.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_AaveOracle *AaveOracleFilterer) ParseOwnershipTransferred(log types.Log) (*AaveOracleOwnershipTransferred, error) {
	event := new(AaveOracleOwnershipTransferred)
	if err := _AaveOracle.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AaveOracleWethSetIterator is returned from FilterWethSet and is used to iterate over the raw logs and unpacked data for WethSet events raised by the AaveOracle contract.
type AaveOracleWethSetIterator struct {
	Event *AaveOracleWethSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AaveOracleWethSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AaveOracleWethSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AaveOracleWethSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AaveOracleWethSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AaveOracleWethSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AaveOracleWethSet represents a WethSet event raised by the AaveOracle contract.
type AaveOracleWethSet struct {
	Weth common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterWethSet is a free log retrieval operation binding the contract event 0x13a533084dcbb1cfe0dbea708ea977223c27c44d94f2fa3867a167c9cd340bf9.
//
// Solidity: event WethSet(address indexed weth)
func (_AaveOracle *AaveOracleFilterer) FilterWethSet(opts *bind.FilterOpts, weth []common.Address) (*AaveOracleWethSetIterator, error) {

	var wethRule []interface{}
	for _, wethItem := range weth {
		wethRule = append(wethRule, wethItem)
	}

	logs, sub, err := _AaveOracle.contract.FilterLogs(opts, "WethSet", wethRule)
	if err != nil {
		return nil, err
	}
	return &AaveOracleWethSetIterator{contract: _AaveOracle.contract, event: "WethSet", logs: logs, sub: sub}, nil
}

// WatchWethSet is a free log subscription operation binding the contract event 0x13a533084dcbb1cfe0dbea708ea977223c27c44d94f2fa3867a167c9cd340bf9.
//
// Solidity: event WethSet(address indexed weth)
func (_AaveOracle *AaveOracleFilterer) WatchWethSet(opts *bind.WatchOpts, sink chan<- *AaveOracleWethSet, weth []common.Address) (event.Subscription, error) {

	var wethRule []interface{}
	for _, wethItem := range weth {
		wethRule = append(wethRule, wethItem)
	}

	logs, sub, err := _AaveOracle.contract.WatchLogs(opts, "WethSet", wethRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AaveOracleWethSet)
				if err := _AaveOracle.contract.UnpackLog(event, "WethSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWethSet is a log parse operation binding the contract event 0x13a533084dcbb1cfe0dbea708ea977223c27c44d94f2fa3867a167c9cd340bf9.
//
// Solidity: event WethSet(address indexed weth)
func (_AaveOracle *AaveOracleFilterer) ParseWethSet(log types.Log) (*AaveOracleWethSet, error) {
	event := new(AaveOracleWethSet)
	if err := _AaveOracle.contract.UnpackLog(event, "WethSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AaveProtocolDataProviderABI is the input ABI used to generate the binding from.
const AaveProtocolDataProviderABI = "[{\"inputs\":[{\"internalType\":\"contractILendingPoolAddressesProvider\",\"name\":\"addressesProvider\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ADDRESSES_PROVIDER\",\"outputs\":[{\"internalType\":\"contractILendingPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllATokens\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"internalType\":\"structAaveProtocolDataProvider.TokenData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllReservesTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"internalType\":\"structAaveProtocolDataProvider.TokenData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getReserveConfigurationData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"usageAsCollateralEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"borrowingEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"stableBorrowRateEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFrozen\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getReserveData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"availableLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStableDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVariableDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averageStableBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableBorrowIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getReserveTokensAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"aTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableDebtTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"variableDebtTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserReserveData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentATokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentStableDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentVariableDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalStableDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scaledVariableDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityRate\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"stableRateLastUpdated\",\"type\":\"uint40\"},{\"internalType\":\"bool\",\"name\":\"usageAsCollateralEnabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// AaveProtocolDataProviderBin is the compiled bytecode used for deploying new contracts.
var AaveProtocolDataProviderBin = "0x60a060405234801561001057600080fd5b50604051611be3380380611be383398101604081905261002f91610044565b60601b6001600160601b031916608052610072565b600060208284031215610055578081fd5b81516001600160a01b038116811461006b578182fd5b9392505050565b60805160601c611b316100b26000398061015b528061019552806102ac52806107a75280610b2b5280610c7b5280610ff952806111295250611b316000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80633e1501411161005b5780633e150141146100f1578063b316ff891461011a578063d2493b6c1461012f578063f561ae41146101515761007d565b80630542975c1461008257806328dd2d01146100a057806335ea6a75146100c8575b600080fd5b61008a610159565b60405161009791906118e3565b60405180910390f35b6100b36100ae3660046115f5565b61017d565b60405161009799989796959493929190611a44565b6100db6100d63660046115b6565b61078e565b6040516100979a999897969594939291906119f8565b6101046100ff3660046115b6565b610b12565b6040516100979a999897969594939291906119a9565b610122610c75565b604051610097919061191a565b61014261013d3660046115b6565b610fea565b604051610097939291906118f7565b610122611123565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060008060008060008060006101936114b3565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156101ec57600080fd5b505afa158015610200573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022491906115d9565b6001600160a01b03166335ea6a758d6040518263ffffffff1660e01b815260040161024f91906118e3565b6101806040518083038186803b15801561026857600080fd5b505afa15801561027c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a0919061177f565b90506102aa61151e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561030357600080fd5b505afa158015610317573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033b91906115d9565b6001600160a01b0316634417a5838d6040518263ffffffff1660e01b815260040161036691906118e3565b60206040518083038186803b15801561037e57600080fd5b505afa158015610392573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b69190611764565b60e08301516040516370a0823160e01b81529192506001600160a01b0316906370a08231906103e9908f906004016118e3565b60206040518083038186803b15801561040157600080fd5b505afa158015610415573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610439919061187a565b6101208301516040516370a0823160e01b8152919c506001600160a01b0316906370a082319061046d908f906004016118e3565b60206040518083038186803b15801561048557600080fd5b505afa158015610499573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bd919061187a565b6101008301516040516370a0823160e01b8152919a506001600160a01b0316906370a08231906104f1908f906004016118e3565b60206040518083038186803b15801561050957600080fd5b505afa15801561051d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610541919061187a565b61010083015160405163631a6fd560e11b8152919b506001600160a01b03169063c634dfaa90610575908f906004016118e3565b60206040518083038186803b15801561058d57600080fd5b505afa1580156105a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c5919061187a565b610120830151604051630ed1279f60e11b81529199506001600160a01b031690631da24f3e906105f9908f906004016118e3565b60206040518083038186803b15801561061157600080fd5b505afa158015610625573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610649919061187a565b965081606001516001600160801b031694508161010001516001600160a01b031663e78c9b3b8d6040518263ffffffff1660e01b815260040161068c91906118e3565b60206040518083038186803b1580156106a457600080fd5b505afa1580156106b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106dc919061187a565b610100830151604051631e739ae360e21b81529197506001600160a01b0316906379ce6b8c90610710908f906004016118e3565b60206040518083038186803b15801561072857600080fd5b505afa15801561073c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107609190611892565b935061077d82610160015160ff16826113ea90919063ffffffff16565b925050509295985092959850929598565b6000806000806000806000806000806107a56114b3565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107fe57600080fd5b505afa158015610812573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083691906115d9565b6001600160a01b03166335ea6a758d6040518263ffffffff1660e01b815260040161086191906118e3565b6101806040518083038186803b15801561087a57600080fd5b505afa15801561088e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b2919061177f565b60e08101516040516370a0823160e01b81529192506001600160a01b038e16916370a08231916108e4916004016118e3565b60206040518083038186803b1580156108fc57600080fd5b505afa158015610910573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610934919061187a565b8161010001516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561097257600080fd5b505afa158015610986573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109aa919061187a565b8261012001516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156109e857600080fd5b505afa1580156109fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a20919061187a565b836060015184608001518560a001518661010001516001600160a01b03166390f6fcf26040518163ffffffff1660e01b815260040160206040518083038186803b158015610a6d57600080fd5b505afa158015610a81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa5919061187a565b876020015188604001518960c00151866001600160801b03169650856001600160801b03169550846001600160801b03169450826001600160801b03169250816001600160801b031691509a509a509a509a509a509a509a509a509a509a50509193959799509193959799565b600080600080600080600080600080610b2961151e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b8257600080fd5b505afa158015610b96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bba91906115d9565b6001600160a01b031663c44b11f78d6040518263ffffffff1660e01b8152600401610be591906118e3565b60206040518083038186803b158015610bfd57600080fd5b505afa158015610c11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c359190611764565b9050610c408161144c565b909e50929c50909a5098509650610c5681611477565b9d9f9c9e509a9c999b989a8d15159a9099909850919650945092505050565b606060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610cd257600080fd5b505afa158015610ce6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0a91906115d9565b90506060816001600160a01b031663d1946dbc6040518163ffffffff1660e01b815260040160006040518083038186803b158015610d4757600080fd5b505afa158015610d5b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d83919081019061162d565b90506060815167ffffffffffffffff81118015610d9f57600080fd5b50604051908082528060200260200182016040528015610dd957816020015b610dc6611531565b815260200190600190039081610dbe5790505b50905060005b8251811015610fe257739f8f72aa9304c8b593d555f12ef6589cc3a579a26001600160a01b0316838281518110610e1257fe5b60200260200101516001600160a01b03161415610e915760405180604001604052806040518060400160405280600381526020016226a5a960e91b8152508152602001848381518110610e6157fe5b60200260200101516001600160a01b0316815250828281518110610e8157fe5b6020026020010181905250610fda565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b0316838281518110610ebb57fe5b60200260200101516001600160a01b03161415610f0a5760405180604001604052806040518060400160405280600381526020016208aa8960eb1b8152508152602001848381518110610e6157fe5b6040518060400160405280848381518110610f2157fe5b60200260200101516001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015610f6157600080fd5b505afa158015610f75573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f9d91908101906116d8565b8152602001848381518110610fae57fe5b60200260200101516001600160a01b0316815250828281518110610fce57fe5b60200260200101819052505b600101610ddf565b509250505090565b6000806000610ff76114b3565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561105057600080fd5b505afa158015611064573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108891906115d9565b6001600160a01b03166335ea6a75866040518263ffffffff1660e01b81526004016110b391906118e3565b6101806040518083038186803b1580156110cc57600080fd5b505afa1580156110e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611104919061177f565b60e0810151610100820151610120909201519097919650945092505050565b606060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561118057600080fd5b505afa158015611194573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b891906115d9565b90506060816001600160a01b031663d1946dbc6040518163ffffffff1660e01b815260040160006040518083038186803b1580156111f557600080fd5b505afa158015611209573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611231919081019061162d565b90506060815167ffffffffffffffff8111801561124d57600080fd5b5060405190808252806020026020018201604052801561128757816020015b611274611531565b81526020019060019003908161126c5790505b50905060005b8251811015610fe25761129e6114b3565b846001600160a01b03166335ea6a758584815181106112b957fe5b60200260200101516040518263ffffffff1660e01b81526004016112dd91906118e3565b6101806040518083038186803b1580156112f657600080fd5b505afa15801561130a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132e919061177f565b905060405180604001604052808260e001516001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561137857600080fd5b505afa15801561138c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113b491908101906116d8565b81526020018260e001516001600160a01b03168152508383815181106113d657fe5b60209081029190910101525060010161128d565b60006080821060405180604001604052806002815260200161373760f01b815250906114325760405162461bcd60e51b81526004016114299190611996565b60405180910390fd5b5050815160016002830281019190911c1615155b92915050565b5161ffff80821692601083901c821692602081901c831692603082901c60ff169260409290921c1690565b51670100000000000000811615159167020000000000000082161515916704000000000000008116151591670800000000000000909116151590565b6040518061018001604052806114c761151e565b815260006020820181905260408201819052606082018190526080820181905260a0820181905260c0820181905260e082018190526101008201819052610120820181905261014082018190526101609091015290565b6040518060200160405280600081525090565b60408051808201909152606081526000602082015290565b805161144681611ae3565b600060208284031215611565578081fd5b61156f6020611a8c565b9151825250919050565b80516001600160801b038116811461144657600080fd5b805164ffffffffff8116811461144657600080fd5b805160ff8116811461144657600080fd5b6000602082840312156115c7578081fd5b81356115d281611ae3565b9392505050565b6000602082840312156115ea578081fd5b81516115d281611ae3565b60008060408385031215611607578081fd5b823561161281611ae3565b9150602083013561162281611ae3565b809150509250929050565b6000602080838503121561163f578182fd5b825167ffffffffffffffff80821115611656578384fd5b818501915085601f830112611669578384fd5b815181811115611677578485fd5b8381029150611687848301611a8c565b8181528481019084860184860187018a10156116a1578788fd5b8795505b838610156116cb576116b78a82611549565b8352600195909501949186019186016116a5565b5098975050505050505050565b6000602082840312156116e9578081fd5b815167ffffffffffffffff80821115611700578283fd5b818401915084601f830112611713578283fd5b815181811115611721578384fd5b611734601f8201601f1916602001611a8c565b915080825285602082850101111561174a578384fd5b61175b816020840160208601611ab3565b50949350505050565b600060208284031215611775578081fd5b6115d28383611554565b6000610180808385031215611792578182fd5b61179b81611a8c565b90506117a78484611554565b81526117b68460208501611579565b60208201526117c88460408501611579565b60408201526117da8460608501611579565b60608201526117ec8460808501611579565b60808201526117fe8460a08501611579565b60a08201526118108460c08501611590565b60c08201526118228460e08501611549565b60e082015261010061183685828601611549565b9082015261012061184985858301611549565b9082015261014061185c85858301611549565b9082015261016061186f858583016115a5565b908201529392505050565b60006020828403121561188b578081fd5b5051919050565b6000602082840312156118a3578081fd5b815164ffffffffff811681146115d2578182fd5b600081518084526118cf816020860160208601611ab3565b601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0393841681529183166020830152909116604082015260600190565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561198857888303603f1901855281518051878552611962888601826118b7565b918901516001600160a01b0316948901949094529487019492509086019060010161193e565b509098975050505050505050565b6000602082526115d260208301846118b7565b998a5260208a0198909852604089019690965260608801949094526080870192909252151560a0860152151560c0850152151560e0840152151561010083015215156101208201526101400190565b998a5260208a019890985260408901969096526060880194909452608087019290925260a086015260c085015260e084015261010083015264ffffffffff166101208201526101400190565b988952602089019790975260408801959095526060870193909352608086019190915260a085015260c084015264ffffffffff1660e083015215156101008201526101200190565b60405181810167ffffffffffffffff81118282101715611aab57600080fd5b604052919050565b60005b83811015611ace578181015183820152602001611ab6565b83811115611add576000848401525b50505050565b6001600160a01b0381168114611af857600080fd5b5056fea26469706673582212205d8442ffcc375241169cdf1e8c39968c4d659e1f6366da20046f6f50fe32f1b664736f6c634300060c0033"

// DeployAaveProtocolDataProvider deploys a new Ethereum contract, binding an instance of AaveProtocolDataProvider to it.
func DeployAaveProtocolDataProvider(auth *bind.TransactOpts, backend bind.ContractBackend, addressesProvider common.Address) (common.Address, *types.Transaction, *AaveProtocolDataProvider, error) {
	parsed, err := abi.JSON(strings.NewReader(AaveProtocolDataProviderABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(AaveProtocolDataProviderBin), backend, addressesProvider)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AaveProtocolDataProvider{AaveProtocolDataProviderCaller: AaveProtocolDataProviderCaller{contract: contract}, AaveProtocolDataProviderTransactor: AaveProtocolDataProviderTransactor{contract: contract}, AaveProtocolDataProviderFilterer: AaveProtocolDataProviderFilterer{contract: contract}}, nil
}

// AaveProtocolDataProvider is an auto generated Go binding around an Ethereum contract.
type AaveProtocolDataProvider struct {
	AaveProtocolDataProviderCaller     // Read-only binding to the contract
	AaveProtocolDataProviderTransactor // Write-only binding to the contract
	AaveProtocolDataProviderFilterer   // Log filterer for contract events
}

// AaveProtocolDataProviderCaller is an auto generated read-only Go binding around an Ethereum contract.
type AaveProtocolDataProviderCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AaveProtocolDataProviderTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AaveProtocolDataProviderTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AaveProtocolDataProviderFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AaveProtocolDataProviderFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AaveProtocolDataProviderSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AaveProtocolDataProviderSession struct {
	Contract     *AaveProtocolDataProvider // Generic contract binding to set the session for
	CallOpts     bind.CallOpts             // Call options to use throughout this session
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// AaveProtocolDataProviderCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AaveProtocolDataProviderCallerSession struct {
	Contract *AaveProtocolDataProviderCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                   // Call options to use throughout this session
}

// AaveProtocolDataProviderTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AaveProtocolDataProviderTransactorSession struct {
	Contract     *AaveProtocolDataProviderTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                   // Transaction auth options to use throughout this session
}

// AaveProtocolDataProviderRaw is an auto generated low-level Go binding around an Ethereum contract.
type AaveProtocolDataProviderRaw struct {
	Contract *AaveProtocolDataProvider // Generic contract binding to access the raw methods on
}

// AaveProtocolDataProviderCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AaveProtocolDataProviderCallerRaw struct {
	Contract *AaveProtocolDataProviderCaller // Generic read-only contract binding to access the raw methods on
}

// AaveProtocolDataProviderTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AaveProtocolDataProviderTransactorRaw struct {
	Contract *AaveProtocolDataProviderTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAaveProtocolDataProvider creates a new instance of AaveProtocolDataProvider, bound to a specific deployed contract.
func NewAaveProtocolDataProvider(address common.Address, backend bind.ContractBackend) (*AaveProtocolDataProvider, error) {
	contract, err := bindAaveProtocolDataProvider(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AaveProtocolDataProvider{AaveProtocolDataProviderCaller: AaveProtocolDataProviderCaller{contract: contract}, AaveProtocolDataProviderTransactor: AaveProtocolDataProviderTransactor{contract: contract}, AaveProtocolDataProviderFilterer: AaveProtocolDataProviderFilterer{contract: contract}}, nil
}

// NewAaveProtocolDataProviderCaller creates a new read-only instance of AaveProtocolDataProvider, bound to a specific deployed contract.
func NewAaveProtocolDataProviderCaller(address common.Address, caller bind.ContractCaller) (*AaveProtocolDataProviderCaller, error) {
	contract, err := bindAaveProtocolDataProvider(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AaveProtocolDataProviderCaller{contract: contract}, nil
}

// NewAaveProtocolDataProviderTransactor creates a new write-only instance of AaveProtocolDataProvider, bound to a specific deployed contract.
func NewAaveProtocolDataProviderTransactor(address common.Address, transactor bind.ContractTransactor) (*AaveProtocolDataProviderTransactor, error) {
	contract, err := bindAaveProtocolDataProvider(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AaveProtocolDataProviderTransactor{contract: contract}, nil
}

// NewAaveProtocolDataProviderFilterer creates a new log filterer instance of AaveProtocolDataProvider, bound to a specific deployed contract.
func NewAaveProtocolDataProviderFilterer(address common.Address, filterer bind.ContractFilterer) (*AaveProtocolDataProviderFilterer, error) {
	contract, err := bindAaveProtocolDataProvider(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AaveProtocolDataProviderFilterer{contract: contract}, nil
}

// bindAaveProtocolDataProvider binds a generic wrapper to an already deployed contract.
func bindAaveProtocolDataProvider(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AaveProtocolDataProviderABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AaveProtocolDataProvider *AaveProtocolDataProviderRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AaveProtocolDataProvider.Contract.AaveProtocolDataProviderCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AaveProtocolDataProvider *AaveProtocolDataProviderRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AaveProtocolDataProvider.Contract.AaveProtocolDataProviderTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AaveProtocolDataProvider *AaveProtocolDataProviderRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AaveProtocolDataProvider.Contract.AaveProtocolDataProviderTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AaveProtocolDataProvider *AaveProtocolDataProviderCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AaveProtocolDataProvider.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AaveProtocolDataProvider *AaveProtocolDataProviderTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AaveProtocolDataProvider.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AaveProtocolDataProvider *AaveProtocolDataProviderTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AaveProtocolDataProvider.Contract.contract.Transact(opts, method, params...)
}

// ADDRESSESPROVIDER is a free data retrieval call binding the contract method 0x0542975c.
//
// Solidity: function ADDRESSES_PROVIDER() view returns(address)
func (_AaveProtocolDataProvider *AaveProtocolDataProviderCaller) ADDRESSESPROVIDER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AaveProtocolDataProvider.contract.Call(opts, &out, "ADDRESSES_PROVIDER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ADDRESSESPROVIDER is a free data retrieval call binding the contract method 0x0542975c.
//
// Solidity: function ADDRESSES_PROVIDER() view returns(address)
func (_AaveProtocolDataProvider *AaveProtocolDataProviderSession) ADDRESSESPROVIDER() (common.Address, error) {
	return _AaveProtocolDataProvider.Contract.ADDRESSESPROVIDER(&_AaveProtocolDataProvider.CallOpts)
}

// ADDRESSESPROVIDER is a free data retrieval call binding the contract method 0x0542975c.
//
// Solidity: function ADDRESSES_PROVIDER() view returns(address)
func (_AaveProtocolDataProvider *AaveProtocolDataProviderCallerSession) ADDRESSESPROVIDER() (common.Address, error) {
	return _AaveProtocolDataProvider.Contract.ADDRESSESPROVIDER(&_AaveProtocolDataProvider.CallOpts)
}

// GetAllATokens is a free data retrieval call binding the contract method 0xf561ae41.
//
// Solidity: function getAllATokens() view returns((string,address)[])
func (_AaveProtocolDataProvider *AaveProtocolDataProviderCaller) GetAllATokens(opts *bind.CallOpts) ([]AaveProtocolDataProviderTokenData, error) {
	var out []interface{}
	err := _AaveProtocolDataProvider.contract.Call(opts, &out, "getAllATokens")

	if err != nil {
		return *new([]AaveProtocolDataProviderTokenData), err
	}

	out0 := *abi.ConvertType(out[0], new([]AaveProtocolDataProviderTokenData)).(*[]AaveProtocolDataProviderTokenData)

	return out0, err

}

// GetAllATokens is a free data retrieval call binding the contract method 0xf561ae41.
//
// Solidity: function getAllATokens() view returns((string,address)[])
func (_AaveProtocolDataProvider *AaveProtocolDataProviderSession) GetAllATokens() ([]AaveProtocolDataProviderTokenData, error) {
	return _AaveProtocolDataProvider.Contract.GetAllATokens(&_AaveProtocolDataProvider.CallOpts)
}

// GetAllATokens is a free data retrieval call binding the contract method 0xf561ae41.
//
// Solidity: function getAllATokens() view returns((string,address)[])
func (_AaveProtocolDataProvider *AaveProtocolDataProviderCallerSession) GetAllATokens() ([]AaveProtocolDataProviderTokenData, error) {
	return _AaveProtocolDataProvider.Contract.GetAllATokens(&_AaveProtocolDataProvider.CallOpts)
}

// GetAllReservesTokens is a free data retrieval call binding the contract method 0xb316ff89.
//
// Solidity: function getAllReservesTokens() view returns((string,address)[])
func (_AaveProtocolDataProvider *AaveProtocolDataProviderCaller) GetAllReservesTokens(opts *bind.CallOpts) ([]AaveProtocolDataProviderTokenData, error) {
	var out []interface{}
	err := _AaveProtocolDataProvider.contract.Call(opts, &out, "getAllReservesTokens")

	if err != nil {
		return *new([]AaveProtocolDataProviderTokenData), err
	}

	out0 := *abi.ConvertType(out[0], new([]AaveProtocolDataProviderTokenData)).(*[]AaveProtocolDataProviderTokenData)

	return out0, err

}

// GetAllReservesTokens is a free data retrieval call binding the contract method 0xb316ff89.
//
// Solidity: function getAllReservesTokens() view returns((string,address)[])
func (_AaveProtocolDataProvider *AaveProtocolDataProviderSession) GetAllReservesTokens() ([]AaveProtocolDataProviderTokenData, error) {
	return _AaveProtocolDataProvider.Contract.GetAllReservesTokens(&_AaveProtocolDataProvider.CallOpts)
}

// GetAllReservesTokens is a free data retrieval call binding the contract method 0xb316ff89.
//
// Solidity: function getAllReservesTokens() view returns((string,address)[])
func (_AaveProtocolDataProvider *AaveProtocolDataProviderCallerSession) GetAllReservesTokens() ([]AaveProtocolDataProviderTokenData, error) {
	return _AaveProtocolDataProvider.Contract.GetAllReservesTokens(&_AaveProtocolDataProvider.CallOpts)
}

// GetReserveConfigurationData is a free data retrieval call binding the contract method 0x3e150141.
//
// Solidity: function getReserveConfigurationData(address asset) view returns(uint256 decimals, uint256 ltv, uint256 liquidationThreshold, uint256 liquidationBonus, uint256 reserveFactor, bool usageAsCollateralEnabled, bool borrowingEnabled, bool stableBorrowRateEnabled, bool isActive, bool isFrozen)
func (_AaveProtocolDataProvider *AaveProtocolDataProviderCaller) GetReserveConfigurationData(opts *bind.CallOpts, asset common.Address) (struct {
	Decimals                 *big.Int
	Ltv                      *big.Int
	LiquidationThreshold     *big.Int
	LiquidationBonus         *big.Int
	ReserveFactor            *big.Int
	UsageAsCollateralEnabled bool
	BorrowingEnabled         bool
	StableBorrowRateEnabled  bool
	IsActive                 bool
	IsFrozen                 bool
}, error) {
	var out []interface{}
	err := _AaveProtocolDataProvider.contract.Call(opts, &out, "getReserveConfigurationData", asset)

	outstruct := new(struct {
		Decimals                 *big.Int
		Ltv                      *big.Int
		LiquidationThreshold     *big.Int
		LiquidationBonus         *big.Int
		ReserveFactor            *big.Int
		UsageAsCollateralEnabled bool
		BorrowingEnabled         bool
		StableBorrowRateEnabled  bool
		IsActive                 bool
		IsFrozen                 bool
	})

	outstruct.Decimals = out[0].(*big.Int)
	outstruct.Ltv = out[1].(*big.Int)
	outstruct.LiquidationThreshold = out[2].(*big.Int)
	outstruct.LiquidationBonus = out[3].(*big.Int)
	outstruct.ReserveFactor = out[4].(*big.Int)
	outstruct.UsageAsCollateralEnabled = out[5].(bool)
	outstruct.BorrowingEnabled = out[6].(bool)
	outstruct.StableBorrowRateEnabled = out[7].(bool)
	outstruct.IsActive = out[8].(bool)
	outstruct.IsFrozen = out[9].(bool)

	return *outstruct, err

}

// GetReserveConfigurationData is a free data retrieval call binding the contract method 0x3e150141.
//
// Solidity: function getReserveConfigurationData(address asset) view returns(uint256 decimals, uint256 ltv, uint256 liquidationThreshold, uint256 liquidationBonus, uint256 reserveFactor, bool usageAsCollateralEnabled, bool borrowingEnabled, bool stableBorrowRateEnabled, bool isActive, bool isFrozen)
func (_AaveProtocolDataProvider *AaveProtocolDataProviderSession) GetReserveConfigurationData(asset common.Address) (struct {
	Decimals                 *big.Int
	Ltv                      *big.Int
	LiquidationThreshold     *big.Int
	LiquidationBonus         *big.Int
	ReserveFactor            *big.Int
	UsageAsCollateralEnabled bool
	BorrowingEnabled         bool
	StableBorrowRateEnabled  bool
	IsActive                 bool
	IsFrozen                 bool
}, error) {
	return _AaveProtocolDataProvider.Contract.GetReserveConfigurationData(&_AaveProtocolDataProvider.CallOpts, asset)
}

// GetReserveConfigurationData is a free data retrieval call binding the contract method 0x3e150141.
//
// Solidity: function getReserveConfigurationData(address asset) view returns(uint256 decimals, uint256 ltv, uint256 liquidationThreshold, uint256 liquidationBonus, uint256 reserveFactor, bool usageAsCollateralEnabled, bool borrowingEnabled, bool stableBorrowRateEnabled, bool isActive, bool isFrozen)
func (_AaveProtocolDataProvider *AaveProtocolDataProviderCallerSession) GetReserveConfigurationData(asset common.Address) (struct {
	Decimals                 *big.Int
	Ltv                      *big.Int
	LiquidationThreshold     *big.Int
	LiquidationBonus         *big.Int
	ReserveFactor            *big.Int
	UsageAsCollateralEnabled bool
	BorrowingEnabled         bool
	StableBorrowRateEnabled  bool
	IsActive                 bool
	IsFrozen                 bool
}, error) {
	return _AaveProtocolDataProvider.Contract.GetReserveConfigurationData(&_AaveProtocolDataProvider.CallOpts, asset)
}

// GetReserveData is a free data retrieval call binding the contract method 0x35ea6a75.
//
// Solidity: function getReserveData(address asset) view returns(uint256 availableLiquidity, uint256 totalStableDebt, uint256 totalVariableDebt, uint256 liquidityRate, uint256 variableBorrowRate, uint256 stableBorrowRate, uint256 averageStableBorrowRate, uint256 liquidityIndex, uint256 variableBorrowIndex, uint40 lastUpdateTimestamp)
func (_AaveProtocolDataProvider *AaveProtocolDataProviderCaller) GetReserveData(opts *bind.CallOpts, asset common.Address) (struct {
	AvailableLiquidity      *big.Int
	TotalStableDebt         *big.Int
	TotalVariableDebt       *big.Int
	LiquidityRate           *big.Int
	VariableBorrowRate      *big.Int
	StableBorrowRate        *big.Int
	AverageStableBorrowRate *big.Int
	LiquidityIndex          *big.Int
	VariableBorrowIndex     *big.Int
	LastUpdateTimestamp     *big.Int
}, error) {
	var out []interface{}
	err := _AaveProtocolDataProvider.contract.Call(opts, &out, "getReserveData", asset)

	outstruct := new(struct {
		AvailableLiquidity      *big.Int
		TotalStableDebt         *big.Int
		TotalVariableDebt       *big.Int
		LiquidityRate           *big.Int
		VariableBorrowRate      *big.Int
		StableBorrowRate        *big.Int
		AverageStableBorrowRate *big.Int
		LiquidityIndex          *big.Int
		VariableBorrowIndex     *big.Int
		LastUpdateTimestamp     *big.Int
	})

	outstruct.AvailableLiquidity = out[0].(*big.Int)
	outstruct.TotalStableDebt = out[1].(*big.Int)
	outstruct.TotalVariableDebt = out[2].(*big.Int)
	outstruct.LiquidityRate = out[3].(*big.Int)
	outstruct.VariableBorrowRate = out[4].(*big.Int)
	outstruct.StableBorrowRate = out[5].(*big.Int)
	outstruct.AverageStableBorrowRate = out[6].(*big.Int)
	outstruct.LiquidityIndex = out[7].(*big.Int)
	outstruct.VariableBorrowIndex = out[8].(*big.Int)
	outstruct.LastUpdateTimestamp = out[9].(*big.Int)

	return *outstruct, err

}

// GetReserveData is a free data retrieval call binding the contract method 0x35ea6a75.
//
// Solidity: function getReserveData(address asset) view returns(uint256 availableLiquidity, uint256 totalStableDebt, uint256 totalVariableDebt, uint256 liquidityRate, uint256 variableBorrowRate, uint256 stableBorrowRate, uint256 averageStableBorrowRate, uint256 liquidityIndex, uint256 variableBorrowIndex, uint40 lastUpdateTimestamp)
func (_AaveProtocolDataProvider *AaveProtocolDataProviderSession) GetReserveData(asset common.Address) (struct {
	AvailableLiquidity      *big.Int
	TotalStableDebt         *big.Int
	TotalVariableDebt       *big.Int
	LiquidityRate           *big.Int
	VariableBorrowRate      *big.Int
	StableBorrowRate        *big.Int
	AverageStableBorrowRate *big.Int
	LiquidityIndex          *big.Int
	VariableBorrowIndex     *big.Int
	LastUpdateTimestamp     *big.Int
}, error) {
	return _AaveProtocolDataProvider.Contract.GetReserveData(&_AaveProtocolDataProvider.CallOpts, asset)
}

// GetReserveData is a free data retrieval call binding the contract method 0x35ea6a75.
//
// Solidity: function getReserveData(address asset) view returns(uint256 availableLiquidity, uint256 totalStableDebt, uint256 totalVariableDebt, uint256 liquidityRate, uint256 variableBorrowRate, uint256 stableBorrowRate, uint256 averageStableBorrowRate, uint256 liquidityIndex, uint256 variableBorrowIndex, uint40 lastUpdateTimestamp)
func (_AaveProtocolDataProvider *AaveProtocolDataProviderCallerSession) GetReserveData(asset common.Address) (struct {
	AvailableLiquidity      *big.Int
	TotalStableDebt         *big.Int
	TotalVariableDebt       *big.Int
	LiquidityRate           *big.Int
	VariableBorrowRate      *big.Int
	StableBorrowRate        *big.Int
	AverageStableBorrowRate *big.Int
	LiquidityIndex          *big.Int
	VariableBorrowIndex     *big.Int
	LastUpdateTimestamp     *big.Int
}, error) {
	return _AaveProtocolDataProvider.Contract.GetReserveData(&_AaveProtocolDataProvider.CallOpts, asset)
}

// GetReserveTokensAddresses is a free data retrieval call binding the contract method 0xd2493b6c.
//
// Solidity: function getReserveTokensAddresses(address asset) view returns(address aTokenAddress, address stableDebtTokenAddress, address variableDebtTokenAddress)
func (_AaveProtocolDataProvider *AaveProtocolDataProviderCaller) GetReserveTokensAddresses(opts *bind.CallOpts, asset common.Address) (struct {
	ATokenAddress            common.Address
	StableDebtTokenAddress   common.Address
	VariableDebtTokenAddress common.Address
}, error) {
	var out []interface{}
	err := _AaveProtocolDataProvider.contract.Call(opts, &out, "getReserveTokensAddresses", asset)

	outstruct := new(struct {
		ATokenAddress            common.Address
		StableDebtTokenAddress   common.Address
		VariableDebtTokenAddress common.Address
	})

	outstruct.ATokenAddress = out[0].(common.Address)
	outstruct.StableDebtTokenAddress = out[1].(common.Address)
	outstruct.VariableDebtTokenAddress = out[2].(common.Address)

	return *outstruct, err

}

// GetReserveTokensAddresses is a free data retrieval call binding the contract method 0xd2493b6c.
//
// Solidity: function getReserveTokensAddresses(address asset) view returns(address aTokenAddress, address stableDebtTokenAddress, address variableDebtTokenAddress)
func (_AaveProtocolDataProvider *AaveProtocolDataProviderSession) GetReserveTokensAddresses(asset common.Address) (struct {
	ATokenAddress            common.Address
	StableDebtTokenAddress   common.Address
	VariableDebtTokenAddress common.Address
}, error) {
	return _AaveProtocolDataProvider.Contract.GetReserveTokensAddresses(&_AaveProtocolDataProvider.CallOpts, asset)
}

// GetReserveTokensAddresses is a free data retrieval call binding the contract method 0xd2493b6c.
//
// Solidity: function getReserveTokensAddresses(address asset) view returns(address aTokenAddress, address stableDebtTokenAddress, address variableDebtTokenAddress)
func (_AaveProtocolDataProvider *AaveProtocolDataProviderCallerSession) GetReserveTokensAddresses(asset common.Address) (struct {
	ATokenAddress            common.Address
	StableDebtTokenAddress   common.Address
	VariableDebtTokenAddress common.Address
}, error) {
	return _AaveProtocolDataProvider.Contract.GetReserveTokensAddresses(&_AaveProtocolDataProvider.CallOpts, asset)
}

// GetUserReserveData is a free data retrieval call binding the contract method 0x28dd2d01.
//
// Solidity: function getUserReserveData(address asset, address user) view returns(uint256 currentATokenBalance, uint256 currentStableDebt, uint256 currentVariableDebt, uint256 principalStableDebt, uint256 scaledVariableDebt, uint256 stableBorrowRate, uint256 liquidityRate, uint40 stableRateLastUpdated, bool usageAsCollateralEnabled)
func (_AaveProtocolDataProvider *AaveProtocolDataProviderCaller) GetUserReserveData(opts *bind.CallOpts, asset common.Address, user common.Address) (struct {
	CurrentATokenBalance     *big.Int
	CurrentStableDebt        *big.Int
	CurrentVariableDebt      *big.Int
	PrincipalStableDebt      *big.Int
	ScaledVariableDebt       *big.Int
	StableBorrowRate         *big.Int
	LiquidityRate            *big.Int
	StableRateLastUpdated    *big.Int
	UsageAsCollateralEnabled bool
}, error) {
	var out []interface{}
	err := _AaveProtocolDataProvider.contract.Call(opts, &out, "getUserReserveData", asset, user)

	outstruct := new(struct {
		CurrentATokenBalance     *big.Int
		CurrentStableDebt        *big.Int
		CurrentVariableDebt      *big.Int
		PrincipalStableDebt      *big.Int
		ScaledVariableDebt       *big.Int
		StableBorrowRate         *big.Int
		LiquidityRate            *big.Int
		StableRateLastUpdated    *big.Int
		UsageAsCollateralEnabled bool
	})

	outstruct.CurrentATokenBalance = out[0].(*big.Int)
	outstruct.CurrentStableDebt = out[1].(*big.Int)
	outstruct.CurrentVariableDebt = out[2].(*big.Int)
	outstruct.PrincipalStableDebt = out[3].(*big.Int)
	outstruct.ScaledVariableDebt = out[4].(*big.Int)
	outstruct.StableBorrowRate = out[5].(*big.Int)
	outstruct.LiquidityRate = out[6].(*big.Int)
	outstruct.StableRateLastUpdated = out[7].(*big.Int)
	outstruct.UsageAsCollateralEnabled = out[8].(bool)

	return *outstruct, err

}

// GetUserReserveData is a free data retrieval call binding the contract method 0x28dd2d01.
//
// Solidity: function getUserReserveData(address asset, address user) view returns(uint256 currentATokenBalance, uint256 currentStableDebt, uint256 currentVariableDebt, uint256 principalStableDebt, uint256 scaledVariableDebt, uint256 stableBorrowRate, uint256 liquidityRate, uint40 stableRateLastUpdated, bool usageAsCollateralEnabled)
func (_AaveProtocolDataProvider *AaveProtocolDataProviderSession) GetUserReserveData(asset common.Address, user common.Address) (struct {
	CurrentATokenBalance     *big.Int
	CurrentStableDebt        *big.Int
	CurrentVariableDebt      *big.Int
	PrincipalStableDebt      *big.Int
	ScaledVariableDebt       *big.Int
	StableBorrowRate         *big.Int
	LiquidityRate            *big.Int
	StableRateLastUpdated    *big.Int
	UsageAsCollateralEnabled bool
}, error) {
	return _AaveProtocolDataProvider.Contract.GetUserReserveData(&_AaveProtocolDataProvider.CallOpts, asset, user)
}

// GetUserReserveData is a free data retrieval call binding the contract method 0x28dd2d01.
//
// Solidity: function getUserReserveData(address asset, address user) view returns(uint256 currentATokenBalance, uint256 currentStableDebt, uint256 currentVariableDebt, uint256 principalStableDebt, uint256 scaledVariableDebt, uint256 stableBorrowRate, uint256 liquidityRate, uint40 stableRateLastUpdated, bool usageAsCollateralEnabled)
func (_AaveProtocolDataProvider *AaveProtocolDataProviderCallerSession) GetUserReserveData(asset common.Address, user common.Address) (struct {
	CurrentATokenBalance     *big.Int
	CurrentStableDebt        *big.Int
	CurrentVariableDebt      *big.Int
	PrincipalStableDebt      *big.Int
	ScaledVariableDebt       *big.Int
	StableBorrowRate         *big.Int
	LiquidityRate            *big.Int
	StableRateLastUpdated    *big.Int
	UsageAsCollateralEnabled bool
}, error) {
	return _AaveProtocolDataProvider.Contract.GetUserReserveData(&_AaveProtocolDataProvider.CallOpts, asset, user)
}

// AddressABI is the input ABI used to generate the binding from.
const AddressABI = "[]"

// AddressBin is the compiled bytecode used for deploying new contracts.
var AddressBin = "0x60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122033a60df1f2a4a43e78b906c6eb6e8cb21b036a063266a42ed04d99481e11b66364736f6c634300060c0033"

// DeployAddress deploys a new Ethereum contract, binding an instance of Address to it.
func DeployAddress(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Address, error) {
	parsed, err := abi.JSON(strings.NewReader(AddressABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(AddressBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Address{AddressCaller: AddressCaller{contract: contract}, AddressTransactor: AddressTransactor{contract: contract}, AddressFilterer: AddressFilterer{contract: contract}}, nil
}

// Address is an auto generated Go binding around an Ethereum contract.
type Address struct {
	AddressCaller     // Read-only binding to the contract
	AddressTransactor // Write-only binding to the contract
	AddressFilterer   // Log filterer for contract events
}

// AddressCaller is an auto generated read-only Go binding around an Ethereum contract.
type AddressCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AddressTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AddressTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AddressFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AddressFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AddressSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AddressSession struct {
	Contract     *Address          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AddressCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AddressCallerSession struct {
	Contract *AddressCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// AddressTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AddressTransactorSession struct {
	Contract     *AddressTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// AddressRaw is an auto generated low-level Go binding around an Ethereum contract.
type AddressRaw struct {
	Contract *Address // Generic contract binding to access the raw methods on
}

// AddressCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AddressCallerRaw struct {
	Contract *AddressCaller // Generic read-only contract binding to access the raw methods on
}

// AddressTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AddressTransactorRaw struct {
	Contract *AddressTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAddress creates a new instance of Address, bound to a specific deployed contract.
func NewAddress(address common.Address, backend bind.ContractBackend) (*Address, error) {
	contract, err := bindAddress(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Address{AddressCaller: AddressCaller{contract: contract}, AddressTransactor: AddressTransactor{contract: contract}, AddressFilterer: AddressFilterer{contract: contract}}, nil
}

// NewAddressCaller creates a new read-only instance of Address, bound to a specific deployed contract.
func NewAddressCaller(address common.Address, caller bind.ContractCaller) (*AddressCaller, error) {
	contract, err := bindAddress(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AddressCaller{contract: contract}, nil
}

// NewAddressTransactor creates a new write-only instance of Address, bound to a specific deployed contract.
func NewAddressTransactor(address common.Address, transactor bind.ContractTransactor) (*AddressTransactor, error) {
	contract, err := bindAddress(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AddressTransactor{contract: contract}, nil
}

// NewAddressFilterer creates a new log filterer instance of Address, bound to a specific deployed contract.
func NewAddressFilterer(address common.Address, filterer bind.ContractFilterer) (*AddressFilterer, error) {
	contract, err := bindAddress(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AddressFilterer{contract: contract}, nil
}

// bindAddress binds a generic wrapper to an already deployed contract.
func bindAddress(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AddressABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Address *AddressRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Address.Contract.AddressCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Address *AddressRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Address.Contract.AddressTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Address *AddressRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Address.Contract.AddressTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Address *AddressCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Address.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Address *AddressTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Address.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Address *AddressTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Address.Contract.contract.Transact(opts, method, params...)
}

// AdminUpgradeabilityProxyABI is the input ABI used to generate the binding from.
const AdminUpgradeabilityProxyABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]"

// AdminUpgradeabilityProxyBin is the compiled bytecode used for deploying new contracts.
var AdminUpgradeabilityProxyBin = "0x60806040526040516109353803806109358339818101604052606081101561002657600080fd5b8151602083015160408085018051915193959294830192918464010000000082111561005157600080fd5b90830190602082018581111561006657600080fd5b825164010000000081118282018810171561008057600080fd5b82525081516020918201929091019080838360005b838110156100ad578181015183820152602001610095565b50505050905090810190601f1680156100da5780820380516001836020036101000a031916815260200191505b50604052508491508290506100ee826101bf565b8051156101a6576000826001600160a01b0316826040518082805190602001908083835b602083106101315780518252601f199092019160209182019101610112565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114610191576040519150601f19603f3d011682016040523d82523d6000602084013e610196565b606091505b50509050806101a457600080fd5b505b506101ae9050565b6101b782610231565b505050610291565b6101d28161025560201b6103a31760201c565b61020d5760405162461bcd60e51b815260040180806020018281038252603b8152602001806108fa603b913960400191505060405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061028957508115155b949350505050565b61065a806102a06000396000f3fe60806040526004361061004a5760003560e01c80633659cfe6146100545780634f1ef286146100875780635c60da1b146101075780638f28397014610138578063f851a4401461016b575b610052610180565b005b34801561006057600080fd5b506100526004803603602081101561007757600080fd5b50356001600160a01b031661019a565b6100526004803603604081101561009d57600080fd5b6001600160a01b0382351691908101906040810160208201356401000000008111156100c857600080fd5b8201836020820111156100da57600080fd5b803590602001918460018302840111640100000000831117156100fc57600080fd5b5090925090506101d4565b34801561011357600080fd5b5061011c610281565b604080516001600160a01b039092168252519081900360200190f35b34801561014457600080fd5b506100526004803603602081101561015b57600080fd5b50356001600160a01b03166102be565b34801561017757600080fd5b5061011c610378565b6101886103df565b6101986101936103e7565b61040c565b565b6101a2610430565b6001600160a01b0316336001600160a01b031614156101c9576101c481610455565b6101d1565b6101d1610180565b50565b6101dc610430565b6001600160a01b0316336001600160a01b03161415610274576101fe83610455565b6000836001600160a01b031683836040518083838082843760405192019450600093509091505080830381855af49150503d806000811461025b576040519150601f19603f3d011682016040523d82523d6000602084013e610260565b606091505b505090508061026e57600080fd5b5061027c565b61027c610180565b505050565b600061028b610430565b6001600160a01b0316336001600160a01b031614156102b3576102ac6103e7565b90506102bb565b6102bb610180565b90565b6102c6610430565b6001600160a01b0316336001600160a01b031614156101c9576001600160a01b0381166103245760405162461bcd60e51b81526004018080602001828103825260368152602001806105b46036913960400191505060405180910390fd5b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f61034d610430565b604080516001600160a01b03928316815291841660208301528051918290030190a16101c481610495565b6000610382610430565b6001600160a01b0316336001600160a01b031614156102b3576102ac610430565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906103d757508115155b949350505050565b6101986104b9565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b3660008037600080366000845af43d6000803e80801561042b573d6000f35b3d6000fd5b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b61045e81610519565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355565b6104c1610430565b6001600160a01b0316336001600160a01b031614156105115760405162461bcd60e51b81526004018080602001828103825260328152602001806105826032913960400191505060405180910390fd5b610198610198565b610522816103a3565b61055d5760405162461bcd60e51b815260040180806020018281038252603b8152602001806105ea603b913960400191505060405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5556fe43616e6e6f742063616c6c2066616c6c6261636b2066756e6374696f6e2066726f6d207468652070726f78792061646d696e43616e6e6f74206368616e6765207468652061646d696e206f6620612070726f787920746f20746865207a65726f206164647265737343616e6e6f742073657420612070726f787920696d706c656d656e746174696f6e20746f2061206e6f6e2d636f6e74726163742061646472657373a2646970667358221220fecfd7434e622e53daba46a14cab5752277fb7d695fd3ed534cdcc0841f5cf4064736f6c634300060c003343616e6e6f742073657420612070726f787920696d706c656d656e746174696f6e20746f2061206e6f6e2d636f6e74726163742061646472657373"

// DeployAdminUpgradeabilityProxy deploys a new Ethereum contract, binding an instance of AdminUpgradeabilityProxy to it.
func DeployAdminUpgradeabilityProxy(auth *bind.TransactOpts, backend bind.ContractBackend, _logic common.Address, _admin common.Address, _data []byte) (common.Address, *types.Transaction, *AdminUpgradeabilityProxy, error) {
	parsed, err := abi.JSON(strings.NewReader(AdminUpgradeabilityProxyABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(AdminUpgradeabilityProxyBin), backend, _logic, _admin, _data)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AdminUpgradeabilityProxy{AdminUpgradeabilityProxyCaller: AdminUpgradeabilityProxyCaller{contract: contract}, AdminUpgradeabilityProxyTransactor: AdminUpgradeabilityProxyTransactor{contract: contract}, AdminUpgradeabilityProxyFilterer: AdminUpgradeabilityProxyFilterer{contract: contract}}, nil
}

// AdminUpgradeabilityProxy is an auto generated Go binding around an Ethereum contract.
type AdminUpgradeabilityProxy struct {
	AdminUpgradeabilityProxyCaller     // Read-only binding to the contract
	AdminUpgradeabilityProxyTransactor // Write-only binding to the contract
	AdminUpgradeabilityProxyFilterer   // Log filterer for contract events
}

// AdminUpgradeabilityProxyCaller is an auto generated read-only Go binding around an Ethereum contract.
type AdminUpgradeabilityProxyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AdminUpgradeabilityProxyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AdminUpgradeabilityProxyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AdminUpgradeabilityProxyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AdminUpgradeabilityProxyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AdminUpgradeabilityProxySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AdminUpgradeabilityProxySession struct {
	Contract     *AdminUpgradeabilityProxy // Generic contract binding to set the session for
	CallOpts     bind.CallOpts             // Call options to use throughout this session
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// AdminUpgradeabilityProxyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AdminUpgradeabilityProxyCallerSession struct {
	Contract *AdminUpgradeabilityProxyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                   // Call options to use throughout this session
}

// AdminUpgradeabilityProxyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AdminUpgradeabilityProxyTransactorSession struct {
	Contract     *AdminUpgradeabilityProxyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                   // Transaction auth options to use throughout this session
}

// AdminUpgradeabilityProxyRaw is an auto generated low-level Go binding around an Ethereum contract.
type AdminUpgradeabilityProxyRaw struct {
	Contract *AdminUpgradeabilityProxy // Generic contract binding to access the raw methods on
}

// AdminUpgradeabilityProxyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AdminUpgradeabilityProxyCallerRaw struct {
	Contract *AdminUpgradeabilityProxyCaller // Generic read-only contract binding to access the raw methods on
}

// AdminUpgradeabilityProxyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AdminUpgradeabilityProxyTransactorRaw struct {
	Contract *AdminUpgradeabilityProxyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAdminUpgradeabilityProxy creates a new instance of AdminUpgradeabilityProxy, bound to a specific deployed contract.
func NewAdminUpgradeabilityProxy(address common.Address, backend bind.ContractBackend) (*AdminUpgradeabilityProxy, error) {
	contract, err := bindAdminUpgradeabilityProxy(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AdminUpgradeabilityProxy{AdminUpgradeabilityProxyCaller: AdminUpgradeabilityProxyCaller{contract: contract}, AdminUpgradeabilityProxyTransactor: AdminUpgradeabilityProxyTransactor{contract: contract}, AdminUpgradeabilityProxyFilterer: AdminUpgradeabilityProxyFilterer{contract: contract}}, nil
}

// NewAdminUpgradeabilityProxyCaller creates a new read-only instance of AdminUpgradeabilityProxy, bound to a specific deployed contract.
func NewAdminUpgradeabilityProxyCaller(address common.Address, caller bind.ContractCaller) (*AdminUpgradeabilityProxyCaller, error) {
	contract, err := bindAdminUpgradeabilityProxy(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AdminUpgradeabilityProxyCaller{contract: contract}, nil
}

// NewAdminUpgradeabilityProxyTransactor creates a new write-only instance of AdminUpgradeabilityProxy, bound to a specific deployed contract.
func NewAdminUpgradeabilityProxyTransactor(address common.Address, transactor bind.ContractTransactor) (*AdminUpgradeabilityProxyTransactor, error) {
	contract, err := bindAdminUpgradeabilityProxy(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AdminUpgradeabilityProxyTransactor{contract: contract}, nil
}

// NewAdminUpgradeabilityProxyFilterer creates a new log filterer instance of AdminUpgradeabilityProxy, bound to a specific deployed contract.
func NewAdminUpgradeabilityProxyFilterer(address common.Address, filterer bind.ContractFilterer) (*AdminUpgradeabilityProxyFilterer, error) {
	contract, err := bindAdminUpgradeabilityProxy(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AdminUpgradeabilityProxyFilterer{contract: contract}, nil
}

// bindAdminUpgradeabilityProxy binds a generic wrapper to an already deployed contract.
func bindAdminUpgradeabilityProxy(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AdminUpgradeabilityProxyABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AdminUpgradeabilityProxy.Contract.AdminUpgradeabilityProxyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.Contract.AdminUpgradeabilityProxyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.Contract.AdminUpgradeabilityProxyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AdminUpgradeabilityProxy.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.Contract.contract.Transact(opts, method, params...)
}

// Admin is a paid mutator transaction binding the contract method 0xf851a440.
//
// Solidity: function admin() returns(address)
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyTransactor) Admin(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.contract.Transact(opts, "admin")
}

// Admin is a paid mutator transaction binding the contract method 0xf851a440.
//
// Solidity: function admin() returns(address)
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxySession) Admin() (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.Contract.Admin(&_AdminUpgradeabilityProxy.TransactOpts)
}

// Admin is a paid mutator transaction binding the contract method 0xf851a440.
//
// Solidity: function admin() returns(address)
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyTransactorSession) Admin() (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.Contract.Admin(&_AdminUpgradeabilityProxy.TransactOpts)
}

// ChangeAdmin is a paid mutator transaction binding the contract method 0x8f283970.
//
// Solidity: function changeAdmin(address newAdmin) returns()
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyTransactor) ChangeAdmin(opts *bind.TransactOpts, newAdmin common.Address) (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.contract.Transact(opts, "changeAdmin", newAdmin)
}

// ChangeAdmin is a paid mutator transaction binding the contract method 0x8f283970.
//
// Solidity: function changeAdmin(address newAdmin) returns()
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxySession) ChangeAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.Contract.ChangeAdmin(&_AdminUpgradeabilityProxy.TransactOpts, newAdmin)
}

// ChangeAdmin is a paid mutator transaction binding the contract method 0x8f283970.
//
// Solidity: function changeAdmin(address newAdmin) returns()
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyTransactorSession) ChangeAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.Contract.ChangeAdmin(&_AdminUpgradeabilityProxy.TransactOpts, newAdmin)
}

// Implementation is a paid mutator transaction binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() returns(address)
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyTransactor) Implementation(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.contract.Transact(opts, "implementation")
}

// Implementation is a paid mutator transaction binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() returns(address)
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxySession) Implementation() (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.Contract.Implementation(&_AdminUpgradeabilityProxy.TransactOpts)
}

// Implementation is a paid mutator transaction binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() returns(address)
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyTransactorSession) Implementation() (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.Contract.Implementation(&_AdminUpgradeabilityProxy.TransactOpts)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxySession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.Contract.UpgradeTo(&_AdminUpgradeabilityProxy.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.Contract.UpgradeTo(&_AdminUpgradeabilityProxy.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxySession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.Contract.UpgradeToAndCall(&_AdminUpgradeabilityProxy.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.Contract.UpgradeToAndCall(&_AdminUpgradeabilityProxy.TransactOpts, newImplementation, data)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxySession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.Contract.Fallback(&_AdminUpgradeabilityProxy.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.Contract.Fallback(&_AdminUpgradeabilityProxy.TransactOpts, calldata)
}

// AdminUpgradeabilityProxyAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the AdminUpgradeabilityProxy contract.
type AdminUpgradeabilityProxyAdminChangedIterator struct {
	Event *AdminUpgradeabilityProxyAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AdminUpgradeabilityProxyAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AdminUpgradeabilityProxyAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AdminUpgradeabilityProxyAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AdminUpgradeabilityProxyAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AdminUpgradeabilityProxyAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AdminUpgradeabilityProxyAdminChanged represents a AdminChanged event raised by the AdminUpgradeabilityProxy contract.
type AdminUpgradeabilityProxyAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*AdminUpgradeabilityProxyAdminChangedIterator, error) {

	logs, sub, err := _AdminUpgradeabilityProxy.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &AdminUpgradeabilityProxyAdminChangedIterator{contract: _AdminUpgradeabilityProxy.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *AdminUpgradeabilityProxyAdminChanged) (event.Subscription, error) {

	logs, sub, err := _AdminUpgradeabilityProxy.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AdminUpgradeabilityProxyAdminChanged)
				if err := _AdminUpgradeabilityProxy.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyFilterer) ParseAdminChanged(log types.Log) (*AdminUpgradeabilityProxyAdminChanged, error) {
	event := new(AdminUpgradeabilityProxyAdminChanged)
	if err := _AdminUpgradeabilityProxy.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AdminUpgradeabilityProxyUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the AdminUpgradeabilityProxy contract.
type AdminUpgradeabilityProxyUpgradedIterator struct {
	Event *AdminUpgradeabilityProxyUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AdminUpgradeabilityProxyUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AdminUpgradeabilityProxyUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AdminUpgradeabilityProxyUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AdminUpgradeabilityProxyUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AdminUpgradeabilityProxyUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AdminUpgradeabilityProxyUpgraded represents a Upgraded event raised by the AdminUpgradeabilityProxy contract.
type AdminUpgradeabilityProxyUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*AdminUpgradeabilityProxyUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _AdminUpgradeabilityProxy.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &AdminUpgradeabilityProxyUpgradedIterator{contract: _AdminUpgradeabilityProxy.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *AdminUpgradeabilityProxyUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _AdminUpgradeabilityProxy.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AdminUpgradeabilityProxyUpgraded)
				if err := _AdminUpgradeabilityProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyFilterer) ParseUpgraded(log types.Log) (*AdminUpgradeabilityProxyUpgraded, error) {
	event := new(AdminUpgradeabilityProxyUpgraded)
	if err := _AdminUpgradeabilityProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAdminUpgradeabilityProxyABI is the input ABI used to generate the binding from.
const BaseAdminUpgradeabilityProxyABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]"

// BaseAdminUpgradeabilityProxyBin is the compiled bytecode used for deploying new contracts.
var BaseAdminUpgradeabilityProxyBin = "0x608060405234801561001057600080fd5b50610652806100206000396000f3fe60806040526004361061004a5760003560e01c80633659cfe6146100545780634f1ef286146100875780635c60da1b146101075780638f28397014610138578063f851a4401461016b575b610052610180565b005b34801561006057600080fd5b506100526004803603602081101561007757600080fd5b50356001600160a01b031661019a565b6100526004803603604081101561009d57600080fd5b6001600160a01b0382351691908101906040810160208201356401000000008111156100c857600080fd5b8201836020820111156100da57600080fd5b803590602001918460018302840111640100000000831117156100fc57600080fd5b5090925090506101d4565b34801561011357600080fd5b5061011c610281565b604080516001600160a01b039092168252519081900360200190f35b34801561014457600080fd5b506100526004803603602081101561015b57600080fd5b50356001600160a01b03166102be565b34801561017757600080fd5b5061011c610378565b6101886103a3565b610198610193610403565b610428565b565b6101a261044c565b6001600160a01b0316336001600160a01b031614156101c9576101c481610471565b6101d1565b6101d1610180565b50565b6101dc61044c565b6001600160a01b0316336001600160a01b03161415610274576101fe83610471565b6000836001600160a01b031683836040518083838082843760405192019450600093509091505080830381855af49150503d806000811461025b576040519150601f19603f3d011682016040523d82523d6000602084013e610260565b606091505b505090508061026e57600080fd5b5061027c565b61027c610180565b505050565b600061028b61044c565b6001600160a01b0316336001600160a01b031614156102b3576102ac610403565b90506102bb565b6102bb610180565b90565b6102c661044c565b6001600160a01b0316336001600160a01b031614156101c9576001600160a01b0381166103245760405162461bcd60e51b81526004018080602001828103825260368152602001806105ac6036913960400191505060405180910390fd5b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f61034d61044c565b604080516001600160a01b03928316815291841660208301528051918290030190a16101c4816104b1565b600061038261044c565b6001600160a01b0316336001600160a01b031614156102b3576102ac61044c565b6103ab61044c565b6001600160a01b0316336001600160a01b031614156103fb5760405162461bcd60e51b815260040180806020018281038252603281526020018061057a6032913960400191505060405180910390fd5b610198610198565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b3660008037600080366000845af43d6000803e808015610447573d6000f35b3d6000fd5b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b61047a816104d5565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355565b6104de8161053d565b6105195760405162461bcd60e51b815260040180806020018281038252603b8152602001806105e2603b913960400191505060405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061057157508115155b94935050505056fe43616e6e6f742063616c6c2066616c6c6261636b2066756e6374696f6e2066726f6d207468652070726f78792061646d696e43616e6e6f74206368616e6765207468652061646d696e206f6620612070726f787920746f20746865207a65726f206164647265737343616e6e6f742073657420612070726f787920696d706c656d656e746174696f6e20746f2061206e6f6e2d636f6e74726163742061646472657373a2646970667358221220809bc327cb9d46ad344ead71fc7c83bacee8bc77b01455129f54e2e84495db2b64736f6c634300060c0033"

// DeployBaseAdminUpgradeabilityProxy deploys a new Ethereum contract, binding an instance of BaseAdminUpgradeabilityProxy to it.
func DeployBaseAdminUpgradeabilityProxy(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BaseAdminUpgradeabilityProxy, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseAdminUpgradeabilityProxyABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BaseAdminUpgradeabilityProxyBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseAdminUpgradeabilityProxy{BaseAdminUpgradeabilityProxyCaller: BaseAdminUpgradeabilityProxyCaller{contract: contract}, BaseAdminUpgradeabilityProxyTransactor: BaseAdminUpgradeabilityProxyTransactor{contract: contract}, BaseAdminUpgradeabilityProxyFilterer: BaseAdminUpgradeabilityProxyFilterer{contract: contract}}, nil
}

// BaseAdminUpgradeabilityProxy is an auto generated Go binding around an Ethereum contract.
type BaseAdminUpgradeabilityProxy struct {
	BaseAdminUpgradeabilityProxyCaller     // Read-only binding to the contract
	BaseAdminUpgradeabilityProxyTransactor // Write-only binding to the contract
	BaseAdminUpgradeabilityProxyFilterer   // Log filterer for contract events
}

// BaseAdminUpgradeabilityProxyCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseAdminUpgradeabilityProxyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAdminUpgradeabilityProxyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseAdminUpgradeabilityProxyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAdminUpgradeabilityProxyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseAdminUpgradeabilityProxyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAdminUpgradeabilityProxySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseAdminUpgradeabilityProxySession struct {
	Contract     *BaseAdminUpgradeabilityProxy // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                 // Call options to use throughout this session
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// BaseAdminUpgradeabilityProxyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseAdminUpgradeabilityProxyCallerSession struct {
	Contract *BaseAdminUpgradeabilityProxyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                       // Call options to use throughout this session
}

// BaseAdminUpgradeabilityProxyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseAdminUpgradeabilityProxyTransactorSession struct {
	Contract     *BaseAdminUpgradeabilityProxyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                       // Transaction auth options to use throughout this session
}

// BaseAdminUpgradeabilityProxyRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseAdminUpgradeabilityProxyRaw struct {
	Contract *BaseAdminUpgradeabilityProxy // Generic contract binding to access the raw methods on
}

// BaseAdminUpgradeabilityProxyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseAdminUpgradeabilityProxyCallerRaw struct {
	Contract *BaseAdminUpgradeabilityProxyCaller // Generic read-only contract binding to access the raw methods on
}

// BaseAdminUpgradeabilityProxyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseAdminUpgradeabilityProxyTransactorRaw struct {
	Contract *BaseAdminUpgradeabilityProxyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseAdminUpgradeabilityProxy creates a new instance of BaseAdminUpgradeabilityProxy, bound to a specific deployed contract.
func NewBaseAdminUpgradeabilityProxy(address common.Address, backend bind.ContractBackend) (*BaseAdminUpgradeabilityProxy, error) {
	contract, err := bindBaseAdminUpgradeabilityProxy(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseAdminUpgradeabilityProxy{BaseAdminUpgradeabilityProxyCaller: BaseAdminUpgradeabilityProxyCaller{contract: contract}, BaseAdminUpgradeabilityProxyTransactor: BaseAdminUpgradeabilityProxyTransactor{contract: contract}, BaseAdminUpgradeabilityProxyFilterer: BaseAdminUpgradeabilityProxyFilterer{contract: contract}}, nil
}

// NewBaseAdminUpgradeabilityProxyCaller creates a new read-only instance of BaseAdminUpgradeabilityProxy, bound to a specific deployed contract.
func NewBaseAdminUpgradeabilityProxyCaller(address common.Address, caller bind.ContractCaller) (*BaseAdminUpgradeabilityProxyCaller, error) {
	contract, err := bindBaseAdminUpgradeabilityProxy(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseAdminUpgradeabilityProxyCaller{contract: contract}, nil
}

// NewBaseAdminUpgradeabilityProxyTransactor creates a new write-only instance of BaseAdminUpgradeabilityProxy, bound to a specific deployed contract.
func NewBaseAdminUpgradeabilityProxyTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseAdminUpgradeabilityProxyTransactor, error) {
	contract, err := bindBaseAdminUpgradeabilityProxy(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseAdminUpgradeabilityProxyTransactor{contract: contract}, nil
}

// NewBaseAdminUpgradeabilityProxyFilterer creates a new log filterer instance of BaseAdminUpgradeabilityProxy, bound to a specific deployed contract.
func NewBaseAdminUpgradeabilityProxyFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseAdminUpgradeabilityProxyFilterer, error) {
	contract, err := bindBaseAdminUpgradeabilityProxy(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseAdminUpgradeabilityProxyFilterer{contract: contract}, nil
}

// bindBaseAdminUpgradeabilityProxy binds a generic wrapper to an already deployed contract.
func bindBaseAdminUpgradeabilityProxy(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseAdminUpgradeabilityProxyABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BaseAdminUpgradeabilityProxy.Contract.BaseAdminUpgradeabilityProxyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.Contract.BaseAdminUpgradeabilityProxyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.Contract.BaseAdminUpgradeabilityProxyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BaseAdminUpgradeabilityProxy.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.Contract.contract.Transact(opts, method, params...)
}

// Admin is a paid mutator transaction binding the contract method 0xf851a440.
//
// Solidity: function admin() returns(address)
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyTransactor) Admin(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.contract.Transact(opts, "admin")
}

// Admin is a paid mutator transaction binding the contract method 0xf851a440.
//
// Solidity: function admin() returns(address)
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxySession) Admin() (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.Contract.Admin(&_BaseAdminUpgradeabilityProxy.TransactOpts)
}

// Admin is a paid mutator transaction binding the contract method 0xf851a440.
//
// Solidity: function admin() returns(address)
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyTransactorSession) Admin() (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.Contract.Admin(&_BaseAdminUpgradeabilityProxy.TransactOpts)
}

// ChangeAdmin is a paid mutator transaction binding the contract method 0x8f283970.
//
// Solidity: function changeAdmin(address newAdmin) returns()
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyTransactor) ChangeAdmin(opts *bind.TransactOpts, newAdmin common.Address) (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.contract.Transact(opts, "changeAdmin", newAdmin)
}

// ChangeAdmin is a paid mutator transaction binding the contract method 0x8f283970.
//
// Solidity: function changeAdmin(address newAdmin) returns()
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxySession) ChangeAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.Contract.ChangeAdmin(&_BaseAdminUpgradeabilityProxy.TransactOpts, newAdmin)
}

// ChangeAdmin is a paid mutator transaction binding the contract method 0x8f283970.
//
// Solidity: function changeAdmin(address newAdmin) returns()
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyTransactorSession) ChangeAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.Contract.ChangeAdmin(&_BaseAdminUpgradeabilityProxy.TransactOpts, newAdmin)
}

// Implementation is a paid mutator transaction binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() returns(address)
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyTransactor) Implementation(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.contract.Transact(opts, "implementation")
}

// Implementation is a paid mutator transaction binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() returns(address)
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxySession) Implementation() (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.Contract.Implementation(&_BaseAdminUpgradeabilityProxy.TransactOpts)
}

// Implementation is a paid mutator transaction binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() returns(address)
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyTransactorSession) Implementation() (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.Contract.Implementation(&_BaseAdminUpgradeabilityProxy.TransactOpts)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxySession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.Contract.UpgradeTo(&_BaseAdminUpgradeabilityProxy.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.Contract.UpgradeTo(&_BaseAdminUpgradeabilityProxy.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxySession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.Contract.UpgradeToAndCall(&_BaseAdminUpgradeabilityProxy.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.Contract.UpgradeToAndCall(&_BaseAdminUpgradeabilityProxy.TransactOpts, newImplementation, data)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxySession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.Contract.Fallback(&_BaseAdminUpgradeabilityProxy.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.Contract.Fallback(&_BaseAdminUpgradeabilityProxy.TransactOpts, calldata)
}

// BaseAdminUpgradeabilityProxyAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the BaseAdminUpgradeabilityProxy contract.
type BaseAdminUpgradeabilityProxyAdminChangedIterator struct {
	Event *BaseAdminUpgradeabilityProxyAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAdminUpgradeabilityProxyAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAdminUpgradeabilityProxyAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAdminUpgradeabilityProxyAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAdminUpgradeabilityProxyAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAdminUpgradeabilityProxyAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAdminUpgradeabilityProxyAdminChanged represents a AdminChanged event raised by the BaseAdminUpgradeabilityProxy contract.
type BaseAdminUpgradeabilityProxyAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*BaseAdminUpgradeabilityProxyAdminChangedIterator, error) {

	logs, sub, err := _BaseAdminUpgradeabilityProxy.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &BaseAdminUpgradeabilityProxyAdminChangedIterator{contract: _BaseAdminUpgradeabilityProxy.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *BaseAdminUpgradeabilityProxyAdminChanged) (event.Subscription, error) {

	logs, sub, err := _BaseAdminUpgradeabilityProxy.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAdminUpgradeabilityProxyAdminChanged)
				if err := _BaseAdminUpgradeabilityProxy.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyFilterer) ParseAdminChanged(log types.Log) (*BaseAdminUpgradeabilityProxyAdminChanged, error) {
	event := new(BaseAdminUpgradeabilityProxyAdminChanged)
	if err := _BaseAdminUpgradeabilityProxy.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAdminUpgradeabilityProxyUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the BaseAdminUpgradeabilityProxy contract.
type BaseAdminUpgradeabilityProxyUpgradedIterator struct {
	Event *BaseAdminUpgradeabilityProxyUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAdminUpgradeabilityProxyUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAdminUpgradeabilityProxyUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAdminUpgradeabilityProxyUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAdminUpgradeabilityProxyUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAdminUpgradeabilityProxyUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAdminUpgradeabilityProxyUpgraded represents a Upgraded event raised by the BaseAdminUpgradeabilityProxy contract.
type BaseAdminUpgradeabilityProxyUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*BaseAdminUpgradeabilityProxyUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _BaseAdminUpgradeabilityProxy.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &BaseAdminUpgradeabilityProxyUpgradedIterator{contract: _BaseAdminUpgradeabilityProxy.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *BaseAdminUpgradeabilityProxyUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _BaseAdminUpgradeabilityProxy.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAdminUpgradeabilityProxyUpgraded)
				if err := _BaseAdminUpgradeabilityProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyFilterer) ParseUpgraded(log types.Log) (*BaseAdminUpgradeabilityProxyUpgraded, error) {
	event := new(BaseAdminUpgradeabilityProxyUpgraded)
	if err := _BaseAdminUpgradeabilityProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseImmutableAdminUpgradeabilityProxyABI is the input ABI used to generate the binding from.
const BaseImmutableAdminUpgradeabilityProxyABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]"

// BaseImmutableAdminUpgradeabilityProxyBin is the compiled bytecode used for deploying new contracts.
var BaseImmutableAdminUpgradeabilityProxyBin = "0x60a060405234801561001057600080fd5b506040516105ca3803806105ca8339818101604052602081101561003357600080fd5b5051606081901b6001600160601b0319166080526001600160a01b031661054a6100806000398061016752806101b1528061027052806102bd52806102e65280610315525061054a6000f3fe60806040526004361061003f5760003560e01c80633659cfe6146100495780634f1ef2861461007c5780635c60da1b146100fc578063f851a4401461012d575b610047610142565b005b34801561005557600080fd5b506100476004803603602081101561006c57600080fd5b50356001600160a01b031661015c565b6100476004803603604081101561009257600080fd5b6001600160a01b0382351691908101906040810160208201356401000000008111156100bd57600080fd5b8201836020820111156100cf57600080fd5b803590602001918460018302840111640100000000831117156100f157600080fd5b5090925090506101a6565b34801561010857600080fd5b50610111610263565b604080516001600160a01b039092168252519081900360200190f35b34801561013957600080fd5b506101116102b0565b61014a61030a565b61015a61015561037a565b61039f565b565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561019b57610196816103c3565b6101a3565b6101a3610142565b50565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610256576101e0836103c3565b6000836001600160a01b031683836040518083838082843760405192019450600093509091505080830381855af49150503d806000811461023d576040519150601f19603f3d011682016040523d82523d6000602084013e610242565b606091505b505090508061025057600080fd5b5061025e565b61025e610142565b505050565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156102a55761029e61037a565b90506102ad565b6102ad610142565b90565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156102a557507f00000000000000000000000000000000000000000000000000000000000000006102ad565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156103725760405162461bcd60e51b81526004018080602001828103825260328152602001806104a86032913960400191505060405180910390fd5b61015a61015a565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b3660008037600080366000845af43d6000803e8080156103be573d6000f35b3d6000fd5b6103cc81610403565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b61040c8161046b565b6104475760405162461bcd60e51b815260040180806020018281038252603b8152602001806104da603b913960400191505060405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061049f57508115155b94935050505056fe43616e6e6f742063616c6c2066616c6c6261636b2066756e6374696f6e2066726f6d207468652070726f78792061646d696e43616e6e6f742073657420612070726f787920696d706c656d656e746174696f6e20746f2061206e6f6e2d636f6e74726163742061646472657373a264697066735822122013ca3c0ed26db10d1853aec6562f3fdd65da23df2455f57382bd6505151e0af264736f6c634300060c0033"

// DeployBaseImmutableAdminUpgradeabilityProxy deploys a new Ethereum contract, binding an instance of BaseImmutableAdminUpgradeabilityProxy to it.
func DeployBaseImmutableAdminUpgradeabilityProxy(auth *bind.TransactOpts, backend bind.ContractBackend, admin common.Address) (common.Address, *types.Transaction, *BaseImmutableAdminUpgradeabilityProxy, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseImmutableAdminUpgradeabilityProxyABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BaseImmutableAdminUpgradeabilityProxyBin), backend, admin)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseImmutableAdminUpgradeabilityProxy{BaseImmutableAdminUpgradeabilityProxyCaller: BaseImmutableAdminUpgradeabilityProxyCaller{contract: contract}, BaseImmutableAdminUpgradeabilityProxyTransactor: BaseImmutableAdminUpgradeabilityProxyTransactor{contract: contract}, BaseImmutableAdminUpgradeabilityProxyFilterer: BaseImmutableAdminUpgradeabilityProxyFilterer{contract: contract}}, nil
}

// BaseImmutableAdminUpgradeabilityProxy is an auto generated Go binding around an Ethereum contract.
type BaseImmutableAdminUpgradeabilityProxy struct {
	BaseImmutableAdminUpgradeabilityProxyCaller     // Read-only binding to the contract
	BaseImmutableAdminUpgradeabilityProxyTransactor // Write-only binding to the contract
	BaseImmutableAdminUpgradeabilityProxyFilterer   // Log filterer for contract events
}

// BaseImmutableAdminUpgradeabilityProxyCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseImmutableAdminUpgradeabilityProxyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseImmutableAdminUpgradeabilityProxyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseImmutableAdminUpgradeabilityProxyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseImmutableAdminUpgradeabilityProxyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseImmutableAdminUpgradeabilityProxyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseImmutableAdminUpgradeabilityProxySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseImmutableAdminUpgradeabilityProxySession struct {
	Contract     *BaseImmutableAdminUpgradeabilityProxy // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                          // Call options to use throughout this session
	TransactOpts bind.TransactOpts                      // Transaction auth options to use throughout this session
}

// BaseImmutableAdminUpgradeabilityProxyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseImmutableAdminUpgradeabilityProxyCallerSession struct {
	Contract *BaseImmutableAdminUpgradeabilityProxyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                                // Call options to use throughout this session
}

// BaseImmutableAdminUpgradeabilityProxyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseImmutableAdminUpgradeabilityProxyTransactorSession struct {
	Contract     *BaseImmutableAdminUpgradeabilityProxyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                                // Transaction auth options to use throughout this session
}

// BaseImmutableAdminUpgradeabilityProxyRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseImmutableAdminUpgradeabilityProxyRaw struct {
	Contract *BaseImmutableAdminUpgradeabilityProxy // Generic contract binding to access the raw methods on
}

// BaseImmutableAdminUpgradeabilityProxyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseImmutableAdminUpgradeabilityProxyCallerRaw struct {
	Contract *BaseImmutableAdminUpgradeabilityProxyCaller // Generic read-only contract binding to access the raw methods on
}

// BaseImmutableAdminUpgradeabilityProxyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseImmutableAdminUpgradeabilityProxyTransactorRaw struct {
	Contract *BaseImmutableAdminUpgradeabilityProxyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseImmutableAdminUpgradeabilityProxy creates a new instance of BaseImmutableAdminUpgradeabilityProxy, bound to a specific deployed contract.
func NewBaseImmutableAdminUpgradeabilityProxy(address common.Address, backend bind.ContractBackend) (*BaseImmutableAdminUpgradeabilityProxy, error) {
	contract, err := bindBaseImmutableAdminUpgradeabilityProxy(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseImmutableAdminUpgradeabilityProxy{BaseImmutableAdminUpgradeabilityProxyCaller: BaseImmutableAdminUpgradeabilityProxyCaller{contract: contract}, BaseImmutableAdminUpgradeabilityProxyTransactor: BaseImmutableAdminUpgradeabilityProxyTransactor{contract: contract}, BaseImmutableAdminUpgradeabilityProxyFilterer: BaseImmutableAdminUpgradeabilityProxyFilterer{contract: contract}}, nil
}

// NewBaseImmutableAdminUpgradeabilityProxyCaller creates a new read-only instance of BaseImmutableAdminUpgradeabilityProxy, bound to a specific deployed contract.
func NewBaseImmutableAdminUpgradeabilityProxyCaller(address common.Address, caller bind.ContractCaller) (*BaseImmutableAdminUpgradeabilityProxyCaller, error) {
	contract, err := bindBaseImmutableAdminUpgradeabilityProxy(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseImmutableAdminUpgradeabilityProxyCaller{contract: contract}, nil
}

// NewBaseImmutableAdminUpgradeabilityProxyTransactor creates a new write-only instance of BaseImmutableAdminUpgradeabilityProxy, bound to a specific deployed contract.
func NewBaseImmutableAdminUpgradeabilityProxyTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseImmutableAdminUpgradeabilityProxyTransactor, error) {
	contract, err := bindBaseImmutableAdminUpgradeabilityProxy(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseImmutableAdminUpgradeabilityProxyTransactor{contract: contract}, nil
}

// NewBaseImmutableAdminUpgradeabilityProxyFilterer creates a new log filterer instance of BaseImmutableAdminUpgradeabilityProxy, bound to a specific deployed contract.
func NewBaseImmutableAdminUpgradeabilityProxyFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseImmutableAdminUpgradeabilityProxyFilterer, error) {
	contract, err := bindBaseImmutableAdminUpgradeabilityProxy(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseImmutableAdminUpgradeabilityProxyFilterer{contract: contract}, nil
}

// bindBaseImmutableAdminUpgradeabilityProxy binds a generic wrapper to an already deployed contract.
func bindBaseImmutableAdminUpgradeabilityProxy(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseImmutableAdminUpgradeabilityProxyABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseImmutableAdminUpgradeabilityProxy *BaseImmutableAdminUpgradeabilityProxyRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BaseImmutableAdminUpgradeabilityProxy.Contract.BaseImmutableAdminUpgradeabilityProxyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseImmutableAdminUpgradeabilityProxy *BaseImmutableAdminUpgradeabilityProxyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseImmutableAdminUpgradeabilityProxy.Contract.BaseImmutableAdminUpgradeabilityProxyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseImmutableAdminUpgradeabilityProxy *BaseImmutableAdminUpgradeabilityProxyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseImmutableAdminUpgradeabilityProxy.Contract.BaseImmutableAdminUpgradeabilityProxyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseImmutableAdminUpgradeabilityProxy *BaseImmutableAdminUpgradeabilityProxyCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BaseImmutableAdminUpgradeabilityProxy.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseImmutableAdminUpgradeabilityProxy *BaseImmutableAdminUpgradeabilityProxyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseImmutableAdminUpgradeabilityProxy.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseImmutableAdminUpgradeabilityProxy *BaseImmutableAdminUpgradeabilityProxyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseImmutableAdminUpgradeabilityProxy.Contract.contract.Transact(opts, method, params...)
}

// Admin is a paid mutator transaction binding the contract method 0xf851a440.
//
// Solidity: function admin() returns(address)
func (_BaseImmutableAdminUpgradeabilityProxy *BaseImmutableAdminUpgradeabilityProxyTransactor) Admin(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseImmutableAdminUpgradeabilityProxy.contract.Transact(opts, "admin")
}

// Admin is a paid mutator transaction binding the contract method 0xf851a440.
//
// Solidity: function admin() returns(address)
func (_BaseImmutableAdminUpgradeabilityProxy *BaseImmutableAdminUpgradeabilityProxySession) Admin() (*types.Transaction, error) {
	return _BaseImmutableAdminUpgradeabilityProxy.Contract.Admin(&_BaseImmutableAdminUpgradeabilityProxy.TransactOpts)
}

// Admin is a paid mutator transaction binding the contract method 0xf851a440.
//
// Solidity: function admin() returns(address)
func (_BaseImmutableAdminUpgradeabilityProxy *BaseImmutableAdminUpgradeabilityProxyTransactorSession) Admin() (*types.Transaction, error) {
	return _BaseImmutableAdminUpgradeabilityProxy.Contract.Admin(&_BaseImmutableAdminUpgradeabilityProxy.TransactOpts)
}

// Implementation is a paid mutator transaction binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() returns(address)
func (_BaseImmutableAdminUpgradeabilityProxy *BaseImmutableAdminUpgradeabilityProxyTransactor) Implementation(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseImmutableAdminUpgradeabilityProxy.contract.Transact(opts, "implementation")
}

// Implementation is a paid mutator transaction binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() returns(address)
func (_BaseImmutableAdminUpgradeabilityProxy *BaseImmutableAdminUpgradeabilityProxySession) Implementation() (*types.Transaction, error) {
	return _BaseImmutableAdminUpgradeabilityProxy.Contract.Implementation(&_BaseImmutableAdminUpgradeabilityProxy.TransactOpts)
}

// Implementation is a paid mutator transaction binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() returns(address)
func (_BaseImmutableAdminUpgradeabilityProxy *BaseImmutableAdminUpgradeabilityProxyTransactorSession) Implementation() (*types.Transaction, error) {
	return _BaseImmutableAdminUpgradeabilityProxy.Contract.Implementation(&_BaseImmutableAdminUpgradeabilityProxy.TransactOpts)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_BaseImmutableAdminUpgradeabilityProxy *BaseImmutableAdminUpgradeabilityProxyTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _BaseImmutableAdminUpgradeabilityProxy.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_BaseImmutableAdminUpgradeabilityProxy *BaseImmutableAdminUpgradeabilityProxySession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _BaseImmutableAdminUpgradeabilityProxy.Contract.UpgradeTo(&_BaseImmutableAdminUpgradeabilityProxy.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_BaseImmutableAdminUpgradeabilityProxy *BaseImmutableAdminUpgradeabilityProxyTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _BaseImmutableAdminUpgradeabilityProxy.Contract.UpgradeTo(&_BaseImmutableAdminUpgradeabilityProxy.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_BaseImmutableAdminUpgradeabilityProxy *BaseImmutableAdminUpgradeabilityProxyTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _BaseImmutableAdminUpgradeabilityProxy.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_BaseImmutableAdminUpgradeabilityProxy *BaseImmutableAdminUpgradeabilityProxySession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _BaseImmutableAdminUpgradeabilityProxy.Contract.UpgradeToAndCall(&_BaseImmutableAdminUpgradeabilityProxy.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_BaseImmutableAdminUpgradeabilityProxy *BaseImmutableAdminUpgradeabilityProxyTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _BaseImmutableAdminUpgradeabilityProxy.Contract.UpgradeToAndCall(&_BaseImmutableAdminUpgradeabilityProxy.TransactOpts, newImplementation, data)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BaseImmutableAdminUpgradeabilityProxy *BaseImmutableAdminUpgradeabilityProxyTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _BaseImmutableAdminUpgradeabilityProxy.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BaseImmutableAdminUpgradeabilityProxy *BaseImmutableAdminUpgradeabilityProxySession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _BaseImmutableAdminUpgradeabilityProxy.Contract.Fallback(&_BaseImmutableAdminUpgradeabilityProxy.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BaseImmutableAdminUpgradeabilityProxy *BaseImmutableAdminUpgradeabilityProxyTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _BaseImmutableAdminUpgradeabilityProxy.Contract.Fallback(&_BaseImmutableAdminUpgradeabilityProxy.TransactOpts, calldata)
}

// BaseImmutableAdminUpgradeabilityProxyUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the BaseImmutableAdminUpgradeabilityProxy contract.
type BaseImmutableAdminUpgradeabilityProxyUpgradedIterator struct {
	Event *BaseImmutableAdminUpgradeabilityProxyUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseImmutableAdminUpgradeabilityProxyUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseImmutableAdminUpgradeabilityProxyUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseImmutableAdminUpgradeabilityProxyUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseImmutableAdminUpgradeabilityProxyUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseImmutableAdminUpgradeabilityProxyUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseImmutableAdminUpgradeabilityProxyUpgraded represents a Upgraded event raised by the BaseImmutableAdminUpgradeabilityProxy contract.
type BaseImmutableAdminUpgradeabilityProxyUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_BaseImmutableAdminUpgradeabilityProxy *BaseImmutableAdminUpgradeabilityProxyFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*BaseImmutableAdminUpgradeabilityProxyUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _BaseImmutableAdminUpgradeabilityProxy.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &BaseImmutableAdminUpgradeabilityProxyUpgradedIterator{contract: _BaseImmutableAdminUpgradeabilityProxy.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_BaseImmutableAdminUpgradeabilityProxy *BaseImmutableAdminUpgradeabilityProxyFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *BaseImmutableAdminUpgradeabilityProxyUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _BaseImmutableAdminUpgradeabilityProxy.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseImmutableAdminUpgradeabilityProxyUpgraded)
				if err := _BaseImmutableAdminUpgradeabilityProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_BaseImmutableAdminUpgradeabilityProxy *BaseImmutableAdminUpgradeabilityProxyFilterer) ParseUpgraded(log types.Log) (*BaseImmutableAdminUpgradeabilityProxyUpgraded, error) {
	event := new(BaseImmutableAdminUpgradeabilityProxyUpgraded)
	if err := _BaseImmutableAdminUpgradeabilityProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseUpgradeabilityProxyABI is the input ABI used to generate the binding from.
const BaseUpgradeabilityProxyABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"}]"

// BaseUpgradeabilityProxyBin is the compiled bytecode used for deploying new contracts.
var BaseUpgradeabilityProxyBin = "0x6080604052348015600f57600080fd5b50609e8061001e6000396000f3fe6080604052600a600c565b005b6012601e565b601e601a6020565b6045565b565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b3660008037600080366000845af43d6000803e8080156063573d6000f35b3d6000fdfea2646970667358221220f14d8f82444ff46619d31c47eab7f49eb6953dcfb1119d1bde2692c511f9b3ce64736f6c634300060c0033"

// DeployBaseUpgradeabilityProxy deploys a new Ethereum contract, binding an instance of BaseUpgradeabilityProxy to it.
func DeployBaseUpgradeabilityProxy(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BaseUpgradeabilityProxy, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseUpgradeabilityProxyABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BaseUpgradeabilityProxyBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseUpgradeabilityProxy{BaseUpgradeabilityProxyCaller: BaseUpgradeabilityProxyCaller{contract: contract}, BaseUpgradeabilityProxyTransactor: BaseUpgradeabilityProxyTransactor{contract: contract}, BaseUpgradeabilityProxyFilterer: BaseUpgradeabilityProxyFilterer{contract: contract}}, nil
}

// BaseUpgradeabilityProxy is an auto generated Go binding around an Ethereum contract.
type BaseUpgradeabilityProxy struct {
	BaseUpgradeabilityProxyCaller     // Read-only binding to the contract
	BaseUpgradeabilityProxyTransactor // Write-only binding to the contract
	BaseUpgradeabilityProxyFilterer   // Log filterer for contract events
}

// BaseUpgradeabilityProxyCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseUpgradeabilityProxyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseUpgradeabilityProxyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseUpgradeabilityProxyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseUpgradeabilityProxyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseUpgradeabilityProxyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseUpgradeabilityProxySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseUpgradeabilityProxySession struct {
	Contract     *BaseUpgradeabilityProxy // Generic contract binding to set the session for
	CallOpts     bind.CallOpts            // Call options to use throughout this session
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// BaseUpgradeabilityProxyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseUpgradeabilityProxyCallerSession struct {
	Contract *BaseUpgradeabilityProxyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                  // Call options to use throughout this session
}

// BaseUpgradeabilityProxyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseUpgradeabilityProxyTransactorSession struct {
	Contract     *BaseUpgradeabilityProxyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                  // Transaction auth options to use throughout this session
}

// BaseUpgradeabilityProxyRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseUpgradeabilityProxyRaw struct {
	Contract *BaseUpgradeabilityProxy // Generic contract binding to access the raw methods on
}

// BaseUpgradeabilityProxyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseUpgradeabilityProxyCallerRaw struct {
	Contract *BaseUpgradeabilityProxyCaller // Generic read-only contract binding to access the raw methods on
}

// BaseUpgradeabilityProxyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseUpgradeabilityProxyTransactorRaw struct {
	Contract *BaseUpgradeabilityProxyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseUpgradeabilityProxy creates a new instance of BaseUpgradeabilityProxy, bound to a specific deployed contract.
func NewBaseUpgradeabilityProxy(address common.Address, backend bind.ContractBackend) (*BaseUpgradeabilityProxy, error) {
	contract, err := bindBaseUpgradeabilityProxy(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseUpgradeabilityProxy{BaseUpgradeabilityProxyCaller: BaseUpgradeabilityProxyCaller{contract: contract}, BaseUpgradeabilityProxyTransactor: BaseUpgradeabilityProxyTransactor{contract: contract}, BaseUpgradeabilityProxyFilterer: BaseUpgradeabilityProxyFilterer{contract: contract}}, nil
}

// NewBaseUpgradeabilityProxyCaller creates a new read-only instance of BaseUpgradeabilityProxy, bound to a specific deployed contract.
func NewBaseUpgradeabilityProxyCaller(address common.Address, caller bind.ContractCaller) (*BaseUpgradeabilityProxyCaller, error) {
	contract, err := bindBaseUpgradeabilityProxy(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseUpgradeabilityProxyCaller{contract: contract}, nil
}

// NewBaseUpgradeabilityProxyTransactor creates a new write-only instance of BaseUpgradeabilityProxy, bound to a specific deployed contract.
func NewBaseUpgradeabilityProxyTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseUpgradeabilityProxyTransactor, error) {
	contract, err := bindBaseUpgradeabilityProxy(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseUpgradeabilityProxyTransactor{contract: contract}, nil
}

// NewBaseUpgradeabilityProxyFilterer creates a new log filterer instance of BaseUpgradeabilityProxy, bound to a specific deployed contract.
func NewBaseUpgradeabilityProxyFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseUpgradeabilityProxyFilterer, error) {
	contract, err := bindBaseUpgradeabilityProxy(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseUpgradeabilityProxyFilterer{contract: contract}, nil
}

// bindBaseUpgradeabilityProxy binds a generic wrapper to an already deployed contract.
func bindBaseUpgradeabilityProxy(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseUpgradeabilityProxyABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseUpgradeabilityProxy *BaseUpgradeabilityProxyRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BaseUpgradeabilityProxy.Contract.BaseUpgradeabilityProxyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseUpgradeabilityProxy *BaseUpgradeabilityProxyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseUpgradeabilityProxy.Contract.BaseUpgradeabilityProxyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseUpgradeabilityProxy *BaseUpgradeabilityProxyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseUpgradeabilityProxy.Contract.BaseUpgradeabilityProxyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseUpgradeabilityProxy *BaseUpgradeabilityProxyCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BaseUpgradeabilityProxy.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseUpgradeabilityProxy *BaseUpgradeabilityProxyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseUpgradeabilityProxy.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseUpgradeabilityProxy *BaseUpgradeabilityProxyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseUpgradeabilityProxy.Contract.contract.Transact(opts, method, params...)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BaseUpgradeabilityProxy *BaseUpgradeabilityProxyTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _BaseUpgradeabilityProxy.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BaseUpgradeabilityProxy *BaseUpgradeabilityProxySession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _BaseUpgradeabilityProxy.Contract.Fallback(&_BaseUpgradeabilityProxy.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BaseUpgradeabilityProxy *BaseUpgradeabilityProxyTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _BaseUpgradeabilityProxy.Contract.Fallback(&_BaseUpgradeabilityProxy.TransactOpts, calldata)
}

// BaseUpgradeabilityProxyUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the BaseUpgradeabilityProxy contract.
type BaseUpgradeabilityProxyUpgradedIterator struct {
	Event *BaseUpgradeabilityProxyUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseUpgradeabilityProxyUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseUpgradeabilityProxyUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseUpgradeabilityProxyUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseUpgradeabilityProxyUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseUpgradeabilityProxyUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseUpgradeabilityProxyUpgraded represents a Upgraded event raised by the BaseUpgradeabilityProxy contract.
type BaseUpgradeabilityProxyUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_BaseUpgradeabilityProxy *BaseUpgradeabilityProxyFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*BaseUpgradeabilityProxyUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _BaseUpgradeabilityProxy.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &BaseUpgradeabilityProxyUpgradedIterator{contract: _BaseUpgradeabilityProxy.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_BaseUpgradeabilityProxy *BaseUpgradeabilityProxyFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *BaseUpgradeabilityProxyUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _BaseUpgradeabilityProxy.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseUpgradeabilityProxyUpgraded)
				if err := _BaseUpgradeabilityProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_BaseUpgradeabilityProxy *BaseUpgradeabilityProxyFilterer) ParseUpgraded(log types.Log) (*BaseUpgradeabilityProxyUpgraded, error) {
	event := new(BaseUpgradeabilityProxyUpgraded)
	if err := _BaseUpgradeabilityProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContextABI is the input ABI used to generate the binding from.
const ContextABI = "[]"

// Context is an auto generated Go binding around an Ethereum contract.
type Context struct {
	ContextCaller     // Read-only binding to the contract
	ContextTransactor // Write-only binding to the contract
	ContextFilterer   // Log filterer for contract events
}

// ContextCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContextCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContextTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContextTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContextFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContextFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContextSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContextSession struct {
	Contract     *Context          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContextCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContextCallerSession struct {
	Contract *ContextCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// ContextTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContextTransactorSession struct {
	Contract     *ContextTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ContextRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContextRaw struct {
	Contract *Context // Generic contract binding to access the raw methods on
}

// ContextCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContextCallerRaw struct {
	Contract *ContextCaller // Generic read-only contract binding to access the raw methods on
}

// ContextTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContextTransactorRaw struct {
	Contract *ContextTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContext creates a new instance of Context, bound to a specific deployed contract.
func NewContext(address common.Address, backend bind.ContractBackend) (*Context, error) {
	contract, err := bindContext(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Context{ContextCaller: ContextCaller{contract: contract}, ContextTransactor: ContextTransactor{contract: contract}, ContextFilterer: ContextFilterer{contract: contract}}, nil
}

// NewContextCaller creates a new read-only instance of Context, bound to a specific deployed contract.
func NewContextCaller(address common.Address, caller bind.ContractCaller) (*ContextCaller, error) {
	contract, err := bindContext(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContextCaller{contract: contract}, nil
}

// NewContextTransactor creates a new write-only instance of Context, bound to a specific deployed contract.
func NewContextTransactor(address common.Address, transactor bind.ContractTransactor) (*ContextTransactor, error) {
	contract, err := bindContext(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContextTransactor{contract: contract}, nil
}

// NewContextFilterer creates a new log filterer instance of Context, bound to a specific deployed contract.
func NewContextFilterer(address common.Address, filterer bind.ContractFilterer) (*ContextFilterer, error) {
	contract, err := bindContext(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContextFilterer{contract: contract}, nil
}

// bindContext binds a generic wrapper to an already deployed contract.
func bindContext(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ContextABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Context *ContextRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Context.Contract.ContextCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Context *ContextRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Context.Contract.ContextTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Context *ContextRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Context.Contract.ContextTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Context *ContextCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Context.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Context *ContextTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Context.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Context *ContextTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Context.Contract.contract.Transact(opts, method, params...)
}

// DataTypesABI is the input ABI used to generate the binding from.
const DataTypesABI = "[]"

// DataTypesBin is the compiled bytecode used for deploying new contracts.
var DataTypesBin = "0x60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201b35a84a0bf2e323e173e26325d5ef47e64eca427a888f00119d137614a2790664736f6c634300060c0033"

// DeployDataTypes deploys a new Ethereum contract, binding an instance of DataTypes to it.
func DeployDataTypes(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *DataTypes, error) {
	parsed, err := abi.JSON(strings.NewReader(DataTypesABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(DataTypesBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DataTypes{DataTypesCaller: DataTypesCaller{contract: contract}, DataTypesTransactor: DataTypesTransactor{contract: contract}, DataTypesFilterer: DataTypesFilterer{contract: contract}}, nil
}

// DataTypes is an auto generated Go binding around an Ethereum contract.
type DataTypes struct {
	DataTypesCaller     // Read-only binding to the contract
	DataTypesTransactor // Write-only binding to the contract
	DataTypesFilterer   // Log filterer for contract events
}

// DataTypesCaller is an auto generated read-only Go binding around an Ethereum contract.
type DataTypesCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DataTypesTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DataTypesTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DataTypesFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DataTypesFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DataTypesSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DataTypesSession struct {
	Contract     *DataTypes        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DataTypesCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DataTypesCallerSession struct {
	Contract *DataTypesCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// DataTypesTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DataTypesTransactorSession struct {
	Contract     *DataTypesTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// DataTypesRaw is an auto generated low-level Go binding around an Ethereum contract.
type DataTypesRaw struct {
	Contract *DataTypes // Generic contract binding to access the raw methods on
}

// DataTypesCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DataTypesCallerRaw struct {
	Contract *DataTypesCaller // Generic read-only contract binding to access the raw methods on
}

// DataTypesTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DataTypesTransactorRaw struct {
	Contract *DataTypesTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDataTypes creates a new instance of DataTypes, bound to a specific deployed contract.
func NewDataTypes(address common.Address, backend bind.ContractBackend) (*DataTypes, error) {
	contract, err := bindDataTypes(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DataTypes{DataTypesCaller: DataTypesCaller{contract: contract}, DataTypesTransactor: DataTypesTransactor{contract: contract}, DataTypesFilterer: DataTypesFilterer{contract: contract}}, nil
}

// NewDataTypesCaller creates a new read-only instance of DataTypes, bound to a specific deployed contract.
func NewDataTypesCaller(address common.Address, caller bind.ContractCaller) (*DataTypesCaller, error) {
	contract, err := bindDataTypes(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DataTypesCaller{contract: contract}, nil
}

// NewDataTypesTransactor creates a new write-only instance of DataTypes, bound to a specific deployed contract.
func NewDataTypesTransactor(address common.Address, transactor bind.ContractTransactor) (*DataTypesTransactor, error) {
	contract, err := bindDataTypes(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DataTypesTransactor{contract: contract}, nil
}

// NewDataTypesFilterer creates a new log filterer instance of DataTypes, bound to a specific deployed contract.
func NewDataTypesFilterer(address common.Address, filterer bind.ContractFilterer) (*DataTypesFilterer, error) {
	contract, err := bindDataTypes(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DataTypesFilterer{contract: contract}, nil
}

// bindDataTypes binds a generic wrapper to an already deployed contract.
func bindDataTypes(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DataTypesABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DataTypes *DataTypesRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DataTypes.Contract.DataTypesCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DataTypes *DataTypesRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DataTypes.Contract.DataTypesTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DataTypes *DataTypesRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DataTypes.Contract.DataTypesTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DataTypes *DataTypesCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DataTypes.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DataTypes *DataTypesTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DataTypes.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DataTypes *DataTypesTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DataTypes.Contract.contract.Transact(opts, method, params...)
}

// DebtTokenBaseABI is the input ABI used to generate the binding from.
const DebtTokenBaseABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingAssetAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"incentivesController\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromUser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BorrowAllowanceDelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"POOL\",\"outputs\":[{\"internalType\":\"contractILendingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNDERLYING_ASSET_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveDelegation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromUser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toUser\",\"type\":\"address\"}],\"name\":\"borrowAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// DebtTokenBase is an auto generated Go binding around an Ethereum contract.
type DebtTokenBase struct {
	DebtTokenBaseCaller     // Read-only binding to the contract
	DebtTokenBaseTransactor // Write-only binding to the contract
	DebtTokenBaseFilterer   // Log filterer for contract events
}

// DebtTokenBaseCaller is an auto generated read-only Go binding around an Ethereum contract.
type DebtTokenBaseCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DebtTokenBaseTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DebtTokenBaseTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DebtTokenBaseFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DebtTokenBaseFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DebtTokenBaseSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DebtTokenBaseSession struct {
	Contract     *DebtTokenBase    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DebtTokenBaseCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DebtTokenBaseCallerSession struct {
	Contract *DebtTokenBaseCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// DebtTokenBaseTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DebtTokenBaseTransactorSession struct {
	Contract     *DebtTokenBaseTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// DebtTokenBaseRaw is an auto generated low-level Go binding around an Ethereum contract.
type DebtTokenBaseRaw struct {
	Contract *DebtTokenBase // Generic contract binding to access the raw methods on
}

// DebtTokenBaseCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DebtTokenBaseCallerRaw struct {
	Contract *DebtTokenBaseCaller // Generic read-only contract binding to access the raw methods on
}

// DebtTokenBaseTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DebtTokenBaseTransactorRaw struct {
	Contract *DebtTokenBaseTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDebtTokenBase creates a new instance of DebtTokenBase, bound to a specific deployed contract.
func NewDebtTokenBase(address common.Address, backend bind.ContractBackend) (*DebtTokenBase, error) {
	contract, err := bindDebtTokenBase(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DebtTokenBase{DebtTokenBaseCaller: DebtTokenBaseCaller{contract: contract}, DebtTokenBaseTransactor: DebtTokenBaseTransactor{contract: contract}, DebtTokenBaseFilterer: DebtTokenBaseFilterer{contract: contract}}, nil
}

// NewDebtTokenBaseCaller creates a new read-only instance of DebtTokenBase, bound to a specific deployed contract.
func NewDebtTokenBaseCaller(address common.Address, caller bind.ContractCaller) (*DebtTokenBaseCaller, error) {
	contract, err := bindDebtTokenBase(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DebtTokenBaseCaller{contract: contract}, nil
}

// NewDebtTokenBaseTransactor creates a new write-only instance of DebtTokenBase, bound to a specific deployed contract.
func NewDebtTokenBaseTransactor(address common.Address, transactor bind.ContractTransactor) (*DebtTokenBaseTransactor, error) {
	contract, err := bindDebtTokenBase(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DebtTokenBaseTransactor{contract: contract}, nil
}

// NewDebtTokenBaseFilterer creates a new log filterer instance of DebtTokenBase, bound to a specific deployed contract.
func NewDebtTokenBaseFilterer(address common.Address, filterer bind.ContractFilterer) (*DebtTokenBaseFilterer, error) {
	contract, err := bindDebtTokenBase(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DebtTokenBaseFilterer{contract: contract}, nil
}

// bindDebtTokenBase binds a generic wrapper to an already deployed contract.
func bindDebtTokenBase(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DebtTokenBaseABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DebtTokenBase *DebtTokenBaseRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DebtTokenBase.Contract.DebtTokenBaseCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DebtTokenBase *DebtTokenBaseRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DebtTokenBase.Contract.DebtTokenBaseTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DebtTokenBase *DebtTokenBaseRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DebtTokenBase.Contract.DebtTokenBaseTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DebtTokenBase *DebtTokenBaseCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DebtTokenBase.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DebtTokenBase *DebtTokenBaseTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DebtTokenBase.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DebtTokenBase *DebtTokenBaseTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DebtTokenBase.Contract.contract.Transact(opts, method, params...)
}

// POOL is a free data retrieval call binding the contract method 0x7535d246.
//
// Solidity: function POOL() view returns(address)
func (_DebtTokenBase *DebtTokenBaseCaller) POOL(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DebtTokenBase.contract.Call(opts, &out, "POOL")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// POOL is a free data retrieval call binding the contract method 0x7535d246.
//
// Solidity: function POOL() view returns(address)
func (_DebtTokenBase *DebtTokenBaseSession) POOL() (common.Address, error) {
	return _DebtTokenBase.Contract.POOL(&_DebtTokenBase.CallOpts)
}

// POOL is a free data retrieval call binding the contract method 0x7535d246.
//
// Solidity: function POOL() view returns(address)
func (_DebtTokenBase *DebtTokenBaseCallerSession) POOL() (common.Address, error) {
	return _DebtTokenBase.Contract.POOL(&_DebtTokenBase.CallOpts)
}

// UNDERLYINGASSETADDRESS is a free data retrieval call binding the contract method 0xb16a19de.
//
// Solidity: function UNDERLYING_ASSET_ADDRESS() view returns(address)
func (_DebtTokenBase *DebtTokenBaseCaller) UNDERLYINGASSETADDRESS(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DebtTokenBase.contract.Call(opts, &out, "UNDERLYING_ASSET_ADDRESS")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// UNDERLYINGASSETADDRESS is a free data retrieval call binding the contract method 0xb16a19de.
//
// Solidity: function UNDERLYING_ASSET_ADDRESS() view returns(address)
func (_DebtTokenBase *DebtTokenBaseSession) UNDERLYINGASSETADDRESS() (common.Address, error) {
	return _DebtTokenBase.Contract.UNDERLYINGASSETADDRESS(&_DebtTokenBase.CallOpts)
}

// UNDERLYINGASSETADDRESS is a free data retrieval call binding the contract method 0xb16a19de.
//
// Solidity: function UNDERLYING_ASSET_ADDRESS() view returns(address)
func (_DebtTokenBase *DebtTokenBaseCallerSession) UNDERLYINGASSETADDRESS() (common.Address, error) {
	return _DebtTokenBase.Contract.UNDERLYINGASSETADDRESS(&_DebtTokenBase.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_DebtTokenBase *DebtTokenBaseCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _DebtTokenBase.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_DebtTokenBase *DebtTokenBaseSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _DebtTokenBase.Contract.Allowance(&_DebtTokenBase.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_DebtTokenBase *DebtTokenBaseCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _DebtTokenBase.Contract.Allowance(&_DebtTokenBase.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_DebtTokenBase *DebtTokenBaseCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _DebtTokenBase.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_DebtTokenBase *DebtTokenBaseSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _DebtTokenBase.Contract.BalanceOf(&_DebtTokenBase.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_DebtTokenBase *DebtTokenBaseCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _DebtTokenBase.Contract.BalanceOf(&_DebtTokenBase.CallOpts, account)
}

// BorrowAllowance is a free data retrieval call binding the contract method 0x6bd76d24.
//
// Solidity: function borrowAllowance(address fromUser, address toUser) view returns(uint256)
func (_DebtTokenBase *DebtTokenBaseCaller) BorrowAllowance(opts *bind.CallOpts, fromUser common.Address, toUser common.Address) (*big.Int, error) {
	var out []interface{}
	err := _DebtTokenBase.contract.Call(opts, &out, "borrowAllowance", fromUser, toUser)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BorrowAllowance is a free data retrieval call binding the contract method 0x6bd76d24.
//
// Solidity: function borrowAllowance(address fromUser, address toUser) view returns(uint256)
func (_DebtTokenBase *DebtTokenBaseSession) BorrowAllowance(fromUser common.Address, toUser common.Address) (*big.Int, error) {
	return _DebtTokenBase.Contract.BorrowAllowance(&_DebtTokenBase.CallOpts, fromUser, toUser)
}

// BorrowAllowance is a free data retrieval call binding the contract method 0x6bd76d24.
//
// Solidity: function borrowAllowance(address fromUser, address toUser) view returns(uint256)
func (_DebtTokenBase *DebtTokenBaseCallerSession) BorrowAllowance(fromUser common.Address, toUser common.Address) (*big.Int, error) {
	return _DebtTokenBase.Contract.BorrowAllowance(&_DebtTokenBase.CallOpts, fromUser, toUser)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_DebtTokenBase *DebtTokenBaseCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _DebtTokenBase.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_DebtTokenBase *DebtTokenBaseSession) Decimals() (uint8, error) {
	return _DebtTokenBase.Contract.Decimals(&_DebtTokenBase.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_DebtTokenBase *DebtTokenBaseCallerSession) Decimals() (uint8, error) {
	return _DebtTokenBase.Contract.Decimals(&_DebtTokenBase.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_DebtTokenBase *DebtTokenBaseCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _DebtTokenBase.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_DebtTokenBase *DebtTokenBaseSession) Name() (string, error) {
	return _DebtTokenBase.Contract.Name(&_DebtTokenBase.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_DebtTokenBase *DebtTokenBaseCallerSession) Name() (string, error) {
	return _DebtTokenBase.Contract.Name(&_DebtTokenBase.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_DebtTokenBase *DebtTokenBaseCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _DebtTokenBase.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_DebtTokenBase *DebtTokenBaseSession) Symbol() (string, error) {
	return _DebtTokenBase.Contract.Symbol(&_DebtTokenBase.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_DebtTokenBase *DebtTokenBaseCallerSession) Symbol() (string, error) {
	return _DebtTokenBase.Contract.Symbol(&_DebtTokenBase.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_DebtTokenBase *DebtTokenBaseCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DebtTokenBase.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_DebtTokenBase *DebtTokenBaseSession) TotalSupply() (*big.Int, error) {
	return _DebtTokenBase.Contract.TotalSupply(&_DebtTokenBase.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_DebtTokenBase *DebtTokenBaseCallerSession) TotalSupply() (*big.Int, error) {
	return _DebtTokenBase.Contract.TotalSupply(&_DebtTokenBase.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_DebtTokenBase *DebtTokenBaseTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _DebtTokenBase.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_DebtTokenBase *DebtTokenBaseSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _DebtTokenBase.Contract.Approve(&_DebtTokenBase.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_DebtTokenBase *DebtTokenBaseTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _DebtTokenBase.Contract.Approve(&_DebtTokenBase.TransactOpts, spender, amount)
}

// ApproveDelegation is a paid mutator transaction binding the contract method 0xc04a8a10.
//
// Solidity: function approveDelegation(address delegatee, uint256 amount) returns()
func (_DebtTokenBase *DebtTokenBaseTransactor) ApproveDelegation(opts *bind.TransactOpts, delegatee common.Address, amount *big.Int) (*types.Transaction, error) {
	return _DebtTokenBase.contract.Transact(opts, "approveDelegation", delegatee, amount)
}

// ApproveDelegation is a paid mutator transaction binding the contract method 0xc04a8a10.
//
// Solidity: function approveDelegation(address delegatee, uint256 amount) returns()
func (_DebtTokenBase *DebtTokenBaseSession) ApproveDelegation(delegatee common.Address, amount *big.Int) (*types.Transaction, error) {
	return _DebtTokenBase.Contract.ApproveDelegation(&_DebtTokenBase.TransactOpts, delegatee, amount)
}

// ApproveDelegation is a paid mutator transaction binding the contract method 0xc04a8a10.
//
// Solidity: function approveDelegation(address delegatee, uint256 amount) returns()
func (_DebtTokenBase *DebtTokenBaseTransactorSession) ApproveDelegation(delegatee common.Address, amount *big.Int) (*types.Transaction, error) {
	return _DebtTokenBase.Contract.ApproveDelegation(&_DebtTokenBase.TransactOpts, delegatee, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_DebtTokenBase *DebtTokenBaseTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _DebtTokenBase.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_DebtTokenBase *DebtTokenBaseSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _DebtTokenBase.Contract.DecreaseAllowance(&_DebtTokenBase.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_DebtTokenBase *DebtTokenBaseTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _DebtTokenBase.Contract.DecreaseAllowance(&_DebtTokenBase.TransactOpts, spender, subtractedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_DebtTokenBase *DebtTokenBaseTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _DebtTokenBase.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_DebtTokenBase *DebtTokenBaseSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _DebtTokenBase.Contract.IncreaseAllowance(&_DebtTokenBase.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_DebtTokenBase *DebtTokenBaseTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _DebtTokenBase.Contract.IncreaseAllowance(&_DebtTokenBase.TransactOpts, spender, addedValue)
}

// Initialize is a paid mutator transaction binding the contract method 0x3118724e.
//
// Solidity: function initialize(uint8 decimals, string name, string symbol) returns()
func (_DebtTokenBase *DebtTokenBaseTransactor) Initialize(opts *bind.TransactOpts, decimals uint8, name string, symbol string) (*types.Transaction, error) {
	return _DebtTokenBase.contract.Transact(opts, "initialize", decimals, name, symbol)
}

// Initialize is a paid mutator transaction binding the contract method 0x3118724e.
//
// Solidity: function initialize(uint8 decimals, string name, string symbol) returns()
func (_DebtTokenBase *DebtTokenBaseSession) Initialize(decimals uint8, name string, symbol string) (*types.Transaction, error) {
	return _DebtTokenBase.Contract.Initialize(&_DebtTokenBase.TransactOpts, decimals, name, symbol)
}

// Initialize is a paid mutator transaction binding the contract method 0x3118724e.
//
// Solidity: function initialize(uint8 decimals, string name, string symbol) returns()
func (_DebtTokenBase *DebtTokenBaseTransactorSession) Initialize(decimals uint8, name string, symbol string) (*types.Transaction, error) {
	return _DebtTokenBase.Contract.Initialize(&_DebtTokenBase.TransactOpts, decimals, name, symbol)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_DebtTokenBase *DebtTokenBaseTransactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _DebtTokenBase.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_DebtTokenBase *DebtTokenBaseSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _DebtTokenBase.Contract.Transfer(&_DebtTokenBase.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_DebtTokenBase *DebtTokenBaseTransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _DebtTokenBase.Contract.Transfer(&_DebtTokenBase.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_DebtTokenBase *DebtTokenBaseTransactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _DebtTokenBase.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_DebtTokenBase *DebtTokenBaseSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _DebtTokenBase.Contract.TransferFrom(&_DebtTokenBase.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_DebtTokenBase *DebtTokenBaseTransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _DebtTokenBase.Contract.TransferFrom(&_DebtTokenBase.TransactOpts, sender, recipient, amount)
}

// DebtTokenBaseApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the DebtTokenBase contract.
type DebtTokenBaseApprovalIterator struct {
	Event *DebtTokenBaseApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DebtTokenBaseApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DebtTokenBaseApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DebtTokenBaseApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DebtTokenBaseApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DebtTokenBaseApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DebtTokenBaseApproval represents a Approval event raised by the DebtTokenBase contract.
type DebtTokenBaseApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_DebtTokenBase *DebtTokenBaseFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*DebtTokenBaseApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _DebtTokenBase.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &DebtTokenBaseApprovalIterator{contract: _DebtTokenBase.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_DebtTokenBase *DebtTokenBaseFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *DebtTokenBaseApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _DebtTokenBase.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DebtTokenBaseApproval)
				if err := _DebtTokenBase.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_DebtTokenBase *DebtTokenBaseFilterer) ParseApproval(log types.Log) (*DebtTokenBaseApproval, error) {
	event := new(DebtTokenBaseApproval)
	if err := _DebtTokenBase.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DebtTokenBaseBorrowAllowanceDelegatedIterator is returned from FilterBorrowAllowanceDelegated and is used to iterate over the raw logs and unpacked data for BorrowAllowanceDelegated events raised by the DebtTokenBase contract.
type DebtTokenBaseBorrowAllowanceDelegatedIterator struct {
	Event *DebtTokenBaseBorrowAllowanceDelegated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DebtTokenBaseBorrowAllowanceDelegatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DebtTokenBaseBorrowAllowanceDelegated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DebtTokenBaseBorrowAllowanceDelegated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DebtTokenBaseBorrowAllowanceDelegatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DebtTokenBaseBorrowAllowanceDelegatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DebtTokenBaseBorrowAllowanceDelegated represents a BorrowAllowanceDelegated event raised by the DebtTokenBase contract.
type DebtTokenBaseBorrowAllowanceDelegated struct {
	FromUser common.Address
	ToUser   common.Address
	Asset    common.Address
	Amount   *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterBorrowAllowanceDelegated is a free log retrieval operation binding the contract event 0xda919360433220e13b51e8c211e490d148e61a3bd53de8c097194e458b97f3e1.
//
// Solidity: event BorrowAllowanceDelegated(address indexed fromUser, address indexed toUser, address asset, uint256 amount)
func (_DebtTokenBase *DebtTokenBaseFilterer) FilterBorrowAllowanceDelegated(opts *bind.FilterOpts, fromUser []common.Address, toUser []common.Address) (*DebtTokenBaseBorrowAllowanceDelegatedIterator, error) {

	var fromUserRule []interface{}
	for _, fromUserItem := range fromUser {
		fromUserRule = append(fromUserRule, fromUserItem)
	}
	var toUserRule []interface{}
	for _, toUserItem := range toUser {
		toUserRule = append(toUserRule, toUserItem)
	}

	logs, sub, err := _DebtTokenBase.contract.FilterLogs(opts, "BorrowAllowanceDelegated", fromUserRule, toUserRule)
	if err != nil {
		return nil, err
	}
	return &DebtTokenBaseBorrowAllowanceDelegatedIterator{contract: _DebtTokenBase.contract, event: "BorrowAllowanceDelegated", logs: logs, sub: sub}, nil
}

// WatchBorrowAllowanceDelegated is a free log subscription operation binding the contract event 0xda919360433220e13b51e8c211e490d148e61a3bd53de8c097194e458b97f3e1.
//
// Solidity: event BorrowAllowanceDelegated(address indexed fromUser, address indexed toUser, address asset, uint256 amount)
func (_DebtTokenBase *DebtTokenBaseFilterer) WatchBorrowAllowanceDelegated(opts *bind.WatchOpts, sink chan<- *DebtTokenBaseBorrowAllowanceDelegated, fromUser []common.Address, toUser []common.Address) (event.Subscription, error) {

	var fromUserRule []interface{}
	for _, fromUserItem := range fromUser {
		fromUserRule = append(fromUserRule, fromUserItem)
	}
	var toUserRule []interface{}
	for _, toUserItem := range toUser {
		toUserRule = append(toUserRule, toUserItem)
	}

	logs, sub, err := _DebtTokenBase.contract.WatchLogs(opts, "BorrowAllowanceDelegated", fromUserRule, toUserRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DebtTokenBaseBorrowAllowanceDelegated)
				if err := _DebtTokenBase.contract.UnpackLog(event, "BorrowAllowanceDelegated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBorrowAllowanceDelegated is a log parse operation binding the contract event 0xda919360433220e13b51e8c211e490d148e61a3bd53de8c097194e458b97f3e1.
//
// Solidity: event BorrowAllowanceDelegated(address indexed fromUser, address indexed toUser, address asset, uint256 amount)
func (_DebtTokenBase *DebtTokenBaseFilterer) ParseBorrowAllowanceDelegated(log types.Log) (*DebtTokenBaseBorrowAllowanceDelegated, error) {
	event := new(DebtTokenBaseBorrowAllowanceDelegated)
	if err := _DebtTokenBase.contract.UnpackLog(event, "BorrowAllowanceDelegated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DebtTokenBaseTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the DebtTokenBase contract.
type DebtTokenBaseTransferIterator struct {
	Event *DebtTokenBaseTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DebtTokenBaseTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DebtTokenBaseTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DebtTokenBaseTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DebtTokenBaseTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DebtTokenBaseTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DebtTokenBaseTransfer represents a Transfer event raised by the DebtTokenBase contract.
type DebtTokenBaseTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_DebtTokenBase *DebtTokenBaseFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*DebtTokenBaseTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _DebtTokenBase.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &DebtTokenBaseTransferIterator{contract: _DebtTokenBase.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_DebtTokenBase *DebtTokenBaseFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *DebtTokenBaseTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _DebtTokenBase.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DebtTokenBaseTransfer)
				if err := _DebtTokenBase.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_DebtTokenBase *DebtTokenBaseFilterer) ParseTransfer(log types.Log) (*DebtTokenBaseTransfer, error) {
	event := new(DebtTokenBaseTransfer)
	if err := _DebtTokenBase.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DefaultReserveInterestRateStrategyABI is the input ABI used to generate the binding from.
const DefaultReserveInterestRateStrategyABI = "[{\"inputs\":[{\"internalType\":\"contractILendingPoolAddressesProvider\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"optimalUtilizationRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseVariableBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableRateSlope1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableRateSlope2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableRateSlope1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableRateSlope2\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EXCESS_UTILIZATION_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPTIMAL_UTILIZATION_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressesProvider\",\"outputs\":[{\"internalType\":\"contractILendingPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseVariableBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"availableLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStableDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVariableDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averageStableBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactor\",\"type\":\"uint256\"}],\"name\":\"calculateInterestRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxVariableBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableRateSlope1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableRateSlope2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"variableRateSlope1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"variableRateSlope2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// DefaultReserveInterestRateStrategyBin is the compiled bytecode used for deploying new contracts.
var DefaultReserveInterestRateStrategyBin = "0x61018060405234801561001157600080fd5b50604051610e75380380610e75833981810160405260e081101561003457600080fd5b5080516020808301516040840151606085015160808087015160a088015160c0909801519185905295969395929491939161008e90879061007c9061070c6100c3821b17901c565b6100d360201b61071c1790919060201c565b60a05260609690961b6001600160601b03191660c05260e09390935261010091909152610120526101405250610160526101b9565b6b033b2e3c9fd0803ce800000090565b600061011b83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061012260201b60201c565b9392505050565b600081848411156101b15760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561017657818101518382015260200161015e565b50505050905090810190601f1680156101a35780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60805160a05160c05160601c60e05161010051610120516101405161016051610c0761026e6000398061046852806106ea52508061017d528061049852806105755250806101c5528061021252806104c95250806101e95280610257528061051452806105d752508061023652806104f352806105fd52806106a25250806102e252806106c65250806101a1528061040f5250806103e25280610434528061054f52806105b2528061067e5250610c076000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80639584df28116100665780639584df28146100dd578063a15f30ac1461013f578063b258954414610147578063c72c4d101461014f578063ccab01a3146101735761009e565b80630bdf953f146100a357806317319873146100bd57806365614f81146100c55780637b832f58146100cd57806380031e37146100d5575b600080fd5b6100ab61017b565b60408051918252519081900360200190f35b6100ab61019f565b6100ab6101c3565b6100ab6101e7565b6100ab61020b565b610121600480360360c08110156100f357600080fd5b506001600160a01b038135169060208101359060408101359060608101359060808101359060a00135610286565b60408051938452602084019290925282820152519081900360600190f35b6100ab61067c565b6100ab6106a0565b6101576106c4565b604080516001600160a01b039092168252519081900360200190f35b6100ab6106e8565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b60006102817f000000000000000000000000000000000000000000000000000000000000000061027b7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610767565b90610767565b905090565b6000806000610293610ba2565b61029d8888610767565b808252600060208301819052604083018190526060830181905290156102db5781516102d6906102ce908c90610767565b8351906107c1565b6102de565b60005b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633618abba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561033957600080fd5b505afa15801561034d573d6000803e3d6000fd5b505050506040513d602081101561036357600080fd5b50516040805163bb85c0bb60e01b81526001600160a01b038e811660048301529151919092169163bb85c0bb916024808301926020929190829003018186803b1580156103af57600080fd5b505afa1580156103c3573d6000803e3d6000fd5b505050506040513d60208110156103d957600080fd5b505160408301527f000000000000000000000000000000000000000000000000000000000000000081111561054357600061045e7f0000000000000000000000000000000000000000000000000000000000000000610458847f000000000000000000000000000000000000000000000000000000000000000061071c565b906107c1565b90506104bc61048d7f000000000000000000000000000000000000000000000000000000000000000083610905565b604085015161027b907f0000000000000000000000000000000000000000000000000000000000000000610767565b60408401526105386104ee7f000000000000000000000000000000000000000000000000000000000000000083610905565b61027b7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610767565b602084015250610628565b6105a561059a610573837f00000000000000000000000000000000000000000000000000000000000000006107c1565b7f000000000000000000000000000000000000000000000000000000000000000090610905565b604084015190610767565b60408301526106226105fb7f0000000000000000000000000000000000000000000000000000000000000000610458847f0000000000000000000000000000000000000000000000000000000000000000610905565b7f000000000000000000000000000000000000000000000000000000000000000090610767565b60208301525b6106576106376127108861071c565b6106518361064b8d8d88602001518e6109c6565b90610905565b90610a2d565b606083018190526040830151602090930151909c929b50995090975050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000090565b6b033b2e3c9fd0803ce800000090565b600061075e83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610aca565b90505b92915050565b60008282018381101561075e576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080518082019091526002815261035360f41b6020820152600090826108665760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561082b578181015183820152602001610813565b50505050905090810190601f1680156108585780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060408051808201909152600280825261068760f31b60208301528304906b033b2e3c9fd0803ce80000008219048511156108e25760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561082b578181015183820152602001610813565b5082816b033b2e3c9fd0803ce8000000860201816108fc57fe5b04949350505050565b6000821580610912575081155b1561091f57506000610761565b816b019d971e4fe8401e74000000198161093557fe5b0483111560405180604001604052806002815260200161068760f31b815250906109a05760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561082b578181015183820152602001610813565b506b033b2e3c9fd0803ce80000006002815b0483850201816109be57fe5b049392505050565b6000806109d38686610767565b9050806109e4576000915050610a25565b60006109f38561064b88610b24565b90506000610a048561064b8a610b24565b90506000610a1e610a1485610b24565b6104588585610767565b9450505050505b949350505050565b6000821580610a3a575081155b15610a4757506000610761565b816113881981610a5357fe5b0483111560405180604001604052806002815260200161068760f31b81525090610abe5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561082b578181015183820152602001610813565b506127106002816109b2565b60008184841115610b1c5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561082b578181015183820152602001610813565b505050900390565b6000633b9aca0082810290839082041460405180604001604052806002815260200161068760f31b81525090610b9b5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561082b578181015183820152602001610813565b5092915050565b6040518060a001604052806000815260200160008152602001600081526020016000815260200160008152509056fea2646970667358221220e2814b5d9722115d8879b36b40da5284349e8d6b3d0e0bdaf722d365af5e076564736f6c634300060c0033"

// DeployDefaultReserveInterestRateStrategy deploys a new Ethereum contract, binding an instance of DefaultReserveInterestRateStrategy to it.
func DeployDefaultReserveInterestRateStrategy(auth *bind.TransactOpts, backend bind.ContractBackend, provider common.Address, optimalUtilizationRate *big.Int, baseVariableBorrowRate *big.Int, variableRateSlope1 *big.Int, variableRateSlope2 *big.Int, stableRateSlope1 *big.Int, stableRateSlope2 *big.Int) (common.Address, *types.Transaction, *DefaultReserveInterestRateStrategy, error) {
	parsed, err := abi.JSON(strings.NewReader(DefaultReserveInterestRateStrategyABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(DefaultReserveInterestRateStrategyBin), backend, provider, optimalUtilizationRate, baseVariableBorrowRate, variableRateSlope1, variableRateSlope2, stableRateSlope1, stableRateSlope2)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DefaultReserveInterestRateStrategy{DefaultReserveInterestRateStrategyCaller: DefaultReserveInterestRateStrategyCaller{contract: contract}, DefaultReserveInterestRateStrategyTransactor: DefaultReserveInterestRateStrategyTransactor{contract: contract}, DefaultReserveInterestRateStrategyFilterer: DefaultReserveInterestRateStrategyFilterer{contract: contract}}, nil
}

// DefaultReserveInterestRateStrategy is an auto generated Go binding around an Ethereum contract.
type DefaultReserveInterestRateStrategy struct {
	DefaultReserveInterestRateStrategyCaller     // Read-only binding to the contract
	DefaultReserveInterestRateStrategyTransactor // Write-only binding to the contract
	DefaultReserveInterestRateStrategyFilterer   // Log filterer for contract events
}

// DefaultReserveInterestRateStrategyCaller is an auto generated read-only Go binding around an Ethereum contract.
type DefaultReserveInterestRateStrategyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DefaultReserveInterestRateStrategyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DefaultReserveInterestRateStrategyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DefaultReserveInterestRateStrategyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DefaultReserveInterestRateStrategyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DefaultReserveInterestRateStrategySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DefaultReserveInterestRateStrategySession struct {
	Contract     *DefaultReserveInterestRateStrategy // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                       // Call options to use throughout this session
	TransactOpts bind.TransactOpts                   // Transaction auth options to use throughout this session
}

// DefaultReserveInterestRateStrategyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DefaultReserveInterestRateStrategyCallerSession struct {
	Contract *DefaultReserveInterestRateStrategyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                             // Call options to use throughout this session
}

// DefaultReserveInterestRateStrategyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DefaultReserveInterestRateStrategyTransactorSession struct {
	Contract     *DefaultReserveInterestRateStrategyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                             // Transaction auth options to use throughout this session
}

// DefaultReserveInterestRateStrategyRaw is an auto generated low-level Go binding around an Ethereum contract.
type DefaultReserveInterestRateStrategyRaw struct {
	Contract *DefaultReserveInterestRateStrategy // Generic contract binding to access the raw methods on
}

// DefaultReserveInterestRateStrategyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DefaultReserveInterestRateStrategyCallerRaw struct {
	Contract *DefaultReserveInterestRateStrategyCaller // Generic read-only contract binding to access the raw methods on
}

// DefaultReserveInterestRateStrategyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DefaultReserveInterestRateStrategyTransactorRaw struct {
	Contract *DefaultReserveInterestRateStrategyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDefaultReserveInterestRateStrategy creates a new instance of DefaultReserveInterestRateStrategy, bound to a specific deployed contract.
func NewDefaultReserveInterestRateStrategy(address common.Address, backend bind.ContractBackend) (*DefaultReserveInterestRateStrategy, error) {
	contract, err := bindDefaultReserveInterestRateStrategy(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DefaultReserveInterestRateStrategy{DefaultReserveInterestRateStrategyCaller: DefaultReserveInterestRateStrategyCaller{contract: contract}, DefaultReserveInterestRateStrategyTransactor: DefaultReserveInterestRateStrategyTransactor{contract: contract}, DefaultReserveInterestRateStrategyFilterer: DefaultReserveInterestRateStrategyFilterer{contract: contract}}, nil
}

// NewDefaultReserveInterestRateStrategyCaller creates a new read-only instance of DefaultReserveInterestRateStrategy, bound to a specific deployed contract.
func NewDefaultReserveInterestRateStrategyCaller(address common.Address, caller bind.ContractCaller) (*DefaultReserveInterestRateStrategyCaller, error) {
	contract, err := bindDefaultReserveInterestRateStrategy(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DefaultReserveInterestRateStrategyCaller{contract: contract}, nil
}

// NewDefaultReserveInterestRateStrategyTransactor creates a new write-only instance of DefaultReserveInterestRateStrategy, bound to a specific deployed contract.
func NewDefaultReserveInterestRateStrategyTransactor(address common.Address, transactor bind.ContractTransactor) (*DefaultReserveInterestRateStrategyTransactor, error) {
	contract, err := bindDefaultReserveInterestRateStrategy(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DefaultReserveInterestRateStrategyTransactor{contract: contract}, nil
}

// NewDefaultReserveInterestRateStrategyFilterer creates a new log filterer instance of DefaultReserveInterestRateStrategy, bound to a specific deployed contract.
func NewDefaultReserveInterestRateStrategyFilterer(address common.Address, filterer bind.ContractFilterer) (*DefaultReserveInterestRateStrategyFilterer, error) {
	contract, err := bindDefaultReserveInterestRateStrategy(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DefaultReserveInterestRateStrategyFilterer{contract: contract}, nil
}

// bindDefaultReserveInterestRateStrategy binds a generic wrapper to an already deployed contract.
func bindDefaultReserveInterestRateStrategy(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DefaultReserveInterestRateStrategyABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DefaultReserveInterestRateStrategy *DefaultReserveInterestRateStrategyRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DefaultReserveInterestRateStrategy.Contract.DefaultReserveInterestRateStrategyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DefaultReserveInterestRateStrategy *DefaultReserveInterestRateStrategyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DefaultReserveInterestRateStrategy.Contract.DefaultReserveInterestRateStrategyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DefaultReserveInterestRateStrategy *DefaultReserveInterestRateStrategyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DefaultReserveInterestRateStrategy.Contract.DefaultReserveInterestRateStrategyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DefaultReserveInterestRateStrategy *DefaultReserveInterestRateStrategyCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DefaultReserveInterestRateStrategy.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DefaultReserveInterestRateStrategy *DefaultReserveInterestRateStrategyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DefaultReserveInterestRateStrategy.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DefaultReserveInterestRateStrategy *DefaultReserveInterestRateStrategyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DefaultReserveInterestRateStrategy.Contract.contract.Transact(opts, method, params...)
}

// EXCESSUTILIZATIONRATE is a free data retrieval call binding the contract method 0x17319873.
//
// Solidity: function EXCESS_UTILIZATION_RATE() view returns(uint256)
func (_DefaultReserveInterestRateStrategy *DefaultReserveInterestRateStrategyCaller) EXCESSUTILIZATIONRATE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DefaultReserveInterestRateStrategy.contract.Call(opts, &out, "EXCESS_UTILIZATION_RATE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EXCESSUTILIZATIONRATE is a free data retrieval call binding the contract method 0x17319873.
//
// Solidity: function EXCESS_UTILIZATION_RATE() view returns(uint256)
func (_DefaultReserveInterestRateStrategy *DefaultReserveInterestRateStrategySession) EXCESSUTILIZATIONRATE() (*big.Int, error) {
	return _DefaultReserveInterestRateStrategy.Contract.EXCESSUTILIZATIONRATE(&_DefaultReserveInterestRateStrategy.CallOpts)
}

// EXCESSUTILIZATIONRATE is a free data retrieval call binding the contract method 0x17319873.
//
// Solidity: function EXCESS_UTILIZATION_RATE() view returns(uint256)
func (_DefaultReserveInterestRateStrategy *DefaultReserveInterestRateStrategyCallerSession) EXCESSUTILIZATIONRATE() (*big.Int, error) {
	return _DefaultReserveInterestRateStrategy.Contract.EXCESSUTILIZATIONRATE(&_DefaultReserveInterestRateStrategy.CallOpts)
}

// OPTIMALUTILIZATIONRATE is a free data retrieval call binding the contract method 0xa15f30ac.
//
// Solidity: function OPTIMAL_UTILIZATION_RATE() view returns(uint256)
func (_DefaultReserveInterestRateStrategy *DefaultReserveInterestRateStrategyCaller) OPTIMALUTILIZATIONRATE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DefaultReserveInterestRateStrategy.contract.Call(opts, &out, "OPTIMAL_UTILIZATION_RATE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// OPTIMALUTILIZATIONRATE is a free data retrieval call binding the contract method 0xa15f30ac.
//
// Solidity: function OPTIMAL_UTILIZATION_RATE() view returns(uint256)
func (_DefaultReserveInterestRateStrategy *DefaultReserveInterestRateStrategySession) OPTIMALUTILIZATIONRATE() (*big.Int, error) {
	return _DefaultReserveInterestRateStrategy.Contract.OPTIMALUTILIZATIONRATE(&_DefaultReserveInterestRateStrategy.CallOpts)
}

// OPTIMALUTILIZATIONRATE is a free data retrieval call binding the contract method 0xa15f30ac.
//
// Solidity: function OPTIMAL_UTILIZATION_RATE() view returns(uint256)
func (_DefaultReserveInterestRateStrategy *DefaultReserveInterestRateStrategyCallerSession) OPTIMALUTILIZATIONRATE() (*big.Int, error) {
	return _DefaultReserveInterestRateStrategy.Contract.OPTIMALUTILIZATIONRATE(&_DefaultReserveInterestRateStrategy.CallOpts)
}

// AddressesProvider is a free data retrieval call binding the contract method 0xc72c4d10.
//
// Solidity: function addressesProvider() view returns(address)
func (_DefaultReserveInterestRateStrategy *DefaultReserveInterestRateStrategyCaller) AddressesProvider(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DefaultReserveInterestRateStrategy.contract.Call(opts, &out, "addressesProvider")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AddressesProvider is a free data retrieval call binding the contract method 0xc72c4d10.
//
// Solidity: function addressesProvider() view returns(address)
func (_DefaultReserveInterestRateStrategy *DefaultReserveInterestRateStrategySession) AddressesProvider() (common.Address, error) {
	return _DefaultReserveInterestRateStrategy.Contract.AddressesProvider(&_DefaultReserveInterestRateStrategy.CallOpts)
}

// AddressesProvider is a free data retrieval call binding the contract method 0xc72c4d10.
//
// Solidity: function addressesProvider() view returns(address)
func (_DefaultReserveInterestRateStrategy *DefaultReserveInterestRateStrategyCallerSession) AddressesProvider() (common.Address, error) {
	return _DefaultReserveInterestRateStrategy.Contract.AddressesProvider(&_DefaultReserveInterestRateStrategy.CallOpts)
}

// BaseVariableBorrowRate is a free data retrieval call binding the contract method 0xb2589544.
//
// Solidity: function baseVariableBorrowRate() view returns(uint256)
func (_DefaultReserveInterestRateStrategy *DefaultReserveInterestRateStrategyCaller) BaseVariableBorrowRate(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DefaultReserveInterestRateStrategy.contract.Call(opts, &out, "baseVariableBorrowRate")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseVariableBorrowRate is a free data retrieval call binding the contract method 0xb2589544.
//
// Solidity: function baseVariableBorrowRate() view returns(uint256)
func (_DefaultReserveInterestRateStrategy *DefaultReserveInterestRateStrategySession) BaseVariableBorrowRate() (*big.Int, error) {
	return _DefaultReserveInterestRateStrategy.Contract.BaseVariableBorrowRate(&_DefaultReserveInterestRateStrategy.CallOpts)
}

// BaseVariableBorrowRate is a free data retrieval call binding the contract method 0xb2589544.
//
// Solidity: function baseVariableBorrowRate() view returns(uint256)
func (_DefaultReserveInterestRateStrategy *DefaultReserveInterestRateStrategyCallerSession) BaseVariableBorrowRate() (*big.Int, error) {
	return _DefaultReserveInterestRateStrategy.Contract.BaseVariableBorrowRate(&_DefaultReserveInterestRateStrategy.CallOpts)
}

// CalculateInterestRates is a free data retrieval call binding the contract method 0x9584df28.
//
// Solidity: function calculateInterestRates(address reserve, uint256 availableLiquidity, uint256 totalStableDebt, uint256 totalVariableDebt, uint256 averageStableBorrowRate, uint256 reserveFactor) view returns(uint256, uint256, uint256)
func (_DefaultReserveInterestRateStrategy *DefaultReserveInterestRateStrategyCaller) CalculateInterestRates(opts *bind.CallOpts, reserve common.Address, availableLiquidity *big.Int, totalStableDebt *big.Int, totalVariableDebt *big.Int, averageStableBorrowRate *big.Int, reserveFactor *big.Int) (*big.Int, *big.Int, *big.Int, error) {
	var out []interface{}
	err := _DefaultReserveInterestRateStrategy.contract.Call(opts, &out, "calculateInterestRates", reserve, availableLiquidity, totalStableDebt, totalVariableDebt, averageStableBorrowRate, reserveFactor)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return out0, out1, out2, err

}

// CalculateInterestRates is a free data retrieval call binding the contract method 0x9584df28.
//
// Solidity: function calculateInterestRates(address reserve, uint256 availableLiquidity, uint256 totalStableDebt, uint256 totalVariableDebt, uint256 averageStableBorrowRate, uint256 reserveFactor) view returns(uint256, uint256, uint256)
func (_DefaultReserveInterestRateStrategy *DefaultReserveInterestRateStrategySession) CalculateInterestRates(reserve common.Address, availableLiquidity *big.Int, totalStableDebt *big.Int, totalVariableDebt *big.Int, averageStableBorrowRate *big.Int, reserveFactor *big.Int) (*big.Int, *big.Int, *big.Int, error) {
	return _DefaultReserveInterestRateStrategy.Contract.CalculateInterestRates(&_DefaultReserveInterestRateStrategy.CallOpts, reserve, availableLiquidity, totalStableDebt, totalVariableDebt, averageStableBorrowRate, reserveFactor)
}

// CalculateInterestRates is a free data retrieval call binding the contract method 0x9584df28.
//
// Solidity: function calculateInterestRates(address reserve, uint256 availableLiquidity, uint256 totalStableDebt, uint256 totalVariableDebt, uint256 averageStableBorrowRate, uint256 reserveFactor) view returns(uint256, uint256, uint256)
func (_DefaultReserveInterestRateStrategy *DefaultReserveInterestRateStrategyCallerSession) CalculateInterestRates(reserve common.Address, availableLiquidity *big.Int, totalStableDebt *big.Int, totalVariableDebt *big.Int, averageStableBorrowRate *big.Int, reserveFactor *big.Int) (*big.Int, *big.Int, *big.Int, error) {
	return _DefaultReserveInterestRateStrategy.Contract.CalculateInterestRates(&_DefaultReserveInterestRateStrategy.CallOpts, reserve, availableLiquidity, totalStableDebt, totalVariableDebt, averageStableBorrowRate, reserveFactor)
}

// GetMaxVariableBorrowRate is a free data retrieval call binding the contract method 0x80031e37.
//
// Solidity: function getMaxVariableBorrowRate() view returns(uint256)
func (_DefaultReserveInterestRateStrategy *DefaultReserveInterestRateStrategyCaller) GetMaxVariableBorrowRate(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DefaultReserveInterestRateStrategy.contract.Call(opts, &out, "getMaxVariableBorrowRate")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMaxVariableBorrowRate is a free data retrieval call binding the contract method 0x80031e37.
//
// Solidity: function getMaxVariableBorrowRate() view returns(uint256)
func (_DefaultReserveInterestRateStrategy *DefaultReserveInterestRateStrategySession) GetMaxVariableBorrowRate() (*big.Int, error) {
	return _DefaultReserveInterestRateStrategy.Contract.GetMaxVariableBorrowRate(&_DefaultReserveInterestRateStrategy.CallOpts)
}

// GetMaxVariableBorrowRate is a free data retrieval call binding the contract method 0x80031e37.
//
// Solidity: function getMaxVariableBorrowRate() view returns(uint256)
func (_DefaultReserveInterestRateStrategy *DefaultReserveInterestRateStrategyCallerSession) GetMaxVariableBorrowRate() (*big.Int, error) {
	return _DefaultReserveInterestRateStrategy.Contract.GetMaxVariableBorrowRate(&_DefaultReserveInterestRateStrategy.CallOpts)
}

// StableRateSlope1 is a free data retrieval call binding the contract method 0x0bdf953f.
//
// Solidity: function stableRateSlope1() view returns(uint256)
func (_DefaultReserveInterestRateStrategy *DefaultReserveInterestRateStrategyCaller) StableRateSlope1(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DefaultReserveInterestRateStrategy.contract.Call(opts, &out, "stableRateSlope1")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StableRateSlope1 is a free data retrieval call binding the contract method 0x0bdf953f.
//
// Solidity: function stableRateSlope1() view returns(uint256)
func (_DefaultReserveInterestRateStrategy *DefaultReserveInterestRateStrategySession) StableRateSlope1() (*big.Int, error) {
	return _DefaultReserveInterestRateStrategy.Contract.StableRateSlope1(&_DefaultReserveInterestRateStrategy.CallOpts)
}

// StableRateSlope1 is a free data retrieval call binding the contract method 0x0bdf953f.
//
// Solidity: function stableRateSlope1() view returns(uint256)
func (_DefaultReserveInterestRateStrategy *DefaultReserveInterestRateStrategyCallerSession) StableRateSlope1() (*big.Int, error) {
	return _DefaultReserveInterestRateStrategy.Contract.StableRateSlope1(&_DefaultReserveInterestRateStrategy.CallOpts)
}

// StableRateSlope2 is a free data retrieval call binding the contract method 0xccab01a3.
//
// Solidity: function stableRateSlope2() view returns(uint256)
func (_DefaultReserveInterestRateStrategy *DefaultReserveInterestRateStrategyCaller) StableRateSlope2(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DefaultReserveInterestRateStrategy.contract.Call(opts, &out, "stableRateSlope2")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StableRateSlope2 is a free data retrieval call binding the contract method 0xccab01a3.
//
// Solidity: function stableRateSlope2() view returns(uint256)
func (_DefaultReserveInterestRateStrategy *DefaultReserveInterestRateStrategySession) StableRateSlope2() (*big.Int, error) {
	return _DefaultReserveInterestRateStrategy.Contract.StableRateSlope2(&_DefaultReserveInterestRateStrategy.CallOpts)
}

// StableRateSlope2 is a free data retrieval call binding the contract method 0xccab01a3.
//
// Solidity: function stableRateSlope2() view returns(uint256)
func (_DefaultReserveInterestRateStrategy *DefaultReserveInterestRateStrategyCallerSession) StableRateSlope2() (*big.Int, error) {
	return _DefaultReserveInterestRateStrategy.Contract.StableRateSlope2(&_DefaultReserveInterestRateStrategy.CallOpts)
}

// VariableRateSlope1 is a free data retrieval call binding the contract method 0x7b832f58.
//
// Solidity: function variableRateSlope1() view returns(uint256)
func (_DefaultReserveInterestRateStrategy *DefaultReserveInterestRateStrategyCaller) VariableRateSlope1(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DefaultReserveInterestRateStrategy.contract.Call(opts, &out, "variableRateSlope1")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VariableRateSlope1 is a free data retrieval call binding the contract method 0x7b832f58.
//
// Solidity: function variableRateSlope1() view returns(uint256)
func (_DefaultReserveInterestRateStrategy *DefaultReserveInterestRateStrategySession) VariableRateSlope1() (*big.Int, error) {
	return _DefaultReserveInterestRateStrategy.Contract.VariableRateSlope1(&_DefaultReserveInterestRateStrategy.CallOpts)
}

// VariableRateSlope1 is a free data retrieval call binding the contract method 0x7b832f58.
//
// Solidity: function variableRateSlope1() view returns(uint256)
func (_DefaultReserveInterestRateStrategy *DefaultReserveInterestRateStrategyCallerSession) VariableRateSlope1() (*big.Int, error) {
	return _DefaultReserveInterestRateStrategy.Contract.VariableRateSlope1(&_DefaultReserveInterestRateStrategy.CallOpts)
}

// VariableRateSlope2 is a free data retrieval call binding the contract method 0x65614f81.
//
// Solidity: function variableRateSlope2() view returns(uint256)
func (_DefaultReserveInterestRateStrategy *DefaultReserveInterestRateStrategyCaller) VariableRateSlope2(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DefaultReserveInterestRateStrategy.contract.Call(opts, &out, "variableRateSlope2")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VariableRateSlope2 is a free data retrieval call binding the contract method 0x65614f81.
//
// Solidity: function variableRateSlope2() view returns(uint256)
func (_DefaultReserveInterestRateStrategy *DefaultReserveInterestRateStrategySession) VariableRateSlope2() (*big.Int, error) {
	return _DefaultReserveInterestRateStrategy.Contract.VariableRateSlope2(&_DefaultReserveInterestRateStrategy.CallOpts)
}

// VariableRateSlope2 is a free data retrieval call binding the contract method 0x65614f81.
//
// Solidity: function variableRateSlope2() view returns(uint256)
func (_DefaultReserveInterestRateStrategy *DefaultReserveInterestRateStrategyCallerSession) VariableRateSlope2() (*big.Int, error) {
	return _DefaultReserveInterestRateStrategy.Contract.VariableRateSlope2(&_DefaultReserveInterestRateStrategy.CallOpts)
}

// DelegationAwareATokenABI is the input ABI used to generate the binding from.
const DelegationAwareATokenABI = "[{\"inputs\":[{\"internalType\":\"contractILendingPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingAssetAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reserveTreasury\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"incentivesController\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"BalanceTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ATOKEN_REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712_REVISION\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL\",\"outputs\":[{\"internalType\":\"contractILendingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESERVE_TREASURY_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UINT_MAX_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNDERLYING_ASSET_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverOfUnderlying\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegateUnderlyingTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getScaledUserBalanceAndSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"underlyingAssetDecimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"mintToTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"scaledBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scaledTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferOnLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferUnderlyingTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// DelegationAwareATokenBin is the compiled bytecode used for deploying new contracts.
var DelegationAwareATokenBin = ""

// DeployDelegationAwareAToken deploys a new Ethereum contract, binding an instance of DelegationAwareAToken to it.
func DeployDelegationAwareAToken(auth *bind.TransactOpts, backend bind.ContractBackend, pool common.Address, underlyingAssetAddress common.Address, reserveTreasury common.Address, tokenName string, tokenSymbol string, incentivesController common.Address) (common.Address, *types.Transaction, *DelegationAwareAToken, error) {
	parsed, err := abi.JSON(strings.NewReader(DelegationAwareATokenABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(DelegationAwareATokenBin), backend, pool, underlyingAssetAddress, reserveTreasury, tokenName, tokenSymbol, incentivesController)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DelegationAwareAToken{DelegationAwareATokenCaller: DelegationAwareATokenCaller{contract: contract}, DelegationAwareATokenTransactor: DelegationAwareATokenTransactor{contract: contract}, DelegationAwareATokenFilterer: DelegationAwareATokenFilterer{contract: contract}}, nil
}

// DelegationAwareAToken is an auto generated Go binding around an Ethereum contract.
type DelegationAwareAToken struct {
	DelegationAwareATokenCaller     // Read-only binding to the contract
	DelegationAwareATokenTransactor // Write-only binding to the contract
	DelegationAwareATokenFilterer   // Log filterer for contract events
}

// DelegationAwareATokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type DelegationAwareATokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DelegationAwareATokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DelegationAwareATokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DelegationAwareATokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DelegationAwareATokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DelegationAwareATokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DelegationAwareATokenSession struct {
	Contract     *DelegationAwareAToken // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// DelegationAwareATokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DelegationAwareATokenCallerSession struct {
	Contract *DelegationAwareATokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// DelegationAwareATokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DelegationAwareATokenTransactorSession struct {
	Contract     *DelegationAwareATokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// DelegationAwareATokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type DelegationAwareATokenRaw struct {
	Contract *DelegationAwareAToken // Generic contract binding to access the raw methods on
}

// DelegationAwareATokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DelegationAwareATokenCallerRaw struct {
	Contract *DelegationAwareATokenCaller // Generic read-only contract binding to access the raw methods on
}

// DelegationAwareATokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DelegationAwareATokenTransactorRaw struct {
	Contract *DelegationAwareATokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDelegationAwareAToken creates a new instance of DelegationAwareAToken, bound to a specific deployed contract.
func NewDelegationAwareAToken(address common.Address, backend bind.ContractBackend) (*DelegationAwareAToken, error) {
	contract, err := bindDelegationAwareAToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DelegationAwareAToken{DelegationAwareATokenCaller: DelegationAwareATokenCaller{contract: contract}, DelegationAwareATokenTransactor: DelegationAwareATokenTransactor{contract: contract}, DelegationAwareATokenFilterer: DelegationAwareATokenFilterer{contract: contract}}, nil
}

// NewDelegationAwareATokenCaller creates a new read-only instance of DelegationAwareAToken, bound to a specific deployed contract.
func NewDelegationAwareATokenCaller(address common.Address, caller bind.ContractCaller) (*DelegationAwareATokenCaller, error) {
	contract, err := bindDelegationAwareAToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DelegationAwareATokenCaller{contract: contract}, nil
}

// NewDelegationAwareATokenTransactor creates a new write-only instance of DelegationAwareAToken, bound to a specific deployed contract.
func NewDelegationAwareATokenTransactor(address common.Address, transactor bind.ContractTransactor) (*DelegationAwareATokenTransactor, error) {
	contract, err := bindDelegationAwareAToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DelegationAwareATokenTransactor{contract: contract}, nil
}

// NewDelegationAwareATokenFilterer creates a new log filterer instance of DelegationAwareAToken, bound to a specific deployed contract.
func NewDelegationAwareATokenFilterer(address common.Address, filterer bind.ContractFilterer) (*DelegationAwareATokenFilterer, error) {
	contract, err := bindDelegationAwareAToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DelegationAwareATokenFilterer{contract: contract}, nil
}

// bindDelegationAwareAToken binds a generic wrapper to an already deployed contract.
func bindDelegationAwareAToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DelegationAwareATokenABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DelegationAwareAToken *DelegationAwareATokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DelegationAwareAToken.Contract.DelegationAwareATokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DelegationAwareAToken *DelegationAwareATokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DelegationAwareAToken.Contract.DelegationAwareATokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DelegationAwareAToken *DelegationAwareATokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DelegationAwareAToken.Contract.DelegationAwareATokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DelegationAwareAToken *DelegationAwareATokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DelegationAwareAToken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DelegationAwareAToken *DelegationAwareATokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DelegationAwareAToken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DelegationAwareAToken *DelegationAwareATokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DelegationAwareAToken.Contract.contract.Transact(opts, method, params...)
}

// ATOKENREVISION is a free data retrieval call binding the contract method 0x0bd7ad3b.
//
// Solidity: function ATOKEN_REVISION() view returns(uint256)
func (_DelegationAwareAToken *DelegationAwareATokenCaller) ATOKENREVISION(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DelegationAwareAToken.contract.Call(opts, &out, "ATOKEN_REVISION")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ATOKENREVISION is a free data retrieval call binding the contract method 0x0bd7ad3b.
//
// Solidity: function ATOKEN_REVISION() view returns(uint256)
func (_DelegationAwareAToken *DelegationAwareATokenSession) ATOKENREVISION() (*big.Int, error) {
	return _DelegationAwareAToken.Contract.ATOKENREVISION(&_DelegationAwareAToken.CallOpts)
}

// ATOKENREVISION is a free data retrieval call binding the contract method 0x0bd7ad3b.
//
// Solidity: function ATOKEN_REVISION() view returns(uint256)
func (_DelegationAwareAToken *DelegationAwareATokenCallerSession) ATOKENREVISION() (*big.Int, error) {
	return _DelegationAwareAToken.Contract.ATOKENREVISION(&_DelegationAwareAToken.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_DelegationAwareAToken *DelegationAwareATokenCaller) DOMAINSEPARATOR(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _DelegationAwareAToken.contract.Call(opts, &out, "DOMAIN_SEPARATOR")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_DelegationAwareAToken *DelegationAwareATokenSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _DelegationAwareAToken.Contract.DOMAINSEPARATOR(&_DelegationAwareAToken.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_DelegationAwareAToken *DelegationAwareATokenCallerSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _DelegationAwareAToken.Contract.DOMAINSEPARATOR(&_DelegationAwareAToken.CallOpts)
}

// EIP712REVISION is a free data retrieval call binding the contract method 0x78160376.
//
// Solidity: function EIP712_REVISION() view returns(bytes)
func (_DelegationAwareAToken *DelegationAwareATokenCaller) EIP712REVISION(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _DelegationAwareAToken.contract.Call(opts, &out, "EIP712_REVISION")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// EIP712REVISION is a free data retrieval call binding the contract method 0x78160376.
//
// Solidity: function EIP712_REVISION() view returns(bytes)
func (_DelegationAwareAToken *DelegationAwareATokenSession) EIP712REVISION() ([]byte, error) {
	return _DelegationAwareAToken.Contract.EIP712REVISION(&_DelegationAwareAToken.CallOpts)
}

// EIP712REVISION is a free data retrieval call binding the contract method 0x78160376.
//
// Solidity: function EIP712_REVISION() view returns(bytes)
func (_DelegationAwareAToken *DelegationAwareATokenCallerSession) EIP712REVISION() ([]byte, error) {
	return _DelegationAwareAToken.Contract.EIP712REVISION(&_DelegationAwareAToken.CallOpts)
}

// PERMITTYPEHASH is a free data retrieval call binding the contract method 0x30adf81f.
//
// Solidity: function PERMIT_TYPEHASH() view returns(bytes32)
func (_DelegationAwareAToken *DelegationAwareATokenCaller) PERMITTYPEHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _DelegationAwareAToken.contract.Call(opts, &out, "PERMIT_TYPEHASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PERMITTYPEHASH is a free data retrieval call binding the contract method 0x30adf81f.
//
// Solidity: function PERMIT_TYPEHASH() view returns(bytes32)
func (_DelegationAwareAToken *DelegationAwareATokenSession) PERMITTYPEHASH() ([32]byte, error) {
	return _DelegationAwareAToken.Contract.PERMITTYPEHASH(&_DelegationAwareAToken.CallOpts)
}

// PERMITTYPEHASH is a free data retrieval call binding the contract method 0x30adf81f.
//
// Solidity: function PERMIT_TYPEHASH() view returns(bytes32)
func (_DelegationAwareAToken *DelegationAwareATokenCallerSession) PERMITTYPEHASH() ([32]byte, error) {
	return _DelegationAwareAToken.Contract.PERMITTYPEHASH(&_DelegationAwareAToken.CallOpts)
}

// POOL is a free data retrieval call binding the contract method 0x7535d246.
//
// Solidity: function POOL() view returns(address)
func (_DelegationAwareAToken *DelegationAwareATokenCaller) POOL(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DelegationAwareAToken.contract.Call(opts, &out, "POOL")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// POOL is a free data retrieval call binding the contract method 0x7535d246.
//
// Solidity: function POOL() view returns(address)
func (_DelegationAwareAToken *DelegationAwareATokenSession) POOL() (common.Address, error) {
	return _DelegationAwareAToken.Contract.POOL(&_DelegationAwareAToken.CallOpts)
}

// POOL is a free data retrieval call binding the contract method 0x7535d246.
//
// Solidity: function POOL() view returns(address)
func (_DelegationAwareAToken *DelegationAwareATokenCallerSession) POOL() (common.Address, error) {
	return _DelegationAwareAToken.Contract.POOL(&_DelegationAwareAToken.CallOpts)
}

// RESERVETREASURYADDRESS is a free data retrieval call binding the contract method 0xae167335.
//
// Solidity: function RESERVE_TREASURY_ADDRESS() view returns(address)
func (_DelegationAwareAToken *DelegationAwareATokenCaller) RESERVETREASURYADDRESS(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DelegationAwareAToken.contract.Call(opts, &out, "RESERVE_TREASURY_ADDRESS")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RESERVETREASURYADDRESS is a free data retrieval call binding the contract method 0xae167335.
//
// Solidity: function RESERVE_TREASURY_ADDRESS() view returns(address)
func (_DelegationAwareAToken *DelegationAwareATokenSession) RESERVETREASURYADDRESS() (common.Address, error) {
	return _DelegationAwareAToken.Contract.RESERVETREASURYADDRESS(&_DelegationAwareAToken.CallOpts)
}

// RESERVETREASURYADDRESS is a free data retrieval call binding the contract method 0xae167335.
//
// Solidity: function RESERVE_TREASURY_ADDRESS() view returns(address)
func (_DelegationAwareAToken *DelegationAwareATokenCallerSession) RESERVETREASURYADDRESS() (common.Address, error) {
	return _DelegationAwareAToken.Contract.RESERVETREASURYADDRESS(&_DelegationAwareAToken.CallOpts)
}

// UINTMAXVALUE is a free data retrieval call binding the contract method 0xd0fc81d2.
//
// Solidity: function UINT_MAX_VALUE() view returns(uint256)
func (_DelegationAwareAToken *DelegationAwareATokenCaller) UINTMAXVALUE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DelegationAwareAToken.contract.Call(opts, &out, "UINT_MAX_VALUE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UINTMAXVALUE is a free data retrieval call binding the contract method 0xd0fc81d2.
//
// Solidity: function UINT_MAX_VALUE() view returns(uint256)
func (_DelegationAwareAToken *DelegationAwareATokenSession) UINTMAXVALUE() (*big.Int, error) {
	return _DelegationAwareAToken.Contract.UINTMAXVALUE(&_DelegationAwareAToken.CallOpts)
}

// UINTMAXVALUE is a free data retrieval call binding the contract method 0xd0fc81d2.
//
// Solidity: function UINT_MAX_VALUE() view returns(uint256)
func (_DelegationAwareAToken *DelegationAwareATokenCallerSession) UINTMAXVALUE() (*big.Int, error) {
	return _DelegationAwareAToken.Contract.UINTMAXVALUE(&_DelegationAwareAToken.CallOpts)
}

// UNDERLYINGASSETADDRESS is a free data retrieval call binding the contract method 0xb16a19de.
//
// Solidity: function UNDERLYING_ASSET_ADDRESS() view returns(address)
func (_DelegationAwareAToken *DelegationAwareATokenCaller) UNDERLYINGASSETADDRESS(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DelegationAwareAToken.contract.Call(opts, &out, "UNDERLYING_ASSET_ADDRESS")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// UNDERLYINGASSETADDRESS is a free data retrieval call binding the contract method 0xb16a19de.
//
// Solidity: function UNDERLYING_ASSET_ADDRESS() view returns(address)
func (_DelegationAwareAToken *DelegationAwareATokenSession) UNDERLYINGASSETADDRESS() (common.Address, error) {
	return _DelegationAwareAToken.Contract.UNDERLYINGASSETADDRESS(&_DelegationAwareAToken.CallOpts)
}

// UNDERLYINGASSETADDRESS is a free data retrieval call binding the contract method 0xb16a19de.
//
// Solidity: function UNDERLYING_ASSET_ADDRESS() view returns(address)
func (_DelegationAwareAToken *DelegationAwareATokenCallerSession) UNDERLYINGASSETADDRESS() (common.Address, error) {
	return _DelegationAwareAToken.Contract.UNDERLYINGASSETADDRESS(&_DelegationAwareAToken.CallOpts)
}

// Nonces is a free data retrieval call binding the contract method 0xb9844d8d.
//
// Solidity: function _nonces(address ) view returns(uint256)
func (_DelegationAwareAToken *DelegationAwareATokenCaller) Nonces(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _DelegationAwareAToken.contract.Call(opts, &out, "_nonces", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonces is a free data retrieval call binding the contract method 0xb9844d8d.
//
// Solidity: function _nonces(address ) view returns(uint256)
func (_DelegationAwareAToken *DelegationAwareATokenSession) Nonces(arg0 common.Address) (*big.Int, error) {
	return _DelegationAwareAToken.Contract.Nonces(&_DelegationAwareAToken.CallOpts, arg0)
}

// Nonces is a free data retrieval call binding the contract method 0xb9844d8d.
//
// Solidity: function _nonces(address ) view returns(uint256)
func (_DelegationAwareAToken *DelegationAwareATokenCallerSession) Nonces(arg0 common.Address) (*big.Int, error) {
	return _DelegationAwareAToken.Contract.Nonces(&_DelegationAwareAToken.CallOpts, arg0)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_DelegationAwareAToken *DelegationAwareATokenCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _DelegationAwareAToken.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_DelegationAwareAToken *DelegationAwareATokenSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _DelegationAwareAToken.Contract.Allowance(&_DelegationAwareAToken.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_DelegationAwareAToken *DelegationAwareATokenCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _DelegationAwareAToken.Contract.Allowance(&_DelegationAwareAToken.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address user) view returns(uint256)
func (_DelegationAwareAToken *DelegationAwareATokenCaller) BalanceOf(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _DelegationAwareAToken.contract.Call(opts, &out, "balanceOf", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address user) view returns(uint256)
func (_DelegationAwareAToken *DelegationAwareATokenSession) BalanceOf(user common.Address) (*big.Int, error) {
	return _DelegationAwareAToken.Contract.BalanceOf(&_DelegationAwareAToken.CallOpts, user)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address user) view returns(uint256)
func (_DelegationAwareAToken *DelegationAwareATokenCallerSession) BalanceOf(user common.Address) (*big.Int, error) {
	return _DelegationAwareAToken.Contract.BalanceOf(&_DelegationAwareAToken.CallOpts, user)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_DelegationAwareAToken *DelegationAwareATokenCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _DelegationAwareAToken.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_DelegationAwareAToken *DelegationAwareATokenSession) Decimals() (uint8, error) {
	return _DelegationAwareAToken.Contract.Decimals(&_DelegationAwareAToken.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_DelegationAwareAToken *DelegationAwareATokenCallerSession) Decimals() (uint8, error) {
	return _DelegationAwareAToken.Contract.Decimals(&_DelegationAwareAToken.CallOpts)
}

// GetScaledUserBalanceAndSupply is a free data retrieval call binding the contract method 0x0afbcdc9.
//
// Solidity: function getScaledUserBalanceAndSupply(address user) view returns(uint256, uint256)
func (_DelegationAwareAToken *DelegationAwareATokenCaller) GetScaledUserBalanceAndSupply(opts *bind.CallOpts, user common.Address) (*big.Int, *big.Int, error) {
	var out []interface{}
	err := _DelegationAwareAToken.contract.Call(opts, &out, "getScaledUserBalanceAndSupply", user)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// GetScaledUserBalanceAndSupply is a free data retrieval call binding the contract method 0x0afbcdc9.
//
// Solidity: function getScaledUserBalanceAndSupply(address user) view returns(uint256, uint256)
func (_DelegationAwareAToken *DelegationAwareATokenSession) GetScaledUserBalanceAndSupply(user common.Address) (*big.Int, *big.Int, error) {
	return _DelegationAwareAToken.Contract.GetScaledUserBalanceAndSupply(&_DelegationAwareAToken.CallOpts, user)
}

// GetScaledUserBalanceAndSupply is a free data retrieval call binding the contract method 0x0afbcdc9.
//
// Solidity: function getScaledUserBalanceAndSupply(address user) view returns(uint256, uint256)
func (_DelegationAwareAToken *DelegationAwareATokenCallerSession) GetScaledUserBalanceAndSupply(user common.Address) (*big.Int, *big.Int, error) {
	return _DelegationAwareAToken.Contract.GetScaledUserBalanceAndSupply(&_DelegationAwareAToken.CallOpts, user)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_DelegationAwareAToken *DelegationAwareATokenCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _DelegationAwareAToken.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_DelegationAwareAToken *DelegationAwareATokenSession) Name() (string, error) {
	return _DelegationAwareAToken.Contract.Name(&_DelegationAwareAToken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_DelegationAwareAToken *DelegationAwareATokenCallerSession) Name() (string, error) {
	return _DelegationAwareAToken.Contract.Name(&_DelegationAwareAToken.CallOpts)
}

// ScaledBalanceOf is a free data retrieval call binding the contract method 0x1da24f3e.
//
// Solidity: function scaledBalanceOf(address user) view returns(uint256)
func (_DelegationAwareAToken *DelegationAwareATokenCaller) ScaledBalanceOf(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _DelegationAwareAToken.contract.Call(opts, &out, "scaledBalanceOf", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ScaledBalanceOf is a free data retrieval call binding the contract method 0x1da24f3e.
//
// Solidity: function scaledBalanceOf(address user) view returns(uint256)
func (_DelegationAwareAToken *DelegationAwareATokenSession) ScaledBalanceOf(user common.Address) (*big.Int, error) {
	return _DelegationAwareAToken.Contract.ScaledBalanceOf(&_DelegationAwareAToken.CallOpts, user)
}

// ScaledBalanceOf is a free data retrieval call binding the contract method 0x1da24f3e.
//
// Solidity: function scaledBalanceOf(address user) view returns(uint256)
func (_DelegationAwareAToken *DelegationAwareATokenCallerSession) ScaledBalanceOf(user common.Address) (*big.Int, error) {
	return _DelegationAwareAToken.Contract.ScaledBalanceOf(&_DelegationAwareAToken.CallOpts, user)
}

// ScaledTotalSupply is a free data retrieval call binding the contract method 0xb1bf962d.
//
// Solidity: function scaledTotalSupply() view returns(uint256)
func (_DelegationAwareAToken *DelegationAwareATokenCaller) ScaledTotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DelegationAwareAToken.contract.Call(opts, &out, "scaledTotalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ScaledTotalSupply is a free data retrieval call binding the contract method 0xb1bf962d.
//
// Solidity: function scaledTotalSupply() view returns(uint256)
func (_DelegationAwareAToken *DelegationAwareATokenSession) ScaledTotalSupply() (*big.Int, error) {
	return _DelegationAwareAToken.Contract.ScaledTotalSupply(&_DelegationAwareAToken.CallOpts)
}

// ScaledTotalSupply is a free data retrieval call binding the contract method 0xb1bf962d.
//
// Solidity: function scaledTotalSupply() view returns(uint256)
func (_DelegationAwareAToken *DelegationAwareATokenCallerSession) ScaledTotalSupply() (*big.Int, error) {
	return _DelegationAwareAToken.Contract.ScaledTotalSupply(&_DelegationAwareAToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_DelegationAwareAToken *DelegationAwareATokenCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _DelegationAwareAToken.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_DelegationAwareAToken *DelegationAwareATokenSession) Symbol() (string, error) {
	return _DelegationAwareAToken.Contract.Symbol(&_DelegationAwareAToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_DelegationAwareAToken *DelegationAwareATokenCallerSession) Symbol() (string, error) {
	return _DelegationAwareAToken.Contract.Symbol(&_DelegationAwareAToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_DelegationAwareAToken *DelegationAwareATokenCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DelegationAwareAToken.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_DelegationAwareAToken *DelegationAwareATokenSession) TotalSupply() (*big.Int, error) {
	return _DelegationAwareAToken.Contract.TotalSupply(&_DelegationAwareAToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_DelegationAwareAToken *DelegationAwareATokenCallerSession) TotalSupply() (*big.Int, error) {
	return _DelegationAwareAToken.Contract.TotalSupply(&_DelegationAwareAToken.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_DelegationAwareAToken *DelegationAwareATokenTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _DelegationAwareAToken.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_DelegationAwareAToken *DelegationAwareATokenSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _DelegationAwareAToken.Contract.Approve(&_DelegationAwareAToken.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_DelegationAwareAToken *DelegationAwareATokenTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _DelegationAwareAToken.Contract.Approve(&_DelegationAwareAToken.TransactOpts, spender, amount)
}

// Burn is a paid mutator transaction binding the contract method 0xd7020d0a.
//
// Solidity: function burn(address user, address receiverOfUnderlying, uint256 amount, uint256 index) returns()
func (_DelegationAwareAToken *DelegationAwareATokenTransactor) Burn(opts *bind.TransactOpts, user common.Address, receiverOfUnderlying common.Address, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _DelegationAwareAToken.contract.Transact(opts, "burn", user, receiverOfUnderlying, amount, index)
}

// Burn is a paid mutator transaction binding the contract method 0xd7020d0a.
//
// Solidity: function burn(address user, address receiverOfUnderlying, uint256 amount, uint256 index) returns()
func (_DelegationAwareAToken *DelegationAwareATokenSession) Burn(user common.Address, receiverOfUnderlying common.Address, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _DelegationAwareAToken.Contract.Burn(&_DelegationAwareAToken.TransactOpts, user, receiverOfUnderlying, amount, index)
}

// Burn is a paid mutator transaction binding the contract method 0xd7020d0a.
//
// Solidity: function burn(address user, address receiverOfUnderlying, uint256 amount, uint256 index) returns()
func (_DelegationAwareAToken *DelegationAwareATokenTransactorSession) Burn(user common.Address, receiverOfUnderlying common.Address, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _DelegationAwareAToken.Contract.Burn(&_DelegationAwareAToken.TransactOpts, user, receiverOfUnderlying, amount, index)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_DelegationAwareAToken *DelegationAwareATokenTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _DelegationAwareAToken.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_DelegationAwareAToken *DelegationAwareATokenSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _DelegationAwareAToken.Contract.DecreaseAllowance(&_DelegationAwareAToken.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_DelegationAwareAToken *DelegationAwareATokenTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _DelegationAwareAToken.Contract.DecreaseAllowance(&_DelegationAwareAToken.TransactOpts, spender, subtractedValue)
}

// DelegateUnderlyingTo is a paid mutator transaction binding the contract method 0x2f114618.
//
// Solidity: function delegateUnderlyingTo(address delegatee) returns()
func (_DelegationAwareAToken *DelegationAwareATokenTransactor) DelegateUnderlyingTo(opts *bind.TransactOpts, delegatee common.Address) (*types.Transaction, error) {
	return _DelegationAwareAToken.contract.Transact(opts, "delegateUnderlyingTo", delegatee)
}

// DelegateUnderlyingTo is a paid mutator transaction binding the contract method 0x2f114618.
//
// Solidity: function delegateUnderlyingTo(address delegatee) returns()
func (_DelegationAwareAToken *DelegationAwareATokenSession) DelegateUnderlyingTo(delegatee common.Address) (*types.Transaction, error) {
	return _DelegationAwareAToken.Contract.DelegateUnderlyingTo(&_DelegationAwareAToken.TransactOpts, delegatee)
}

// DelegateUnderlyingTo is a paid mutator transaction binding the contract method 0x2f114618.
//
// Solidity: function delegateUnderlyingTo(address delegatee) returns()
func (_DelegationAwareAToken *DelegationAwareATokenTransactorSession) DelegateUnderlyingTo(delegatee common.Address) (*types.Transaction, error) {
	return _DelegationAwareAToken.Contract.DelegateUnderlyingTo(&_DelegationAwareAToken.TransactOpts, delegatee)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_DelegationAwareAToken *DelegationAwareATokenTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _DelegationAwareAToken.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_DelegationAwareAToken *DelegationAwareATokenSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _DelegationAwareAToken.Contract.IncreaseAllowance(&_DelegationAwareAToken.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_DelegationAwareAToken *DelegationAwareATokenTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _DelegationAwareAToken.Contract.IncreaseAllowance(&_DelegationAwareAToken.TransactOpts, spender, addedValue)
}

// Initialize is a paid mutator transaction binding the contract method 0x3118724e.
//
// Solidity: function initialize(uint8 underlyingAssetDecimals, string tokenName, string tokenSymbol) returns()
func (_DelegationAwareAToken *DelegationAwareATokenTransactor) Initialize(opts *bind.TransactOpts, underlyingAssetDecimals uint8, tokenName string, tokenSymbol string) (*types.Transaction, error) {
	return _DelegationAwareAToken.contract.Transact(opts, "initialize", underlyingAssetDecimals, tokenName, tokenSymbol)
}

// Initialize is a paid mutator transaction binding the contract method 0x3118724e.
//
// Solidity: function initialize(uint8 underlyingAssetDecimals, string tokenName, string tokenSymbol) returns()
func (_DelegationAwareAToken *DelegationAwareATokenSession) Initialize(underlyingAssetDecimals uint8, tokenName string, tokenSymbol string) (*types.Transaction, error) {
	return _DelegationAwareAToken.Contract.Initialize(&_DelegationAwareAToken.TransactOpts, underlyingAssetDecimals, tokenName, tokenSymbol)
}

// Initialize is a paid mutator transaction binding the contract method 0x3118724e.
//
// Solidity: function initialize(uint8 underlyingAssetDecimals, string tokenName, string tokenSymbol) returns()
func (_DelegationAwareAToken *DelegationAwareATokenTransactorSession) Initialize(underlyingAssetDecimals uint8, tokenName string, tokenSymbol string) (*types.Transaction, error) {
	return _DelegationAwareAToken.Contract.Initialize(&_DelegationAwareAToken.TransactOpts, underlyingAssetDecimals, tokenName, tokenSymbol)
}

// Mint is a paid mutator transaction binding the contract method 0x156e29f6.
//
// Solidity: function mint(address user, uint256 amount, uint256 index) returns(bool)
func (_DelegationAwareAToken *DelegationAwareATokenTransactor) Mint(opts *bind.TransactOpts, user common.Address, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _DelegationAwareAToken.contract.Transact(opts, "mint", user, amount, index)
}

// Mint is a paid mutator transaction binding the contract method 0x156e29f6.
//
// Solidity: function mint(address user, uint256 amount, uint256 index) returns(bool)
func (_DelegationAwareAToken *DelegationAwareATokenSession) Mint(user common.Address, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _DelegationAwareAToken.Contract.Mint(&_DelegationAwareAToken.TransactOpts, user, amount, index)
}

// Mint is a paid mutator transaction binding the contract method 0x156e29f6.
//
// Solidity: function mint(address user, uint256 amount, uint256 index) returns(bool)
func (_DelegationAwareAToken *DelegationAwareATokenTransactorSession) Mint(user common.Address, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _DelegationAwareAToken.Contract.Mint(&_DelegationAwareAToken.TransactOpts, user, amount, index)
}

// MintToTreasury is a paid mutator transaction binding the contract method 0x7df5bd3b.
//
// Solidity: function mintToTreasury(uint256 amount, uint256 index) returns()
func (_DelegationAwareAToken *DelegationAwareATokenTransactor) MintToTreasury(opts *bind.TransactOpts, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _DelegationAwareAToken.contract.Transact(opts, "mintToTreasury", amount, index)
}

// MintToTreasury is a paid mutator transaction binding the contract method 0x7df5bd3b.
//
// Solidity: function mintToTreasury(uint256 amount, uint256 index) returns()
func (_DelegationAwareAToken *DelegationAwareATokenSession) MintToTreasury(amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _DelegationAwareAToken.Contract.MintToTreasury(&_DelegationAwareAToken.TransactOpts, amount, index)
}

// MintToTreasury is a paid mutator transaction binding the contract method 0x7df5bd3b.
//
// Solidity: function mintToTreasury(uint256 amount, uint256 index) returns()
func (_DelegationAwareAToken *DelegationAwareATokenTransactorSession) MintToTreasury(amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _DelegationAwareAToken.Contract.MintToTreasury(&_DelegationAwareAToken.TransactOpts, amount, index)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_DelegationAwareAToken *DelegationAwareATokenTransactor) Permit(opts *bind.TransactOpts, owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _DelegationAwareAToken.contract.Transact(opts, "permit", owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_DelegationAwareAToken *DelegationAwareATokenSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _DelegationAwareAToken.Contract.Permit(&_DelegationAwareAToken.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_DelegationAwareAToken *DelegationAwareATokenTransactorSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _DelegationAwareAToken.Contract.Permit(&_DelegationAwareAToken.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_DelegationAwareAToken *DelegationAwareATokenTransactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _DelegationAwareAToken.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_DelegationAwareAToken *DelegationAwareATokenSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _DelegationAwareAToken.Contract.Transfer(&_DelegationAwareAToken.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_DelegationAwareAToken *DelegationAwareATokenTransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _DelegationAwareAToken.Contract.Transfer(&_DelegationAwareAToken.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_DelegationAwareAToken *DelegationAwareATokenTransactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _DelegationAwareAToken.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_DelegationAwareAToken *DelegationAwareATokenSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _DelegationAwareAToken.Contract.TransferFrom(&_DelegationAwareAToken.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_DelegationAwareAToken *DelegationAwareATokenTransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _DelegationAwareAToken.Contract.TransferFrom(&_DelegationAwareAToken.TransactOpts, sender, recipient, amount)
}

// TransferOnLiquidation is a paid mutator transaction binding the contract method 0xf866c319.
//
// Solidity: function transferOnLiquidation(address from, address to, uint256 value) returns()
func (_DelegationAwareAToken *DelegationAwareATokenTransactor) TransferOnLiquidation(opts *bind.TransactOpts, from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _DelegationAwareAToken.contract.Transact(opts, "transferOnLiquidation", from, to, value)
}

// TransferOnLiquidation is a paid mutator transaction binding the contract method 0xf866c319.
//
// Solidity: function transferOnLiquidation(address from, address to, uint256 value) returns()
func (_DelegationAwareAToken *DelegationAwareATokenSession) TransferOnLiquidation(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _DelegationAwareAToken.Contract.TransferOnLiquidation(&_DelegationAwareAToken.TransactOpts, from, to, value)
}

// TransferOnLiquidation is a paid mutator transaction binding the contract method 0xf866c319.
//
// Solidity: function transferOnLiquidation(address from, address to, uint256 value) returns()
func (_DelegationAwareAToken *DelegationAwareATokenTransactorSession) TransferOnLiquidation(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _DelegationAwareAToken.Contract.TransferOnLiquidation(&_DelegationAwareAToken.TransactOpts, from, to, value)
}

// TransferUnderlyingTo is a paid mutator transaction binding the contract method 0x4efecaa5.
//
// Solidity: function transferUnderlyingTo(address target, uint256 amount) returns(uint256)
func (_DelegationAwareAToken *DelegationAwareATokenTransactor) TransferUnderlyingTo(opts *bind.TransactOpts, target common.Address, amount *big.Int) (*types.Transaction, error) {
	return _DelegationAwareAToken.contract.Transact(opts, "transferUnderlyingTo", target, amount)
}

// TransferUnderlyingTo is a paid mutator transaction binding the contract method 0x4efecaa5.
//
// Solidity: function transferUnderlyingTo(address target, uint256 amount) returns(uint256)
func (_DelegationAwareAToken *DelegationAwareATokenSession) TransferUnderlyingTo(target common.Address, amount *big.Int) (*types.Transaction, error) {
	return _DelegationAwareAToken.Contract.TransferUnderlyingTo(&_DelegationAwareAToken.TransactOpts, target, amount)
}

// TransferUnderlyingTo is a paid mutator transaction binding the contract method 0x4efecaa5.
//
// Solidity: function transferUnderlyingTo(address target, uint256 amount) returns(uint256)
func (_DelegationAwareAToken *DelegationAwareATokenTransactorSession) TransferUnderlyingTo(target common.Address, amount *big.Int) (*types.Transaction, error) {
	return _DelegationAwareAToken.Contract.TransferUnderlyingTo(&_DelegationAwareAToken.TransactOpts, target, amount)
}

// DelegationAwareATokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the DelegationAwareAToken contract.
type DelegationAwareATokenApprovalIterator struct {
	Event *DelegationAwareATokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DelegationAwareATokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DelegationAwareATokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DelegationAwareATokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DelegationAwareATokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DelegationAwareATokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DelegationAwareATokenApproval represents a Approval event raised by the DelegationAwareAToken contract.
type DelegationAwareATokenApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_DelegationAwareAToken *DelegationAwareATokenFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*DelegationAwareATokenApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _DelegationAwareAToken.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &DelegationAwareATokenApprovalIterator{contract: _DelegationAwareAToken.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_DelegationAwareAToken *DelegationAwareATokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *DelegationAwareATokenApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _DelegationAwareAToken.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DelegationAwareATokenApproval)
				if err := _DelegationAwareAToken.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_DelegationAwareAToken *DelegationAwareATokenFilterer) ParseApproval(log types.Log) (*DelegationAwareATokenApproval, error) {
	event := new(DelegationAwareATokenApproval)
	if err := _DelegationAwareAToken.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DelegationAwareATokenBalanceTransferIterator is returned from FilterBalanceTransfer and is used to iterate over the raw logs and unpacked data for BalanceTransfer events raised by the DelegationAwareAToken contract.
type DelegationAwareATokenBalanceTransferIterator struct {
	Event *DelegationAwareATokenBalanceTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DelegationAwareATokenBalanceTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DelegationAwareATokenBalanceTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DelegationAwareATokenBalanceTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DelegationAwareATokenBalanceTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DelegationAwareATokenBalanceTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DelegationAwareATokenBalanceTransfer represents a BalanceTransfer event raised by the DelegationAwareAToken contract.
type DelegationAwareATokenBalanceTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Index *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterBalanceTransfer is a free log retrieval operation binding the contract event 0x4beccb90f994c31aced7a23b5611020728a23d8ec5cddd1a3e9d97b96fda8666.
//
// Solidity: event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index)
func (_DelegationAwareAToken *DelegationAwareATokenFilterer) FilterBalanceTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*DelegationAwareATokenBalanceTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _DelegationAwareAToken.contract.FilterLogs(opts, "BalanceTransfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &DelegationAwareATokenBalanceTransferIterator{contract: _DelegationAwareAToken.contract, event: "BalanceTransfer", logs: logs, sub: sub}, nil
}

// WatchBalanceTransfer is a free log subscription operation binding the contract event 0x4beccb90f994c31aced7a23b5611020728a23d8ec5cddd1a3e9d97b96fda8666.
//
// Solidity: event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index)
func (_DelegationAwareAToken *DelegationAwareATokenFilterer) WatchBalanceTransfer(opts *bind.WatchOpts, sink chan<- *DelegationAwareATokenBalanceTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _DelegationAwareAToken.contract.WatchLogs(opts, "BalanceTransfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DelegationAwareATokenBalanceTransfer)
				if err := _DelegationAwareAToken.contract.UnpackLog(event, "BalanceTransfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBalanceTransfer is a log parse operation binding the contract event 0x4beccb90f994c31aced7a23b5611020728a23d8ec5cddd1a3e9d97b96fda8666.
//
// Solidity: event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index)
func (_DelegationAwareAToken *DelegationAwareATokenFilterer) ParseBalanceTransfer(log types.Log) (*DelegationAwareATokenBalanceTransfer, error) {
	event := new(DelegationAwareATokenBalanceTransfer)
	if err := _DelegationAwareAToken.contract.UnpackLog(event, "BalanceTransfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DelegationAwareATokenBurnIterator is returned from FilterBurn and is used to iterate over the raw logs and unpacked data for Burn events raised by the DelegationAwareAToken contract.
type DelegationAwareATokenBurnIterator struct {
	Event *DelegationAwareATokenBurn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DelegationAwareATokenBurnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DelegationAwareATokenBurn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DelegationAwareATokenBurn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DelegationAwareATokenBurnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DelegationAwareATokenBurnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DelegationAwareATokenBurn represents a Burn event raised by the DelegationAwareAToken contract.
type DelegationAwareATokenBurn struct {
	From   common.Address
	Target common.Address
	Value  *big.Int
	Index  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBurn is a free log retrieval operation binding the contract event 0x5d624aa9c148153ab3446c1b154f660ee7701e549fe9b62dab7171b1c80e6fa2.
//
// Solidity: event Burn(address indexed from, address indexed target, uint256 value, uint256 index)
func (_DelegationAwareAToken *DelegationAwareATokenFilterer) FilterBurn(opts *bind.FilterOpts, from []common.Address, target []common.Address) (*DelegationAwareATokenBurnIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}

	logs, sub, err := _DelegationAwareAToken.contract.FilterLogs(opts, "Burn", fromRule, targetRule)
	if err != nil {
		return nil, err
	}
	return &DelegationAwareATokenBurnIterator{contract: _DelegationAwareAToken.contract, event: "Burn", logs: logs, sub: sub}, nil
}

// WatchBurn is a free log subscription operation binding the contract event 0x5d624aa9c148153ab3446c1b154f660ee7701e549fe9b62dab7171b1c80e6fa2.
//
// Solidity: event Burn(address indexed from, address indexed target, uint256 value, uint256 index)
func (_DelegationAwareAToken *DelegationAwareATokenFilterer) WatchBurn(opts *bind.WatchOpts, sink chan<- *DelegationAwareATokenBurn, from []common.Address, target []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}

	logs, sub, err := _DelegationAwareAToken.contract.WatchLogs(opts, "Burn", fromRule, targetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DelegationAwareATokenBurn)
				if err := _DelegationAwareAToken.contract.UnpackLog(event, "Burn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurn is a log parse operation binding the contract event 0x5d624aa9c148153ab3446c1b154f660ee7701e549fe9b62dab7171b1c80e6fa2.
//
// Solidity: event Burn(address indexed from, address indexed target, uint256 value, uint256 index)
func (_DelegationAwareAToken *DelegationAwareATokenFilterer) ParseBurn(log types.Log) (*DelegationAwareATokenBurn, error) {
	event := new(DelegationAwareATokenBurn)
	if err := _DelegationAwareAToken.contract.UnpackLog(event, "Burn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DelegationAwareATokenMintIterator is returned from FilterMint and is used to iterate over the raw logs and unpacked data for Mint events raised by the DelegationAwareAToken contract.
type DelegationAwareATokenMintIterator struct {
	Event *DelegationAwareATokenMint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DelegationAwareATokenMintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DelegationAwareATokenMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DelegationAwareATokenMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DelegationAwareATokenMintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DelegationAwareATokenMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DelegationAwareATokenMint represents a Mint event raised by the DelegationAwareAToken contract.
type DelegationAwareATokenMint struct {
	From  common.Address
	Value *big.Int
	Index *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterMint is a free log retrieval operation binding the contract event 0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f.
//
// Solidity: event Mint(address indexed from, uint256 value, uint256 index)
func (_DelegationAwareAToken *DelegationAwareATokenFilterer) FilterMint(opts *bind.FilterOpts, from []common.Address) (*DelegationAwareATokenMintIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _DelegationAwareAToken.contract.FilterLogs(opts, "Mint", fromRule)
	if err != nil {
		return nil, err
	}
	return &DelegationAwareATokenMintIterator{contract: _DelegationAwareAToken.contract, event: "Mint", logs: logs, sub: sub}, nil
}

// WatchMint is a free log subscription operation binding the contract event 0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f.
//
// Solidity: event Mint(address indexed from, uint256 value, uint256 index)
func (_DelegationAwareAToken *DelegationAwareATokenFilterer) WatchMint(opts *bind.WatchOpts, sink chan<- *DelegationAwareATokenMint, from []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _DelegationAwareAToken.contract.WatchLogs(opts, "Mint", fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DelegationAwareATokenMint)
				if err := _DelegationAwareAToken.contract.UnpackLog(event, "Mint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMint is a log parse operation binding the contract event 0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f.
//
// Solidity: event Mint(address indexed from, uint256 value, uint256 index)
func (_DelegationAwareAToken *DelegationAwareATokenFilterer) ParseMint(log types.Log) (*DelegationAwareATokenMint, error) {
	event := new(DelegationAwareATokenMint)
	if err := _DelegationAwareAToken.contract.UnpackLog(event, "Mint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DelegationAwareATokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the DelegationAwareAToken contract.
type DelegationAwareATokenTransferIterator struct {
	Event *DelegationAwareATokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DelegationAwareATokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DelegationAwareATokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DelegationAwareATokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DelegationAwareATokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DelegationAwareATokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DelegationAwareATokenTransfer represents a Transfer event raised by the DelegationAwareAToken contract.
type DelegationAwareATokenTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_DelegationAwareAToken *DelegationAwareATokenFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*DelegationAwareATokenTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _DelegationAwareAToken.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &DelegationAwareATokenTransferIterator{contract: _DelegationAwareAToken.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_DelegationAwareAToken *DelegationAwareATokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *DelegationAwareATokenTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _DelegationAwareAToken.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DelegationAwareATokenTransfer)
				if err := _DelegationAwareAToken.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_DelegationAwareAToken *DelegationAwareATokenFilterer) ParseTransfer(log types.Log) (*DelegationAwareATokenTransfer, error) {
	event := new(DelegationAwareATokenTransfer)
	if err := _DelegationAwareAToken.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20ABI is the input ABI used to generate the binding from.
const ERC20ABI = "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ERC20Bin is the compiled bytecode used for deploying new contracts.
var ERC20Bin = "0x608060405234801561001057600080fd5b5060405162000c6238038062000c628339818101604052604081101561003557600080fd5b810190808051604051939291908464010000000082111561005557600080fd5b90830190602082018581111561006a57600080fd5b825164010000000081118282018810171561008457600080fd5b82525081516020918201929091019080838360005b838110156100b1578181015183820152602001610099565b50505050905090810190601f1680156100de5780820380516001836020036101000a031916815260200191505b506040526020018051604051939291908464010000000082111561010157600080fd5b90830190602082018581111561011657600080fd5b825164010000000081118282018810171561013057600080fd5b82525081516020918201929091019080838360005b8381101561015d578181015183820152602001610145565b50505050905090810190601f16801561018a5780820380516001836020036101000a031916815260200191505b50604052505082516101a4915060039060208501906101cd565b5080516101b89060049060208401906101cd565b50506005805460ff1916601217905550610260565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061020e57805160ff191683800117855561023b565b8280016001018555821561023b579182015b8281111561023b578251825591602001919060010190610220565b5061024792915061024b565b5090565b5b80821115610247576000815560010161024c565b6109f280620002706000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063395093511161007157806339509351146101d957806370a082311461020557806395d89b411461022b578063a457c2d714610233578063a9059cbb1461025f578063dd62ed3e1461028b576100a9565b806306fdde03146100ae578063095ea7b31461012b57806318160ddd1461016b57806323b872dd14610185578063313ce567146101bb575b600080fd5b6100b66102b9565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100f05781810151838201526020016100d8565b50505050905090810190601f16801561011d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101576004803603604081101561014157600080fd5b506001600160a01b03813516906020013561034f565b604080519115158252519081900360200190f35b61017361036c565b60408051918252519081900360200190f35b6101576004803603606081101561019b57600080fd5b506001600160a01b03813581169160208101359091169060400135610372565b6101c36103f9565b6040805160ff9092168252519081900360200190f35b610157600480360360408110156101ef57600080fd5b506001600160a01b038135169060200135610402565b6101736004803603602081101561021b57600080fd5b50356001600160a01b0316610450565b6100b661046b565b6101576004803603604081101561024957600080fd5b506001600160a01b0381351690602001356104cc565b6101576004803603604081101561027557600080fd5b506001600160a01b038135169060200135610534565b610173600480360360408110156102a157600080fd5b506001600160a01b0381358116916020013516610548565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103455780601f1061031a57610100808354040283529160200191610345565b820191906000526020600020905b81548152906001019060200180831161032857829003601f168201915b5050505050905090565b600061036361035c610573565b8484610577565b50600192915050565b60025490565b600061037f848484610663565b6103ef8461038b610573565b6103ea85604051806060016040528060288152602001610927602891396001600160a01b038a166000908152600160205260408120906103c9610573565b6001600160a01b0316815260208101919091526040016000205491906107be565b610577565b5060019392505050565b60055460ff1690565b600061036361040f610573565b846103ea8560016000610420610573565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490610855565b6001600160a01b031660009081526020819052604090205490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103455780601f1061031a57610100808354040283529160200191610345565b60006103636104d9610573565b846103ea856040518060600160405280602581526020016109986025913960016000610503610573565b6001600160a01b03908116825260208083019390935260409182016000908120918d168152925290205491906107be565b6000610363610541610573565b8484610663565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3390565b6001600160a01b0383166105bc5760405162461bcd60e51b81526004018080602001828103825260248152602001806109746024913960400191505060405180910390fd5b6001600160a01b0382166106015760405162461bcd60e51b81526004018080602001828103825260228152602001806108df6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166106a85760405162461bcd60e51b815260040180806020018281038252602581526020018061094f6025913960400191505060405180910390fd5b6001600160a01b0382166106ed5760405162461bcd60e51b81526004018080602001828103825260238152602001806108bc6023913960400191505060405180910390fd5b6106f88383836108b6565b61073581604051806060016040528060268152602001610901602691396001600160a01b03861660009081526020819052604090205491906107be565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546107649082610855565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000818484111561084d5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156108125781810151838201526020016107fa565b50505050905090810190601f16801561083f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000828201838110156108af576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b50505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220e7683903b331745d3e03c36154ab2bb503a9dd30b12fa302fe2b372f0c4424ad64736f6c634300060c0033"

// DeployERC20 deploys a new Ethereum contract, binding an instance of ERC20 to it.
func DeployERC20(auth *bind.TransactOpts, backend bind.ContractBackend, name string, symbol string) (common.Address, *types.Transaction, *ERC20, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC20ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ERC20Bin), backend, name, symbol)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC20{ERC20Caller: ERC20Caller{contract: contract}, ERC20Transactor: ERC20Transactor{contract: contract}, ERC20Filterer: ERC20Filterer{contract: contract}}, nil
}

// ERC20 is an auto generated Go binding around an Ethereum contract.
type ERC20 struct {
	ERC20Caller     // Read-only binding to the contract
	ERC20Transactor // Write-only binding to the contract
	ERC20Filterer   // Log filterer for contract events
}

// ERC20Caller is an auto generated read-only Go binding around an Ethereum contract.
type ERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC20Session struct {
	Contract     *ERC20            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC20CallerSession struct {
	Contract *ERC20Caller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ERC20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC20TransactorSession struct {
	Contract     *ERC20Transactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC20Raw is an auto generated low-level Go binding around an Ethereum contract.
type ERC20Raw struct {
	Contract *ERC20 // Generic contract binding to access the raw methods on
}

// ERC20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC20CallerRaw struct {
	Contract *ERC20Caller // Generic read-only contract binding to access the raw methods on
}

// ERC20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC20TransactorRaw struct {
	Contract *ERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewERC20 creates a new instance of ERC20, bound to a specific deployed contract.
func NewERC20(address common.Address, backend bind.ContractBackend) (*ERC20, error) {
	contract, err := bindERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC20{ERC20Caller: ERC20Caller{contract: contract}, ERC20Transactor: ERC20Transactor{contract: contract}, ERC20Filterer: ERC20Filterer{contract: contract}}, nil
}

// NewERC20Caller creates a new read-only instance of ERC20, bound to a specific deployed contract.
func NewERC20Caller(address common.Address, caller bind.ContractCaller) (*ERC20Caller, error) {
	contract, err := bindERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20Caller{contract: contract}, nil
}

// NewERC20Transactor creates a new write-only instance of ERC20, bound to a specific deployed contract.
func NewERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*ERC20Transactor, error) {
	contract, err := bindERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20Transactor{contract: contract}, nil
}

// NewERC20Filterer creates a new log filterer instance of ERC20, bound to a specific deployed contract.
func NewERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*ERC20Filterer, error) {
	contract, err := bindERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC20Filterer{contract: contract}, nil
}

// bindERC20 binds a generic wrapper to an already deployed contract.
func bindERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC20ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20 *ERC20Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20.Contract.ERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20 *ERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20.Contract.ERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20 *ERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20.Contract.ERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20 *ERC20CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20 *ERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20 *ERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20 *ERC20Caller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ERC20.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20 *ERC20Session) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ERC20.Contract.Allowance(&_ERC20.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20 *ERC20CallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ERC20.Contract.Allowance(&_ERC20.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20 *ERC20Caller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ERC20.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20 *ERC20Session) BalanceOf(account common.Address) (*big.Int, error) {
	return _ERC20.Contract.BalanceOf(&_ERC20.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20 *ERC20CallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _ERC20.Contract.BalanceOf(&_ERC20.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ERC20 *ERC20Caller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _ERC20.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ERC20 *ERC20Session) Decimals() (uint8, error) {
	return _ERC20.Contract.Decimals(&_ERC20.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ERC20 *ERC20CallerSession) Decimals() (uint8, error) {
	return _ERC20.Contract.Decimals(&_ERC20.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC20 *ERC20Caller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ERC20.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC20 *ERC20Session) Name() (string, error) {
	return _ERC20.Contract.Name(&_ERC20.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC20 *ERC20CallerSession) Name() (string, error) {
	return _ERC20.Contract.Name(&_ERC20.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC20 *ERC20Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ERC20.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC20 *ERC20Session) Symbol() (string, error) {
	return _ERC20.Contract.Symbol(&_ERC20.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC20 *ERC20CallerSession) Symbol() (string, error) {
	return _ERC20.Contract.Symbol(&_ERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20 *ERC20Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20 *ERC20Session) TotalSupply() (*big.Int, error) {
	return _ERC20.Contract.TotalSupply(&_ERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20 *ERC20CallerSession) TotalSupply() (*big.Int, error) {
	return _ERC20.Contract.TotalSupply(&_ERC20.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20 *ERC20Transactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20 *ERC20Session) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.Approve(&_ERC20.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20 *ERC20TransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.Approve(&_ERC20.TransactOpts, spender, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20 *ERC20Transactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20 *ERC20Session) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.DecreaseAllowance(&_ERC20.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20 *ERC20TransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.DecreaseAllowance(&_ERC20.TransactOpts, spender, subtractedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20 *ERC20Transactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20 *ERC20Session) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.IncreaseAllowance(&_ERC20.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20 *ERC20TransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.IncreaseAllowance(&_ERC20.TransactOpts, spender, addedValue)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_ERC20 *ERC20Transactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_ERC20 *ERC20Session) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.Transfer(&_ERC20.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_ERC20 *ERC20TransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.Transfer(&_ERC20.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_ERC20 *ERC20Transactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_ERC20 *ERC20Session) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.TransferFrom(&_ERC20.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_ERC20 *ERC20TransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.TransferFrom(&_ERC20.TransactOpts, sender, recipient, amount)
}

// ERC20ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ERC20 contract.
type ERC20ApprovalIterator struct {
	Event *ERC20Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20Approval represents a Approval event raised by the ERC20 contract.
type ERC20Approval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20 *ERC20Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*ERC20ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ERC20.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &ERC20ApprovalIterator{contract: _ERC20.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20 *ERC20Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ERC20Approval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ERC20.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20Approval)
				if err := _ERC20.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20 *ERC20Filterer) ParseApproval(log types.Log) (*ERC20Approval, error) {
	event := new(ERC20Approval)
	if err := _ERC20.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ERC20 contract.
type ERC20TransferIterator struct {
	Event *ERC20Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20Transfer represents a Transfer event raised by the ERC20 contract.
type ERC20Transfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20 *ERC20Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ERC20TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC20.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ERC20TransferIterator{contract: _ERC20.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20 *ERC20Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ERC20Transfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC20.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20Transfer)
				if err := _ERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20 *ERC20Filterer) ParseTransfer(log types.Log) (*ERC20Transfer, error) {
	event := new(ERC20Transfer)
	if err := _ERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ErrorsABI is the input ABI used to generate the binding from.
const ErrorsABI = "[{\"inputs\":[],\"name\":\"BORROW_ALLOWANCE_NOT_ENOUGH\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CALLER_NOT_POOL_ADMIN\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CT_CALLER_MUST_BE_LENDING_POOL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CT_CANNOT_GIVE_ALLOWANCE_TO_HIMSELF\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CT_INVALID_BURN_AMOUNT\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CT_INVALID_MINT_AMOUNT\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CT_TRANSFER_AMOUNT_NOT_GT_0\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPAPR_INVALID_ADDRESSES_PROVIDER_ID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPAPR_PROVIDER_NOT_REGISTERED\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPCM_COLLATERAL_CANNOT_BE_LIQUIDATED\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPCM_NOT_ENOUGH_LIQUIDITY_TO_LIQUIDATE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPCM_NO_ERRORS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPCM_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPC_CALLER_NOT_EMERGENCY_ADMIN\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPC_INVALID_ADDRESSES_PROVIDER_ID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPC_INVALID_ATOKEN_POOL_ADDRESS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPC_INVALID_CONFIGURATION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPC_INVALID_STABLE_DEBT_TOKEN_POOL_ADDRESS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPC_INVALID_STABLE_DEBT_TOKEN_UNDERLYING_ADDRESS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPC_INVALID_VARIABLE_DEBT_TOKEN_POOL_ADDRESS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPC_INVALID_VARIABLE_DEBT_TOKEN_UNDERLYING_ADDRESS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPC_RESERVE_LIQUIDITY_NOT_0\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP_CALLER_MUST_BE_AN_ATOKEN\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP_CALLER_NOT_LENDING_POOL_CONFIGURATOR\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP_FAILED_COLLATERAL_SWAP\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP_FAILED_REPAY_WITH_COLLATERAL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP_INCONSISTENT_FLASHLOAN_PARAMS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP_INCONSISTENT_PARAMS_LENGTH\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP_INCONSISTENT_PROTOCOL_ACTUAL_BALANCE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP_INVALID_EQUAL_ASSETS_TO_SWAP\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP_INVALID_FLASHLOAN_MODE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP_INVALID_FLASH_LOAN_EXECUTOR_RETURN\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP_IS_PAUSED\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP_LIQUIDATION_CALL_FAILED\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP_NOT_CONTRACT\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP_NOT_ENOUGH_LIQUIDITY_TO_BORROW\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP_NOT_ENOUGH_STABLE_BORROW_BALANCE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP_NO_MORE_RESERVES_ALLOWED\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP_REENTRANCY_NOT_ALLOWED\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP_REQUESTED_AMOUNT_TOO_SMALL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MATH_ADDITION_OVERFLOW\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MATH_DIVISION_BY_ZERO\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MATH_MULTIPLICATION_OVERFLOW\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RC_INVALID_DECIMALS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RC_INVALID_LIQ_BONUS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RC_INVALID_LIQ_THRESHOLD\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RC_INVALID_LTV\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RC_INVALID_RESERVE_FACTOR\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RL_LIQUIDITY_INDEX_OVERFLOW\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RL_LIQUIDITY_RATE_OVERFLOW\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RL_RESERVE_ALREADY_INITIALIZED\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RL_STABLE_BORROW_RATE_OVERFLOW\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RL_VARIABLE_BORROW_INDEX_OVERFLOW\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RL_VARIABLE_BORROW_RATE_OVERFLOW\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SDT_BURN_EXCEEDS_BALANCE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SDT_STABLE_DEBT_OVERFLOW\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UL_INVALID_INDEX\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VL_AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VL_BORROWING_NOT_ENABLED\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VL_COLLATERAL_BALANCE_IS_0\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VL_COLLATERAL_CANNOT_COVER_NEW_BORROW\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VL_CURRENT_AVAILABLE_LIQUIDITY_NOT_ENOUGH\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VL_DEPOSIT_ALREADY_IN_USE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VL_INCONSISTENT_FLASHLOAN_PARAMS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VL_INVALID_AMOUNT\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VL_INVALID_INTEREST_RATE_MODE_SELECTED\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VL_NO_ACTIVE_RESERVE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VL_NO_DEBT_OF_SELECTED_TYPE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VL_NO_STABLE_RATE_LOAN_IN_RESERVE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VL_NO_VARIABLE_RATE_LOAN_IN_RESERVE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VL_RESERVE_FROZEN\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VL_STABLE_BORROWING_NOT_ENABLED\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VL_TRANSFER_NOT_ALLOWED\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VL_UNDERLYING_BALANCE_NOT_GREATER_THAN_0\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// ErrorsBin is the compiled bytecode used for deploying new contracts.
var ErrorsBin = ""

// DeployErrors deploys a new Ethereum contract, binding an instance of Errors to it.
func DeployErrors(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Errors, error) {
	parsed, err := abi.JSON(strings.NewReader(ErrorsABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ErrorsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Errors{ErrorsCaller: ErrorsCaller{contract: contract}, ErrorsTransactor: ErrorsTransactor{contract: contract}, ErrorsFilterer: ErrorsFilterer{contract: contract}}, nil
}

// Errors is an auto generated Go binding around an Ethereum contract.
type Errors struct {
	ErrorsCaller     // Read-only binding to the contract
	ErrorsTransactor // Write-only binding to the contract
	ErrorsFilterer   // Log filterer for contract events
}

// ErrorsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ErrorsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ErrorsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ErrorsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ErrorsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ErrorsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ErrorsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ErrorsSession struct {
	Contract     *Errors           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ErrorsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ErrorsCallerSession struct {
	Contract *ErrorsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ErrorsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ErrorsTransactorSession struct {
	Contract     *ErrorsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ErrorsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ErrorsRaw struct {
	Contract *Errors // Generic contract binding to access the raw methods on
}

// ErrorsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ErrorsCallerRaw struct {
	Contract *ErrorsCaller // Generic read-only contract binding to access the raw methods on
}

// ErrorsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ErrorsTransactorRaw struct {
	Contract *ErrorsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewErrors creates a new instance of Errors, bound to a specific deployed contract.
func NewErrors(address common.Address, backend bind.ContractBackend) (*Errors, error) {
	contract, err := bindErrors(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Errors{ErrorsCaller: ErrorsCaller{contract: contract}, ErrorsTransactor: ErrorsTransactor{contract: contract}, ErrorsFilterer: ErrorsFilterer{contract: contract}}, nil
}

// NewErrorsCaller creates a new read-only instance of Errors, bound to a specific deployed contract.
func NewErrorsCaller(address common.Address, caller bind.ContractCaller) (*ErrorsCaller, error) {
	contract, err := bindErrors(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ErrorsCaller{contract: contract}, nil
}

// NewErrorsTransactor creates a new write-only instance of Errors, bound to a specific deployed contract.
func NewErrorsTransactor(address common.Address, transactor bind.ContractTransactor) (*ErrorsTransactor, error) {
	contract, err := bindErrors(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ErrorsTransactor{contract: contract}, nil
}

// NewErrorsFilterer creates a new log filterer instance of Errors, bound to a specific deployed contract.
func NewErrorsFilterer(address common.Address, filterer bind.ContractFilterer) (*ErrorsFilterer, error) {
	contract, err := bindErrors(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ErrorsFilterer{contract: contract}, nil
}

// bindErrors binds a generic wrapper to an already deployed contract.
func bindErrors(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ErrorsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Errors *ErrorsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Errors.Contract.ErrorsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Errors *ErrorsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Errors.Contract.ErrorsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Errors *ErrorsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Errors.Contract.ErrorsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Errors *ErrorsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Errors.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Errors *ErrorsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Errors.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Errors *ErrorsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Errors.Contract.contract.Transact(opts, method, params...)
}

// BORROWALLOWANCENOTENOUGH is a free data retrieval call binding the contract method 0xe2c16d69.
//
// Solidity: function BORROW_ALLOWANCE_NOT_ENOUGH() view returns(string)
func (_Errors *ErrorsCaller) BORROWALLOWANCENOTENOUGH(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "BORROW_ALLOWANCE_NOT_ENOUGH")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// BORROWALLOWANCENOTENOUGH is a free data retrieval call binding the contract method 0xe2c16d69.
//
// Solidity: function BORROW_ALLOWANCE_NOT_ENOUGH() view returns(string)
func (_Errors *ErrorsSession) BORROWALLOWANCENOTENOUGH() (string, error) {
	return _Errors.Contract.BORROWALLOWANCENOTENOUGH(&_Errors.CallOpts)
}

// BORROWALLOWANCENOTENOUGH is a free data retrieval call binding the contract method 0xe2c16d69.
//
// Solidity: function BORROW_ALLOWANCE_NOT_ENOUGH() view returns(string)
func (_Errors *ErrorsCallerSession) BORROWALLOWANCENOTENOUGH() (string, error) {
	return _Errors.Contract.BORROWALLOWANCENOTENOUGH(&_Errors.CallOpts)
}

// CALLERNOTPOOLADMIN is a free data retrieval call binding the contract method 0xac753236.
//
// Solidity: function CALLER_NOT_POOL_ADMIN() view returns(string)
func (_Errors *ErrorsCaller) CALLERNOTPOOLADMIN(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "CALLER_NOT_POOL_ADMIN")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// CALLERNOTPOOLADMIN is a free data retrieval call binding the contract method 0xac753236.
//
// Solidity: function CALLER_NOT_POOL_ADMIN() view returns(string)
func (_Errors *ErrorsSession) CALLERNOTPOOLADMIN() (string, error) {
	return _Errors.Contract.CALLERNOTPOOLADMIN(&_Errors.CallOpts)
}

// CALLERNOTPOOLADMIN is a free data retrieval call binding the contract method 0xac753236.
//
// Solidity: function CALLER_NOT_POOL_ADMIN() view returns(string)
func (_Errors *ErrorsCallerSession) CALLERNOTPOOLADMIN() (string, error) {
	return _Errors.Contract.CALLERNOTPOOLADMIN(&_Errors.CallOpts)
}

// CTCALLERMUSTBELENDINGPOOL is a free data retrieval call binding the contract method 0x6ba4271f.
//
// Solidity: function CT_CALLER_MUST_BE_LENDING_POOL() view returns(string)
func (_Errors *ErrorsCaller) CTCALLERMUSTBELENDINGPOOL(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "CT_CALLER_MUST_BE_LENDING_POOL")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// CTCALLERMUSTBELENDINGPOOL is a free data retrieval call binding the contract method 0x6ba4271f.
//
// Solidity: function CT_CALLER_MUST_BE_LENDING_POOL() view returns(string)
func (_Errors *ErrorsSession) CTCALLERMUSTBELENDINGPOOL() (string, error) {
	return _Errors.Contract.CTCALLERMUSTBELENDINGPOOL(&_Errors.CallOpts)
}

// CTCALLERMUSTBELENDINGPOOL is a free data retrieval call binding the contract method 0x6ba4271f.
//
// Solidity: function CT_CALLER_MUST_BE_LENDING_POOL() view returns(string)
func (_Errors *ErrorsCallerSession) CTCALLERMUSTBELENDINGPOOL() (string, error) {
	return _Errors.Contract.CTCALLERMUSTBELENDINGPOOL(&_Errors.CallOpts)
}

// CTCANNOTGIVEALLOWANCETOHIMSELF is a free data retrieval call binding the contract method 0x06f355ad.
//
// Solidity: function CT_CANNOT_GIVE_ALLOWANCE_TO_HIMSELF() view returns(string)
func (_Errors *ErrorsCaller) CTCANNOTGIVEALLOWANCETOHIMSELF(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "CT_CANNOT_GIVE_ALLOWANCE_TO_HIMSELF")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// CTCANNOTGIVEALLOWANCETOHIMSELF is a free data retrieval call binding the contract method 0x06f355ad.
//
// Solidity: function CT_CANNOT_GIVE_ALLOWANCE_TO_HIMSELF() view returns(string)
func (_Errors *ErrorsSession) CTCANNOTGIVEALLOWANCETOHIMSELF() (string, error) {
	return _Errors.Contract.CTCANNOTGIVEALLOWANCETOHIMSELF(&_Errors.CallOpts)
}

// CTCANNOTGIVEALLOWANCETOHIMSELF is a free data retrieval call binding the contract method 0x06f355ad.
//
// Solidity: function CT_CANNOT_GIVE_ALLOWANCE_TO_HIMSELF() view returns(string)
func (_Errors *ErrorsCallerSession) CTCANNOTGIVEALLOWANCETOHIMSELF() (string, error) {
	return _Errors.Contract.CTCANNOTGIVEALLOWANCETOHIMSELF(&_Errors.CallOpts)
}

// CTINVALIDBURNAMOUNT is a free data retrieval call binding the contract method 0x2b9c57f6.
//
// Solidity: function CT_INVALID_BURN_AMOUNT() view returns(string)
func (_Errors *ErrorsCaller) CTINVALIDBURNAMOUNT(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "CT_INVALID_BURN_AMOUNT")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// CTINVALIDBURNAMOUNT is a free data retrieval call binding the contract method 0x2b9c57f6.
//
// Solidity: function CT_INVALID_BURN_AMOUNT() view returns(string)
func (_Errors *ErrorsSession) CTINVALIDBURNAMOUNT() (string, error) {
	return _Errors.Contract.CTINVALIDBURNAMOUNT(&_Errors.CallOpts)
}

// CTINVALIDBURNAMOUNT is a free data retrieval call binding the contract method 0x2b9c57f6.
//
// Solidity: function CT_INVALID_BURN_AMOUNT() view returns(string)
func (_Errors *ErrorsCallerSession) CTINVALIDBURNAMOUNT() (string, error) {
	return _Errors.Contract.CTINVALIDBURNAMOUNT(&_Errors.CallOpts)
}

// CTINVALIDMINTAMOUNT is a free data retrieval call binding the contract method 0x1291a38b.
//
// Solidity: function CT_INVALID_MINT_AMOUNT() view returns(string)
func (_Errors *ErrorsCaller) CTINVALIDMINTAMOUNT(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "CT_INVALID_MINT_AMOUNT")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// CTINVALIDMINTAMOUNT is a free data retrieval call binding the contract method 0x1291a38b.
//
// Solidity: function CT_INVALID_MINT_AMOUNT() view returns(string)
func (_Errors *ErrorsSession) CTINVALIDMINTAMOUNT() (string, error) {
	return _Errors.Contract.CTINVALIDMINTAMOUNT(&_Errors.CallOpts)
}

// CTINVALIDMINTAMOUNT is a free data retrieval call binding the contract method 0x1291a38b.
//
// Solidity: function CT_INVALID_MINT_AMOUNT() view returns(string)
func (_Errors *ErrorsCallerSession) CTINVALIDMINTAMOUNT() (string, error) {
	return _Errors.Contract.CTINVALIDMINTAMOUNT(&_Errors.CallOpts)
}

// CTTRANSFERAMOUNTNOTGT0 is a free data retrieval call binding the contract method 0xa2fbc8ad.
//
// Solidity: function CT_TRANSFER_AMOUNT_NOT_GT_0() view returns(string)
func (_Errors *ErrorsCaller) CTTRANSFERAMOUNTNOTGT0(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "CT_TRANSFER_AMOUNT_NOT_GT_0")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// CTTRANSFERAMOUNTNOTGT0 is a free data retrieval call binding the contract method 0xa2fbc8ad.
//
// Solidity: function CT_TRANSFER_AMOUNT_NOT_GT_0() view returns(string)
func (_Errors *ErrorsSession) CTTRANSFERAMOUNTNOTGT0() (string, error) {
	return _Errors.Contract.CTTRANSFERAMOUNTNOTGT0(&_Errors.CallOpts)
}

// CTTRANSFERAMOUNTNOTGT0 is a free data retrieval call binding the contract method 0xa2fbc8ad.
//
// Solidity: function CT_TRANSFER_AMOUNT_NOT_GT_0() view returns(string)
func (_Errors *ErrorsCallerSession) CTTRANSFERAMOUNTNOTGT0() (string, error) {
	return _Errors.Contract.CTTRANSFERAMOUNTNOTGT0(&_Errors.CallOpts)
}

// LPAPRINVALIDADDRESSESPROVIDERID is a free data retrieval call binding the contract method 0x333e8ea8.
//
// Solidity: function LPAPR_INVALID_ADDRESSES_PROVIDER_ID() view returns(string)
func (_Errors *ErrorsCaller) LPAPRINVALIDADDRESSESPROVIDERID(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "LPAPR_INVALID_ADDRESSES_PROVIDER_ID")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// LPAPRINVALIDADDRESSESPROVIDERID is a free data retrieval call binding the contract method 0x333e8ea8.
//
// Solidity: function LPAPR_INVALID_ADDRESSES_PROVIDER_ID() view returns(string)
func (_Errors *ErrorsSession) LPAPRINVALIDADDRESSESPROVIDERID() (string, error) {
	return _Errors.Contract.LPAPRINVALIDADDRESSESPROVIDERID(&_Errors.CallOpts)
}

// LPAPRINVALIDADDRESSESPROVIDERID is a free data retrieval call binding the contract method 0x333e8ea8.
//
// Solidity: function LPAPR_INVALID_ADDRESSES_PROVIDER_ID() view returns(string)
func (_Errors *ErrorsCallerSession) LPAPRINVALIDADDRESSESPROVIDERID() (string, error) {
	return _Errors.Contract.LPAPRINVALIDADDRESSESPROVIDERID(&_Errors.CallOpts)
}

// LPAPRPROVIDERNOTREGISTERED is a free data retrieval call binding the contract method 0xd6f681b6.
//
// Solidity: function LPAPR_PROVIDER_NOT_REGISTERED() view returns(string)
func (_Errors *ErrorsCaller) LPAPRPROVIDERNOTREGISTERED(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "LPAPR_PROVIDER_NOT_REGISTERED")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// LPAPRPROVIDERNOTREGISTERED is a free data retrieval call binding the contract method 0xd6f681b6.
//
// Solidity: function LPAPR_PROVIDER_NOT_REGISTERED() view returns(string)
func (_Errors *ErrorsSession) LPAPRPROVIDERNOTREGISTERED() (string, error) {
	return _Errors.Contract.LPAPRPROVIDERNOTREGISTERED(&_Errors.CallOpts)
}

// LPAPRPROVIDERNOTREGISTERED is a free data retrieval call binding the contract method 0xd6f681b6.
//
// Solidity: function LPAPR_PROVIDER_NOT_REGISTERED() view returns(string)
func (_Errors *ErrorsCallerSession) LPAPRPROVIDERNOTREGISTERED() (string, error) {
	return _Errors.Contract.LPAPRPROVIDERNOTREGISTERED(&_Errors.CallOpts)
}

// LPCMCOLLATERALCANNOTBELIQUIDATED is a free data retrieval call binding the contract method 0x407374a4.
//
// Solidity: function LPCM_COLLATERAL_CANNOT_BE_LIQUIDATED() view returns(string)
func (_Errors *ErrorsCaller) LPCMCOLLATERALCANNOTBELIQUIDATED(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "LPCM_COLLATERAL_CANNOT_BE_LIQUIDATED")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// LPCMCOLLATERALCANNOTBELIQUIDATED is a free data retrieval call binding the contract method 0x407374a4.
//
// Solidity: function LPCM_COLLATERAL_CANNOT_BE_LIQUIDATED() view returns(string)
func (_Errors *ErrorsSession) LPCMCOLLATERALCANNOTBELIQUIDATED() (string, error) {
	return _Errors.Contract.LPCMCOLLATERALCANNOTBELIQUIDATED(&_Errors.CallOpts)
}

// LPCMCOLLATERALCANNOTBELIQUIDATED is a free data retrieval call binding the contract method 0x407374a4.
//
// Solidity: function LPCM_COLLATERAL_CANNOT_BE_LIQUIDATED() view returns(string)
func (_Errors *ErrorsCallerSession) LPCMCOLLATERALCANNOTBELIQUIDATED() (string, error) {
	return _Errors.Contract.LPCMCOLLATERALCANNOTBELIQUIDATED(&_Errors.CallOpts)
}

// LPCMHEALTHFACTORNOTBELOWTHRESHOLD is a free data retrieval call binding the contract method 0xfb681def.
//
// Solidity: function LPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD() view returns(string)
func (_Errors *ErrorsCaller) LPCMHEALTHFACTORNOTBELOWTHRESHOLD(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "LPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// LPCMHEALTHFACTORNOTBELOWTHRESHOLD is a free data retrieval call binding the contract method 0xfb681def.
//
// Solidity: function LPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD() view returns(string)
func (_Errors *ErrorsSession) LPCMHEALTHFACTORNOTBELOWTHRESHOLD() (string, error) {
	return _Errors.Contract.LPCMHEALTHFACTORNOTBELOWTHRESHOLD(&_Errors.CallOpts)
}

// LPCMHEALTHFACTORNOTBELOWTHRESHOLD is a free data retrieval call binding the contract method 0xfb681def.
//
// Solidity: function LPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD() view returns(string)
func (_Errors *ErrorsCallerSession) LPCMHEALTHFACTORNOTBELOWTHRESHOLD() (string, error) {
	return _Errors.Contract.LPCMHEALTHFACTORNOTBELOWTHRESHOLD(&_Errors.CallOpts)
}

// LPCMNOTENOUGHLIQUIDITYTOLIQUIDATE is a free data retrieval call binding the contract method 0xcc5fc44c.
//
// Solidity: function LPCM_NOT_ENOUGH_LIQUIDITY_TO_LIQUIDATE() view returns(string)
func (_Errors *ErrorsCaller) LPCMNOTENOUGHLIQUIDITYTOLIQUIDATE(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "LPCM_NOT_ENOUGH_LIQUIDITY_TO_LIQUIDATE")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// LPCMNOTENOUGHLIQUIDITYTOLIQUIDATE is a free data retrieval call binding the contract method 0xcc5fc44c.
//
// Solidity: function LPCM_NOT_ENOUGH_LIQUIDITY_TO_LIQUIDATE() view returns(string)
func (_Errors *ErrorsSession) LPCMNOTENOUGHLIQUIDITYTOLIQUIDATE() (string, error) {
	return _Errors.Contract.LPCMNOTENOUGHLIQUIDITYTOLIQUIDATE(&_Errors.CallOpts)
}

// LPCMNOTENOUGHLIQUIDITYTOLIQUIDATE is a free data retrieval call binding the contract method 0xcc5fc44c.
//
// Solidity: function LPCM_NOT_ENOUGH_LIQUIDITY_TO_LIQUIDATE() view returns(string)
func (_Errors *ErrorsCallerSession) LPCMNOTENOUGHLIQUIDITYTOLIQUIDATE() (string, error) {
	return _Errors.Contract.LPCMNOTENOUGHLIQUIDITYTOLIQUIDATE(&_Errors.CallOpts)
}

// LPCMNOERRORS is a free data retrieval call binding the contract method 0x1ea7c604.
//
// Solidity: function LPCM_NO_ERRORS() view returns(string)
func (_Errors *ErrorsCaller) LPCMNOERRORS(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "LPCM_NO_ERRORS")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// LPCMNOERRORS is a free data retrieval call binding the contract method 0x1ea7c604.
//
// Solidity: function LPCM_NO_ERRORS() view returns(string)
func (_Errors *ErrorsSession) LPCMNOERRORS() (string, error) {
	return _Errors.Contract.LPCMNOERRORS(&_Errors.CallOpts)
}

// LPCMNOERRORS is a free data retrieval call binding the contract method 0x1ea7c604.
//
// Solidity: function LPCM_NO_ERRORS() view returns(string)
func (_Errors *ErrorsCallerSession) LPCMNOERRORS() (string, error) {
	return _Errors.Contract.LPCMNOERRORS(&_Errors.CallOpts)
}

// LPCMSPECIFIEDCURRENCYNOTBORROWEDBYUSER is a free data retrieval call binding the contract method 0x71a629da.
//
// Solidity: function LPCM_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER() view returns(string)
func (_Errors *ErrorsCaller) LPCMSPECIFIEDCURRENCYNOTBORROWEDBYUSER(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "LPCM_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// LPCMSPECIFIEDCURRENCYNOTBORROWEDBYUSER is a free data retrieval call binding the contract method 0x71a629da.
//
// Solidity: function LPCM_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER() view returns(string)
func (_Errors *ErrorsSession) LPCMSPECIFIEDCURRENCYNOTBORROWEDBYUSER() (string, error) {
	return _Errors.Contract.LPCMSPECIFIEDCURRENCYNOTBORROWEDBYUSER(&_Errors.CallOpts)
}

// LPCMSPECIFIEDCURRENCYNOTBORROWEDBYUSER is a free data retrieval call binding the contract method 0x71a629da.
//
// Solidity: function LPCM_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER() view returns(string)
func (_Errors *ErrorsCallerSession) LPCMSPECIFIEDCURRENCYNOTBORROWEDBYUSER() (string, error) {
	return _Errors.Contract.LPCMSPECIFIEDCURRENCYNOTBORROWEDBYUSER(&_Errors.CallOpts)
}

// LPCCALLERNOTEMERGENCYADMIN is a free data retrieval call binding the contract method 0xd3e370ee.
//
// Solidity: function LPC_CALLER_NOT_EMERGENCY_ADMIN() view returns(string)
func (_Errors *ErrorsCaller) LPCCALLERNOTEMERGENCYADMIN(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "LPC_CALLER_NOT_EMERGENCY_ADMIN")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// LPCCALLERNOTEMERGENCYADMIN is a free data retrieval call binding the contract method 0xd3e370ee.
//
// Solidity: function LPC_CALLER_NOT_EMERGENCY_ADMIN() view returns(string)
func (_Errors *ErrorsSession) LPCCALLERNOTEMERGENCYADMIN() (string, error) {
	return _Errors.Contract.LPCCALLERNOTEMERGENCYADMIN(&_Errors.CallOpts)
}

// LPCCALLERNOTEMERGENCYADMIN is a free data retrieval call binding the contract method 0xd3e370ee.
//
// Solidity: function LPC_CALLER_NOT_EMERGENCY_ADMIN() view returns(string)
func (_Errors *ErrorsCallerSession) LPCCALLERNOTEMERGENCYADMIN() (string, error) {
	return _Errors.Contract.LPCCALLERNOTEMERGENCYADMIN(&_Errors.CallOpts)
}

// LPCINVALIDADDRESSESPROVIDERID is a free data retrieval call binding the contract method 0x5a9786d4.
//
// Solidity: function LPC_INVALID_ADDRESSES_PROVIDER_ID() view returns(string)
func (_Errors *ErrorsCaller) LPCINVALIDADDRESSESPROVIDERID(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "LPC_INVALID_ADDRESSES_PROVIDER_ID")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// LPCINVALIDADDRESSESPROVIDERID is a free data retrieval call binding the contract method 0x5a9786d4.
//
// Solidity: function LPC_INVALID_ADDRESSES_PROVIDER_ID() view returns(string)
func (_Errors *ErrorsSession) LPCINVALIDADDRESSESPROVIDERID() (string, error) {
	return _Errors.Contract.LPCINVALIDADDRESSESPROVIDERID(&_Errors.CallOpts)
}

// LPCINVALIDADDRESSESPROVIDERID is a free data retrieval call binding the contract method 0x5a9786d4.
//
// Solidity: function LPC_INVALID_ADDRESSES_PROVIDER_ID() view returns(string)
func (_Errors *ErrorsCallerSession) LPCINVALIDADDRESSESPROVIDERID() (string, error) {
	return _Errors.Contract.LPCINVALIDADDRESSESPROVIDERID(&_Errors.CallOpts)
}

// LPCINVALIDATOKENPOOLADDRESS is a free data retrieval call binding the contract method 0xf0473259.
//
// Solidity: function LPC_INVALID_ATOKEN_POOL_ADDRESS() view returns(string)
func (_Errors *ErrorsCaller) LPCINVALIDATOKENPOOLADDRESS(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "LPC_INVALID_ATOKEN_POOL_ADDRESS")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// LPCINVALIDATOKENPOOLADDRESS is a free data retrieval call binding the contract method 0xf0473259.
//
// Solidity: function LPC_INVALID_ATOKEN_POOL_ADDRESS() view returns(string)
func (_Errors *ErrorsSession) LPCINVALIDATOKENPOOLADDRESS() (string, error) {
	return _Errors.Contract.LPCINVALIDATOKENPOOLADDRESS(&_Errors.CallOpts)
}

// LPCINVALIDATOKENPOOLADDRESS is a free data retrieval call binding the contract method 0xf0473259.
//
// Solidity: function LPC_INVALID_ATOKEN_POOL_ADDRESS() view returns(string)
func (_Errors *ErrorsCallerSession) LPCINVALIDATOKENPOOLADDRESS() (string, error) {
	return _Errors.Contract.LPCINVALIDATOKENPOOLADDRESS(&_Errors.CallOpts)
}

// LPCINVALIDCONFIGURATION is a free data retrieval call binding the contract method 0x47d25300.
//
// Solidity: function LPC_INVALID_CONFIGURATION() view returns(string)
func (_Errors *ErrorsCaller) LPCINVALIDCONFIGURATION(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "LPC_INVALID_CONFIGURATION")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// LPCINVALIDCONFIGURATION is a free data retrieval call binding the contract method 0x47d25300.
//
// Solidity: function LPC_INVALID_CONFIGURATION() view returns(string)
func (_Errors *ErrorsSession) LPCINVALIDCONFIGURATION() (string, error) {
	return _Errors.Contract.LPCINVALIDCONFIGURATION(&_Errors.CallOpts)
}

// LPCINVALIDCONFIGURATION is a free data retrieval call binding the contract method 0x47d25300.
//
// Solidity: function LPC_INVALID_CONFIGURATION() view returns(string)
func (_Errors *ErrorsCallerSession) LPCINVALIDCONFIGURATION() (string, error) {
	return _Errors.Contract.LPCINVALIDCONFIGURATION(&_Errors.CallOpts)
}

// LPCINVALIDSTABLEDEBTTOKENPOOLADDRESS is a free data retrieval call binding the contract method 0xe0d7dfd7.
//
// Solidity: function LPC_INVALID_STABLE_DEBT_TOKEN_POOL_ADDRESS() view returns(string)
func (_Errors *ErrorsCaller) LPCINVALIDSTABLEDEBTTOKENPOOLADDRESS(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "LPC_INVALID_STABLE_DEBT_TOKEN_POOL_ADDRESS")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// LPCINVALIDSTABLEDEBTTOKENPOOLADDRESS is a free data retrieval call binding the contract method 0xe0d7dfd7.
//
// Solidity: function LPC_INVALID_STABLE_DEBT_TOKEN_POOL_ADDRESS() view returns(string)
func (_Errors *ErrorsSession) LPCINVALIDSTABLEDEBTTOKENPOOLADDRESS() (string, error) {
	return _Errors.Contract.LPCINVALIDSTABLEDEBTTOKENPOOLADDRESS(&_Errors.CallOpts)
}

// LPCINVALIDSTABLEDEBTTOKENPOOLADDRESS is a free data retrieval call binding the contract method 0xe0d7dfd7.
//
// Solidity: function LPC_INVALID_STABLE_DEBT_TOKEN_POOL_ADDRESS() view returns(string)
func (_Errors *ErrorsCallerSession) LPCINVALIDSTABLEDEBTTOKENPOOLADDRESS() (string, error) {
	return _Errors.Contract.LPCINVALIDSTABLEDEBTTOKENPOOLADDRESS(&_Errors.CallOpts)
}

// LPCINVALIDSTABLEDEBTTOKENUNDERLYINGADDRESS is a free data retrieval call binding the contract method 0x41b40ba5.
//
// Solidity: function LPC_INVALID_STABLE_DEBT_TOKEN_UNDERLYING_ADDRESS() view returns(string)
func (_Errors *ErrorsCaller) LPCINVALIDSTABLEDEBTTOKENUNDERLYINGADDRESS(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "LPC_INVALID_STABLE_DEBT_TOKEN_UNDERLYING_ADDRESS")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// LPCINVALIDSTABLEDEBTTOKENUNDERLYINGADDRESS is a free data retrieval call binding the contract method 0x41b40ba5.
//
// Solidity: function LPC_INVALID_STABLE_DEBT_TOKEN_UNDERLYING_ADDRESS() view returns(string)
func (_Errors *ErrorsSession) LPCINVALIDSTABLEDEBTTOKENUNDERLYINGADDRESS() (string, error) {
	return _Errors.Contract.LPCINVALIDSTABLEDEBTTOKENUNDERLYINGADDRESS(&_Errors.CallOpts)
}

// LPCINVALIDSTABLEDEBTTOKENUNDERLYINGADDRESS is a free data retrieval call binding the contract method 0x41b40ba5.
//
// Solidity: function LPC_INVALID_STABLE_DEBT_TOKEN_UNDERLYING_ADDRESS() view returns(string)
func (_Errors *ErrorsCallerSession) LPCINVALIDSTABLEDEBTTOKENUNDERLYINGADDRESS() (string, error) {
	return _Errors.Contract.LPCINVALIDSTABLEDEBTTOKENUNDERLYINGADDRESS(&_Errors.CallOpts)
}

// LPCINVALIDVARIABLEDEBTTOKENPOOLADDRESS is a free data retrieval call binding the contract method 0xc09e2618.
//
// Solidity: function LPC_INVALID_VARIABLE_DEBT_TOKEN_POOL_ADDRESS() view returns(string)
func (_Errors *ErrorsCaller) LPCINVALIDVARIABLEDEBTTOKENPOOLADDRESS(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "LPC_INVALID_VARIABLE_DEBT_TOKEN_POOL_ADDRESS")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// LPCINVALIDVARIABLEDEBTTOKENPOOLADDRESS is a free data retrieval call binding the contract method 0xc09e2618.
//
// Solidity: function LPC_INVALID_VARIABLE_DEBT_TOKEN_POOL_ADDRESS() view returns(string)
func (_Errors *ErrorsSession) LPCINVALIDVARIABLEDEBTTOKENPOOLADDRESS() (string, error) {
	return _Errors.Contract.LPCINVALIDVARIABLEDEBTTOKENPOOLADDRESS(&_Errors.CallOpts)
}

// LPCINVALIDVARIABLEDEBTTOKENPOOLADDRESS is a free data retrieval call binding the contract method 0xc09e2618.
//
// Solidity: function LPC_INVALID_VARIABLE_DEBT_TOKEN_POOL_ADDRESS() view returns(string)
func (_Errors *ErrorsCallerSession) LPCINVALIDVARIABLEDEBTTOKENPOOLADDRESS() (string, error) {
	return _Errors.Contract.LPCINVALIDVARIABLEDEBTTOKENPOOLADDRESS(&_Errors.CallOpts)
}

// LPCINVALIDVARIABLEDEBTTOKENUNDERLYINGADDRESS is a free data retrieval call binding the contract method 0x3872b0ad.
//
// Solidity: function LPC_INVALID_VARIABLE_DEBT_TOKEN_UNDERLYING_ADDRESS() view returns(string)
func (_Errors *ErrorsCaller) LPCINVALIDVARIABLEDEBTTOKENUNDERLYINGADDRESS(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "LPC_INVALID_VARIABLE_DEBT_TOKEN_UNDERLYING_ADDRESS")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// LPCINVALIDVARIABLEDEBTTOKENUNDERLYINGADDRESS is a free data retrieval call binding the contract method 0x3872b0ad.
//
// Solidity: function LPC_INVALID_VARIABLE_DEBT_TOKEN_UNDERLYING_ADDRESS() view returns(string)
func (_Errors *ErrorsSession) LPCINVALIDVARIABLEDEBTTOKENUNDERLYINGADDRESS() (string, error) {
	return _Errors.Contract.LPCINVALIDVARIABLEDEBTTOKENUNDERLYINGADDRESS(&_Errors.CallOpts)
}

// LPCINVALIDVARIABLEDEBTTOKENUNDERLYINGADDRESS is a free data retrieval call binding the contract method 0x3872b0ad.
//
// Solidity: function LPC_INVALID_VARIABLE_DEBT_TOKEN_UNDERLYING_ADDRESS() view returns(string)
func (_Errors *ErrorsCallerSession) LPCINVALIDVARIABLEDEBTTOKENUNDERLYINGADDRESS() (string, error) {
	return _Errors.Contract.LPCINVALIDVARIABLEDEBTTOKENUNDERLYINGADDRESS(&_Errors.CallOpts)
}

// LPCRESERVELIQUIDITYNOT0 is a free data retrieval call binding the contract method 0x65344799.
//
// Solidity: function LPC_RESERVE_LIQUIDITY_NOT_0() view returns(string)
func (_Errors *ErrorsCaller) LPCRESERVELIQUIDITYNOT0(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "LPC_RESERVE_LIQUIDITY_NOT_0")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// LPCRESERVELIQUIDITYNOT0 is a free data retrieval call binding the contract method 0x65344799.
//
// Solidity: function LPC_RESERVE_LIQUIDITY_NOT_0() view returns(string)
func (_Errors *ErrorsSession) LPCRESERVELIQUIDITYNOT0() (string, error) {
	return _Errors.Contract.LPCRESERVELIQUIDITYNOT0(&_Errors.CallOpts)
}

// LPCRESERVELIQUIDITYNOT0 is a free data retrieval call binding the contract method 0x65344799.
//
// Solidity: function LPC_RESERVE_LIQUIDITY_NOT_0() view returns(string)
func (_Errors *ErrorsCallerSession) LPCRESERVELIQUIDITYNOT0() (string, error) {
	return _Errors.Contract.LPCRESERVELIQUIDITYNOT0(&_Errors.CallOpts)
}

// LPCALLERMUSTBEANATOKEN is a free data retrieval call binding the contract method 0xeca85d3a.
//
// Solidity: function LP_CALLER_MUST_BE_AN_ATOKEN() view returns(string)
func (_Errors *ErrorsCaller) LPCALLERMUSTBEANATOKEN(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "LP_CALLER_MUST_BE_AN_ATOKEN")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// LPCALLERMUSTBEANATOKEN is a free data retrieval call binding the contract method 0xeca85d3a.
//
// Solidity: function LP_CALLER_MUST_BE_AN_ATOKEN() view returns(string)
func (_Errors *ErrorsSession) LPCALLERMUSTBEANATOKEN() (string, error) {
	return _Errors.Contract.LPCALLERMUSTBEANATOKEN(&_Errors.CallOpts)
}

// LPCALLERMUSTBEANATOKEN is a free data retrieval call binding the contract method 0xeca85d3a.
//
// Solidity: function LP_CALLER_MUST_BE_AN_ATOKEN() view returns(string)
func (_Errors *ErrorsCallerSession) LPCALLERMUSTBEANATOKEN() (string, error) {
	return _Errors.Contract.LPCALLERMUSTBEANATOKEN(&_Errors.CallOpts)
}

// LPCALLERNOTLENDINGPOOLCONFIGURATOR is a free data retrieval call binding the contract method 0xb36a2cf3.
//
// Solidity: function LP_CALLER_NOT_LENDING_POOL_CONFIGURATOR() view returns(string)
func (_Errors *ErrorsCaller) LPCALLERNOTLENDINGPOOLCONFIGURATOR(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "LP_CALLER_NOT_LENDING_POOL_CONFIGURATOR")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// LPCALLERNOTLENDINGPOOLCONFIGURATOR is a free data retrieval call binding the contract method 0xb36a2cf3.
//
// Solidity: function LP_CALLER_NOT_LENDING_POOL_CONFIGURATOR() view returns(string)
func (_Errors *ErrorsSession) LPCALLERNOTLENDINGPOOLCONFIGURATOR() (string, error) {
	return _Errors.Contract.LPCALLERNOTLENDINGPOOLCONFIGURATOR(&_Errors.CallOpts)
}

// LPCALLERNOTLENDINGPOOLCONFIGURATOR is a free data retrieval call binding the contract method 0xb36a2cf3.
//
// Solidity: function LP_CALLER_NOT_LENDING_POOL_CONFIGURATOR() view returns(string)
func (_Errors *ErrorsCallerSession) LPCALLERNOTLENDINGPOOLCONFIGURATOR() (string, error) {
	return _Errors.Contract.LPCALLERNOTLENDINGPOOLCONFIGURATOR(&_Errors.CallOpts)
}

// LPFAILEDCOLLATERALSWAP is a free data retrieval call binding the contract method 0x55bab12c.
//
// Solidity: function LP_FAILED_COLLATERAL_SWAP() view returns(string)
func (_Errors *ErrorsCaller) LPFAILEDCOLLATERALSWAP(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "LP_FAILED_COLLATERAL_SWAP")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// LPFAILEDCOLLATERALSWAP is a free data retrieval call binding the contract method 0x55bab12c.
//
// Solidity: function LP_FAILED_COLLATERAL_SWAP() view returns(string)
func (_Errors *ErrorsSession) LPFAILEDCOLLATERALSWAP() (string, error) {
	return _Errors.Contract.LPFAILEDCOLLATERALSWAP(&_Errors.CallOpts)
}

// LPFAILEDCOLLATERALSWAP is a free data retrieval call binding the contract method 0x55bab12c.
//
// Solidity: function LP_FAILED_COLLATERAL_SWAP() view returns(string)
func (_Errors *ErrorsCallerSession) LPFAILEDCOLLATERALSWAP() (string, error) {
	return _Errors.Contract.LPFAILEDCOLLATERALSWAP(&_Errors.CallOpts)
}

// LPFAILEDREPAYWITHCOLLATERAL is a free data retrieval call binding the contract method 0xe6632748.
//
// Solidity: function LP_FAILED_REPAY_WITH_COLLATERAL() view returns(string)
func (_Errors *ErrorsCaller) LPFAILEDREPAYWITHCOLLATERAL(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "LP_FAILED_REPAY_WITH_COLLATERAL")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// LPFAILEDREPAYWITHCOLLATERAL is a free data retrieval call binding the contract method 0xe6632748.
//
// Solidity: function LP_FAILED_REPAY_WITH_COLLATERAL() view returns(string)
func (_Errors *ErrorsSession) LPFAILEDREPAYWITHCOLLATERAL() (string, error) {
	return _Errors.Contract.LPFAILEDREPAYWITHCOLLATERAL(&_Errors.CallOpts)
}

// LPFAILEDREPAYWITHCOLLATERAL is a free data retrieval call binding the contract method 0xe6632748.
//
// Solidity: function LP_FAILED_REPAY_WITH_COLLATERAL() view returns(string)
func (_Errors *ErrorsCallerSession) LPFAILEDREPAYWITHCOLLATERAL() (string, error) {
	return _Errors.Contract.LPFAILEDREPAYWITHCOLLATERAL(&_Errors.CallOpts)
}

// LPINCONSISTENTFLASHLOANPARAMS is a free data retrieval call binding the contract method 0x2b34c349.
//
// Solidity: function LP_INCONSISTENT_FLASHLOAN_PARAMS() view returns(string)
func (_Errors *ErrorsCaller) LPINCONSISTENTFLASHLOANPARAMS(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "LP_INCONSISTENT_FLASHLOAN_PARAMS")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// LPINCONSISTENTFLASHLOANPARAMS is a free data retrieval call binding the contract method 0x2b34c349.
//
// Solidity: function LP_INCONSISTENT_FLASHLOAN_PARAMS() view returns(string)
func (_Errors *ErrorsSession) LPINCONSISTENTFLASHLOANPARAMS() (string, error) {
	return _Errors.Contract.LPINCONSISTENTFLASHLOANPARAMS(&_Errors.CallOpts)
}

// LPINCONSISTENTFLASHLOANPARAMS is a free data retrieval call binding the contract method 0x2b34c349.
//
// Solidity: function LP_INCONSISTENT_FLASHLOAN_PARAMS() view returns(string)
func (_Errors *ErrorsCallerSession) LPINCONSISTENTFLASHLOANPARAMS() (string, error) {
	return _Errors.Contract.LPINCONSISTENTFLASHLOANPARAMS(&_Errors.CallOpts)
}

// LPINCONSISTENTPARAMSLENGTH is a free data retrieval call binding the contract method 0xb72e40c7.
//
// Solidity: function LP_INCONSISTENT_PARAMS_LENGTH() view returns(string)
func (_Errors *ErrorsCaller) LPINCONSISTENTPARAMSLENGTH(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "LP_INCONSISTENT_PARAMS_LENGTH")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// LPINCONSISTENTPARAMSLENGTH is a free data retrieval call binding the contract method 0xb72e40c7.
//
// Solidity: function LP_INCONSISTENT_PARAMS_LENGTH() view returns(string)
func (_Errors *ErrorsSession) LPINCONSISTENTPARAMSLENGTH() (string, error) {
	return _Errors.Contract.LPINCONSISTENTPARAMSLENGTH(&_Errors.CallOpts)
}

// LPINCONSISTENTPARAMSLENGTH is a free data retrieval call binding the contract method 0xb72e40c7.
//
// Solidity: function LP_INCONSISTENT_PARAMS_LENGTH() view returns(string)
func (_Errors *ErrorsCallerSession) LPINCONSISTENTPARAMSLENGTH() (string, error) {
	return _Errors.Contract.LPINCONSISTENTPARAMSLENGTH(&_Errors.CallOpts)
}

// LPINCONSISTENTPROTOCOLACTUALBALANCE is a free data retrieval call binding the contract method 0x0b8fd588.
//
// Solidity: function LP_INCONSISTENT_PROTOCOL_ACTUAL_BALANCE() view returns(string)
func (_Errors *ErrorsCaller) LPINCONSISTENTPROTOCOLACTUALBALANCE(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "LP_INCONSISTENT_PROTOCOL_ACTUAL_BALANCE")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// LPINCONSISTENTPROTOCOLACTUALBALANCE is a free data retrieval call binding the contract method 0x0b8fd588.
//
// Solidity: function LP_INCONSISTENT_PROTOCOL_ACTUAL_BALANCE() view returns(string)
func (_Errors *ErrorsSession) LPINCONSISTENTPROTOCOLACTUALBALANCE() (string, error) {
	return _Errors.Contract.LPINCONSISTENTPROTOCOLACTUALBALANCE(&_Errors.CallOpts)
}

// LPINCONSISTENTPROTOCOLACTUALBALANCE is a free data retrieval call binding the contract method 0x0b8fd588.
//
// Solidity: function LP_INCONSISTENT_PROTOCOL_ACTUAL_BALANCE() view returns(string)
func (_Errors *ErrorsCallerSession) LPINCONSISTENTPROTOCOLACTUALBALANCE() (string, error) {
	return _Errors.Contract.LPINCONSISTENTPROTOCOLACTUALBALANCE(&_Errors.CallOpts)
}

// LPINTERESTRATEREBALANCECONDITIONSNOTMET is a free data retrieval call binding the contract method 0xb89652cd.
//
// Solidity: function LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET() view returns(string)
func (_Errors *ErrorsCaller) LPINTERESTRATEREBALANCECONDITIONSNOTMET(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// LPINTERESTRATEREBALANCECONDITIONSNOTMET is a free data retrieval call binding the contract method 0xb89652cd.
//
// Solidity: function LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET() view returns(string)
func (_Errors *ErrorsSession) LPINTERESTRATEREBALANCECONDITIONSNOTMET() (string, error) {
	return _Errors.Contract.LPINTERESTRATEREBALANCECONDITIONSNOTMET(&_Errors.CallOpts)
}

// LPINTERESTRATEREBALANCECONDITIONSNOTMET is a free data retrieval call binding the contract method 0xb89652cd.
//
// Solidity: function LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET() view returns(string)
func (_Errors *ErrorsCallerSession) LPINTERESTRATEREBALANCECONDITIONSNOTMET() (string, error) {
	return _Errors.Contract.LPINTERESTRATEREBALANCECONDITIONSNOTMET(&_Errors.CallOpts)
}

// LPINVALIDEQUALASSETSTOSWAP is a free data retrieval call binding the contract method 0xc2d628df.
//
// Solidity: function LP_INVALID_EQUAL_ASSETS_TO_SWAP() view returns(string)
func (_Errors *ErrorsCaller) LPINVALIDEQUALASSETSTOSWAP(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "LP_INVALID_EQUAL_ASSETS_TO_SWAP")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// LPINVALIDEQUALASSETSTOSWAP is a free data retrieval call binding the contract method 0xc2d628df.
//
// Solidity: function LP_INVALID_EQUAL_ASSETS_TO_SWAP() view returns(string)
func (_Errors *ErrorsSession) LPINVALIDEQUALASSETSTOSWAP() (string, error) {
	return _Errors.Contract.LPINVALIDEQUALASSETSTOSWAP(&_Errors.CallOpts)
}

// LPINVALIDEQUALASSETSTOSWAP is a free data retrieval call binding the contract method 0xc2d628df.
//
// Solidity: function LP_INVALID_EQUAL_ASSETS_TO_SWAP() view returns(string)
func (_Errors *ErrorsCallerSession) LPINVALIDEQUALASSETSTOSWAP() (string, error) {
	return _Errors.Contract.LPINVALIDEQUALASSETSTOSWAP(&_Errors.CallOpts)
}

// LPINVALIDFLASHLOANMODE is a free data retrieval call binding the contract method 0xe7bf91b3.
//
// Solidity: function LP_INVALID_FLASHLOAN_MODE() view returns(string)
func (_Errors *ErrorsCaller) LPINVALIDFLASHLOANMODE(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "LP_INVALID_FLASHLOAN_MODE")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// LPINVALIDFLASHLOANMODE is a free data retrieval call binding the contract method 0xe7bf91b3.
//
// Solidity: function LP_INVALID_FLASHLOAN_MODE() view returns(string)
func (_Errors *ErrorsSession) LPINVALIDFLASHLOANMODE() (string, error) {
	return _Errors.Contract.LPINVALIDFLASHLOANMODE(&_Errors.CallOpts)
}

// LPINVALIDFLASHLOANMODE is a free data retrieval call binding the contract method 0xe7bf91b3.
//
// Solidity: function LP_INVALID_FLASHLOAN_MODE() view returns(string)
func (_Errors *ErrorsCallerSession) LPINVALIDFLASHLOANMODE() (string, error) {
	return _Errors.Contract.LPINVALIDFLASHLOANMODE(&_Errors.CallOpts)
}

// LPINVALIDFLASHLOANEXECUTORRETURN is a free data retrieval call binding the contract method 0xd44e8e88.
//
// Solidity: function LP_INVALID_FLASH_LOAN_EXECUTOR_RETURN() view returns(string)
func (_Errors *ErrorsCaller) LPINVALIDFLASHLOANEXECUTORRETURN(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "LP_INVALID_FLASH_LOAN_EXECUTOR_RETURN")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// LPINVALIDFLASHLOANEXECUTORRETURN is a free data retrieval call binding the contract method 0xd44e8e88.
//
// Solidity: function LP_INVALID_FLASH_LOAN_EXECUTOR_RETURN() view returns(string)
func (_Errors *ErrorsSession) LPINVALIDFLASHLOANEXECUTORRETURN() (string, error) {
	return _Errors.Contract.LPINVALIDFLASHLOANEXECUTORRETURN(&_Errors.CallOpts)
}

// LPINVALIDFLASHLOANEXECUTORRETURN is a free data retrieval call binding the contract method 0xd44e8e88.
//
// Solidity: function LP_INVALID_FLASH_LOAN_EXECUTOR_RETURN() view returns(string)
func (_Errors *ErrorsCallerSession) LPINVALIDFLASHLOANEXECUTORRETURN() (string, error) {
	return _Errors.Contract.LPINVALIDFLASHLOANEXECUTORRETURN(&_Errors.CallOpts)
}

// LPISPAUSED is a free data retrieval call binding the contract method 0xd57bb964.
//
// Solidity: function LP_IS_PAUSED() view returns(string)
func (_Errors *ErrorsCaller) LPISPAUSED(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "LP_IS_PAUSED")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// LPISPAUSED is a free data retrieval call binding the contract method 0xd57bb964.
//
// Solidity: function LP_IS_PAUSED() view returns(string)
func (_Errors *ErrorsSession) LPISPAUSED() (string, error) {
	return _Errors.Contract.LPISPAUSED(&_Errors.CallOpts)
}

// LPISPAUSED is a free data retrieval call binding the contract method 0xd57bb964.
//
// Solidity: function LP_IS_PAUSED() view returns(string)
func (_Errors *ErrorsCallerSession) LPISPAUSED() (string, error) {
	return _Errors.Contract.LPISPAUSED(&_Errors.CallOpts)
}

// LPLIQUIDATIONCALLFAILED is a free data retrieval call binding the contract method 0x4a529f91.
//
// Solidity: function LP_LIQUIDATION_CALL_FAILED() view returns(string)
func (_Errors *ErrorsCaller) LPLIQUIDATIONCALLFAILED(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "LP_LIQUIDATION_CALL_FAILED")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// LPLIQUIDATIONCALLFAILED is a free data retrieval call binding the contract method 0x4a529f91.
//
// Solidity: function LP_LIQUIDATION_CALL_FAILED() view returns(string)
func (_Errors *ErrorsSession) LPLIQUIDATIONCALLFAILED() (string, error) {
	return _Errors.Contract.LPLIQUIDATIONCALLFAILED(&_Errors.CallOpts)
}

// LPLIQUIDATIONCALLFAILED is a free data retrieval call binding the contract method 0x4a529f91.
//
// Solidity: function LP_LIQUIDATION_CALL_FAILED() view returns(string)
func (_Errors *ErrorsCallerSession) LPLIQUIDATIONCALLFAILED() (string, error) {
	return _Errors.Contract.LPLIQUIDATIONCALLFAILED(&_Errors.CallOpts)
}

// LPNOTCONTRACT is a free data retrieval call binding the contract method 0x637a5a12.
//
// Solidity: function LP_NOT_CONTRACT() view returns(string)
func (_Errors *ErrorsCaller) LPNOTCONTRACT(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "LP_NOT_CONTRACT")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// LPNOTCONTRACT is a free data retrieval call binding the contract method 0x637a5a12.
//
// Solidity: function LP_NOT_CONTRACT() view returns(string)
func (_Errors *ErrorsSession) LPNOTCONTRACT() (string, error) {
	return _Errors.Contract.LPNOTCONTRACT(&_Errors.CallOpts)
}

// LPNOTCONTRACT is a free data retrieval call binding the contract method 0x637a5a12.
//
// Solidity: function LP_NOT_CONTRACT() view returns(string)
func (_Errors *ErrorsCallerSession) LPNOTCONTRACT() (string, error) {
	return _Errors.Contract.LPNOTCONTRACT(&_Errors.CallOpts)
}

// LPNOTENOUGHLIQUIDITYTOBORROW is a free data retrieval call binding the contract method 0x22a6f08e.
//
// Solidity: function LP_NOT_ENOUGH_LIQUIDITY_TO_BORROW() view returns(string)
func (_Errors *ErrorsCaller) LPNOTENOUGHLIQUIDITYTOBORROW(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "LP_NOT_ENOUGH_LIQUIDITY_TO_BORROW")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// LPNOTENOUGHLIQUIDITYTOBORROW is a free data retrieval call binding the contract method 0x22a6f08e.
//
// Solidity: function LP_NOT_ENOUGH_LIQUIDITY_TO_BORROW() view returns(string)
func (_Errors *ErrorsSession) LPNOTENOUGHLIQUIDITYTOBORROW() (string, error) {
	return _Errors.Contract.LPNOTENOUGHLIQUIDITYTOBORROW(&_Errors.CallOpts)
}

// LPNOTENOUGHLIQUIDITYTOBORROW is a free data retrieval call binding the contract method 0x22a6f08e.
//
// Solidity: function LP_NOT_ENOUGH_LIQUIDITY_TO_BORROW() view returns(string)
func (_Errors *ErrorsCallerSession) LPNOTENOUGHLIQUIDITYTOBORROW() (string, error) {
	return _Errors.Contract.LPNOTENOUGHLIQUIDITYTOBORROW(&_Errors.CallOpts)
}

// LPNOTENOUGHSTABLEBORROWBALANCE is a free data retrieval call binding the contract method 0x44dc4f70.
//
// Solidity: function LP_NOT_ENOUGH_STABLE_BORROW_BALANCE() view returns(string)
func (_Errors *ErrorsCaller) LPNOTENOUGHSTABLEBORROWBALANCE(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "LP_NOT_ENOUGH_STABLE_BORROW_BALANCE")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// LPNOTENOUGHSTABLEBORROWBALANCE is a free data retrieval call binding the contract method 0x44dc4f70.
//
// Solidity: function LP_NOT_ENOUGH_STABLE_BORROW_BALANCE() view returns(string)
func (_Errors *ErrorsSession) LPNOTENOUGHSTABLEBORROWBALANCE() (string, error) {
	return _Errors.Contract.LPNOTENOUGHSTABLEBORROWBALANCE(&_Errors.CallOpts)
}

// LPNOTENOUGHSTABLEBORROWBALANCE is a free data retrieval call binding the contract method 0x44dc4f70.
//
// Solidity: function LP_NOT_ENOUGH_STABLE_BORROW_BALANCE() view returns(string)
func (_Errors *ErrorsCallerSession) LPNOTENOUGHSTABLEBORROWBALANCE() (string, error) {
	return _Errors.Contract.LPNOTENOUGHSTABLEBORROWBALANCE(&_Errors.CallOpts)
}

// LPNOMORERESERVESALLOWED is a free data retrieval call binding the contract method 0x76f19030.
//
// Solidity: function LP_NO_MORE_RESERVES_ALLOWED() view returns(string)
func (_Errors *ErrorsCaller) LPNOMORERESERVESALLOWED(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "LP_NO_MORE_RESERVES_ALLOWED")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// LPNOMORERESERVESALLOWED is a free data retrieval call binding the contract method 0x76f19030.
//
// Solidity: function LP_NO_MORE_RESERVES_ALLOWED() view returns(string)
func (_Errors *ErrorsSession) LPNOMORERESERVESALLOWED() (string, error) {
	return _Errors.Contract.LPNOMORERESERVESALLOWED(&_Errors.CallOpts)
}

// LPNOMORERESERVESALLOWED is a free data retrieval call binding the contract method 0x76f19030.
//
// Solidity: function LP_NO_MORE_RESERVES_ALLOWED() view returns(string)
func (_Errors *ErrorsCallerSession) LPNOMORERESERVESALLOWED() (string, error) {
	return _Errors.Contract.LPNOMORERESERVESALLOWED(&_Errors.CallOpts)
}

// LPREENTRANCYNOTALLOWED is a free data retrieval call binding the contract method 0xf902735d.
//
// Solidity: function LP_REENTRANCY_NOT_ALLOWED() view returns(string)
func (_Errors *ErrorsCaller) LPREENTRANCYNOTALLOWED(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "LP_REENTRANCY_NOT_ALLOWED")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// LPREENTRANCYNOTALLOWED is a free data retrieval call binding the contract method 0xf902735d.
//
// Solidity: function LP_REENTRANCY_NOT_ALLOWED() view returns(string)
func (_Errors *ErrorsSession) LPREENTRANCYNOTALLOWED() (string, error) {
	return _Errors.Contract.LPREENTRANCYNOTALLOWED(&_Errors.CallOpts)
}

// LPREENTRANCYNOTALLOWED is a free data retrieval call binding the contract method 0xf902735d.
//
// Solidity: function LP_REENTRANCY_NOT_ALLOWED() view returns(string)
func (_Errors *ErrorsCallerSession) LPREENTRANCYNOTALLOWED() (string, error) {
	return _Errors.Contract.LPREENTRANCYNOTALLOWED(&_Errors.CallOpts)
}

// LPREQUESTEDAMOUNTTOOSMALL is a free data retrieval call binding the contract method 0x390f34ba.
//
// Solidity: function LP_REQUESTED_AMOUNT_TOO_SMALL() view returns(string)
func (_Errors *ErrorsCaller) LPREQUESTEDAMOUNTTOOSMALL(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "LP_REQUESTED_AMOUNT_TOO_SMALL")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// LPREQUESTEDAMOUNTTOOSMALL is a free data retrieval call binding the contract method 0x390f34ba.
//
// Solidity: function LP_REQUESTED_AMOUNT_TOO_SMALL() view returns(string)
func (_Errors *ErrorsSession) LPREQUESTEDAMOUNTTOOSMALL() (string, error) {
	return _Errors.Contract.LPREQUESTEDAMOUNTTOOSMALL(&_Errors.CallOpts)
}

// LPREQUESTEDAMOUNTTOOSMALL is a free data retrieval call binding the contract method 0x390f34ba.
//
// Solidity: function LP_REQUESTED_AMOUNT_TOO_SMALL() view returns(string)
func (_Errors *ErrorsCallerSession) LPREQUESTEDAMOUNTTOOSMALL() (string, error) {
	return _Errors.Contract.LPREQUESTEDAMOUNTTOOSMALL(&_Errors.CallOpts)
}

// MATHADDITIONOVERFLOW is a free data retrieval call binding the contract method 0x0f5ee482.
//
// Solidity: function MATH_ADDITION_OVERFLOW() view returns(string)
func (_Errors *ErrorsCaller) MATHADDITIONOVERFLOW(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "MATH_ADDITION_OVERFLOW")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// MATHADDITIONOVERFLOW is a free data retrieval call binding the contract method 0x0f5ee482.
//
// Solidity: function MATH_ADDITION_OVERFLOW() view returns(string)
func (_Errors *ErrorsSession) MATHADDITIONOVERFLOW() (string, error) {
	return _Errors.Contract.MATHADDITIONOVERFLOW(&_Errors.CallOpts)
}

// MATHADDITIONOVERFLOW is a free data retrieval call binding the contract method 0x0f5ee482.
//
// Solidity: function MATH_ADDITION_OVERFLOW() view returns(string)
func (_Errors *ErrorsCallerSession) MATHADDITIONOVERFLOW() (string, error) {
	return _Errors.Contract.MATHADDITIONOVERFLOW(&_Errors.CallOpts)
}

// MATHDIVISIONBYZERO is a free data retrieval call binding the contract method 0x4349e3d8.
//
// Solidity: function MATH_DIVISION_BY_ZERO() view returns(string)
func (_Errors *ErrorsCaller) MATHDIVISIONBYZERO(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "MATH_DIVISION_BY_ZERO")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// MATHDIVISIONBYZERO is a free data retrieval call binding the contract method 0x4349e3d8.
//
// Solidity: function MATH_DIVISION_BY_ZERO() view returns(string)
func (_Errors *ErrorsSession) MATHDIVISIONBYZERO() (string, error) {
	return _Errors.Contract.MATHDIVISIONBYZERO(&_Errors.CallOpts)
}

// MATHDIVISIONBYZERO is a free data retrieval call binding the contract method 0x4349e3d8.
//
// Solidity: function MATH_DIVISION_BY_ZERO() view returns(string)
func (_Errors *ErrorsCallerSession) MATHDIVISIONBYZERO() (string, error) {
	return _Errors.Contract.MATHDIVISIONBYZERO(&_Errors.CallOpts)
}

// MATHMULTIPLICATIONOVERFLOW is a free data retrieval call binding the contract method 0x029d2344.
//
// Solidity: function MATH_MULTIPLICATION_OVERFLOW() view returns(string)
func (_Errors *ErrorsCaller) MATHMULTIPLICATIONOVERFLOW(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "MATH_MULTIPLICATION_OVERFLOW")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// MATHMULTIPLICATIONOVERFLOW is a free data retrieval call binding the contract method 0x029d2344.
//
// Solidity: function MATH_MULTIPLICATION_OVERFLOW() view returns(string)
func (_Errors *ErrorsSession) MATHMULTIPLICATIONOVERFLOW() (string, error) {
	return _Errors.Contract.MATHMULTIPLICATIONOVERFLOW(&_Errors.CallOpts)
}

// MATHMULTIPLICATIONOVERFLOW is a free data retrieval call binding the contract method 0x029d2344.
//
// Solidity: function MATH_MULTIPLICATION_OVERFLOW() view returns(string)
func (_Errors *ErrorsCallerSession) MATHMULTIPLICATIONOVERFLOW() (string, error) {
	return _Errors.Contract.MATHMULTIPLICATIONOVERFLOW(&_Errors.CallOpts)
}

// RCINVALIDDECIMALS is a free data retrieval call binding the contract method 0x3f5d6ec8.
//
// Solidity: function RC_INVALID_DECIMALS() view returns(string)
func (_Errors *ErrorsCaller) RCINVALIDDECIMALS(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "RC_INVALID_DECIMALS")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// RCINVALIDDECIMALS is a free data retrieval call binding the contract method 0x3f5d6ec8.
//
// Solidity: function RC_INVALID_DECIMALS() view returns(string)
func (_Errors *ErrorsSession) RCINVALIDDECIMALS() (string, error) {
	return _Errors.Contract.RCINVALIDDECIMALS(&_Errors.CallOpts)
}

// RCINVALIDDECIMALS is a free data retrieval call binding the contract method 0x3f5d6ec8.
//
// Solidity: function RC_INVALID_DECIMALS() view returns(string)
func (_Errors *ErrorsCallerSession) RCINVALIDDECIMALS() (string, error) {
	return _Errors.Contract.RCINVALIDDECIMALS(&_Errors.CallOpts)
}

// RCINVALIDLIQBONUS is a free data retrieval call binding the contract method 0x5e869ff1.
//
// Solidity: function RC_INVALID_LIQ_BONUS() view returns(string)
func (_Errors *ErrorsCaller) RCINVALIDLIQBONUS(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "RC_INVALID_LIQ_BONUS")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// RCINVALIDLIQBONUS is a free data retrieval call binding the contract method 0x5e869ff1.
//
// Solidity: function RC_INVALID_LIQ_BONUS() view returns(string)
func (_Errors *ErrorsSession) RCINVALIDLIQBONUS() (string, error) {
	return _Errors.Contract.RCINVALIDLIQBONUS(&_Errors.CallOpts)
}

// RCINVALIDLIQBONUS is a free data retrieval call binding the contract method 0x5e869ff1.
//
// Solidity: function RC_INVALID_LIQ_BONUS() view returns(string)
func (_Errors *ErrorsCallerSession) RCINVALIDLIQBONUS() (string, error) {
	return _Errors.Contract.RCINVALIDLIQBONUS(&_Errors.CallOpts)
}

// RCINVALIDLIQTHRESHOLD is a free data retrieval call binding the contract method 0xbd013f5b.
//
// Solidity: function RC_INVALID_LIQ_THRESHOLD() view returns(string)
func (_Errors *ErrorsCaller) RCINVALIDLIQTHRESHOLD(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "RC_INVALID_LIQ_THRESHOLD")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// RCINVALIDLIQTHRESHOLD is a free data retrieval call binding the contract method 0xbd013f5b.
//
// Solidity: function RC_INVALID_LIQ_THRESHOLD() view returns(string)
func (_Errors *ErrorsSession) RCINVALIDLIQTHRESHOLD() (string, error) {
	return _Errors.Contract.RCINVALIDLIQTHRESHOLD(&_Errors.CallOpts)
}

// RCINVALIDLIQTHRESHOLD is a free data retrieval call binding the contract method 0xbd013f5b.
//
// Solidity: function RC_INVALID_LIQ_THRESHOLD() view returns(string)
func (_Errors *ErrorsCallerSession) RCINVALIDLIQTHRESHOLD() (string, error) {
	return _Errors.Contract.RCINVALIDLIQTHRESHOLD(&_Errors.CallOpts)
}

// RCINVALIDLTV is a free data retrieval call binding the contract method 0x614cf6a1.
//
// Solidity: function RC_INVALID_LTV() view returns(string)
func (_Errors *ErrorsCaller) RCINVALIDLTV(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "RC_INVALID_LTV")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// RCINVALIDLTV is a free data retrieval call binding the contract method 0x614cf6a1.
//
// Solidity: function RC_INVALID_LTV() view returns(string)
func (_Errors *ErrorsSession) RCINVALIDLTV() (string, error) {
	return _Errors.Contract.RCINVALIDLTV(&_Errors.CallOpts)
}

// RCINVALIDLTV is a free data retrieval call binding the contract method 0x614cf6a1.
//
// Solidity: function RC_INVALID_LTV() view returns(string)
func (_Errors *ErrorsCallerSession) RCINVALIDLTV() (string, error) {
	return _Errors.Contract.RCINVALIDLTV(&_Errors.CallOpts)
}

// RCINVALIDRESERVEFACTOR is a free data retrieval call binding the contract method 0x9be4f03a.
//
// Solidity: function RC_INVALID_RESERVE_FACTOR() view returns(string)
func (_Errors *ErrorsCaller) RCINVALIDRESERVEFACTOR(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "RC_INVALID_RESERVE_FACTOR")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// RCINVALIDRESERVEFACTOR is a free data retrieval call binding the contract method 0x9be4f03a.
//
// Solidity: function RC_INVALID_RESERVE_FACTOR() view returns(string)
func (_Errors *ErrorsSession) RCINVALIDRESERVEFACTOR() (string, error) {
	return _Errors.Contract.RCINVALIDRESERVEFACTOR(&_Errors.CallOpts)
}

// RCINVALIDRESERVEFACTOR is a free data retrieval call binding the contract method 0x9be4f03a.
//
// Solidity: function RC_INVALID_RESERVE_FACTOR() view returns(string)
func (_Errors *ErrorsCallerSession) RCINVALIDRESERVEFACTOR() (string, error) {
	return _Errors.Contract.RCINVALIDRESERVEFACTOR(&_Errors.CallOpts)
}

// RLLIQUIDITYINDEXOVERFLOW is a free data retrieval call binding the contract method 0x4fe4f1ab.
//
// Solidity: function RL_LIQUIDITY_INDEX_OVERFLOW() view returns(string)
func (_Errors *ErrorsCaller) RLLIQUIDITYINDEXOVERFLOW(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "RL_LIQUIDITY_INDEX_OVERFLOW")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// RLLIQUIDITYINDEXOVERFLOW is a free data retrieval call binding the contract method 0x4fe4f1ab.
//
// Solidity: function RL_LIQUIDITY_INDEX_OVERFLOW() view returns(string)
func (_Errors *ErrorsSession) RLLIQUIDITYINDEXOVERFLOW() (string, error) {
	return _Errors.Contract.RLLIQUIDITYINDEXOVERFLOW(&_Errors.CallOpts)
}

// RLLIQUIDITYINDEXOVERFLOW is a free data retrieval call binding the contract method 0x4fe4f1ab.
//
// Solidity: function RL_LIQUIDITY_INDEX_OVERFLOW() view returns(string)
func (_Errors *ErrorsCallerSession) RLLIQUIDITYINDEXOVERFLOW() (string, error) {
	return _Errors.Contract.RLLIQUIDITYINDEXOVERFLOW(&_Errors.CallOpts)
}

// RLLIQUIDITYRATEOVERFLOW is a free data retrieval call binding the contract method 0xf11c6720.
//
// Solidity: function RL_LIQUIDITY_RATE_OVERFLOW() view returns(string)
func (_Errors *ErrorsCaller) RLLIQUIDITYRATEOVERFLOW(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "RL_LIQUIDITY_RATE_OVERFLOW")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// RLLIQUIDITYRATEOVERFLOW is a free data retrieval call binding the contract method 0xf11c6720.
//
// Solidity: function RL_LIQUIDITY_RATE_OVERFLOW() view returns(string)
func (_Errors *ErrorsSession) RLLIQUIDITYRATEOVERFLOW() (string, error) {
	return _Errors.Contract.RLLIQUIDITYRATEOVERFLOW(&_Errors.CallOpts)
}

// RLLIQUIDITYRATEOVERFLOW is a free data retrieval call binding the contract method 0xf11c6720.
//
// Solidity: function RL_LIQUIDITY_RATE_OVERFLOW() view returns(string)
func (_Errors *ErrorsCallerSession) RLLIQUIDITYRATEOVERFLOW() (string, error) {
	return _Errors.Contract.RLLIQUIDITYRATEOVERFLOW(&_Errors.CallOpts)
}

// RLRESERVEALREADYINITIALIZED is a free data retrieval call binding the contract method 0xfe75fd26.
//
// Solidity: function RL_RESERVE_ALREADY_INITIALIZED() view returns(string)
func (_Errors *ErrorsCaller) RLRESERVEALREADYINITIALIZED(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "RL_RESERVE_ALREADY_INITIALIZED")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// RLRESERVEALREADYINITIALIZED is a free data retrieval call binding the contract method 0xfe75fd26.
//
// Solidity: function RL_RESERVE_ALREADY_INITIALIZED() view returns(string)
func (_Errors *ErrorsSession) RLRESERVEALREADYINITIALIZED() (string, error) {
	return _Errors.Contract.RLRESERVEALREADYINITIALIZED(&_Errors.CallOpts)
}

// RLRESERVEALREADYINITIALIZED is a free data retrieval call binding the contract method 0xfe75fd26.
//
// Solidity: function RL_RESERVE_ALREADY_INITIALIZED() view returns(string)
func (_Errors *ErrorsCallerSession) RLRESERVEALREADYINITIALIZED() (string, error) {
	return _Errors.Contract.RLRESERVEALREADYINITIALIZED(&_Errors.CallOpts)
}

// RLSTABLEBORROWRATEOVERFLOW is a free data retrieval call binding the contract method 0x6d422aa1.
//
// Solidity: function RL_STABLE_BORROW_RATE_OVERFLOW() view returns(string)
func (_Errors *ErrorsCaller) RLSTABLEBORROWRATEOVERFLOW(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "RL_STABLE_BORROW_RATE_OVERFLOW")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// RLSTABLEBORROWRATEOVERFLOW is a free data retrieval call binding the contract method 0x6d422aa1.
//
// Solidity: function RL_STABLE_BORROW_RATE_OVERFLOW() view returns(string)
func (_Errors *ErrorsSession) RLSTABLEBORROWRATEOVERFLOW() (string, error) {
	return _Errors.Contract.RLSTABLEBORROWRATEOVERFLOW(&_Errors.CallOpts)
}

// RLSTABLEBORROWRATEOVERFLOW is a free data retrieval call binding the contract method 0x6d422aa1.
//
// Solidity: function RL_STABLE_BORROW_RATE_OVERFLOW() view returns(string)
func (_Errors *ErrorsCallerSession) RLSTABLEBORROWRATEOVERFLOW() (string, error) {
	return _Errors.Contract.RLSTABLEBORROWRATEOVERFLOW(&_Errors.CallOpts)
}

// RLVARIABLEBORROWINDEXOVERFLOW is a free data retrieval call binding the contract method 0x44942004.
//
// Solidity: function RL_VARIABLE_BORROW_INDEX_OVERFLOW() view returns(string)
func (_Errors *ErrorsCaller) RLVARIABLEBORROWINDEXOVERFLOW(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "RL_VARIABLE_BORROW_INDEX_OVERFLOW")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// RLVARIABLEBORROWINDEXOVERFLOW is a free data retrieval call binding the contract method 0x44942004.
//
// Solidity: function RL_VARIABLE_BORROW_INDEX_OVERFLOW() view returns(string)
func (_Errors *ErrorsSession) RLVARIABLEBORROWINDEXOVERFLOW() (string, error) {
	return _Errors.Contract.RLVARIABLEBORROWINDEXOVERFLOW(&_Errors.CallOpts)
}

// RLVARIABLEBORROWINDEXOVERFLOW is a free data retrieval call binding the contract method 0x44942004.
//
// Solidity: function RL_VARIABLE_BORROW_INDEX_OVERFLOW() view returns(string)
func (_Errors *ErrorsCallerSession) RLVARIABLEBORROWINDEXOVERFLOW() (string, error) {
	return _Errors.Contract.RLVARIABLEBORROWINDEXOVERFLOW(&_Errors.CallOpts)
}

// RLVARIABLEBORROWRATEOVERFLOW is a free data retrieval call binding the contract method 0x2ea347b0.
//
// Solidity: function RL_VARIABLE_BORROW_RATE_OVERFLOW() view returns(string)
func (_Errors *ErrorsCaller) RLVARIABLEBORROWRATEOVERFLOW(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "RL_VARIABLE_BORROW_RATE_OVERFLOW")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// RLVARIABLEBORROWRATEOVERFLOW is a free data retrieval call binding the contract method 0x2ea347b0.
//
// Solidity: function RL_VARIABLE_BORROW_RATE_OVERFLOW() view returns(string)
func (_Errors *ErrorsSession) RLVARIABLEBORROWRATEOVERFLOW() (string, error) {
	return _Errors.Contract.RLVARIABLEBORROWRATEOVERFLOW(&_Errors.CallOpts)
}

// RLVARIABLEBORROWRATEOVERFLOW is a free data retrieval call binding the contract method 0x2ea347b0.
//
// Solidity: function RL_VARIABLE_BORROW_RATE_OVERFLOW() view returns(string)
func (_Errors *ErrorsCallerSession) RLVARIABLEBORROWRATEOVERFLOW() (string, error) {
	return _Errors.Contract.RLVARIABLEBORROWRATEOVERFLOW(&_Errors.CallOpts)
}

// SDTBURNEXCEEDSBALANCE is a free data retrieval call binding the contract method 0x1befa78d.
//
// Solidity: function SDT_BURN_EXCEEDS_BALANCE() view returns(string)
func (_Errors *ErrorsCaller) SDTBURNEXCEEDSBALANCE(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "SDT_BURN_EXCEEDS_BALANCE")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// SDTBURNEXCEEDSBALANCE is a free data retrieval call binding the contract method 0x1befa78d.
//
// Solidity: function SDT_BURN_EXCEEDS_BALANCE() view returns(string)
func (_Errors *ErrorsSession) SDTBURNEXCEEDSBALANCE() (string, error) {
	return _Errors.Contract.SDTBURNEXCEEDSBALANCE(&_Errors.CallOpts)
}

// SDTBURNEXCEEDSBALANCE is a free data retrieval call binding the contract method 0x1befa78d.
//
// Solidity: function SDT_BURN_EXCEEDS_BALANCE() view returns(string)
func (_Errors *ErrorsCallerSession) SDTBURNEXCEEDSBALANCE() (string, error) {
	return _Errors.Contract.SDTBURNEXCEEDSBALANCE(&_Errors.CallOpts)
}

// SDTSTABLEDEBTOVERFLOW is a free data retrieval call binding the contract method 0xcdad445a.
//
// Solidity: function SDT_STABLE_DEBT_OVERFLOW() view returns(string)
func (_Errors *ErrorsCaller) SDTSTABLEDEBTOVERFLOW(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "SDT_STABLE_DEBT_OVERFLOW")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// SDTSTABLEDEBTOVERFLOW is a free data retrieval call binding the contract method 0xcdad445a.
//
// Solidity: function SDT_STABLE_DEBT_OVERFLOW() view returns(string)
func (_Errors *ErrorsSession) SDTSTABLEDEBTOVERFLOW() (string, error) {
	return _Errors.Contract.SDTSTABLEDEBTOVERFLOW(&_Errors.CallOpts)
}

// SDTSTABLEDEBTOVERFLOW is a free data retrieval call binding the contract method 0xcdad445a.
//
// Solidity: function SDT_STABLE_DEBT_OVERFLOW() view returns(string)
func (_Errors *ErrorsCallerSession) SDTSTABLEDEBTOVERFLOW() (string, error) {
	return _Errors.Contract.SDTSTABLEDEBTOVERFLOW(&_Errors.CallOpts)
}

// ULINVALIDINDEX is a free data retrieval call binding the contract method 0x02454ad3.
//
// Solidity: function UL_INVALID_INDEX() view returns(string)
func (_Errors *ErrorsCaller) ULINVALIDINDEX(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "UL_INVALID_INDEX")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ULINVALIDINDEX is a free data retrieval call binding the contract method 0x02454ad3.
//
// Solidity: function UL_INVALID_INDEX() view returns(string)
func (_Errors *ErrorsSession) ULINVALIDINDEX() (string, error) {
	return _Errors.Contract.ULINVALIDINDEX(&_Errors.CallOpts)
}

// ULINVALIDINDEX is a free data retrieval call binding the contract method 0x02454ad3.
//
// Solidity: function UL_INVALID_INDEX() view returns(string)
func (_Errors *ErrorsCallerSession) ULINVALIDINDEX() (string, error) {
	return _Errors.Contract.ULINVALIDINDEX(&_Errors.CallOpts)
}

// VLAMOUNTBIGGERTHANMAXLOANSIZESTABLE is a free data retrieval call binding the contract method 0x3aa786a8.
//
// Solidity: function VL_AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE() view returns(string)
func (_Errors *ErrorsCaller) VLAMOUNTBIGGERTHANMAXLOANSIZESTABLE(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "VL_AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VLAMOUNTBIGGERTHANMAXLOANSIZESTABLE is a free data retrieval call binding the contract method 0x3aa786a8.
//
// Solidity: function VL_AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE() view returns(string)
func (_Errors *ErrorsSession) VLAMOUNTBIGGERTHANMAXLOANSIZESTABLE() (string, error) {
	return _Errors.Contract.VLAMOUNTBIGGERTHANMAXLOANSIZESTABLE(&_Errors.CallOpts)
}

// VLAMOUNTBIGGERTHANMAXLOANSIZESTABLE is a free data retrieval call binding the contract method 0x3aa786a8.
//
// Solidity: function VL_AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE() view returns(string)
func (_Errors *ErrorsCallerSession) VLAMOUNTBIGGERTHANMAXLOANSIZESTABLE() (string, error) {
	return _Errors.Contract.VLAMOUNTBIGGERTHANMAXLOANSIZESTABLE(&_Errors.CallOpts)
}

// VLBORROWINGNOTENABLED is a free data retrieval call binding the contract method 0x36565ab1.
//
// Solidity: function VL_BORROWING_NOT_ENABLED() view returns(string)
func (_Errors *ErrorsCaller) VLBORROWINGNOTENABLED(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "VL_BORROWING_NOT_ENABLED")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VLBORROWINGNOTENABLED is a free data retrieval call binding the contract method 0x36565ab1.
//
// Solidity: function VL_BORROWING_NOT_ENABLED() view returns(string)
func (_Errors *ErrorsSession) VLBORROWINGNOTENABLED() (string, error) {
	return _Errors.Contract.VLBORROWINGNOTENABLED(&_Errors.CallOpts)
}

// VLBORROWINGNOTENABLED is a free data retrieval call binding the contract method 0x36565ab1.
//
// Solidity: function VL_BORROWING_NOT_ENABLED() view returns(string)
func (_Errors *ErrorsCallerSession) VLBORROWINGNOTENABLED() (string, error) {
	return _Errors.Contract.VLBORROWINGNOTENABLED(&_Errors.CallOpts)
}

// VLCOLLATERALBALANCEIS0 is a free data retrieval call binding the contract method 0x708b8dd3.
//
// Solidity: function VL_COLLATERAL_BALANCE_IS_0() view returns(string)
func (_Errors *ErrorsCaller) VLCOLLATERALBALANCEIS0(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "VL_COLLATERAL_BALANCE_IS_0")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VLCOLLATERALBALANCEIS0 is a free data retrieval call binding the contract method 0x708b8dd3.
//
// Solidity: function VL_COLLATERAL_BALANCE_IS_0() view returns(string)
func (_Errors *ErrorsSession) VLCOLLATERALBALANCEIS0() (string, error) {
	return _Errors.Contract.VLCOLLATERALBALANCEIS0(&_Errors.CallOpts)
}

// VLCOLLATERALBALANCEIS0 is a free data retrieval call binding the contract method 0x708b8dd3.
//
// Solidity: function VL_COLLATERAL_BALANCE_IS_0() view returns(string)
func (_Errors *ErrorsCallerSession) VLCOLLATERALBALANCEIS0() (string, error) {
	return _Errors.Contract.VLCOLLATERALBALANCEIS0(&_Errors.CallOpts)
}

// VLCOLLATERALCANNOTCOVERNEWBORROW is a free data retrieval call binding the contract method 0x2ace698a.
//
// Solidity: function VL_COLLATERAL_CANNOT_COVER_NEW_BORROW() view returns(string)
func (_Errors *ErrorsCaller) VLCOLLATERALCANNOTCOVERNEWBORROW(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "VL_COLLATERAL_CANNOT_COVER_NEW_BORROW")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VLCOLLATERALCANNOTCOVERNEWBORROW is a free data retrieval call binding the contract method 0x2ace698a.
//
// Solidity: function VL_COLLATERAL_CANNOT_COVER_NEW_BORROW() view returns(string)
func (_Errors *ErrorsSession) VLCOLLATERALCANNOTCOVERNEWBORROW() (string, error) {
	return _Errors.Contract.VLCOLLATERALCANNOTCOVERNEWBORROW(&_Errors.CallOpts)
}

// VLCOLLATERALCANNOTCOVERNEWBORROW is a free data retrieval call binding the contract method 0x2ace698a.
//
// Solidity: function VL_COLLATERAL_CANNOT_COVER_NEW_BORROW() view returns(string)
func (_Errors *ErrorsCallerSession) VLCOLLATERALCANNOTCOVERNEWBORROW() (string, error) {
	return _Errors.Contract.VLCOLLATERALCANNOTCOVERNEWBORROW(&_Errors.CallOpts)
}

// VLCOLLATERALSAMEASBORROWINGCURRENCY is a free data retrieval call binding the contract method 0xa39ed4ff.
//
// Solidity: function VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY() view returns(string)
func (_Errors *ErrorsCaller) VLCOLLATERALSAMEASBORROWINGCURRENCY(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VLCOLLATERALSAMEASBORROWINGCURRENCY is a free data retrieval call binding the contract method 0xa39ed4ff.
//
// Solidity: function VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY() view returns(string)
func (_Errors *ErrorsSession) VLCOLLATERALSAMEASBORROWINGCURRENCY() (string, error) {
	return _Errors.Contract.VLCOLLATERALSAMEASBORROWINGCURRENCY(&_Errors.CallOpts)
}

// VLCOLLATERALSAMEASBORROWINGCURRENCY is a free data retrieval call binding the contract method 0xa39ed4ff.
//
// Solidity: function VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY() view returns(string)
func (_Errors *ErrorsCallerSession) VLCOLLATERALSAMEASBORROWINGCURRENCY() (string, error) {
	return _Errors.Contract.VLCOLLATERALSAMEASBORROWINGCURRENCY(&_Errors.CallOpts)
}

// VLCURRENTAVAILABLELIQUIDITYNOTENOUGH is a free data retrieval call binding the contract method 0x179476c5.
//
// Solidity: function VL_CURRENT_AVAILABLE_LIQUIDITY_NOT_ENOUGH() view returns(string)
func (_Errors *ErrorsCaller) VLCURRENTAVAILABLELIQUIDITYNOTENOUGH(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "VL_CURRENT_AVAILABLE_LIQUIDITY_NOT_ENOUGH")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VLCURRENTAVAILABLELIQUIDITYNOTENOUGH is a free data retrieval call binding the contract method 0x179476c5.
//
// Solidity: function VL_CURRENT_AVAILABLE_LIQUIDITY_NOT_ENOUGH() view returns(string)
func (_Errors *ErrorsSession) VLCURRENTAVAILABLELIQUIDITYNOTENOUGH() (string, error) {
	return _Errors.Contract.VLCURRENTAVAILABLELIQUIDITYNOTENOUGH(&_Errors.CallOpts)
}

// VLCURRENTAVAILABLELIQUIDITYNOTENOUGH is a free data retrieval call binding the contract method 0x179476c5.
//
// Solidity: function VL_CURRENT_AVAILABLE_LIQUIDITY_NOT_ENOUGH() view returns(string)
func (_Errors *ErrorsCallerSession) VLCURRENTAVAILABLELIQUIDITYNOTENOUGH() (string, error) {
	return _Errors.Contract.VLCURRENTAVAILABLELIQUIDITYNOTENOUGH(&_Errors.CallOpts)
}

// VLDEPOSITALREADYINUSE is a free data retrieval call binding the contract method 0xe29425dc.
//
// Solidity: function VL_DEPOSIT_ALREADY_IN_USE() view returns(string)
func (_Errors *ErrorsCaller) VLDEPOSITALREADYINUSE(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "VL_DEPOSIT_ALREADY_IN_USE")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VLDEPOSITALREADYINUSE is a free data retrieval call binding the contract method 0xe29425dc.
//
// Solidity: function VL_DEPOSIT_ALREADY_IN_USE() view returns(string)
func (_Errors *ErrorsSession) VLDEPOSITALREADYINUSE() (string, error) {
	return _Errors.Contract.VLDEPOSITALREADYINUSE(&_Errors.CallOpts)
}

// VLDEPOSITALREADYINUSE is a free data retrieval call binding the contract method 0xe29425dc.
//
// Solidity: function VL_DEPOSIT_ALREADY_IN_USE() view returns(string)
func (_Errors *ErrorsCallerSession) VLDEPOSITALREADYINUSE() (string, error) {
	return _Errors.Contract.VLDEPOSITALREADYINUSE(&_Errors.CallOpts)
}

// VLHEALTHFACTORLOWERTHANLIQUIDATIONTHRESHOLD is a free data retrieval call binding the contract method 0x1ec68b1d.
//
// Solidity: function VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD() view returns(string)
func (_Errors *ErrorsCaller) VLHEALTHFACTORLOWERTHANLIQUIDATIONTHRESHOLD(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VLHEALTHFACTORLOWERTHANLIQUIDATIONTHRESHOLD is a free data retrieval call binding the contract method 0x1ec68b1d.
//
// Solidity: function VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD() view returns(string)
func (_Errors *ErrorsSession) VLHEALTHFACTORLOWERTHANLIQUIDATIONTHRESHOLD() (string, error) {
	return _Errors.Contract.VLHEALTHFACTORLOWERTHANLIQUIDATIONTHRESHOLD(&_Errors.CallOpts)
}

// VLHEALTHFACTORLOWERTHANLIQUIDATIONTHRESHOLD is a free data retrieval call binding the contract method 0x1ec68b1d.
//
// Solidity: function VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD() view returns(string)
func (_Errors *ErrorsCallerSession) VLHEALTHFACTORLOWERTHANLIQUIDATIONTHRESHOLD() (string, error) {
	return _Errors.Contract.VLHEALTHFACTORLOWERTHANLIQUIDATIONTHRESHOLD(&_Errors.CallOpts)
}

// VLINCONSISTENTFLASHLOANPARAMS is a free data retrieval call binding the contract method 0xd7b079aa.
//
// Solidity: function VL_INCONSISTENT_FLASHLOAN_PARAMS() view returns(string)
func (_Errors *ErrorsCaller) VLINCONSISTENTFLASHLOANPARAMS(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "VL_INCONSISTENT_FLASHLOAN_PARAMS")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VLINCONSISTENTFLASHLOANPARAMS is a free data retrieval call binding the contract method 0xd7b079aa.
//
// Solidity: function VL_INCONSISTENT_FLASHLOAN_PARAMS() view returns(string)
func (_Errors *ErrorsSession) VLINCONSISTENTFLASHLOANPARAMS() (string, error) {
	return _Errors.Contract.VLINCONSISTENTFLASHLOANPARAMS(&_Errors.CallOpts)
}

// VLINCONSISTENTFLASHLOANPARAMS is a free data retrieval call binding the contract method 0xd7b079aa.
//
// Solidity: function VL_INCONSISTENT_FLASHLOAN_PARAMS() view returns(string)
func (_Errors *ErrorsCallerSession) VLINCONSISTENTFLASHLOANPARAMS() (string, error) {
	return _Errors.Contract.VLINCONSISTENTFLASHLOANPARAMS(&_Errors.CallOpts)
}

// VLINVALIDAMOUNT is a free data retrieval call binding the contract method 0x871938a8.
//
// Solidity: function VL_INVALID_AMOUNT() view returns(string)
func (_Errors *ErrorsCaller) VLINVALIDAMOUNT(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "VL_INVALID_AMOUNT")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VLINVALIDAMOUNT is a free data retrieval call binding the contract method 0x871938a8.
//
// Solidity: function VL_INVALID_AMOUNT() view returns(string)
func (_Errors *ErrorsSession) VLINVALIDAMOUNT() (string, error) {
	return _Errors.Contract.VLINVALIDAMOUNT(&_Errors.CallOpts)
}

// VLINVALIDAMOUNT is a free data retrieval call binding the contract method 0x871938a8.
//
// Solidity: function VL_INVALID_AMOUNT() view returns(string)
func (_Errors *ErrorsCallerSession) VLINVALIDAMOUNT() (string, error) {
	return _Errors.Contract.VLINVALIDAMOUNT(&_Errors.CallOpts)
}

// VLINVALIDINTERESTRATEMODESELECTED is a free data retrieval call binding the contract method 0x3b5d25aa.
//
// Solidity: function VL_INVALID_INTEREST_RATE_MODE_SELECTED() view returns(string)
func (_Errors *ErrorsCaller) VLINVALIDINTERESTRATEMODESELECTED(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "VL_INVALID_INTEREST_RATE_MODE_SELECTED")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VLINVALIDINTERESTRATEMODESELECTED is a free data retrieval call binding the contract method 0x3b5d25aa.
//
// Solidity: function VL_INVALID_INTEREST_RATE_MODE_SELECTED() view returns(string)
func (_Errors *ErrorsSession) VLINVALIDINTERESTRATEMODESELECTED() (string, error) {
	return _Errors.Contract.VLINVALIDINTERESTRATEMODESELECTED(&_Errors.CallOpts)
}

// VLINVALIDINTERESTRATEMODESELECTED is a free data retrieval call binding the contract method 0x3b5d25aa.
//
// Solidity: function VL_INVALID_INTEREST_RATE_MODE_SELECTED() view returns(string)
func (_Errors *ErrorsCallerSession) VLINVALIDINTERESTRATEMODESELECTED() (string, error) {
	return _Errors.Contract.VLINVALIDINTERESTRATEMODESELECTED(&_Errors.CallOpts)
}

// VLNOTENOUGHAVAILABLEUSERBALANCE is a free data retrieval call binding the contract method 0xa8440241.
//
// Solidity: function VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE() view returns(string)
func (_Errors *ErrorsCaller) VLNOTENOUGHAVAILABLEUSERBALANCE(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VLNOTENOUGHAVAILABLEUSERBALANCE is a free data retrieval call binding the contract method 0xa8440241.
//
// Solidity: function VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE() view returns(string)
func (_Errors *ErrorsSession) VLNOTENOUGHAVAILABLEUSERBALANCE() (string, error) {
	return _Errors.Contract.VLNOTENOUGHAVAILABLEUSERBALANCE(&_Errors.CallOpts)
}

// VLNOTENOUGHAVAILABLEUSERBALANCE is a free data retrieval call binding the contract method 0xa8440241.
//
// Solidity: function VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE() view returns(string)
func (_Errors *ErrorsCallerSession) VLNOTENOUGHAVAILABLEUSERBALANCE() (string, error) {
	return _Errors.Contract.VLNOTENOUGHAVAILABLEUSERBALANCE(&_Errors.CallOpts)
}

// VLNOACTIVERESERVE is a free data retrieval call binding the contract method 0x7865a627.
//
// Solidity: function VL_NO_ACTIVE_RESERVE() view returns(string)
func (_Errors *ErrorsCaller) VLNOACTIVERESERVE(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "VL_NO_ACTIVE_RESERVE")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VLNOACTIVERESERVE is a free data retrieval call binding the contract method 0x7865a627.
//
// Solidity: function VL_NO_ACTIVE_RESERVE() view returns(string)
func (_Errors *ErrorsSession) VLNOACTIVERESERVE() (string, error) {
	return _Errors.Contract.VLNOACTIVERESERVE(&_Errors.CallOpts)
}

// VLNOACTIVERESERVE is a free data retrieval call binding the contract method 0x7865a627.
//
// Solidity: function VL_NO_ACTIVE_RESERVE() view returns(string)
func (_Errors *ErrorsCallerSession) VLNOACTIVERESERVE() (string, error) {
	return _Errors.Contract.VLNOACTIVERESERVE(&_Errors.CallOpts)
}

// VLNODEBTOFSELECTEDTYPE is a free data retrieval call binding the contract method 0x91a9fb18.
//
// Solidity: function VL_NO_DEBT_OF_SELECTED_TYPE() view returns(string)
func (_Errors *ErrorsCaller) VLNODEBTOFSELECTEDTYPE(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "VL_NO_DEBT_OF_SELECTED_TYPE")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VLNODEBTOFSELECTEDTYPE is a free data retrieval call binding the contract method 0x91a9fb18.
//
// Solidity: function VL_NO_DEBT_OF_SELECTED_TYPE() view returns(string)
func (_Errors *ErrorsSession) VLNODEBTOFSELECTEDTYPE() (string, error) {
	return _Errors.Contract.VLNODEBTOFSELECTEDTYPE(&_Errors.CallOpts)
}

// VLNODEBTOFSELECTEDTYPE is a free data retrieval call binding the contract method 0x91a9fb18.
//
// Solidity: function VL_NO_DEBT_OF_SELECTED_TYPE() view returns(string)
func (_Errors *ErrorsCallerSession) VLNODEBTOFSELECTEDTYPE() (string, error) {
	return _Errors.Contract.VLNODEBTOFSELECTEDTYPE(&_Errors.CallOpts)
}

// VLNOEXPLICITAMOUNTTOREPAYONBEHALF is a free data retrieval call binding the contract method 0xdaf23547.
//
// Solidity: function VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF() view returns(string)
func (_Errors *ErrorsCaller) VLNOEXPLICITAMOUNTTOREPAYONBEHALF(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VLNOEXPLICITAMOUNTTOREPAYONBEHALF is a free data retrieval call binding the contract method 0xdaf23547.
//
// Solidity: function VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF() view returns(string)
func (_Errors *ErrorsSession) VLNOEXPLICITAMOUNTTOREPAYONBEHALF() (string, error) {
	return _Errors.Contract.VLNOEXPLICITAMOUNTTOREPAYONBEHALF(&_Errors.CallOpts)
}

// VLNOEXPLICITAMOUNTTOREPAYONBEHALF is a free data retrieval call binding the contract method 0xdaf23547.
//
// Solidity: function VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF() view returns(string)
func (_Errors *ErrorsCallerSession) VLNOEXPLICITAMOUNTTOREPAYONBEHALF() (string, error) {
	return _Errors.Contract.VLNOEXPLICITAMOUNTTOREPAYONBEHALF(&_Errors.CallOpts)
}

// VLNOSTABLERATELOANINRESERVE is a free data retrieval call binding the contract method 0x6422b257.
//
// Solidity: function VL_NO_STABLE_RATE_LOAN_IN_RESERVE() view returns(string)
func (_Errors *ErrorsCaller) VLNOSTABLERATELOANINRESERVE(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "VL_NO_STABLE_RATE_LOAN_IN_RESERVE")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VLNOSTABLERATELOANINRESERVE is a free data retrieval call binding the contract method 0x6422b257.
//
// Solidity: function VL_NO_STABLE_RATE_LOAN_IN_RESERVE() view returns(string)
func (_Errors *ErrorsSession) VLNOSTABLERATELOANINRESERVE() (string, error) {
	return _Errors.Contract.VLNOSTABLERATELOANINRESERVE(&_Errors.CallOpts)
}

// VLNOSTABLERATELOANINRESERVE is a free data retrieval call binding the contract method 0x6422b257.
//
// Solidity: function VL_NO_STABLE_RATE_LOAN_IN_RESERVE() view returns(string)
func (_Errors *ErrorsCallerSession) VLNOSTABLERATELOANINRESERVE() (string, error) {
	return _Errors.Contract.VLNOSTABLERATELOANINRESERVE(&_Errors.CallOpts)
}

// VLNOVARIABLERATELOANINRESERVE is a free data retrieval call binding the contract method 0x6ab5e615.
//
// Solidity: function VL_NO_VARIABLE_RATE_LOAN_IN_RESERVE() view returns(string)
func (_Errors *ErrorsCaller) VLNOVARIABLERATELOANINRESERVE(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "VL_NO_VARIABLE_RATE_LOAN_IN_RESERVE")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VLNOVARIABLERATELOANINRESERVE is a free data retrieval call binding the contract method 0x6ab5e615.
//
// Solidity: function VL_NO_VARIABLE_RATE_LOAN_IN_RESERVE() view returns(string)
func (_Errors *ErrorsSession) VLNOVARIABLERATELOANINRESERVE() (string, error) {
	return _Errors.Contract.VLNOVARIABLERATELOANINRESERVE(&_Errors.CallOpts)
}

// VLNOVARIABLERATELOANINRESERVE is a free data retrieval call binding the contract method 0x6ab5e615.
//
// Solidity: function VL_NO_VARIABLE_RATE_LOAN_IN_RESERVE() view returns(string)
func (_Errors *ErrorsCallerSession) VLNOVARIABLERATELOANINRESERVE() (string, error) {
	return _Errors.Contract.VLNOVARIABLERATELOANINRESERVE(&_Errors.CallOpts)
}

// VLRESERVEFROZEN is a free data retrieval call binding the contract method 0xd7510e0c.
//
// Solidity: function VL_RESERVE_FROZEN() view returns(string)
func (_Errors *ErrorsCaller) VLRESERVEFROZEN(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "VL_RESERVE_FROZEN")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VLRESERVEFROZEN is a free data retrieval call binding the contract method 0xd7510e0c.
//
// Solidity: function VL_RESERVE_FROZEN() view returns(string)
func (_Errors *ErrorsSession) VLRESERVEFROZEN() (string, error) {
	return _Errors.Contract.VLRESERVEFROZEN(&_Errors.CallOpts)
}

// VLRESERVEFROZEN is a free data retrieval call binding the contract method 0xd7510e0c.
//
// Solidity: function VL_RESERVE_FROZEN() view returns(string)
func (_Errors *ErrorsCallerSession) VLRESERVEFROZEN() (string, error) {
	return _Errors.Contract.VLRESERVEFROZEN(&_Errors.CallOpts)
}

// VLSTABLEBORROWINGNOTENABLED is a free data retrieval call binding the contract method 0x4927c63a.
//
// Solidity: function VL_STABLE_BORROWING_NOT_ENABLED() view returns(string)
func (_Errors *ErrorsCaller) VLSTABLEBORROWINGNOTENABLED(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "VL_STABLE_BORROWING_NOT_ENABLED")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VLSTABLEBORROWINGNOTENABLED is a free data retrieval call binding the contract method 0x4927c63a.
//
// Solidity: function VL_STABLE_BORROWING_NOT_ENABLED() view returns(string)
func (_Errors *ErrorsSession) VLSTABLEBORROWINGNOTENABLED() (string, error) {
	return _Errors.Contract.VLSTABLEBORROWINGNOTENABLED(&_Errors.CallOpts)
}

// VLSTABLEBORROWINGNOTENABLED is a free data retrieval call binding the contract method 0x4927c63a.
//
// Solidity: function VL_STABLE_BORROWING_NOT_ENABLED() view returns(string)
func (_Errors *ErrorsCallerSession) VLSTABLEBORROWINGNOTENABLED() (string, error) {
	return _Errors.Contract.VLSTABLEBORROWINGNOTENABLED(&_Errors.CallOpts)
}

// VLTRANSFERNOTALLOWED is a free data retrieval call binding the contract method 0xf3d9cc11.
//
// Solidity: function VL_TRANSFER_NOT_ALLOWED() view returns(string)
func (_Errors *ErrorsCaller) VLTRANSFERNOTALLOWED(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "VL_TRANSFER_NOT_ALLOWED")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VLTRANSFERNOTALLOWED is a free data retrieval call binding the contract method 0xf3d9cc11.
//
// Solidity: function VL_TRANSFER_NOT_ALLOWED() view returns(string)
func (_Errors *ErrorsSession) VLTRANSFERNOTALLOWED() (string, error) {
	return _Errors.Contract.VLTRANSFERNOTALLOWED(&_Errors.CallOpts)
}

// VLTRANSFERNOTALLOWED is a free data retrieval call binding the contract method 0xf3d9cc11.
//
// Solidity: function VL_TRANSFER_NOT_ALLOWED() view returns(string)
func (_Errors *ErrorsCallerSession) VLTRANSFERNOTALLOWED() (string, error) {
	return _Errors.Contract.VLTRANSFERNOTALLOWED(&_Errors.CallOpts)
}

// VLUNDERLYINGBALANCENOTGREATERTHAN0 is a free data retrieval call binding the contract method 0x35a9d21d.
//
// Solidity: function VL_UNDERLYING_BALANCE_NOT_GREATER_THAN_0() view returns(string)
func (_Errors *ErrorsCaller) VLUNDERLYINGBALANCENOTGREATERTHAN0(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Errors.contract.Call(opts, &out, "VL_UNDERLYING_BALANCE_NOT_GREATER_THAN_0")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VLUNDERLYINGBALANCENOTGREATERTHAN0 is a free data retrieval call binding the contract method 0x35a9d21d.
//
// Solidity: function VL_UNDERLYING_BALANCE_NOT_GREATER_THAN_0() view returns(string)
func (_Errors *ErrorsSession) VLUNDERLYINGBALANCENOTGREATERTHAN0() (string, error) {
	return _Errors.Contract.VLUNDERLYINGBALANCENOTGREATERTHAN0(&_Errors.CallOpts)
}

// VLUNDERLYINGBALANCENOTGREATERTHAN0 is a free data retrieval call binding the contract method 0x35a9d21d.
//
// Solidity: function VL_UNDERLYING_BALANCE_NOT_GREATER_THAN_0() view returns(string)
func (_Errors *ErrorsCallerSession) VLUNDERLYINGBALANCENOTGREATERTHAN0() (string, error) {
	return _Errors.Contract.VLUNDERLYINGBALANCENOTGREATERTHAN0(&_Errors.CallOpts)
}

// FlashLoanReceiverBaseABI is the input ABI used to generate the binding from.
const FlashLoanReceiverBaseABI = "[{\"inputs\":[{\"internalType\":\"contractILendingPoolAddressesProvider\",\"name\":\"provider\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ADDRESSES_PROVIDER\",\"outputs\":[{\"internalType\":\"contractILendingPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LENDING_POOL\",\"outputs\":[{\"internalType\":\"contractILendingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"premiums\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// FlashLoanReceiverBase is an auto generated Go binding around an Ethereum contract.
type FlashLoanReceiverBase struct {
	FlashLoanReceiverBaseCaller     // Read-only binding to the contract
	FlashLoanReceiverBaseTransactor // Write-only binding to the contract
	FlashLoanReceiverBaseFilterer   // Log filterer for contract events
}

// FlashLoanReceiverBaseCaller is an auto generated read-only Go binding around an Ethereum contract.
type FlashLoanReceiverBaseCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FlashLoanReceiverBaseTransactor is an auto generated write-only Go binding around an Ethereum contract.
type FlashLoanReceiverBaseTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FlashLoanReceiverBaseFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FlashLoanReceiverBaseFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FlashLoanReceiverBaseSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FlashLoanReceiverBaseSession struct {
	Contract     *FlashLoanReceiverBase // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// FlashLoanReceiverBaseCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FlashLoanReceiverBaseCallerSession struct {
	Contract *FlashLoanReceiverBaseCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// FlashLoanReceiverBaseTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FlashLoanReceiverBaseTransactorSession struct {
	Contract     *FlashLoanReceiverBaseTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// FlashLoanReceiverBaseRaw is an auto generated low-level Go binding around an Ethereum contract.
type FlashLoanReceiverBaseRaw struct {
	Contract *FlashLoanReceiverBase // Generic contract binding to access the raw methods on
}

// FlashLoanReceiverBaseCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FlashLoanReceiverBaseCallerRaw struct {
	Contract *FlashLoanReceiverBaseCaller // Generic read-only contract binding to access the raw methods on
}

// FlashLoanReceiverBaseTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FlashLoanReceiverBaseTransactorRaw struct {
	Contract *FlashLoanReceiverBaseTransactor // Generic write-only contract binding to access the raw methods on
}

// NewFlashLoanReceiverBase creates a new instance of FlashLoanReceiverBase, bound to a specific deployed contract.
func NewFlashLoanReceiverBase(address common.Address, backend bind.ContractBackend) (*FlashLoanReceiverBase, error) {
	contract, err := bindFlashLoanReceiverBase(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &FlashLoanReceiverBase{FlashLoanReceiverBaseCaller: FlashLoanReceiverBaseCaller{contract: contract}, FlashLoanReceiverBaseTransactor: FlashLoanReceiverBaseTransactor{contract: contract}, FlashLoanReceiverBaseFilterer: FlashLoanReceiverBaseFilterer{contract: contract}}, nil
}

// NewFlashLoanReceiverBaseCaller creates a new read-only instance of FlashLoanReceiverBase, bound to a specific deployed contract.
func NewFlashLoanReceiverBaseCaller(address common.Address, caller bind.ContractCaller) (*FlashLoanReceiverBaseCaller, error) {
	contract, err := bindFlashLoanReceiverBase(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FlashLoanReceiverBaseCaller{contract: contract}, nil
}

// NewFlashLoanReceiverBaseTransactor creates a new write-only instance of FlashLoanReceiverBase, bound to a specific deployed contract.
func NewFlashLoanReceiverBaseTransactor(address common.Address, transactor bind.ContractTransactor) (*FlashLoanReceiverBaseTransactor, error) {
	contract, err := bindFlashLoanReceiverBase(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FlashLoanReceiverBaseTransactor{contract: contract}, nil
}

// NewFlashLoanReceiverBaseFilterer creates a new log filterer instance of FlashLoanReceiverBase, bound to a specific deployed contract.
func NewFlashLoanReceiverBaseFilterer(address common.Address, filterer bind.ContractFilterer) (*FlashLoanReceiverBaseFilterer, error) {
	contract, err := bindFlashLoanReceiverBase(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FlashLoanReceiverBaseFilterer{contract: contract}, nil
}

// bindFlashLoanReceiverBase binds a generic wrapper to an already deployed contract.
func bindFlashLoanReceiverBase(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(FlashLoanReceiverBaseABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FlashLoanReceiverBase *FlashLoanReceiverBaseRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FlashLoanReceiverBase.Contract.FlashLoanReceiverBaseCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FlashLoanReceiverBase *FlashLoanReceiverBaseRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FlashLoanReceiverBase.Contract.FlashLoanReceiverBaseTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FlashLoanReceiverBase *FlashLoanReceiverBaseRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FlashLoanReceiverBase.Contract.FlashLoanReceiverBaseTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FlashLoanReceiverBase *FlashLoanReceiverBaseCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FlashLoanReceiverBase.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FlashLoanReceiverBase *FlashLoanReceiverBaseTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FlashLoanReceiverBase.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FlashLoanReceiverBase *FlashLoanReceiverBaseTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FlashLoanReceiverBase.Contract.contract.Transact(opts, method, params...)
}

// ADDRESSESPROVIDER is a free data retrieval call binding the contract method 0x0542975c.
//
// Solidity: function ADDRESSES_PROVIDER() view returns(address)
func (_FlashLoanReceiverBase *FlashLoanReceiverBaseCaller) ADDRESSESPROVIDER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FlashLoanReceiverBase.contract.Call(opts, &out, "ADDRESSES_PROVIDER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ADDRESSESPROVIDER is a free data retrieval call binding the contract method 0x0542975c.
//
// Solidity: function ADDRESSES_PROVIDER() view returns(address)
func (_FlashLoanReceiverBase *FlashLoanReceiverBaseSession) ADDRESSESPROVIDER() (common.Address, error) {
	return _FlashLoanReceiverBase.Contract.ADDRESSESPROVIDER(&_FlashLoanReceiverBase.CallOpts)
}

// ADDRESSESPROVIDER is a free data retrieval call binding the contract method 0x0542975c.
//
// Solidity: function ADDRESSES_PROVIDER() view returns(address)
func (_FlashLoanReceiverBase *FlashLoanReceiverBaseCallerSession) ADDRESSESPROVIDER() (common.Address, error) {
	return _FlashLoanReceiverBase.Contract.ADDRESSESPROVIDER(&_FlashLoanReceiverBase.CallOpts)
}

// LENDINGPOOL is a free data retrieval call binding the contract method 0xb4dcfc77.
//
// Solidity: function LENDING_POOL() view returns(address)
func (_FlashLoanReceiverBase *FlashLoanReceiverBaseCaller) LENDINGPOOL(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FlashLoanReceiverBase.contract.Call(opts, &out, "LENDING_POOL")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LENDINGPOOL is a free data retrieval call binding the contract method 0xb4dcfc77.
//
// Solidity: function LENDING_POOL() view returns(address)
func (_FlashLoanReceiverBase *FlashLoanReceiverBaseSession) LENDINGPOOL() (common.Address, error) {
	return _FlashLoanReceiverBase.Contract.LENDINGPOOL(&_FlashLoanReceiverBase.CallOpts)
}

// LENDINGPOOL is a free data retrieval call binding the contract method 0xb4dcfc77.
//
// Solidity: function LENDING_POOL() view returns(address)
func (_FlashLoanReceiverBase *FlashLoanReceiverBaseCallerSession) LENDINGPOOL() (common.Address, error) {
	return _FlashLoanReceiverBase.Contract.LENDINGPOOL(&_FlashLoanReceiverBase.CallOpts)
}

// ExecuteOperation is a paid mutator transaction binding the contract method 0x920f5c84.
//
// Solidity: function executeOperation(address[] assets, uint256[] amounts, uint256[] premiums, address initiator, bytes params) returns(bool)
func (_FlashLoanReceiverBase *FlashLoanReceiverBaseTransactor) ExecuteOperation(opts *bind.TransactOpts, assets []common.Address, amounts []*big.Int, premiums []*big.Int, initiator common.Address, params []byte) (*types.Transaction, error) {
	return _FlashLoanReceiverBase.contract.Transact(opts, "executeOperation", assets, amounts, premiums, initiator, params)
}

// ExecuteOperation is a paid mutator transaction binding the contract method 0x920f5c84.
//
// Solidity: function executeOperation(address[] assets, uint256[] amounts, uint256[] premiums, address initiator, bytes params) returns(bool)
func (_FlashLoanReceiverBase *FlashLoanReceiverBaseSession) ExecuteOperation(assets []common.Address, amounts []*big.Int, premiums []*big.Int, initiator common.Address, params []byte) (*types.Transaction, error) {
	return _FlashLoanReceiverBase.Contract.ExecuteOperation(&_FlashLoanReceiverBase.TransactOpts, assets, amounts, premiums, initiator, params)
}

// ExecuteOperation is a paid mutator transaction binding the contract method 0x920f5c84.
//
// Solidity: function executeOperation(address[] assets, uint256[] amounts, uint256[] premiums, address initiator, bytes params) returns(bool)
func (_FlashLoanReceiverBase *FlashLoanReceiverBaseTransactorSession) ExecuteOperation(assets []common.Address, amounts []*big.Int, premiums []*big.Int, initiator common.Address, params []byte) (*types.Transaction, error) {
	return _FlashLoanReceiverBase.Contract.ExecuteOperation(&_FlashLoanReceiverBase.TransactOpts, assets, amounts, premiums, initiator, params)
}

// GenericLogicABI is the input ABI used to generate the binding from.
const GenericLogicABI = "[{\"inputs\":[],\"name\":\"HEALTH_FACTOR_LIQUIDATION_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// GenericLogicBin is the compiled bytecode used for deploying new contracts.
var GenericLogicBin = "0x610e86610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c8063c3525c2814610045578063e617042414610063575b600080fd5b61004d610083565b60405161005a9190610e2f565b60405180910390f35b610076610071366004610c58565b61008f565b60405161005a9190610d59565b670de0b6b3a764000081565b60006100a86100a336879003870187610cf0565b6102be565b15806100f057506001600160a01b0389166000908152602087905260409020600701546100ee90600160a01b900460ff166100e836889003880188610cf0565b906102e6565b155b156100fd575060016102b2565b610105610b69565b6001600160a01b038a16600090815260208890526040902061012690610348565b5084525060208301819052151590506101435760019150506102b2565b61015f8988610157368a90038a018a610cf0565b888888610373565b506080850152506060830181905260408301919091526101835760019150506102b2565b61021a8160000151600a0a6102148a866001600160a01b031663b3596f078f6040518263ffffffff1660e01b81526004016101be9190610d45565b60206040518083038186803b1580156101d657600080fd5b505afa1580156101ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020e9190610d2d565b90610834565b90610875565b60a08201819052604082015161022f916108b7565b60c082018190526102445760009150506102b2565b6102838160c0015161021461026a84602001518560a0015161083490919063ffffffff16565b6080850151604086015161027d91610834565b906108b7565b60e0820181905260c082015160608301516000926102a29291906108f9565b670de0b6b3a76400001115925050505b98975050505050505050565b517f555555555555555555555555555555555555555555555555555555555555555516151590565b60006080821060405180604001604052806002815260200161373760f01b8152509061032e5760405162461bcd60e51b81526004016103259190610d64565b60405180910390fd5b5050815160016002830281019190911c1615155b92915050565b5461ffff80821692601083901c821692602081901c831692603082901c60ff169260409290921c1690565b6000806000806000610383610bbe565b61038c8a610925565b156103aa576000806000806000199550955095509550955050610826565b600060e08201525b878160e0015110156107855760e08101516103ce908b9061092a565b6103d757610775565b60e0810151600090815260208a81526040808320546001600160a01b03166101e085018190528352908d9052902061040e81610348565b506080860181905260c08601929092525060a0840191909152600a0a60208301526101e082015160405163b3596f0760e01b81526001600160a01b038a169163b3596f07916104609190600401610d45565b60206040518083038186803b15801561047857600080fd5b505afa15801561048c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b09190610d2d565b825260c0820151158015906104d0575060e08201516104d0908c906102e6565b156105ee578060040160009054906101000a90046001600160a01b03166001600160a01b03166370a082318e6040518263ffffffff1660e01b81526004016105189190610d45565b60206040518083038186803b15801561053057600080fd5b505afa158015610544573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105689190610d2d565b6040830181905260208301518351600092610587929161021491610834565b61012084015190915061059a908261097b565b61012084015260a08301516105c0906105b4908390610834565b6101608501519061097b565b61016084015260c08301516105e6906105da908390610834565b6101808501519061097b565b610180840152505b60e08201516105fe908c906109a0565b15610773578060050160009054906101000a90046001600160a01b03166001600160a01b03166370a082318e6040518263ffffffff1660e01b81526004016106469190610d45565b60206040518083038186803b15801561065e57600080fd5b505afa158015610672573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106969190610d2d565b8260600181815250506107408160060160009054906101000a90046001600160a01b03166001600160a01b03166370a082318f6040518263ffffffff1660e01b81526004016106e59190610d45565b60206040518083038186803b1580156106fd57600080fd5b505afa158015610711573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107359190610d2d565b60608401519061097b565b606083018190526020830151835161076c92610760929161021491610834565b6101408401519061097b565b6101408301525b505b60e08101805160010190526103b2565b6000816101200151116107995760006107ae565b6101208101516101608201516107ae91610875565b6101608201526101208101516107c55760006107da565b6101208101516101808201516107da91610875565b61018082018190526101208201516101408301516107f7926108f9565b610100820181905261012082015161014083015161016084015161018090940151919850965091945090925090505b965096509650965096915050565b60008261084357506000610342565b8282028284828161085057fe5b041461086e5760405162461bcd60e51b815260040161032590610dee565b9392505050565b600061086e83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506109f1565b600061086e83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610a28565b600082610909575060001961086e565b61091d836109178685610a54565b90610ac6565b949350505050565b511590565b60006080821060405180604001604052806002815260200161373760f01b815250906109695760405162461bcd60e51b81526004016103259190610d64565b50509051600360029092021c16151590565b60008282018381101561086e5760405162461bcd60e51b815260040161032590610db7565b60006080821060405180604001604052806002815260200161373760f01b815250906109df5760405162461bcd60e51b81526004016103259190610d64565b50509051600160029092021c16151590565b60008183610a125760405162461bcd60e51b81526004016103259190610d64565b506000838581610a1e57fe5b0495945050505050565b60008184841115610a4c5760405162461bcd60e51b81526004016103259190610d64565b505050900390565b6000821580610a61575081155b15610a6e57506000610342565b816113881981610a7a57fe5b0483111560405180604001604052806002815260200161068760f31b81525090610ab75760405162461bcd60e51b81526004016103259190610d64565b50506127109102611388010490565b604080518082019091526002815261035360f41b602082015260009082610b005760405162461bcd60e51b81526004016103259190610d64565b5060408051808201909152600280825261068760f31b6020830152830490670de0b6b3a7640000821904851115610b4a5760405162461bcd60e51b81526004016103259190610d64565b508281670de0b6b3a764000086020181610b6057fe5b04949350505050565b6040518061014001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b604051806102400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160001515815260200160006001600160a01b031681526020016000151581526020016000151581525090565b600080600080600080600080888a03610100811215610c75578485fd5b8935610c8081610e38565b985060208a0135610c9081610e38565b975060408a0135965060608a013595506020607f1982011215610cb1578485fd5b5060808901935060a0890135925060c0890135915060e08901356001600160a01b0381168114610cdf578182fd5b809150509295985092959890939650565b600060208284031215610d01578081fd5b6040516020810181811067ffffffffffffffff82111715610d20578283fd5b6040529135825250919050565b600060208284031215610d3e578081fd5b5051919050565b6001600160a01b0391909116815260200190565b901515815260200190565b6000602080835283518082850152825b81811015610d9057858101830151858201604001528201610d74565b81811115610da15783604083870101525b50601f01601f1916929092016040019392505050565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b90815260200190565b6001600160a01b0381168114610e4d57600080fd5b5056fea26469706673582212204601c7b350884fb667559083c586cf4e1edf45660de16733cb6a53d97c6c078f64736f6c634300060c0033"

// DeployGenericLogic deploys a new Ethereum contract, binding an instance of GenericLogic to it.
func DeployGenericLogic(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *GenericLogic, error) {
	parsed, err := abi.JSON(strings.NewReader(GenericLogicABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(GenericLogicBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &GenericLogic{GenericLogicCaller: GenericLogicCaller{contract: contract}, GenericLogicTransactor: GenericLogicTransactor{contract: contract}, GenericLogicFilterer: GenericLogicFilterer{contract: contract}}, nil
}

// GenericLogic is an auto generated Go binding around an Ethereum contract.
type GenericLogic struct {
	GenericLogicCaller     // Read-only binding to the contract
	GenericLogicTransactor // Write-only binding to the contract
	GenericLogicFilterer   // Log filterer for contract events
}

// GenericLogicCaller is an auto generated read-only Go binding around an Ethereum contract.
type GenericLogicCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GenericLogicTransactor is an auto generated write-only Go binding around an Ethereum contract.
type GenericLogicTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GenericLogicFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GenericLogicFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GenericLogicSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GenericLogicSession struct {
	Contract     *GenericLogic     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// GenericLogicCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GenericLogicCallerSession struct {
	Contract *GenericLogicCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// GenericLogicTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GenericLogicTransactorSession struct {
	Contract     *GenericLogicTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// GenericLogicRaw is an auto generated low-level Go binding around an Ethereum contract.
type GenericLogicRaw struct {
	Contract *GenericLogic // Generic contract binding to access the raw methods on
}

// GenericLogicCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GenericLogicCallerRaw struct {
	Contract *GenericLogicCaller // Generic read-only contract binding to access the raw methods on
}

// GenericLogicTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GenericLogicTransactorRaw struct {
	Contract *GenericLogicTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGenericLogic creates a new instance of GenericLogic, bound to a specific deployed contract.
func NewGenericLogic(address common.Address, backend bind.ContractBackend) (*GenericLogic, error) {
	contract, err := bindGenericLogic(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &GenericLogic{GenericLogicCaller: GenericLogicCaller{contract: contract}, GenericLogicTransactor: GenericLogicTransactor{contract: contract}, GenericLogicFilterer: GenericLogicFilterer{contract: contract}}, nil
}

// NewGenericLogicCaller creates a new read-only instance of GenericLogic, bound to a specific deployed contract.
func NewGenericLogicCaller(address common.Address, caller bind.ContractCaller) (*GenericLogicCaller, error) {
	contract, err := bindGenericLogic(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GenericLogicCaller{contract: contract}, nil
}

// NewGenericLogicTransactor creates a new write-only instance of GenericLogic, bound to a specific deployed contract.
func NewGenericLogicTransactor(address common.Address, transactor bind.ContractTransactor) (*GenericLogicTransactor, error) {
	contract, err := bindGenericLogic(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GenericLogicTransactor{contract: contract}, nil
}

// NewGenericLogicFilterer creates a new log filterer instance of GenericLogic, bound to a specific deployed contract.
func NewGenericLogicFilterer(address common.Address, filterer bind.ContractFilterer) (*GenericLogicFilterer, error) {
	contract, err := bindGenericLogic(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GenericLogicFilterer{contract: contract}, nil
}

// bindGenericLogic binds a generic wrapper to an already deployed contract.
func bindGenericLogic(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(GenericLogicABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GenericLogic *GenericLogicRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GenericLogic.Contract.GenericLogicCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GenericLogic *GenericLogicRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GenericLogic.Contract.GenericLogicTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GenericLogic *GenericLogicRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GenericLogic.Contract.GenericLogicTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GenericLogic *GenericLogicCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GenericLogic.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GenericLogic *GenericLogicTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GenericLogic.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GenericLogic *GenericLogicTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GenericLogic.Contract.contract.Transact(opts, method, params...)
}

// HEALTHFACTORLIQUIDATIONTHRESHOLD is a free data retrieval call binding the contract method 0xc3525c28.
//
// Solidity: function HEALTH_FACTOR_LIQUIDATION_THRESHOLD() view returns(uint256)
func (_GenericLogic *GenericLogicCaller) HEALTHFACTORLIQUIDATIONTHRESHOLD(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _GenericLogic.contract.Call(opts, &out, "HEALTH_FACTOR_LIQUIDATION_THRESHOLD")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// HEALTHFACTORLIQUIDATIONTHRESHOLD is a free data retrieval call binding the contract method 0xc3525c28.
//
// Solidity: function HEALTH_FACTOR_LIQUIDATION_THRESHOLD() view returns(uint256)
func (_GenericLogic *GenericLogicSession) HEALTHFACTORLIQUIDATIONTHRESHOLD() (*big.Int, error) {
	return _GenericLogic.Contract.HEALTHFACTORLIQUIDATIONTHRESHOLD(&_GenericLogic.CallOpts)
}

// HEALTHFACTORLIQUIDATIONTHRESHOLD is a free data retrieval call binding the contract method 0xc3525c28.
//
// Solidity: function HEALTH_FACTOR_LIQUIDATION_THRESHOLD() view returns(uint256)
func (_GenericLogic *GenericLogicCallerSession) HEALTHFACTORLIQUIDATIONTHRESHOLD() (*big.Int, error) {
	return _GenericLogic.Contract.HEALTHFACTORLIQUIDATIONTHRESHOLD(&_GenericLogic.CallOpts)
}

// HelpersABI is the input ABI used to generate the binding from.
const HelpersABI = "[]"

// HelpersBin is the compiled bytecode used for deploying new contracts.
var HelpersBin = "0x60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b678256f33ad93629869b9ff6fa7a68daf3298f235da9270da4cff4694978a7c64736f6c634300060c0033"

// DeployHelpers deploys a new Ethereum contract, binding an instance of Helpers to it.
func DeployHelpers(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Helpers, error) {
	parsed, err := abi.JSON(strings.NewReader(HelpersABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(HelpersBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Helpers{HelpersCaller: HelpersCaller{contract: contract}, HelpersTransactor: HelpersTransactor{contract: contract}, HelpersFilterer: HelpersFilterer{contract: contract}}, nil
}

// Helpers is an auto generated Go binding around an Ethereum contract.
type Helpers struct {
	HelpersCaller     // Read-only binding to the contract
	HelpersTransactor // Write-only binding to the contract
	HelpersFilterer   // Log filterer for contract events
}

// HelpersCaller is an auto generated read-only Go binding around an Ethereum contract.
type HelpersCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// HelpersTransactor is an auto generated write-only Go binding around an Ethereum contract.
type HelpersTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// HelpersFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type HelpersFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// HelpersSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type HelpersSession struct {
	Contract     *Helpers          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// HelpersCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type HelpersCallerSession struct {
	Contract *HelpersCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// HelpersTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type HelpersTransactorSession struct {
	Contract     *HelpersTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// HelpersRaw is an auto generated low-level Go binding around an Ethereum contract.
type HelpersRaw struct {
	Contract *Helpers // Generic contract binding to access the raw methods on
}

// HelpersCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type HelpersCallerRaw struct {
	Contract *HelpersCaller // Generic read-only contract binding to access the raw methods on
}

// HelpersTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type HelpersTransactorRaw struct {
	Contract *HelpersTransactor // Generic write-only contract binding to access the raw methods on
}

// NewHelpers creates a new instance of Helpers, bound to a specific deployed contract.
func NewHelpers(address common.Address, backend bind.ContractBackend) (*Helpers, error) {
	contract, err := bindHelpers(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Helpers{HelpersCaller: HelpersCaller{contract: contract}, HelpersTransactor: HelpersTransactor{contract: contract}, HelpersFilterer: HelpersFilterer{contract: contract}}, nil
}

// NewHelpersCaller creates a new read-only instance of Helpers, bound to a specific deployed contract.
func NewHelpersCaller(address common.Address, caller bind.ContractCaller) (*HelpersCaller, error) {
	contract, err := bindHelpers(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &HelpersCaller{contract: contract}, nil
}

// NewHelpersTransactor creates a new write-only instance of Helpers, bound to a specific deployed contract.
func NewHelpersTransactor(address common.Address, transactor bind.ContractTransactor) (*HelpersTransactor, error) {
	contract, err := bindHelpers(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &HelpersTransactor{contract: contract}, nil
}

// NewHelpersFilterer creates a new log filterer instance of Helpers, bound to a specific deployed contract.
func NewHelpersFilterer(address common.Address, filterer bind.ContractFilterer) (*HelpersFilterer, error) {
	contract, err := bindHelpers(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &HelpersFilterer{contract: contract}, nil
}

// bindHelpers binds a generic wrapper to an already deployed contract.
func bindHelpers(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(HelpersABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Helpers *HelpersRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Helpers.Contract.HelpersCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Helpers *HelpersRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Helpers.Contract.HelpersTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Helpers *HelpersRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Helpers.Contract.HelpersTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Helpers *HelpersCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Helpers.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Helpers *HelpersTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Helpers.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Helpers *HelpersTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Helpers.Contract.contract.Transact(opts, method, params...)
}

// IATokenABI is the input ABI used to generate the binding from.
const IATokenABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"BalanceTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverOfUnderlying\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getScaledUserBalanceAndSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"mintToTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"scaledBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scaledTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferOnLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferUnderlyingTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// IAToken is an auto generated Go binding around an Ethereum contract.
type IAToken struct {
	IATokenCaller     // Read-only binding to the contract
	IATokenTransactor // Write-only binding to the contract
	IATokenFilterer   // Log filterer for contract events
}

// IATokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type IATokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IATokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IATokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IATokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IATokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IATokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IATokenSession struct {
	Contract     *IAToken          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IATokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IATokenCallerSession struct {
	Contract *IATokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// IATokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IATokenTransactorSession struct {
	Contract     *IATokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// IATokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type IATokenRaw struct {
	Contract *IAToken // Generic contract binding to access the raw methods on
}

// IATokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IATokenCallerRaw struct {
	Contract *IATokenCaller // Generic read-only contract binding to access the raw methods on
}

// IATokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IATokenTransactorRaw struct {
	Contract *IATokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIAToken creates a new instance of IAToken, bound to a specific deployed contract.
func NewIAToken(address common.Address, backend bind.ContractBackend) (*IAToken, error) {
	contract, err := bindIAToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IAToken{IATokenCaller: IATokenCaller{contract: contract}, IATokenTransactor: IATokenTransactor{contract: contract}, IATokenFilterer: IATokenFilterer{contract: contract}}, nil
}

// NewIATokenCaller creates a new read-only instance of IAToken, bound to a specific deployed contract.
func NewIATokenCaller(address common.Address, caller bind.ContractCaller) (*IATokenCaller, error) {
	contract, err := bindIAToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IATokenCaller{contract: contract}, nil
}

// NewIATokenTransactor creates a new write-only instance of IAToken, bound to a specific deployed contract.
func NewIATokenTransactor(address common.Address, transactor bind.ContractTransactor) (*IATokenTransactor, error) {
	contract, err := bindIAToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IATokenTransactor{contract: contract}, nil
}

// NewIATokenFilterer creates a new log filterer instance of IAToken, bound to a specific deployed contract.
func NewIATokenFilterer(address common.Address, filterer bind.ContractFilterer) (*IATokenFilterer, error) {
	contract, err := bindIAToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IATokenFilterer{contract: contract}, nil
}

// bindIAToken binds a generic wrapper to an already deployed contract.
func bindIAToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IATokenABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IAToken *IATokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IAToken.Contract.IATokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IAToken *IATokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IAToken.Contract.IATokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IAToken *IATokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IAToken.Contract.IATokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IAToken *IATokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IAToken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IAToken *IATokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IAToken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IAToken *IATokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IAToken.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IAToken *IATokenCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IAToken.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IAToken *IATokenSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IAToken.Contract.Allowance(&_IAToken.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IAToken *IATokenCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IAToken.Contract.Allowance(&_IAToken.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IAToken *IATokenCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IAToken.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IAToken *IATokenSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _IAToken.Contract.BalanceOf(&_IAToken.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IAToken *IATokenCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _IAToken.Contract.BalanceOf(&_IAToken.CallOpts, account)
}

// GetScaledUserBalanceAndSupply is a free data retrieval call binding the contract method 0x0afbcdc9.
//
// Solidity: function getScaledUserBalanceAndSupply(address user) view returns(uint256, uint256)
func (_IAToken *IATokenCaller) GetScaledUserBalanceAndSupply(opts *bind.CallOpts, user common.Address) (*big.Int, *big.Int, error) {
	var out []interface{}
	err := _IAToken.contract.Call(opts, &out, "getScaledUserBalanceAndSupply", user)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// GetScaledUserBalanceAndSupply is a free data retrieval call binding the contract method 0x0afbcdc9.
//
// Solidity: function getScaledUserBalanceAndSupply(address user) view returns(uint256, uint256)
func (_IAToken *IATokenSession) GetScaledUserBalanceAndSupply(user common.Address) (*big.Int, *big.Int, error) {
	return _IAToken.Contract.GetScaledUserBalanceAndSupply(&_IAToken.CallOpts, user)
}

// GetScaledUserBalanceAndSupply is a free data retrieval call binding the contract method 0x0afbcdc9.
//
// Solidity: function getScaledUserBalanceAndSupply(address user) view returns(uint256, uint256)
func (_IAToken *IATokenCallerSession) GetScaledUserBalanceAndSupply(user common.Address) (*big.Int, *big.Int, error) {
	return _IAToken.Contract.GetScaledUserBalanceAndSupply(&_IAToken.CallOpts, user)
}

// ScaledBalanceOf is a free data retrieval call binding the contract method 0x1da24f3e.
//
// Solidity: function scaledBalanceOf(address user) view returns(uint256)
func (_IAToken *IATokenCaller) ScaledBalanceOf(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IAToken.contract.Call(opts, &out, "scaledBalanceOf", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ScaledBalanceOf is a free data retrieval call binding the contract method 0x1da24f3e.
//
// Solidity: function scaledBalanceOf(address user) view returns(uint256)
func (_IAToken *IATokenSession) ScaledBalanceOf(user common.Address) (*big.Int, error) {
	return _IAToken.Contract.ScaledBalanceOf(&_IAToken.CallOpts, user)
}

// ScaledBalanceOf is a free data retrieval call binding the contract method 0x1da24f3e.
//
// Solidity: function scaledBalanceOf(address user) view returns(uint256)
func (_IAToken *IATokenCallerSession) ScaledBalanceOf(user common.Address) (*big.Int, error) {
	return _IAToken.Contract.ScaledBalanceOf(&_IAToken.CallOpts, user)
}

// ScaledTotalSupply is a free data retrieval call binding the contract method 0xb1bf962d.
//
// Solidity: function scaledTotalSupply() view returns(uint256)
func (_IAToken *IATokenCaller) ScaledTotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IAToken.contract.Call(opts, &out, "scaledTotalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ScaledTotalSupply is a free data retrieval call binding the contract method 0xb1bf962d.
//
// Solidity: function scaledTotalSupply() view returns(uint256)
func (_IAToken *IATokenSession) ScaledTotalSupply() (*big.Int, error) {
	return _IAToken.Contract.ScaledTotalSupply(&_IAToken.CallOpts)
}

// ScaledTotalSupply is a free data retrieval call binding the contract method 0xb1bf962d.
//
// Solidity: function scaledTotalSupply() view returns(uint256)
func (_IAToken *IATokenCallerSession) ScaledTotalSupply() (*big.Int, error) {
	return _IAToken.Contract.ScaledTotalSupply(&_IAToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IAToken *IATokenCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IAToken.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IAToken *IATokenSession) TotalSupply() (*big.Int, error) {
	return _IAToken.Contract.TotalSupply(&_IAToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IAToken *IATokenCallerSession) TotalSupply() (*big.Int, error) {
	return _IAToken.Contract.TotalSupply(&_IAToken.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IAToken *IATokenTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IAToken.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IAToken *IATokenSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IAToken.Contract.Approve(&_IAToken.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IAToken *IATokenTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IAToken.Contract.Approve(&_IAToken.TransactOpts, spender, amount)
}

// Burn is a paid mutator transaction binding the contract method 0xd7020d0a.
//
// Solidity: function burn(address user, address receiverOfUnderlying, uint256 amount, uint256 index) returns()
func (_IAToken *IATokenTransactor) Burn(opts *bind.TransactOpts, user common.Address, receiverOfUnderlying common.Address, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _IAToken.contract.Transact(opts, "burn", user, receiverOfUnderlying, amount, index)
}

// Burn is a paid mutator transaction binding the contract method 0xd7020d0a.
//
// Solidity: function burn(address user, address receiverOfUnderlying, uint256 amount, uint256 index) returns()
func (_IAToken *IATokenSession) Burn(user common.Address, receiverOfUnderlying common.Address, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _IAToken.Contract.Burn(&_IAToken.TransactOpts, user, receiverOfUnderlying, amount, index)
}

// Burn is a paid mutator transaction binding the contract method 0xd7020d0a.
//
// Solidity: function burn(address user, address receiverOfUnderlying, uint256 amount, uint256 index) returns()
func (_IAToken *IATokenTransactorSession) Burn(user common.Address, receiverOfUnderlying common.Address, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _IAToken.Contract.Burn(&_IAToken.TransactOpts, user, receiverOfUnderlying, amount, index)
}

// Mint is a paid mutator transaction binding the contract method 0x156e29f6.
//
// Solidity: function mint(address user, uint256 amount, uint256 index) returns(bool)
func (_IAToken *IATokenTransactor) Mint(opts *bind.TransactOpts, user common.Address, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _IAToken.contract.Transact(opts, "mint", user, amount, index)
}

// Mint is a paid mutator transaction binding the contract method 0x156e29f6.
//
// Solidity: function mint(address user, uint256 amount, uint256 index) returns(bool)
func (_IAToken *IATokenSession) Mint(user common.Address, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _IAToken.Contract.Mint(&_IAToken.TransactOpts, user, amount, index)
}

// Mint is a paid mutator transaction binding the contract method 0x156e29f6.
//
// Solidity: function mint(address user, uint256 amount, uint256 index) returns(bool)
func (_IAToken *IATokenTransactorSession) Mint(user common.Address, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _IAToken.Contract.Mint(&_IAToken.TransactOpts, user, amount, index)
}

// MintToTreasury is a paid mutator transaction binding the contract method 0x7df5bd3b.
//
// Solidity: function mintToTreasury(uint256 amount, uint256 index) returns()
func (_IAToken *IATokenTransactor) MintToTreasury(opts *bind.TransactOpts, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _IAToken.contract.Transact(opts, "mintToTreasury", amount, index)
}

// MintToTreasury is a paid mutator transaction binding the contract method 0x7df5bd3b.
//
// Solidity: function mintToTreasury(uint256 amount, uint256 index) returns()
func (_IAToken *IATokenSession) MintToTreasury(amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _IAToken.Contract.MintToTreasury(&_IAToken.TransactOpts, amount, index)
}

// MintToTreasury is a paid mutator transaction binding the contract method 0x7df5bd3b.
//
// Solidity: function mintToTreasury(uint256 amount, uint256 index) returns()
func (_IAToken *IATokenTransactorSession) MintToTreasury(amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _IAToken.Contract.MintToTreasury(&_IAToken.TransactOpts, amount, index)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IAToken *IATokenTransactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IAToken.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IAToken *IATokenSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IAToken.Contract.Transfer(&_IAToken.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IAToken *IATokenTransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IAToken.Contract.Transfer(&_IAToken.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IAToken *IATokenTransactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IAToken.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IAToken *IATokenSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IAToken.Contract.TransferFrom(&_IAToken.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IAToken *IATokenTransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IAToken.Contract.TransferFrom(&_IAToken.TransactOpts, sender, recipient, amount)
}

// TransferOnLiquidation is a paid mutator transaction binding the contract method 0xf866c319.
//
// Solidity: function transferOnLiquidation(address from, address to, uint256 value) returns()
func (_IAToken *IATokenTransactor) TransferOnLiquidation(opts *bind.TransactOpts, from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _IAToken.contract.Transact(opts, "transferOnLiquidation", from, to, value)
}

// TransferOnLiquidation is a paid mutator transaction binding the contract method 0xf866c319.
//
// Solidity: function transferOnLiquidation(address from, address to, uint256 value) returns()
func (_IAToken *IATokenSession) TransferOnLiquidation(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _IAToken.Contract.TransferOnLiquidation(&_IAToken.TransactOpts, from, to, value)
}

// TransferOnLiquidation is a paid mutator transaction binding the contract method 0xf866c319.
//
// Solidity: function transferOnLiquidation(address from, address to, uint256 value) returns()
func (_IAToken *IATokenTransactorSession) TransferOnLiquidation(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _IAToken.Contract.TransferOnLiquidation(&_IAToken.TransactOpts, from, to, value)
}

// TransferUnderlyingTo is a paid mutator transaction binding the contract method 0x4efecaa5.
//
// Solidity: function transferUnderlyingTo(address user, uint256 amount) returns(uint256)
func (_IAToken *IATokenTransactor) TransferUnderlyingTo(opts *bind.TransactOpts, user common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IAToken.contract.Transact(opts, "transferUnderlyingTo", user, amount)
}

// TransferUnderlyingTo is a paid mutator transaction binding the contract method 0x4efecaa5.
//
// Solidity: function transferUnderlyingTo(address user, uint256 amount) returns(uint256)
func (_IAToken *IATokenSession) TransferUnderlyingTo(user common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IAToken.Contract.TransferUnderlyingTo(&_IAToken.TransactOpts, user, amount)
}

// TransferUnderlyingTo is a paid mutator transaction binding the contract method 0x4efecaa5.
//
// Solidity: function transferUnderlyingTo(address user, uint256 amount) returns(uint256)
func (_IAToken *IATokenTransactorSession) TransferUnderlyingTo(user common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IAToken.Contract.TransferUnderlyingTo(&_IAToken.TransactOpts, user, amount)
}

// IATokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the IAToken contract.
type IATokenApprovalIterator struct {
	Event *IATokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IATokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IATokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IATokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IATokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IATokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IATokenApproval represents a Approval event raised by the IAToken contract.
type IATokenApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IAToken *IATokenFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*IATokenApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IAToken.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &IATokenApprovalIterator{contract: _IAToken.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IAToken *IATokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *IATokenApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IAToken.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IATokenApproval)
				if err := _IAToken.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IAToken *IATokenFilterer) ParseApproval(log types.Log) (*IATokenApproval, error) {
	event := new(IATokenApproval)
	if err := _IAToken.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IATokenBalanceTransferIterator is returned from FilterBalanceTransfer and is used to iterate over the raw logs and unpacked data for BalanceTransfer events raised by the IAToken contract.
type IATokenBalanceTransferIterator struct {
	Event *IATokenBalanceTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IATokenBalanceTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IATokenBalanceTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IATokenBalanceTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IATokenBalanceTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IATokenBalanceTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IATokenBalanceTransfer represents a BalanceTransfer event raised by the IAToken contract.
type IATokenBalanceTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Index *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterBalanceTransfer is a free log retrieval operation binding the contract event 0x4beccb90f994c31aced7a23b5611020728a23d8ec5cddd1a3e9d97b96fda8666.
//
// Solidity: event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index)
func (_IAToken *IATokenFilterer) FilterBalanceTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*IATokenBalanceTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IAToken.contract.FilterLogs(opts, "BalanceTransfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &IATokenBalanceTransferIterator{contract: _IAToken.contract, event: "BalanceTransfer", logs: logs, sub: sub}, nil
}

// WatchBalanceTransfer is a free log subscription operation binding the contract event 0x4beccb90f994c31aced7a23b5611020728a23d8ec5cddd1a3e9d97b96fda8666.
//
// Solidity: event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index)
func (_IAToken *IATokenFilterer) WatchBalanceTransfer(opts *bind.WatchOpts, sink chan<- *IATokenBalanceTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IAToken.contract.WatchLogs(opts, "BalanceTransfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IATokenBalanceTransfer)
				if err := _IAToken.contract.UnpackLog(event, "BalanceTransfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBalanceTransfer is a log parse operation binding the contract event 0x4beccb90f994c31aced7a23b5611020728a23d8ec5cddd1a3e9d97b96fda8666.
//
// Solidity: event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index)
func (_IAToken *IATokenFilterer) ParseBalanceTransfer(log types.Log) (*IATokenBalanceTransfer, error) {
	event := new(IATokenBalanceTransfer)
	if err := _IAToken.contract.UnpackLog(event, "BalanceTransfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IATokenBurnIterator is returned from FilterBurn and is used to iterate over the raw logs and unpacked data for Burn events raised by the IAToken contract.
type IATokenBurnIterator struct {
	Event *IATokenBurn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IATokenBurnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IATokenBurn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IATokenBurn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IATokenBurnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IATokenBurnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IATokenBurn represents a Burn event raised by the IAToken contract.
type IATokenBurn struct {
	From   common.Address
	Target common.Address
	Value  *big.Int
	Index  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBurn is a free log retrieval operation binding the contract event 0x5d624aa9c148153ab3446c1b154f660ee7701e549fe9b62dab7171b1c80e6fa2.
//
// Solidity: event Burn(address indexed from, address indexed target, uint256 value, uint256 index)
func (_IAToken *IATokenFilterer) FilterBurn(opts *bind.FilterOpts, from []common.Address, target []common.Address) (*IATokenBurnIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}

	logs, sub, err := _IAToken.contract.FilterLogs(opts, "Burn", fromRule, targetRule)
	if err != nil {
		return nil, err
	}
	return &IATokenBurnIterator{contract: _IAToken.contract, event: "Burn", logs: logs, sub: sub}, nil
}

// WatchBurn is a free log subscription operation binding the contract event 0x5d624aa9c148153ab3446c1b154f660ee7701e549fe9b62dab7171b1c80e6fa2.
//
// Solidity: event Burn(address indexed from, address indexed target, uint256 value, uint256 index)
func (_IAToken *IATokenFilterer) WatchBurn(opts *bind.WatchOpts, sink chan<- *IATokenBurn, from []common.Address, target []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}

	logs, sub, err := _IAToken.contract.WatchLogs(opts, "Burn", fromRule, targetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IATokenBurn)
				if err := _IAToken.contract.UnpackLog(event, "Burn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurn is a log parse operation binding the contract event 0x5d624aa9c148153ab3446c1b154f660ee7701e549fe9b62dab7171b1c80e6fa2.
//
// Solidity: event Burn(address indexed from, address indexed target, uint256 value, uint256 index)
func (_IAToken *IATokenFilterer) ParseBurn(log types.Log) (*IATokenBurn, error) {
	event := new(IATokenBurn)
	if err := _IAToken.contract.UnpackLog(event, "Burn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IATokenMintIterator is returned from FilterMint and is used to iterate over the raw logs and unpacked data for Mint events raised by the IAToken contract.
type IATokenMintIterator struct {
	Event *IATokenMint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IATokenMintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IATokenMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IATokenMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IATokenMintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IATokenMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IATokenMint represents a Mint event raised by the IAToken contract.
type IATokenMint struct {
	From  common.Address
	Value *big.Int
	Index *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterMint is a free log retrieval operation binding the contract event 0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f.
//
// Solidity: event Mint(address indexed from, uint256 value, uint256 index)
func (_IAToken *IATokenFilterer) FilterMint(opts *bind.FilterOpts, from []common.Address) (*IATokenMintIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _IAToken.contract.FilterLogs(opts, "Mint", fromRule)
	if err != nil {
		return nil, err
	}
	return &IATokenMintIterator{contract: _IAToken.contract, event: "Mint", logs: logs, sub: sub}, nil
}

// WatchMint is a free log subscription operation binding the contract event 0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f.
//
// Solidity: event Mint(address indexed from, uint256 value, uint256 index)
func (_IAToken *IATokenFilterer) WatchMint(opts *bind.WatchOpts, sink chan<- *IATokenMint, from []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _IAToken.contract.WatchLogs(opts, "Mint", fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IATokenMint)
				if err := _IAToken.contract.UnpackLog(event, "Mint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMint is a log parse operation binding the contract event 0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f.
//
// Solidity: event Mint(address indexed from, uint256 value, uint256 index)
func (_IAToken *IATokenFilterer) ParseMint(log types.Log) (*IATokenMint, error) {
	event := new(IATokenMint)
	if err := _IAToken.contract.UnpackLog(event, "Mint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IATokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the IAToken contract.
type IATokenTransferIterator struct {
	Event *IATokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IATokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IATokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IATokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IATokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IATokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IATokenTransfer represents a Transfer event raised by the IAToken contract.
type IATokenTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IAToken *IATokenFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*IATokenTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IAToken.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &IATokenTransferIterator{contract: _IAToken.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IAToken *IATokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *IATokenTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IAToken.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IATokenTransfer)
				if err := _IAToken.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IAToken *IATokenFilterer) ParseTransfer(log types.Log) (*IATokenTransfer, error) {
	event := new(IATokenTransfer)
	if err := _IAToken.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IAaveIncentivesControllerABI is the input ABI used to generate the binding from.
const IAaveIncentivesControllerABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"userBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"handleAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// IAaveIncentivesController is an auto generated Go binding around an Ethereum contract.
type IAaveIncentivesController struct {
	IAaveIncentivesControllerCaller     // Read-only binding to the contract
	IAaveIncentivesControllerTransactor // Write-only binding to the contract
	IAaveIncentivesControllerFilterer   // Log filterer for contract events
}

// IAaveIncentivesControllerCaller is an auto generated read-only Go binding around an Ethereum contract.
type IAaveIncentivesControllerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IAaveIncentivesControllerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IAaveIncentivesControllerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IAaveIncentivesControllerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IAaveIncentivesControllerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IAaveIncentivesControllerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IAaveIncentivesControllerSession struct {
	Contract     *IAaveIncentivesController // Generic contract binding to set the session for
	CallOpts     bind.CallOpts              // Call options to use throughout this session
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// IAaveIncentivesControllerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IAaveIncentivesControllerCallerSession struct {
	Contract *IAaveIncentivesControllerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                    // Call options to use throughout this session
}

// IAaveIncentivesControllerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IAaveIncentivesControllerTransactorSession struct {
	Contract     *IAaveIncentivesControllerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                    // Transaction auth options to use throughout this session
}

// IAaveIncentivesControllerRaw is an auto generated low-level Go binding around an Ethereum contract.
type IAaveIncentivesControllerRaw struct {
	Contract *IAaveIncentivesController // Generic contract binding to access the raw methods on
}

// IAaveIncentivesControllerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IAaveIncentivesControllerCallerRaw struct {
	Contract *IAaveIncentivesControllerCaller // Generic read-only contract binding to access the raw methods on
}

// IAaveIncentivesControllerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IAaveIncentivesControllerTransactorRaw struct {
	Contract *IAaveIncentivesControllerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIAaveIncentivesController creates a new instance of IAaveIncentivesController, bound to a specific deployed contract.
func NewIAaveIncentivesController(address common.Address, backend bind.ContractBackend) (*IAaveIncentivesController, error) {
	contract, err := bindIAaveIncentivesController(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IAaveIncentivesController{IAaveIncentivesControllerCaller: IAaveIncentivesControllerCaller{contract: contract}, IAaveIncentivesControllerTransactor: IAaveIncentivesControllerTransactor{contract: contract}, IAaveIncentivesControllerFilterer: IAaveIncentivesControllerFilterer{contract: contract}}, nil
}

// NewIAaveIncentivesControllerCaller creates a new read-only instance of IAaveIncentivesController, bound to a specific deployed contract.
func NewIAaveIncentivesControllerCaller(address common.Address, caller bind.ContractCaller) (*IAaveIncentivesControllerCaller, error) {
	contract, err := bindIAaveIncentivesController(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IAaveIncentivesControllerCaller{contract: contract}, nil
}

// NewIAaveIncentivesControllerTransactor creates a new write-only instance of IAaveIncentivesController, bound to a specific deployed contract.
func NewIAaveIncentivesControllerTransactor(address common.Address, transactor bind.ContractTransactor) (*IAaveIncentivesControllerTransactor, error) {
	contract, err := bindIAaveIncentivesController(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IAaveIncentivesControllerTransactor{contract: contract}, nil
}

// NewIAaveIncentivesControllerFilterer creates a new log filterer instance of IAaveIncentivesController, bound to a specific deployed contract.
func NewIAaveIncentivesControllerFilterer(address common.Address, filterer bind.ContractFilterer) (*IAaveIncentivesControllerFilterer, error) {
	contract, err := bindIAaveIncentivesController(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IAaveIncentivesControllerFilterer{contract: contract}, nil
}

// bindIAaveIncentivesController binds a generic wrapper to an already deployed contract.
func bindIAaveIncentivesController(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IAaveIncentivesControllerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IAaveIncentivesController *IAaveIncentivesControllerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IAaveIncentivesController.Contract.IAaveIncentivesControllerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IAaveIncentivesController *IAaveIncentivesControllerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IAaveIncentivesController.Contract.IAaveIncentivesControllerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IAaveIncentivesController *IAaveIncentivesControllerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IAaveIncentivesController.Contract.IAaveIncentivesControllerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IAaveIncentivesController *IAaveIncentivesControllerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IAaveIncentivesController.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IAaveIncentivesController *IAaveIncentivesControllerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IAaveIncentivesController.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IAaveIncentivesController *IAaveIncentivesControllerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IAaveIncentivesController.Contract.contract.Transact(opts, method, params...)
}

// HandleAction is a paid mutator transaction binding the contract method 0x31873e2e.
//
// Solidity: function handleAction(address user, uint256 userBalance, uint256 totalSupply) returns()
func (_IAaveIncentivesController *IAaveIncentivesControllerTransactor) HandleAction(opts *bind.TransactOpts, user common.Address, userBalance *big.Int, totalSupply *big.Int) (*types.Transaction, error) {
	return _IAaveIncentivesController.contract.Transact(opts, "handleAction", user, userBalance, totalSupply)
}

// HandleAction is a paid mutator transaction binding the contract method 0x31873e2e.
//
// Solidity: function handleAction(address user, uint256 userBalance, uint256 totalSupply) returns()
func (_IAaveIncentivesController *IAaveIncentivesControllerSession) HandleAction(user common.Address, userBalance *big.Int, totalSupply *big.Int) (*types.Transaction, error) {
	return _IAaveIncentivesController.Contract.HandleAction(&_IAaveIncentivesController.TransactOpts, user, userBalance, totalSupply)
}

// HandleAction is a paid mutator transaction binding the contract method 0x31873e2e.
//
// Solidity: function handleAction(address user, uint256 userBalance, uint256 totalSupply) returns()
func (_IAaveIncentivesController *IAaveIncentivesControllerTransactorSession) HandleAction(user common.Address, userBalance *big.Int, totalSupply *big.Int) (*types.Transaction, error) {
	return _IAaveIncentivesController.Contract.HandleAction(&_IAaveIncentivesController.TransactOpts, user, userBalance, totalSupply)
}

// IChainlinkAggregatorABI is the input ABI used to generate the binding from.
const IChainlinkAggregatorABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"current\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AnswerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"startedBy\",\"type\":\"address\"}],\"name\":\"NewRound\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// IChainlinkAggregator is an auto generated Go binding around an Ethereum contract.
type IChainlinkAggregator struct {
	IChainlinkAggregatorCaller     // Read-only binding to the contract
	IChainlinkAggregatorTransactor // Write-only binding to the contract
	IChainlinkAggregatorFilterer   // Log filterer for contract events
}

// IChainlinkAggregatorCaller is an auto generated read-only Go binding around an Ethereum contract.
type IChainlinkAggregatorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IChainlinkAggregatorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IChainlinkAggregatorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IChainlinkAggregatorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IChainlinkAggregatorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IChainlinkAggregatorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IChainlinkAggregatorSession struct {
	Contract     *IChainlinkAggregator // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// IChainlinkAggregatorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IChainlinkAggregatorCallerSession struct {
	Contract *IChainlinkAggregatorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// IChainlinkAggregatorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IChainlinkAggregatorTransactorSession struct {
	Contract     *IChainlinkAggregatorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// IChainlinkAggregatorRaw is an auto generated low-level Go binding around an Ethereum contract.
type IChainlinkAggregatorRaw struct {
	Contract *IChainlinkAggregator // Generic contract binding to access the raw methods on
}

// IChainlinkAggregatorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IChainlinkAggregatorCallerRaw struct {
	Contract *IChainlinkAggregatorCaller // Generic read-only contract binding to access the raw methods on
}

// IChainlinkAggregatorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IChainlinkAggregatorTransactorRaw struct {
	Contract *IChainlinkAggregatorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIChainlinkAggregator creates a new instance of IChainlinkAggregator, bound to a specific deployed contract.
func NewIChainlinkAggregator(address common.Address, backend bind.ContractBackend) (*IChainlinkAggregator, error) {
	contract, err := bindIChainlinkAggregator(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IChainlinkAggregator{IChainlinkAggregatorCaller: IChainlinkAggregatorCaller{contract: contract}, IChainlinkAggregatorTransactor: IChainlinkAggregatorTransactor{contract: contract}, IChainlinkAggregatorFilterer: IChainlinkAggregatorFilterer{contract: contract}}, nil
}

// NewIChainlinkAggregatorCaller creates a new read-only instance of IChainlinkAggregator, bound to a specific deployed contract.
func NewIChainlinkAggregatorCaller(address common.Address, caller bind.ContractCaller) (*IChainlinkAggregatorCaller, error) {
	contract, err := bindIChainlinkAggregator(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IChainlinkAggregatorCaller{contract: contract}, nil
}

// NewIChainlinkAggregatorTransactor creates a new write-only instance of IChainlinkAggregator, bound to a specific deployed contract.
func NewIChainlinkAggregatorTransactor(address common.Address, transactor bind.ContractTransactor) (*IChainlinkAggregatorTransactor, error) {
	contract, err := bindIChainlinkAggregator(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IChainlinkAggregatorTransactor{contract: contract}, nil
}

// NewIChainlinkAggregatorFilterer creates a new log filterer instance of IChainlinkAggregator, bound to a specific deployed contract.
func NewIChainlinkAggregatorFilterer(address common.Address, filterer bind.ContractFilterer) (*IChainlinkAggregatorFilterer, error) {
	contract, err := bindIChainlinkAggregator(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IChainlinkAggregatorFilterer{contract: contract}, nil
}

// bindIChainlinkAggregator binds a generic wrapper to an already deployed contract.
func bindIChainlinkAggregator(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IChainlinkAggregatorABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IChainlinkAggregator *IChainlinkAggregatorRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IChainlinkAggregator.Contract.IChainlinkAggregatorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IChainlinkAggregator *IChainlinkAggregatorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IChainlinkAggregator.Contract.IChainlinkAggregatorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IChainlinkAggregator *IChainlinkAggregatorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IChainlinkAggregator.Contract.IChainlinkAggregatorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IChainlinkAggregator *IChainlinkAggregatorCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IChainlinkAggregator.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IChainlinkAggregator *IChainlinkAggregatorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IChainlinkAggregator.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IChainlinkAggregator *IChainlinkAggregatorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IChainlinkAggregator.Contract.contract.Transact(opts, method, params...)
}

// GetAnswer is a free data retrieval call binding the contract method 0xb5ab58dc.
//
// Solidity: function getAnswer(uint256 roundId) view returns(int256)
func (_IChainlinkAggregator *IChainlinkAggregatorCaller) GetAnswer(opts *bind.CallOpts, roundId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IChainlinkAggregator.contract.Call(opts, &out, "getAnswer", roundId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAnswer is a free data retrieval call binding the contract method 0xb5ab58dc.
//
// Solidity: function getAnswer(uint256 roundId) view returns(int256)
func (_IChainlinkAggregator *IChainlinkAggregatorSession) GetAnswer(roundId *big.Int) (*big.Int, error) {
	return _IChainlinkAggregator.Contract.GetAnswer(&_IChainlinkAggregator.CallOpts, roundId)
}

// GetAnswer is a free data retrieval call binding the contract method 0xb5ab58dc.
//
// Solidity: function getAnswer(uint256 roundId) view returns(int256)
func (_IChainlinkAggregator *IChainlinkAggregatorCallerSession) GetAnswer(roundId *big.Int) (*big.Int, error) {
	return _IChainlinkAggregator.Contract.GetAnswer(&_IChainlinkAggregator.CallOpts, roundId)
}

// GetTimestamp is a free data retrieval call binding the contract method 0xb633620c.
//
// Solidity: function getTimestamp(uint256 roundId) view returns(uint256)
func (_IChainlinkAggregator *IChainlinkAggregatorCaller) GetTimestamp(opts *bind.CallOpts, roundId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IChainlinkAggregator.contract.Call(opts, &out, "getTimestamp", roundId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTimestamp is a free data retrieval call binding the contract method 0xb633620c.
//
// Solidity: function getTimestamp(uint256 roundId) view returns(uint256)
func (_IChainlinkAggregator *IChainlinkAggregatorSession) GetTimestamp(roundId *big.Int) (*big.Int, error) {
	return _IChainlinkAggregator.Contract.GetTimestamp(&_IChainlinkAggregator.CallOpts, roundId)
}

// GetTimestamp is a free data retrieval call binding the contract method 0xb633620c.
//
// Solidity: function getTimestamp(uint256 roundId) view returns(uint256)
func (_IChainlinkAggregator *IChainlinkAggregatorCallerSession) GetTimestamp(roundId *big.Int) (*big.Int, error) {
	return _IChainlinkAggregator.Contract.GetTimestamp(&_IChainlinkAggregator.CallOpts, roundId)
}

// LatestAnswer is a free data retrieval call binding the contract method 0x50d25bcd.
//
// Solidity: function latestAnswer() view returns(int256)
func (_IChainlinkAggregator *IChainlinkAggregatorCaller) LatestAnswer(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IChainlinkAggregator.contract.Call(opts, &out, "latestAnswer")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LatestAnswer is a free data retrieval call binding the contract method 0x50d25bcd.
//
// Solidity: function latestAnswer() view returns(int256)
func (_IChainlinkAggregator *IChainlinkAggregatorSession) LatestAnswer() (*big.Int, error) {
	return _IChainlinkAggregator.Contract.LatestAnswer(&_IChainlinkAggregator.CallOpts)
}

// LatestAnswer is a free data retrieval call binding the contract method 0x50d25bcd.
//
// Solidity: function latestAnswer() view returns(int256)
func (_IChainlinkAggregator *IChainlinkAggregatorCallerSession) LatestAnswer() (*big.Int, error) {
	return _IChainlinkAggregator.Contract.LatestAnswer(&_IChainlinkAggregator.CallOpts)
}

// LatestRound is a free data retrieval call binding the contract method 0x668a0f02.
//
// Solidity: function latestRound() view returns(uint256)
func (_IChainlinkAggregator *IChainlinkAggregatorCaller) LatestRound(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IChainlinkAggregator.contract.Call(opts, &out, "latestRound")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LatestRound is a free data retrieval call binding the contract method 0x668a0f02.
//
// Solidity: function latestRound() view returns(uint256)
func (_IChainlinkAggregator *IChainlinkAggregatorSession) LatestRound() (*big.Int, error) {
	return _IChainlinkAggregator.Contract.LatestRound(&_IChainlinkAggregator.CallOpts)
}

// LatestRound is a free data retrieval call binding the contract method 0x668a0f02.
//
// Solidity: function latestRound() view returns(uint256)
func (_IChainlinkAggregator *IChainlinkAggregatorCallerSession) LatestRound() (*big.Int, error) {
	return _IChainlinkAggregator.Contract.LatestRound(&_IChainlinkAggregator.CallOpts)
}

// LatestTimestamp is a free data retrieval call binding the contract method 0x8205bf6a.
//
// Solidity: function latestTimestamp() view returns(uint256)
func (_IChainlinkAggregator *IChainlinkAggregatorCaller) LatestTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IChainlinkAggregator.contract.Call(opts, &out, "latestTimestamp")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LatestTimestamp is a free data retrieval call binding the contract method 0x8205bf6a.
//
// Solidity: function latestTimestamp() view returns(uint256)
func (_IChainlinkAggregator *IChainlinkAggregatorSession) LatestTimestamp() (*big.Int, error) {
	return _IChainlinkAggregator.Contract.LatestTimestamp(&_IChainlinkAggregator.CallOpts)
}

// LatestTimestamp is a free data retrieval call binding the contract method 0x8205bf6a.
//
// Solidity: function latestTimestamp() view returns(uint256)
func (_IChainlinkAggregator *IChainlinkAggregatorCallerSession) LatestTimestamp() (*big.Int, error) {
	return _IChainlinkAggregator.Contract.LatestTimestamp(&_IChainlinkAggregator.CallOpts)
}

// IChainlinkAggregatorAnswerUpdatedIterator is returned from FilterAnswerUpdated and is used to iterate over the raw logs and unpacked data for AnswerUpdated events raised by the IChainlinkAggregator contract.
type IChainlinkAggregatorAnswerUpdatedIterator struct {
	Event *IChainlinkAggregatorAnswerUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IChainlinkAggregatorAnswerUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IChainlinkAggregatorAnswerUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IChainlinkAggregatorAnswerUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IChainlinkAggregatorAnswerUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IChainlinkAggregatorAnswerUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IChainlinkAggregatorAnswerUpdated represents a AnswerUpdated event raised by the IChainlinkAggregator contract.
type IChainlinkAggregatorAnswerUpdated struct {
	Current   *big.Int
	RoundId   *big.Int
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAnswerUpdated is a free log retrieval operation binding the contract event 0x0559884fd3a460db3073b7fc896cc77986f16e378210ded43186175bf646fc5f.
//
// Solidity: event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp)
func (_IChainlinkAggregator *IChainlinkAggregatorFilterer) FilterAnswerUpdated(opts *bind.FilterOpts, current []*big.Int, roundId []*big.Int) (*IChainlinkAggregatorAnswerUpdatedIterator, error) {

	var currentRule []interface{}
	for _, currentItem := range current {
		currentRule = append(currentRule, currentItem)
	}
	var roundIdRule []interface{}
	for _, roundIdItem := range roundId {
		roundIdRule = append(roundIdRule, roundIdItem)
	}

	logs, sub, err := _IChainlinkAggregator.contract.FilterLogs(opts, "AnswerUpdated", currentRule, roundIdRule)
	if err != nil {
		return nil, err
	}
	return &IChainlinkAggregatorAnswerUpdatedIterator{contract: _IChainlinkAggregator.contract, event: "AnswerUpdated", logs: logs, sub: sub}, nil
}

// WatchAnswerUpdated is a free log subscription operation binding the contract event 0x0559884fd3a460db3073b7fc896cc77986f16e378210ded43186175bf646fc5f.
//
// Solidity: event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp)
func (_IChainlinkAggregator *IChainlinkAggregatorFilterer) WatchAnswerUpdated(opts *bind.WatchOpts, sink chan<- *IChainlinkAggregatorAnswerUpdated, current []*big.Int, roundId []*big.Int) (event.Subscription, error) {

	var currentRule []interface{}
	for _, currentItem := range current {
		currentRule = append(currentRule, currentItem)
	}
	var roundIdRule []interface{}
	for _, roundIdItem := range roundId {
		roundIdRule = append(roundIdRule, roundIdItem)
	}

	logs, sub, err := _IChainlinkAggregator.contract.WatchLogs(opts, "AnswerUpdated", currentRule, roundIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IChainlinkAggregatorAnswerUpdated)
				if err := _IChainlinkAggregator.contract.UnpackLog(event, "AnswerUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAnswerUpdated is a log parse operation binding the contract event 0x0559884fd3a460db3073b7fc896cc77986f16e378210ded43186175bf646fc5f.
//
// Solidity: event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp)
func (_IChainlinkAggregator *IChainlinkAggregatorFilterer) ParseAnswerUpdated(log types.Log) (*IChainlinkAggregatorAnswerUpdated, error) {
	event := new(IChainlinkAggregatorAnswerUpdated)
	if err := _IChainlinkAggregator.contract.UnpackLog(event, "AnswerUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IChainlinkAggregatorNewRoundIterator is returned from FilterNewRound and is used to iterate over the raw logs and unpacked data for NewRound events raised by the IChainlinkAggregator contract.
type IChainlinkAggregatorNewRoundIterator struct {
	Event *IChainlinkAggregatorNewRound // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IChainlinkAggregatorNewRoundIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IChainlinkAggregatorNewRound)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IChainlinkAggregatorNewRound)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IChainlinkAggregatorNewRoundIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IChainlinkAggregatorNewRoundIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IChainlinkAggregatorNewRound represents a NewRound event raised by the IChainlinkAggregator contract.
type IChainlinkAggregatorNewRound struct {
	RoundId   *big.Int
	StartedBy common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNewRound is a free log retrieval operation binding the contract event 0xc3c45d1924f55369653f407ee9f095309d1e687b2c0011b1f709042d4f457e17.
//
// Solidity: event NewRound(uint256 indexed roundId, address indexed startedBy)
func (_IChainlinkAggregator *IChainlinkAggregatorFilterer) FilterNewRound(opts *bind.FilterOpts, roundId []*big.Int, startedBy []common.Address) (*IChainlinkAggregatorNewRoundIterator, error) {

	var roundIdRule []interface{}
	for _, roundIdItem := range roundId {
		roundIdRule = append(roundIdRule, roundIdItem)
	}
	var startedByRule []interface{}
	for _, startedByItem := range startedBy {
		startedByRule = append(startedByRule, startedByItem)
	}

	logs, sub, err := _IChainlinkAggregator.contract.FilterLogs(opts, "NewRound", roundIdRule, startedByRule)
	if err != nil {
		return nil, err
	}
	return &IChainlinkAggregatorNewRoundIterator{contract: _IChainlinkAggregator.contract, event: "NewRound", logs: logs, sub: sub}, nil
}

// WatchNewRound is a free log subscription operation binding the contract event 0xc3c45d1924f55369653f407ee9f095309d1e687b2c0011b1f709042d4f457e17.
//
// Solidity: event NewRound(uint256 indexed roundId, address indexed startedBy)
func (_IChainlinkAggregator *IChainlinkAggregatorFilterer) WatchNewRound(opts *bind.WatchOpts, sink chan<- *IChainlinkAggregatorNewRound, roundId []*big.Int, startedBy []common.Address) (event.Subscription, error) {

	var roundIdRule []interface{}
	for _, roundIdItem := range roundId {
		roundIdRule = append(roundIdRule, roundIdItem)
	}
	var startedByRule []interface{}
	for _, startedByItem := range startedBy {
		startedByRule = append(startedByRule, startedByItem)
	}

	logs, sub, err := _IChainlinkAggregator.contract.WatchLogs(opts, "NewRound", roundIdRule, startedByRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IChainlinkAggregatorNewRound)
				if err := _IChainlinkAggregator.contract.UnpackLog(event, "NewRound", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewRound is a log parse operation binding the contract event 0xc3c45d1924f55369653f407ee9f095309d1e687b2c0011b1f709042d4f457e17.
//
// Solidity: event NewRound(uint256 indexed roundId, address indexed startedBy)
func (_IChainlinkAggregator *IChainlinkAggregatorFilterer) ParseNewRound(log types.Log) (*IChainlinkAggregatorNewRound, error) {
	event := new(IChainlinkAggregatorNewRound)
	if err := _IChainlinkAggregator.contract.UnpackLog(event, "NewRound", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ICreditDelegationTokenABI is the input ABI used to generate the binding from.
const ICreditDelegationTokenABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromUser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BorrowAllowanceDelegated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveDelegation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromUser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toUser\",\"type\":\"address\"}],\"name\":\"borrowAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// ICreditDelegationToken is an auto generated Go binding around an Ethereum contract.
type ICreditDelegationToken struct {
	ICreditDelegationTokenCaller     // Read-only binding to the contract
	ICreditDelegationTokenTransactor // Write-only binding to the contract
	ICreditDelegationTokenFilterer   // Log filterer for contract events
}

// ICreditDelegationTokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type ICreditDelegationTokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ICreditDelegationTokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ICreditDelegationTokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ICreditDelegationTokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ICreditDelegationTokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ICreditDelegationTokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ICreditDelegationTokenSession struct {
	Contract     *ICreditDelegationToken // Generic contract binding to set the session for
	CallOpts     bind.CallOpts           // Call options to use throughout this session
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// ICreditDelegationTokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ICreditDelegationTokenCallerSession struct {
	Contract *ICreditDelegationTokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                 // Call options to use throughout this session
}

// ICreditDelegationTokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ICreditDelegationTokenTransactorSession struct {
	Contract     *ICreditDelegationTokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                 // Transaction auth options to use throughout this session
}

// ICreditDelegationTokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type ICreditDelegationTokenRaw struct {
	Contract *ICreditDelegationToken // Generic contract binding to access the raw methods on
}

// ICreditDelegationTokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ICreditDelegationTokenCallerRaw struct {
	Contract *ICreditDelegationTokenCaller // Generic read-only contract binding to access the raw methods on
}

// ICreditDelegationTokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ICreditDelegationTokenTransactorRaw struct {
	Contract *ICreditDelegationTokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewICreditDelegationToken creates a new instance of ICreditDelegationToken, bound to a specific deployed contract.
func NewICreditDelegationToken(address common.Address, backend bind.ContractBackend) (*ICreditDelegationToken, error) {
	contract, err := bindICreditDelegationToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ICreditDelegationToken{ICreditDelegationTokenCaller: ICreditDelegationTokenCaller{contract: contract}, ICreditDelegationTokenTransactor: ICreditDelegationTokenTransactor{contract: contract}, ICreditDelegationTokenFilterer: ICreditDelegationTokenFilterer{contract: contract}}, nil
}

// NewICreditDelegationTokenCaller creates a new read-only instance of ICreditDelegationToken, bound to a specific deployed contract.
func NewICreditDelegationTokenCaller(address common.Address, caller bind.ContractCaller) (*ICreditDelegationTokenCaller, error) {
	contract, err := bindICreditDelegationToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ICreditDelegationTokenCaller{contract: contract}, nil
}

// NewICreditDelegationTokenTransactor creates a new write-only instance of ICreditDelegationToken, bound to a specific deployed contract.
func NewICreditDelegationTokenTransactor(address common.Address, transactor bind.ContractTransactor) (*ICreditDelegationTokenTransactor, error) {
	contract, err := bindICreditDelegationToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ICreditDelegationTokenTransactor{contract: contract}, nil
}

// NewICreditDelegationTokenFilterer creates a new log filterer instance of ICreditDelegationToken, bound to a specific deployed contract.
func NewICreditDelegationTokenFilterer(address common.Address, filterer bind.ContractFilterer) (*ICreditDelegationTokenFilterer, error) {
	contract, err := bindICreditDelegationToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ICreditDelegationTokenFilterer{contract: contract}, nil
}

// bindICreditDelegationToken binds a generic wrapper to an already deployed contract.
func bindICreditDelegationToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ICreditDelegationTokenABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ICreditDelegationToken *ICreditDelegationTokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ICreditDelegationToken.Contract.ICreditDelegationTokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ICreditDelegationToken *ICreditDelegationTokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ICreditDelegationToken.Contract.ICreditDelegationTokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ICreditDelegationToken *ICreditDelegationTokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ICreditDelegationToken.Contract.ICreditDelegationTokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ICreditDelegationToken *ICreditDelegationTokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ICreditDelegationToken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ICreditDelegationToken *ICreditDelegationTokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ICreditDelegationToken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ICreditDelegationToken *ICreditDelegationTokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ICreditDelegationToken.Contract.contract.Transact(opts, method, params...)
}

// BorrowAllowance is a free data retrieval call binding the contract method 0x6bd76d24.
//
// Solidity: function borrowAllowance(address fromUser, address toUser) view returns(uint256)
func (_ICreditDelegationToken *ICreditDelegationTokenCaller) BorrowAllowance(opts *bind.CallOpts, fromUser common.Address, toUser common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ICreditDelegationToken.contract.Call(opts, &out, "borrowAllowance", fromUser, toUser)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BorrowAllowance is a free data retrieval call binding the contract method 0x6bd76d24.
//
// Solidity: function borrowAllowance(address fromUser, address toUser) view returns(uint256)
func (_ICreditDelegationToken *ICreditDelegationTokenSession) BorrowAllowance(fromUser common.Address, toUser common.Address) (*big.Int, error) {
	return _ICreditDelegationToken.Contract.BorrowAllowance(&_ICreditDelegationToken.CallOpts, fromUser, toUser)
}

// BorrowAllowance is a free data retrieval call binding the contract method 0x6bd76d24.
//
// Solidity: function borrowAllowance(address fromUser, address toUser) view returns(uint256)
func (_ICreditDelegationToken *ICreditDelegationTokenCallerSession) BorrowAllowance(fromUser common.Address, toUser common.Address) (*big.Int, error) {
	return _ICreditDelegationToken.Contract.BorrowAllowance(&_ICreditDelegationToken.CallOpts, fromUser, toUser)
}

// ApproveDelegation is a paid mutator transaction binding the contract method 0xc04a8a10.
//
// Solidity: function approveDelegation(address delegatee, uint256 amount) returns()
func (_ICreditDelegationToken *ICreditDelegationTokenTransactor) ApproveDelegation(opts *bind.TransactOpts, delegatee common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ICreditDelegationToken.contract.Transact(opts, "approveDelegation", delegatee, amount)
}

// ApproveDelegation is a paid mutator transaction binding the contract method 0xc04a8a10.
//
// Solidity: function approveDelegation(address delegatee, uint256 amount) returns()
func (_ICreditDelegationToken *ICreditDelegationTokenSession) ApproveDelegation(delegatee common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ICreditDelegationToken.Contract.ApproveDelegation(&_ICreditDelegationToken.TransactOpts, delegatee, amount)
}

// ApproveDelegation is a paid mutator transaction binding the contract method 0xc04a8a10.
//
// Solidity: function approveDelegation(address delegatee, uint256 amount) returns()
func (_ICreditDelegationToken *ICreditDelegationTokenTransactorSession) ApproveDelegation(delegatee common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ICreditDelegationToken.Contract.ApproveDelegation(&_ICreditDelegationToken.TransactOpts, delegatee, amount)
}

// ICreditDelegationTokenBorrowAllowanceDelegatedIterator is returned from FilterBorrowAllowanceDelegated and is used to iterate over the raw logs and unpacked data for BorrowAllowanceDelegated events raised by the ICreditDelegationToken contract.
type ICreditDelegationTokenBorrowAllowanceDelegatedIterator struct {
	Event *ICreditDelegationTokenBorrowAllowanceDelegated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ICreditDelegationTokenBorrowAllowanceDelegatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ICreditDelegationTokenBorrowAllowanceDelegated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ICreditDelegationTokenBorrowAllowanceDelegated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ICreditDelegationTokenBorrowAllowanceDelegatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ICreditDelegationTokenBorrowAllowanceDelegatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ICreditDelegationTokenBorrowAllowanceDelegated represents a BorrowAllowanceDelegated event raised by the ICreditDelegationToken contract.
type ICreditDelegationTokenBorrowAllowanceDelegated struct {
	FromUser common.Address
	ToUser   common.Address
	Asset    common.Address
	Amount   *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterBorrowAllowanceDelegated is a free log retrieval operation binding the contract event 0xda919360433220e13b51e8c211e490d148e61a3bd53de8c097194e458b97f3e1.
//
// Solidity: event BorrowAllowanceDelegated(address indexed fromUser, address indexed toUser, address asset, uint256 amount)
func (_ICreditDelegationToken *ICreditDelegationTokenFilterer) FilterBorrowAllowanceDelegated(opts *bind.FilterOpts, fromUser []common.Address, toUser []common.Address) (*ICreditDelegationTokenBorrowAllowanceDelegatedIterator, error) {

	var fromUserRule []interface{}
	for _, fromUserItem := range fromUser {
		fromUserRule = append(fromUserRule, fromUserItem)
	}
	var toUserRule []interface{}
	for _, toUserItem := range toUser {
		toUserRule = append(toUserRule, toUserItem)
	}

	logs, sub, err := _ICreditDelegationToken.contract.FilterLogs(opts, "BorrowAllowanceDelegated", fromUserRule, toUserRule)
	if err != nil {
		return nil, err
	}
	return &ICreditDelegationTokenBorrowAllowanceDelegatedIterator{contract: _ICreditDelegationToken.contract, event: "BorrowAllowanceDelegated", logs: logs, sub: sub}, nil
}

// WatchBorrowAllowanceDelegated is a free log subscription operation binding the contract event 0xda919360433220e13b51e8c211e490d148e61a3bd53de8c097194e458b97f3e1.
//
// Solidity: event BorrowAllowanceDelegated(address indexed fromUser, address indexed toUser, address asset, uint256 amount)
func (_ICreditDelegationToken *ICreditDelegationTokenFilterer) WatchBorrowAllowanceDelegated(opts *bind.WatchOpts, sink chan<- *ICreditDelegationTokenBorrowAllowanceDelegated, fromUser []common.Address, toUser []common.Address) (event.Subscription, error) {

	var fromUserRule []interface{}
	for _, fromUserItem := range fromUser {
		fromUserRule = append(fromUserRule, fromUserItem)
	}
	var toUserRule []interface{}
	for _, toUserItem := range toUser {
		toUserRule = append(toUserRule, toUserItem)
	}

	logs, sub, err := _ICreditDelegationToken.contract.WatchLogs(opts, "BorrowAllowanceDelegated", fromUserRule, toUserRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ICreditDelegationTokenBorrowAllowanceDelegated)
				if err := _ICreditDelegationToken.contract.UnpackLog(event, "BorrowAllowanceDelegated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBorrowAllowanceDelegated is a log parse operation binding the contract event 0xda919360433220e13b51e8c211e490d148e61a3bd53de8c097194e458b97f3e1.
//
// Solidity: event BorrowAllowanceDelegated(address indexed fromUser, address indexed toUser, address asset, uint256 amount)
func (_ICreditDelegationToken *ICreditDelegationTokenFilterer) ParseBorrowAllowanceDelegated(log types.Log) (*ICreditDelegationTokenBorrowAllowanceDelegated, error) {
	event := new(ICreditDelegationTokenBorrowAllowanceDelegated)
	if err := _ICreditDelegationToken.contract.UnpackLog(event, "BorrowAllowanceDelegated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IDelegationTokenABI is the input ABI used to generate the binding from.
const IDelegationTokenABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// IDelegationToken is an auto generated Go binding around an Ethereum contract.
type IDelegationToken struct {
	IDelegationTokenCaller     // Read-only binding to the contract
	IDelegationTokenTransactor // Write-only binding to the contract
	IDelegationTokenFilterer   // Log filterer for contract events
}

// IDelegationTokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type IDelegationTokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IDelegationTokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IDelegationTokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IDelegationTokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IDelegationTokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IDelegationTokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IDelegationTokenSession struct {
	Contract     *IDelegationToken // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IDelegationTokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IDelegationTokenCallerSession struct {
	Contract *IDelegationTokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// IDelegationTokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IDelegationTokenTransactorSession struct {
	Contract     *IDelegationTokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// IDelegationTokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type IDelegationTokenRaw struct {
	Contract *IDelegationToken // Generic contract binding to access the raw methods on
}

// IDelegationTokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IDelegationTokenCallerRaw struct {
	Contract *IDelegationTokenCaller // Generic read-only contract binding to access the raw methods on
}

// IDelegationTokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IDelegationTokenTransactorRaw struct {
	Contract *IDelegationTokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIDelegationToken creates a new instance of IDelegationToken, bound to a specific deployed contract.
func NewIDelegationToken(address common.Address, backend bind.ContractBackend) (*IDelegationToken, error) {
	contract, err := bindIDelegationToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IDelegationToken{IDelegationTokenCaller: IDelegationTokenCaller{contract: contract}, IDelegationTokenTransactor: IDelegationTokenTransactor{contract: contract}, IDelegationTokenFilterer: IDelegationTokenFilterer{contract: contract}}, nil
}

// NewIDelegationTokenCaller creates a new read-only instance of IDelegationToken, bound to a specific deployed contract.
func NewIDelegationTokenCaller(address common.Address, caller bind.ContractCaller) (*IDelegationTokenCaller, error) {
	contract, err := bindIDelegationToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IDelegationTokenCaller{contract: contract}, nil
}

// NewIDelegationTokenTransactor creates a new write-only instance of IDelegationToken, bound to a specific deployed contract.
func NewIDelegationTokenTransactor(address common.Address, transactor bind.ContractTransactor) (*IDelegationTokenTransactor, error) {
	contract, err := bindIDelegationToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IDelegationTokenTransactor{contract: contract}, nil
}

// NewIDelegationTokenFilterer creates a new log filterer instance of IDelegationToken, bound to a specific deployed contract.
func NewIDelegationTokenFilterer(address common.Address, filterer bind.ContractFilterer) (*IDelegationTokenFilterer, error) {
	contract, err := bindIDelegationToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IDelegationTokenFilterer{contract: contract}, nil
}

// bindIDelegationToken binds a generic wrapper to an already deployed contract.
func bindIDelegationToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IDelegationTokenABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IDelegationToken *IDelegationTokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IDelegationToken.Contract.IDelegationTokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IDelegationToken *IDelegationTokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IDelegationToken.Contract.IDelegationTokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IDelegationToken *IDelegationTokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IDelegationToken.Contract.IDelegationTokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IDelegationToken *IDelegationTokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IDelegationToken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IDelegationToken *IDelegationTokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IDelegationToken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IDelegationToken *IDelegationTokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IDelegationToken.Contract.contract.Transact(opts, method, params...)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_IDelegationToken *IDelegationTokenTransactor) Delegate(opts *bind.TransactOpts, delegatee common.Address) (*types.Transaction, error) {
	return _IDelegationToken.contract.Transact(opts, "delegate", delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_IDelegationToken *IDelegationTokenSession) Delegate(delegatee common.Address) (*types.Transaction, error) {
	return _IDelegationToken.Contract.Delegate(&_IDelegationToken.TransactOpts, delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_IDelegationToken *IDelegationTokenTransactorSession) Delegate(delegatee common.Address) (*types.Transaction, error) {
	return _IDelegationToken.Contract.Delegate(&_IDelegationToken.TransactOpts, delegatee)
}

// IERC20ABI is the input ABI used to generate the binding from.
const IERC20ABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// IERC20 is an auto generated Go binding around an Ethereum contract.
type IERC20 struct {
	IERC20Caller     // Read-only binding to the contract
	IERC20Transactor // Write-only binding to the contract
	IERC20Filterer   // Log filterer for contract events
}

// IERC20Caller is an auto generated read-only Go binding around an Ethereum contract.
type IERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC20Session struct {
	Contract     *IERC20           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC20CallerSession struct {
	Contract *IERC20Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// IERC20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC20TransactorSession struct {
	Contract     *IERC20Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC20Raw is an auto generated low-level Go binding around an Ethereum contract.
type IERC20Raw struct {
	Contract *IERC20 // Generic contract binding to access the raw methods on
}

// IERC20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC20CallerRaw struct {
	Contract *IERC20Caller // Generic read-only contract binding to access the raw methods on
}

// IERC20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC20TransactorRaw struct {
	Contract *IERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC20 creates a new instance of IERC20, bound to a specific deployed contract.
func NewIERC20(address common.Address, backend bind.ContractBackend) (*IERC20, error) {
	contract, err := bindIERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC20{IERC20Caller: IERC20Caller{contract: contract}, IERC20Transactor: IERC20Transactor{contract: contract}, IERC20Filterer: IERC20Filterer{contract: contract}}, nil
}

// NewIERC20Caller creates a new read-only instance of IERC20, bound to a specific deployed contract.
func NewIERC20Caller(address common.Address, caller bind.ContractCaller) (*IERC20Caller, error) {
	contract, err := bindIERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20Caller{contract: contract}, nil
}

// NewIERC20Transactor creates a new write-only instance of IERC20, bound to a specific deployed contract.
func NewIERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*IERC20Transactor, error) {
	contract, err := bindIERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20Transactor{contract: contract}, nil
}

// NewIERC20Filterer creates a new log filterer instance of IERC20, bound to a specific deployed contract.
func NewIERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*IERC20Filterer, error) {
	contract, err := bindIERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC20Filterer{contract: contract}, nil
}

// bindIERC20 binds a generic wrapper to an already deployed contract.
func bindIERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IERC20ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20 *IERC20Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20.Contract.IERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20 *IERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20.Contract.IERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20 *IERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20.Contract.IERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20 *IERC20CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20 *IERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20 *IERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20 *IERC20Caller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20 *IERC20Session) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20.Contract.Allowance(&_IERC20.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20 *IERC20CallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20.Contract.Allowance(&_IERC20.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20 *IERC20Caller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20 *IERC20Session) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20.Contract.BalanceOf(&_IERC20.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20 *IERC20CallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20.Contract.BalanceOf(&_IERC20.CallOpts, account)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20 *IERC20Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IERC20.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20 *IERC20Session) TotalSupply() (*big.Int, error) {
	return _IERC20.Contract.TotalSupply(&_IERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20 *IERC20CallerSession) TotalSupply() (*big.Int, error) {
	return _IERC20.Contract.TotalSupply(&_IERC20.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20 *IERC20Transactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20 *IERC20Session) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Approve(&_IERC20.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20 *IERC20TransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Approve(&_IERC20.TransactOpts, spender, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20Transactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20Session) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Transfer(&_IERC20.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20TransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Transfer(&_IERC20.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20Transactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20Session) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.TransferFrom(&_IERC20.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20TransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.TransferFrom(&_IERC20.TransactOpts, sender, recipient, amount)
}

// IERC20ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the IERC20 contract.
type IERC20ApprovalIterator struct {
	Event *IERC20Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20Approval represents a Approval event raised by the IERC20 contract.
type IERC20Approval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20 *IERC20Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*IERC20ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &IERC20ApprovalIterator{contract: _IERC20.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20 *IERC20Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *IERC20Approval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20Approval)
				if err := _IERC20.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20 *IERC20Filterer) ParseApproval(log types.Log) (*IERC20Approval, error) {
	event := new(IERC20Approval)
	if err := _IERC20.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC20TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the IERC20 contract.
type IERC20TransferIterator struct {
	Event *IERC20Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20Transfer represents a Transfer event raised by the IERC20 contract.
type IERC20Transfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20 *IERC20Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*IERC20TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &IERC20TransferIterator{contract: _IERC20.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20 *IERC20Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *IERC20Transfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20Transfer)
				if err := _IERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20 *IERC20Filterer) ParseTransfer(log types.Log) (*IERC20Transfer, error) {
	event := new(IERC20Transfer)
	if err := _IERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC20DetailedABI is the input ABI used to generate the binding from.
const IERC20DetailedABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// IERC20Detailed is an auto generated Go binding around an Ethereum contract.
type IERC20Detailed struct {
	IERC20DetailedCaller     // Read-only binding to the contract
	IERC20DetailedTransactor // Write-only binding to the contract
	IERC20DetailedFilterer   // Log filterer for contract events
}

// IERC20DetailedCaller is an auto generated read-only Go binding around an Ethereum contract.
type IERC20DetailedCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20DetailedTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC20DetailedTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20DetailedFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC20DetailedFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20DetailedSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC20DetailedSession struct {
	Contract     *IERC20Detailed   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC20DetailedCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC20DetailedCallerSession struct {
	Contract *IERC20DetailedCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// IERC20DetailedTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC20DetailedTransactorSession struct {
	Contract     *IERC20DetailedTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// IERC20DetailedRaw is an auto generated low-level Go binding around an Ethereum contract.
type IERC20DetailedRaw struct {
	Contract *IERC20Detailed // Generic contract binding to access the raw methods on
}

// IERC20DetailedCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC20DetailedCallerRaw struct {
	Contract *IERC20DetailedCaller // Generic read-only contract binding to access the raw methods on
}

// IERC20DetailedTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC20DetailedTransactorRaw struct {
	Contract *IERC20DetailedTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC20Detailed creates a new instance of IERC20Detailed, bound to a specific deployed contract.
func NewIERC20Detailed(address common.Address, backend bind.ContractBackend) (*IERC20Detailed, error) {
	contract, err := bindIERC20Detailed(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC20Detailed{IERC20DetailedCaller: IERC20DetailedCaller{contract: contract}, IERC20DetailedTransactor: IERC20DetailedTransactor{contract: contract}, IERC20DetailedFilterer: IERC20DetailedFilterer{contract: contract}}, nil
}

// NewIERC20DetailedCaller creates a new read-only instance of IERC20Detailed, bound to a specific deployed contract.
func NewIERC20DetailedCaller(address common.Address, caller bind.ContractCaller) (*IERC20DetailedCaller, error) {
	contract, err := bindIERC20Detailed(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20DetailedCaller{contract: contract}, nil
}

// NewIERC20DetailedTransactor creates a new write-only instance of IERC20Detailed, bound to a specific deployed contract.
func NewIERC20DetailedTransactor(address common.Address, transactor bind.ContractTransactor) (*IERC20DetailedTransactor, error) {
	contract, err := bindIERC20Detailed(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20DetailedTransactor{contract: contract}, nil
}

// NewIERC20DetailedFilterer creates a new log filterer instance of IERC20Detailed, bound to a specific deployed contract.
func NewIERC20DetailedFilterer(address common.Address, filterer bind.ContractFilterer) (*IERC20DetailedFilterer, error) {
	contract, err := bindIERC20Detailed(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC20DetailedFilterer{contract: contract}, nil
}

// bindIERC20Detailed binds a generic wrapper to an already deployed contract.
func bindIERC20Detailed(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IERC20DetailedABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20Detailed *IERC20DetailedRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20Detailed.Contract.IERC20DetailedCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20Detailed *IERC20DetailedRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20Detailed.Contract.IERC20DetailedTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20Detailed *IERC20DetailedRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20Detailed.Contract.IERC20DetailedTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20Detailed *IERC20DetailedCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20Detailed.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20Detailed *IERC20DetailedTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20Detailed.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20Detailed *IERC20DetailedTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20Detailed.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20Detailed *IERC20DetailedCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20Detailed.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20Detailed *IERC20DetailedSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20Detailed.Contract.Allowance(&_IERC20Detailed.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20Detailed *IERC20DetailedCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20Detailed.Contract.Allowance(&_IERC20Detailed.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20Detailed *IERC20DetailedCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20Detailed.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20Detailed *IERC20DetailedSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20Detailed.Contract.BalanceOf(&_IERC20Detailed.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20Detailed *IERC20DetailedCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20Detailed.Contract.BalanceOf(&_IERC20Detailed.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_IERC20Detailed *IERC20DetailedCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _IERC20Detailed.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_IERC20Detailed *IERC20DetailedSession) Decimals() (uint8, error) {
	return _IERC20Detailed.Contract.Decimals(&_IERC20Detailed.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_IERC20Detailed *IERC20DetailedCallerSession) Decimals() (uint8, error) {
	return _IERC20Detailed.Contract.Decimals(&_IERC20Detailed.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_IERC20Detailed *IERC20DetailedCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _IERC20Detailed.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_IERC20Detailed *IERC20DetailedSession) Name() (string, error) {
	return _IERC20Detailed.Contract.Name(&_IERC20Detailed.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_IERC20Detailed *IERC20DetailedCallerSession) Name() (string, error) {
	return _IERC20Detailed.Contract.Name(&_IERC20Detailed.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_IERC20Detailed *IERC20DetailedCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _IERC20Detailed.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_IERC20Detailed *IERC20DetailedSession) Symbol() (string, error) {
	return _IERC20Detailed.Contract.Symbol(&_IERC20Detailed.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_IERC20Detailed *IERC20DetailedCallerSession) Symbol() (string, error) {
	return _IERC20Detailed.Contract.Symbol(&_IERC20Detailed.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20Detailed *IERC20DetailedCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IERC20Detailed.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20Detailed *IERC20DetailedSession) TotalSupply() (*big.Int, error) {
	return _IERC20Detailed.Contract.TotalSupply(&_IERC20Detailed.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20Detailed *IERC20DetailedCallerSession) TotalSupply() (*big.Int, error) {
	return _IERC20Detailed.Contract.TotalSupply(&_IERC20Detailed.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20Detailed *IERC20DetailedTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Detailed.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20Detailed *IERC20DetailedSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Detailed.Contract.Approve(&_IERC20Detailed.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20Detailed *IERC20DetailedTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Detailed.Contract.Approve(&_IERC20Detailed.TransactOpts, spender, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20Detailed *IERC20DetailedTransactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Detailed.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20Detailed *IERC20DetailedSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Detailed.Contract.Transfer(&_IERC20Detailed.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20Detailed *IERC20DetailedTransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Detailed.Contract.Transfer(&_IERC20Detailed.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20Detailed *IERC20DetailedTransactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Detailed.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20Detailed *IERC20DetailedSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Detailed.Contract.TransferFrom(&_IERC20Detailed.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20Detailed *IERC20DetailedTransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Detailed.Contract.TransferFrom(&_IERC20Detailed.TransactOpts, sender, recipient, amount)
}

// IERC20DetailedApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the IERC20Detailed contract.
type IERC20DetailedApprovalIterator struct {
	Event *IERC20DetailedApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20DetailedApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20DetailedApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20DetailedApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20DetailedApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20DetailedApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20DetailedApproval represents a Approval event raised by the IERC20Detailed contract.
type IERC20DetailedApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20Detailed *IERC20DetailedFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*IERC20DetailedApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20Detailed.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &IERC20DetailedApprovalIterator{contract: _IERC20Detailed.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20Detailed *IERC20DetailedFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *IERC20DetailedApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20Detailed.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20DetailedApproval)
				if err := _IERC20Detailed.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20Detailed *IERC20DetailedFilterer) ParseApproval(log types.Log) (*IERC20DetailedApproval, error) {
	event := new(IERC20DetailedApproval)
	if err := _IERC20Detailed.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC20DetailedTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the IERC20Detailed contract.
type IERC20DetailedTransferIterator struct {
	Event *IERC20DetailedTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20DetailedTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20DetailedTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20DetailedTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20DetailedTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20DetailedTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20DetailedTransfer represents a Transfer event raised by the IERC20Detailed contract.
type IERC20DetailedTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20Detailed *IERC20DetailedFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*IERC20DetailedTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20Detailed.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &IERC20DetailedTransferIterator{contract: _IERC20Detailed.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20Detailed *IERC20DetailedFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *IERC20DetailedTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20Detailed.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20DetailedTransfer)
				if err := _IERC20Detailed.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20Detailed *IERC20DetailedFilterer) ParseTransfer(log types.Log) (*IERC20DetailedTransfer, error) {
	event := new(IERC20DetailedTransfer)
	if err := _IERC20Detailed.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC20DetailedBytesABI is the input ABI used to generate the binding from.
const IERC20DetailedBytesABI = "[{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// IERC20DetailedBytesBin is the compiled bytecode used for deploying new contracts.
var IERC20DetailedBytesBin = "0x608060405234801561001057600080fd5b5060ad8061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c806306fdde03146041578063313ce56714605957806395d89b4114605f575b600080fd5b60476065565b60408051918252519081900360200190f35b6047606b565b60476071565b60005481565b60025481565b6001548156fea26469706673582212205e565979d9726e493a7f93a8a246390153437f1d90ffb386aae5d43c79dc995564736f6c634300060c0033"

// DeployIERC20DetailedBytes deploys a new Ethereum contract, binding an instance of IERC20DetailedBytes to it.
func DeployIERC20DetailedBytes(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *IERC20DetailedBytes, error) {
	parsed, err := abi.JSON(strings.NewReader(IERC20DetailedBytesABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(IERC20DetailedBytesBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &IERC20DetailedBytes{IERC20DetailedBytesCaller: IERC20DetailedBytesCaller{contract: contract}, IERC20DetailedBytesTransactor: IERC20DetailedBytesTransactor{contract: contract}, IERC20DetailedBytesFilterer: IERC20DetailedBytesFilterer{contract: contract}}, nil
}

// IERC20DetailedBytes is an auto generated Go binding around an Ethereum contract.
type IERC20DetailedBytes struct {
	IERC20DetailedBytesCaller     // Read-only binding to the contract
	IERC20DetailedBytesTransactor // Write-only binding to the contract
	IERC20DetailedBytesFilterer   // Log filterer for contract events
}

// IERC20DetailedBytesCaller is an auto generated read-only Go binding around an Ethereum contract.
type IERC20DetailedBytesCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20DetailedBytesTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC20DetailedBytesTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20DetailedBytesFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC20DetailedBytesFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20DetailedBytesSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC20DetailedBytesSession struct {
	Contract     *IERC20DetailedBytes // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// IERC20DetailedBytesCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC20DetailedBytesCallerSession struct {
	Contract *IERC20DetailedBytesCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// IERC20DetailedBytesTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC20DetailedBytesTransactorSession struct {
	Contract     *IERC20DetailedBytesTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// IERC20DetailedBytesRaw is an auto generated low-level Go binding around an Ethereum contract.
type IERC20DetailedBytesRaw struct {
	Contract *IERC20DetailedBytes // Generic contract binding to access the raw methods on
}

// IERC20DetailedBytesCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC20DetailedBytesCallerRaw struct {
	Contract *IERC20DetailedBytesCaller // Generic read-only contract binding to access the raw methods on
}

// IERC20DetailedBytesTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC20DetailedBytesTransactorRaw struct {
	Contract *IERC20DetailedBytesTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC20DetailedBytes creates a new instance of IERC20DetailedBytes, bound to a specific deployed contract.
func NewIERC20DetailedBytes(address common.Address, backend bind.ContractBackend) (*IERC20DetailedBytes, error) {
	contract, err := bindIERC20DetailedBytes(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC20DetailedBytes{IERC20DetailedBytesCaller: IERC20DetailedBytesCaller{contract: contract}, IERC20DetailedBytesTransactor: IERC20DetailedBytesTransactor{contract: contract}, IERC20DetailedBytesFilterer: IERC20DetailedBytesFilterer{contract: contract}}, nil
}

// NewIERC20DetailedBytesCaller creates a new read-only instance of IERC20DetailedBytes, bound to a specific deployed contract.
func NewIERC20DetailedBytesCaller(address common.Address, caller bind.ContractCaller) (*IERC20DetailedBytesCaller, error) {
	contract, err := bindIERC20DetailedBytes(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20DetailedBytesCaller{contract: contract}, nil
}

// NewIERC20DetailedBytesTransactor creates a new write-only instance of IERC20DetailedBytes, bound to a specific deployed contract.
func NewIERC20DetailedBytesTransactor(address common.Address, transactor bind.ContractTransactor) (*IERC20DetailedBytesTransactor, error) {
	contract, err := bindIERC20DetailedBytes(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20DetailedBytesTransactor{contract: contract}, nil
}

// NewIERC20DetailedBytesFilterer creates a new log filterer instance of IERC20DetailedBytes, bound to a specific deployed contract.
func NewIERC20DetailedBytesFilterer(address common.Address, filterer bind.ContractFilterer) (*IERC20DetailedBytesFilterer, error) {
	contract, err := bindIERC20DetailedBytes(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC20DetailedBytesFilterer{contract: contract}, nil
}

// bindIERC20DetailedBytes binds a generic wrapper to an already deployed contract.
func bindIERC20DetailedBytes(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IERC20DetailedBytesABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20DetailedBytes *IERC20DetailedBytesRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20DetailedBytes.Contract.IERC20DetailedBytesCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20DetailedBytes *IERC20DetailedBytesRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20DetailedBytes.Contract.IERC20DetailedBytesTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20DetailedBytes *IERC20DetailedBytesRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20DetailedBytes.Contract.IERC20DetailedBytesTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20DetailedBytes *IERC20DetailedBytesCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20DetailedBytes.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20DetailedBytes *IERC20DetailedBytesTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20DetailedBytes.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20DetailedBytes *IERC20DetailedBytesTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20DetailedBytes.Contract.contract.Transact(opts, method, params...)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint256)
func (_IERC20DetailedBytes *IERC20DetailedBytesCaller) Decimals(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IERC20DetailedBytes.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint256)
func (_IERC20DetailedBytes *IERC20DetailedBytesSession) Decimals() (*big.Int, error) {
	return _IERC20DetailedBytes.Contract.Decimals(&_IERC20DetailedBytes.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint256)
func (_IERC20DetailedBytes *IERC20DetailedBytesCallerSession) Decimals() (*big.Int, error) {
	return _IERC20DetailedBytes.Contract.Decimals(&_IERC20DetailedBytes.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(bytes32)
func (_IERC20DetailedBytes *IERC20DetailedBytesCaller) Name(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _IERC20DetailedBytes.contract.Call(opts, &out, "name")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(bytes32)
func (_IERC20DetailedBytes *IERC20DetailedBytesSession) Name() ([32]byte, error) {
	return _IERC20DetailedBytes.Contract.Name(&_IERC20DetailedBytes.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(bytes32)
func (_IERC20DetailedBytes *IERC20DetailedBytesCallerSession) Name() ([32]byte, error) {
	return _IERC20DetailedBytes.Contract.Name(&_IERC20DetailedBytes.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(bytes32)
func (_IERC20DetailedBytes *IERC20DetailedBytesCaller) Symbol(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _IERC20DetailedBytes.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(bytes32)
func (_IERC20DetailedBytes *IERC20DetailedBytesSession) Symbol() ([32]byte, error) {
	return _IERC20DetailedBytes.Contract.Symbol(&_IERC20DetailedBytes.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(bytes32)
func (_IERC20DetailedBytes *IERC20DetailedBytesCallerSession) Symbol() ([32]byte, error) {
	return _IERC20DetailedBytes.Contract.Symbol(&_IERC20DetailedBytes.CallOpts)
}

// IFlashLoanReceiverABI is the input ABI used to generate the binding from.
const IFlashLoanReceiverABI = "[{\"inputs\":[],\"name\":\"ADDRESSES_PROVIDER\",\"outputs\":[{\"internalType\":\"contractILendingPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LENDING_POOL\",\"outputs\":[{\"internalType\":\"contractILendingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"premiums\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// IFlashLoanReceiver is an auto generated Go binding around an Ethereum contract.
type IFlashLoanReceiver struct {
	IFlashLoanReceiverCaller     // Read-only binding to the contract
	IFlashLoanReceiverTransactor // Write-only binding to the contract
	IFlashLoanReceiverFilterer   // Log filterer for contract events
}

// IFlashLoanReceiverCaller is an auto generated read-only Go binding around an Ethereum contract.
type IFlashLoanReceiverCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IFlashLoanReceiverTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IFlashLoanReceiverTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IFlashLoanReceiverFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IFlashLoanReceiverFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IFlashLoanReceiverSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IFlashLoanReceiverSession struct {
	Contract     *IFlashLoanReceiver // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// IFlashLoanReceiverCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IFlashLoanReceiverCallerSession struct {
	Contract *IFlashLoanReceiverCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// IFlashLoanReceiverTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IFlashLoanReceiverTransactorSession struct {
	Contract     *IFlashLoanReceiverTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// IFlashLoanReceiverRaw is an auto generated low-level Go binding around an Ethereum contract.
type IFlashLoanReceiverRaw struct {
	Contract *IFlashLoanReceiver // Generic contract binding to access the raw methods on
}

// IFlashLoanReceiverCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IFlashLoanReceiverCallerRaw struct {
	Contract *IFlashLoanReceiverCaller // Generic read-only contract binding to access the raw methods on
}

// IFlashLoanReceiverTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IFlashLoanReceiverTransactorRaw struct {
	Contract *IFlashLoanReceiverTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIFlashLoanReceiver creates a new instance of IFlashLoanReceiver, bound to a specific deployed contract.
func NewIFlashLoanReceiver(address common.Address, backend bind.ContractBackend) (*IFlashLoanReceiver, error) {
	contract, err := bindIFlashLoanReceiver(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IFlashLoanReceiver{IFlashLoanReceiverCaller: IFlashLoanReceiverCaller{contract: contract}, IFlashLoanReceiverTransactor: IFlashLoanReceiverTransactor{contract: contract}, IFlashLoanReceiverFilterer: IFlashLoanReceiverFilterer{contract: contract}}, nil
}

// NewIFlashLoanReceiverCaller creates a new read-only instance of IFlashLoanReceiver, bound to a specific deployed contract.
func NewIFlashLoanReceiverCaller(address common.Address, caller bind.ContractCaller) (*IFlashLoanReceiverCaller, error) {
	contract, err := bindIFlashLoanReceiver(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IFlashLoanReceiverCaller{contract: contract}, nil
}

// NewIFlashLoanReceiverTransactor creates a new write-only instance of IFlashLoanReceiver, bound to a specific deployed contract.
func NewIFlashLoanReceiverTransactor(address common.Address, transactor bind.ContractTransactor) (*IFlashLoanReceiverTransactor, error) {
	contract, err := bindIFlashLoanReceiver(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IFlashLoanReceiverTransactor{contract: contract}, nil
}

// NewIFlashLoanReceiverFilterer creates a new log filterer instance of IFlashLoanReceiver, bound to a specific deployed contract.
func NewIFlashLoanReceiverFilterer(address common.Address, filterer bind.ContractFilterer) (*IFlashLoanReceiverFilterer, error) {
	contract, err := bindIFlashLoanReceiver(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IFlashLoanReceiverFilterer{contract: contract}, nil
}

// bindIFlashLoanReceiver binds a generic wrapper to an already deployed contract.
func bindIFlashLoanReceiver(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IFlashLoanReceiverABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IFlashLoanReceiver *IFlashLoanReceiverRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IFlashLoanReceiver.Contract.IFlashLoanReceiverCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IFlashLoanReceiver *IFlashLoanReceiverRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFlashLoanReceiver.Contract.IFlashLoanReceiverTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IFlashLoanReceiver *IFlashLoanReceiverRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IFlashLoanReceiver.Contract.IFlashLoanReceiverTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IFlashLoanReceiver *IFlashLoanReceiverCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IFlashLoanReceiver.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IFlashLoanReceiver *IFlashLoanReceiverTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFlashLoanReceiver.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IFlashLoanReceiver *IFlashLoanReceiverTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IFlashLoanReceiver.Contract.contract.Transact(opts, method, params...)
}

// ADDRESSESPROVIDER is a free data retrieval call binding the contract method 0x0542975c.
//
// Solidity: function ADDRESSES_PROVIDER() view returns(address)
func (_IFlashLoanReceiver *IFlashLoanReceiverCaller) ADDRESSESPROVIDER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IFlashLoanReceiver.contract.Call(opts, &out, "ADDRESSES_PROVIDER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ADDRESSESPROVIDER is a free data retrieval call binding the contract method 0x0542975c.
//
// Solidity: function ADDRESSES_PROVIDER() view returns(address)
func (_IFlashLoanReceiver *IFlashLoanReceiverSession) ADDRESSESPROVIDER() (common.Address, error) {
	return _IFlashLoanReceiver.Contract.ADDRESSESPROVIDER(&_IFlashLoanReceiver.CallOpts)
}

// ADDRESSESPROVIDER is a free data retrieval call binding the contract method 0x0542975c.
//
// Solidity: function ADDRESSES_PROVIDER() view returns(address)
func (_IFlashLoanReceiver *IFlashLoanReceiverCallerSession) ADDRESSESPROVIDER() (common.Address, error) {
	return _IFlashLoanReceiver.Contract.ADDRESSESPROVIDER(&_IFlashLoanReceiver.CallOpts)
}

// LENDINGPOOL is a free data retrieval call binding the contract method 0xb4dcfc77.
//
// Solidity: function LENDING_POOL() view returns(address)
func (_IFlashLoanReceiver *IFlashLoanReceiverCaller) LENDINGPOOL(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IFlashLoanReceiver.contract.Call(opts, &out, "LENDING_POOL")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LENDINGPOOL is a free data retrieval call binding the contract method 0xb4dcfc77.
//
// Solidity: function LENDING_POOL() view returns(address)
func (_IFlashLoanReceiver *IFlashLoanReceiverSession) LENDINGPOOL() (common.Address, error) {
	return _IFlashLoanReceiver.Contract.LENDINGPOOL(&_IFlashLoanReceiver.CallOpts)
}

// LENDINGPOOL is a free data retrieval call binding the contract method 0xb4dcfc77.
//
// Solidity: function LENDING_POOL() view returns(address)
func (_IFlashLoanReceiver *IFlashLoanReceiverCallerSession) LENDINGPOOL() (common.Address, error) {
	return _IFlashLoanReceiver.Contract.LENDINGPOOL(&_IFlashLoanReceiver.CallOpts)
}

// ExecuteOperation is a paid mutator transaction binding the contract method 0x920f5c84.
//
// Solidity: function executeOperation(address[] assets, uint256[] amounts, uint256[] premiums, address initiator, bytes params) returns(bool)
func (_IFlashLoanReceiver *IFlashLoanReceiverTransactor) ExecuteOperation(opts *bind.TransactOpts, assets []common.Address, amounts []*big.Int, premiums []*big.Int, initiator common.Address, params []byte) (*types.Transaction, error) {
	return _IFlashLoanReceiver.contract.Transact(opts, "executeOperation", assets, amounts, premiums, initiator, params)
}

// ExecuteOperation is a paid mutator transaction binding the contract method 0x920f5c84.
//
// Solidity: function executeOperation(address[] assets, uint256[] amounts, uint256[] premiums, address initiator, bytes params) returns(bool)
func (_IFlashLoanReceiver *IFlashLoanReceiverSession) ExecuteOperation(assets []common.Address, amounts []*big.Int, premiums []*big.Int, initiator common.Address, params []byte) (*types.Transaction, error) {
	return _IFlashLoanReceiver.Contract.ExecuteOperation(&_IFlashLoanReceiver.TransactOpts, assets, amounts, premiums, initiator, params)
}

// ExecuteOperation is a paid mutator transaction binding the contract method 0x920f5c84.
//
// Solidity: function executeOperation(address[] assets, uint256[] amounts, uint256[] premiums, address initiator, bytes params) returns(bool)
func (_IFlashLoanReceiver *IFlashLoanReceiverTransactorSession) ExecuteOperation(assets []common.Address, amounts []*big.Int, premiums []*big.Int, initiator common.Address, params []byte) (*types.Transaction, error) {
	return _IFlashLoanReceiver.Contract.ExecuteOperation(&_IFlashLoanReceiver.TransactOpts, assets, amounts, premiums, initiator, params)
}

// ILendingPoolABI is the input ABI used to generate the binding from.
const ILendingPoolABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowRateMode\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowRate\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"referral\",\"type\":\"uint16\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"referral\",\"type\":\"uint16\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"FlashLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"debtAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtToCover\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidatedCollateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"receiveAToken\",\"type\":\"bool\"}],\"name\":\"LiquidationCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"RebalanceStableBorrowRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"repayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableBorrowRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"variableBorrowRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"variableBorrowIndex\",\"type\":\"uint256\"}],\"name\":\"ReserveDataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ReserveUsedAsCollateralDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ReserveUsedAsCollateralEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rateMode\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRateMode\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceFromAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceToBefore\",\"type\":\"uint256\"}],\"name\":\"finalizeTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"modes\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"flashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddressesProvider\",\"outputs\":[{\"internalType\":\"contractILendingPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getConfiguration\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"structDataTypes.ReserveConfigurationMap\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getReserveData\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"structDataTypes.ReserveConfigurationMap\",\"name\":\"configuration\",\"type\":\"tuple\"},{\"internalType\":\"uint128\",\"name\":\"liquidityIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"variableBorrowIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentLiquidityRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentVariableBorrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentStableBorrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint40\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"aTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableDebtTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"variableDebtTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interestRateStrategyAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"}],\"internalType\":\"structDataTypes.ReserveData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getReserveNormalizedIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getReserveNormalizedVariableDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReservesList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserAccountData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCollateralETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebtETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableBorrowsETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentLiquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserConfiguration\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"structDataTypes.UserConfigurationMap\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"aTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableDebtAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"variableDebtAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interestRateStrategyAddress\",\"type\":\"address\"}],\"name\":\"initReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debtToCover\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"receiveAToken\",\"type\":\"bool\"}],\"name\":\"liquidationCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"rebalanceStableBorrowRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateMode\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"}],\"name\":\"repay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"configuration\",\"type\":\"uint256\"}],\"name\":\"setConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rateStrategyAddress\",\"type\":\"address\"}],\"name\":\"setReserveInterestRateStrategyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useAsCollateral\",\"type\":\"bool\"}],\"name\":\"setUserUseReserveAsCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rateMode\",\"type\":\"uint256\"}],\"name\":\"swapBorrowRateMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ILendingPool is an auto generated Go binding around an Ethereum contract.
type ILendingPool struct {
	ILendingPoolCaller     // Read-only binding to the contract
	ILendingPoolTransactor // Write-only binding to the contract
	ILendingPoolFilterer   // Log filterer for contract events
}

// ILendingPoolCaller is an auto generated read-only Go binding around an Ethereum contract.
type ILendingPoolCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ILendingPoolTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ILendingPoolTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ILendingPoolFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ILendingPoolFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ILendingPoolSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ILendingPoolSession struct {
	Contract     *ILendingPool     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ILendingPoolCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ILendingPoolCallerSession struct {
	Contract *ILendingPoolCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// ILendingPoolTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ILendingPoolTransactorSession struct {
	Contract     *ILendingPoolTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// ILendingPoolRaw is an auto generated low-level Go binding around an Ethereum contract.
type ILendingPoolRaw struct {
	Contract *ILendingPool // Generic contract binding to access the raw methods on
}

// ILendingPoolCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ILendingPoolCallerRaw struct {
	Contract *ILendingPoolCaller // Generic read-only contract binding to access the raw methods on
}

// ILendingPoolTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ILendingPoolTransactorRaw struct {
	Contract *ILendingPoolTransactor // Generic write-only contract binding to access the raw methods on
}

// NewILendingPool creates a new instance of ILendingPool, bound to a specific deployed contract.
func NewILendingPool(address common.Address, backend bind.ContractBackend) (*ILendingPool, error) {
	contract, err := bindILendingPool(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ILendingPool{ILendingPoolCaller: ILendingPoolCaller{contract: contract}, ILendingPoolTransactor: ILendingPoolTransactor{contract: contract}, ILendingPoolFilterer: ILendingPoolFilterer{contract: contract}}, nil
}

// NewILendingPoolCaller creates a new read-only instance of ILendingPool, bound to a specific deployed contract.
func NewILendingPoolCaller(address common.Address, caller bind.ContractCaller) (*ILendingPoolCaller, error) {
	contract, err := bindILendingPool(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ILendingPoolCaller{contract: contract}, nil
}

// NewILendingPoolTransactor creates a new write-only instance of ILendingPool, bound to a specific deployed contract.
func NewILendingPoolTransactor(address common.Address, transactor bind.ContractTransactor) (*ILendingPoolTransactor, error) {
	contract, err := bindILendingPool(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ILendingPoolTransactor{contract: contract}, nil
}

// NewILendingPoolFilterer creates a new log filterer instance of ILendingPool, bound to a specific deployed contract.
func NewILendingPoolFilterer(address common.Address, filterer bind.ContractFilterer) (*ILendingPoolFilterer, error) {
	contract, err := bindILendingPool(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ILendingPoolFilterer{contract: contract}, nil
}

// bindILendingPool binds a generic wrapper to an already deployed contract.
func bindILendingPool(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ILendingPoolABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ILendingPool *ILendingPoolRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ILendingPool.Contract.ILendingPoolCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ILendingPool *ILendingPoolRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ILendingPool.Contract.ILendingPoolTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ILendingPool *ILendingPoolRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ILendingPool.Contract.ILendingPoolTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ILendingPool *ILendingPoolCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ILendingPool.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ILendingPool *ILendingPoolTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ILendingPool.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ILendingPool *ILendingPoolTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ILendingPool.Contract.contract.Transact(opts, method, params...)
}

// GetAddressesProvider is a free data retrieval call binding the contract method 0xfe65acfe.
//
// Solidity: function getAddressesProvider() view returns(address)
func (_ILendingPool *ILendingPoolCaller) GetAddressesProvider(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ILendingPool.contract.Call(opts, &out, "getAddressesProvider")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAddressesProvider is a free data retrieval call binding the contract method 0xfe65acfe.
//
// Solidity: function getAddressesProvider() view returns(address)
func (_ILendingPool *ILendingPoolSession) GetAddressesProvider() (common.Address, error) {
	return _ILendingPool.Contract.GetAddressesProvider(&_ILendingPool.CallOpts)
}

// GetAddressesProvider is a free data retrieval call binding the contract method 0xfe65acfe.
//
// Solidity: function getAddressesProvider() view returns(address)
func (_ILendingPool *ILendingPoolCallerSession) GetAddressesProvider() (common.Address, error) {
	return _ILendingPool.Contract.GetAddressesProvider(&_ILendingPool.CallOpts)
}

// GetConfiguration is a free data retrieval call binding the contract method 0xc44b11f7.
//
// Solidity: function getConfiguration(address asset) view returns((uint256))
func (_ILendingPool *ILendingPoolCaller) GetConfiguration(opts *bind.CallOpts, asset common.Address) (DataTypesReserveConfigurationMap, error) {
	var out []interface{}
	err := _ILendingPool.contract.Call(opts, &out, "getConfiguration", asset)

	if err != nil {
		return *new(DataTypesReserveConfigurationMap), err
	}

	out0 := *abi.ConvertType(out[0], new(DataTypesReserveConfigurationMap)).(*DataTypesReserveConfigurationMap)

	return out0, err

}

// GetConfiguration is a free data retrieval call binding the contract method 0xc44b11f7.
//
// Solidity: function getConfiguration(address asset) view returns((uint256))
func (_ILendingPool *ILendingPoolSession) GetConfiguration(asset common.Address) (DataTypesReserveConfigurationMap, error) {
	return _ILendingPool.Contract.GetConfiguration(&_ILendingPool.CallOpts, asset)
}

// GetConfiguration is a free data retrieval call binding the contract method 0xc44b11f7.
//
// Solidity: function getConfiguration(address asset) view returns((uint256))
func (_ILendingPool *ILendingPoolCallerSession) GetConfiguration(asset common.Address) (DataTypesReserveConfigurationMap, error) {
	return _ILendingPool.Contract.GetConfiguration(&_ILendingPool.CallOpts, asset)
}

// GetReserveData is a free data retrieval call binding the contract method 0x35ea6a75.
//
// Solidity: function getReserveData(address asset) view returns(((uint256),uint128,uint128,uint128,uint128,uint128,uint40,address,address,address,address,uint8))
func (_ILendingPool *ILendingPoolCaller) GetReserveData(opts *bind.CallOpts, asset common.Address) (DataTypesReserveData, error) {
	var out []interface{}
	err := _ILendingPool.contract.Call(opts, &out, "getReserveData", asset)

	if err != nil {
		return *new(DataTypesReserveData), err
	}

	out0 := *abi.ConvertType(out[0], new(DataTypesReserveData)).(*DataTypesReserveData)

	return out0, err

}

// GetReserveData is a free data retrieval call binding the contract method 0x35ea6a75.
//
// Solidity: function getReserveData(address asset) view returns(((uint256),uint128,uint128,uint128,uint128,uint128,uint40,address,address,address,address,uint8))
func (_ILendingPool *ILendingPoolSession) GetReserveData(asset common.Address) (DataTypesReserveData, error) {
	return _ILendingPool.Contract.GetReserveData(&_ILendingPool.CallOpts, asset)
}

// GetReserveData is a free data retrieval call binding the contract method 0x35ea6a75.
//
// Solidity: function getReserveData(address asset) view returns(((uint256),uint128,uint128,uint128,uint128,uint128,uint40,address,address,address,address,uint8))
func (_ILendingPool *ILendingPoolCallerSession) GetReserveData(asset common.Address) (DataTypesReserveData, error) {
	return _ILendingPool.Contract.GetReserveData(&_ILendingPool.CallOpts, asset)
}

// GetReserveNormalizedIncome is a free data retrieval call binding the contract method 0xd15e0053.
//
// Solidity: function getReserveNormalizedIncome(address asset) view returns(uint256)
func (_ILendingPool *ILendingPoolCaller) GetReserveNormalizedIncome(opts *bind.CallOpts, asset common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ILendingPool.contract.Call(opts, &out, "getReserveNormalizedIncome", asset)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetReserveNormalizedIncome is a free data retrieval call binding the contract method 0xd15e0053.
//
// Solidity: function getReserveNormalizedIncome(address asset) view returns(uint256)
func (_ILendingPool *ILendingPoolSession) GetReserveNormalizedIncome(asset common.Address) (*big.Int, error) {
	return _ILendingPool.Contract.GetReserveNormalizedIncome(&_ILendingPool.CallOpts, asset)
}

// GetReserveNormalizedIncome is a free data retrieval call binding the contract method 0xd15e0053.
//
// Solidity: function getReserveNormalizedIncome(address asset) view returns(uint256)
func (_ILendingPool *ILendingPoolCallerSession) GetReserveNormalizedIncome(asset common.Address) (*big.Int, error) {
	return _ILendingPool.Contract.GetReserveNormalizedIncome(&_ILendingPool.CallOpts, asset)
}

// GetReserveNormalizedVariableDebt is a free data retrieval call binding the contract method 0x386497fd.
//
// Solidity: function getReserveNormalizedVariableDebt(address asset) view returns(uint256)
func (_ILendingPool *ILendingPoolCaller) GetReserveNormalizedVariableDebt(opts *bind.CallOpts, asset common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ILendingPool.contract.Call(opts, &out, "getReserveNormalizedVariableDebt", asset)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetReserveNormalizedVariableDebt is a free data retrieval call binding the contract method 0x386497fd.
//
// Solidity: function getReserveNormalizedVariableDebt(address asset) view returns(uint256)
func (_ILendingPool *ILendingPoolSession) GetReserveNormalizedVariableDebt(asset common.Address) (*big.Int, error) {
	return _ILendingPool.Contract.GetReserveNormalizedVariableDebt(&_ILendingPool.CallOpts, asset)
}

// GetReserveNormalizedVariableDebt is a free data retrieval call binding the contract method 0x386497fd.
//
// Solidity: function getReserveNormalizedVariableDebt(address asset) view returns(uint256)
func (_ILendingPool *ILendingPoolCallerSession) GetReserveNormalizedVariableDebt(asset common.Address) (*big.Int, error) {
	return _ILendingPool.Contract.GetReserveNormalizedVariableDebt(&_ILendingPool.CallOpts, asset)
}

// GetReservesList is a free data retrieval call binding the contract method 0xd1946dbc.
//
// Solidity: function getReservesList() view returns(address[])
func (_ILendingPool *ILendingPoolCaller) GetReservesList(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _ILendingPool.contract.Call(opts, &out, "getReservesList")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetReservesList is a free data retrieval call binding the contract method 0xd1946dbc.
//
// Solidity: function getReservesList() view returns(address[])
func (_ILendingPool *ILendingPoolSession) GetReservesList() ([]common.Address, error) {
	return _ILendingPool.Contract.GetReservesList(&_ILendingPool.CallOpts)
}

// GetReservesList is a free data retrieval call binding the contract method 0xd1946dbc.
//
// Solidity: function getReservesList() view returns(address[])
func (_ILendingPool *ILendingPoolCallerSession) GetReservesList() ([]common.Address, error) {
	return _ILendingPool.Contract.GetReservesList(&_ILendingPool.CallOpts)
}

// GetUserAccountData is a free data retrieval call binding the contract method 0xbf92857c.
//
// Solidity: function getUserAccountData(address user) view returns(uint256 totalCollateralETH, uint256 totalDebtETH, uint256 availableBorrowsETH, uint256 currentLiquidationThreshold, uint256 ltv, uint256 healthFactor)
func (_ILendingPool *ILendingPoolCaller) GetUserAccountData(opts *bind.CallOpts, user common.Address) (struct {
	TotalCollateralETH          *big.Int
	TotalDebtETH                *big.Int
	AvailableBorrowsETH         *big.Int
	CurrentLiquidationThreshold *big.Int
	Ltv                         *big.Int
	HealthFactor                *big.Int
}, error) {
	var out []interface{}
	err := _ILendingPool.contract.Call(opts, &out, "getUserAccountData", user)

	outstruct := new(struct {
		TotalCollateralETH          *big.Int
		TotalDebtETH                *big.Int
		AvailableBorrowsETH         *big.Int
		CurrentLiquidationThreshold *big.Int
		Ltv                         *big.Int
		HealthFactor                *big.Int
	})

	outstruct.TotalCollateralETH = out[0].(*big.Int)
	outstruct.TotalDebtETH = out[1].(*big.Int)
	outstruct.AvailableBorrowsETH = out[2].(*big.Int)
	outstruct.CurrentLiquidationThreshold = out[3].(*big.Int)
	outstruct.Ltv = out[4].(*big.Int)
	outstruct.HealthFactor = out[5].(*big.Int)

	return *outstruct, err

}

// GetUserAccountData is a free data retrieval call binding the contract method 0xbf92857c.
//
// Solidity: function getUserAccountData(address user) view returns(uint256 totalCollateralETH, uint256 totalDebtETH, uint256 availableBorrowsETH, uint256 currentLiquidationThreshold, uint256 ltv, uint256 healthFactor)
func (_ILendingPool *ILendingPoolSession) GetUserAccountData(user common.Address) (struct {
	TotalCollateralETH          *big.Int
	TotalDebtETH                *big.Int
	AvailableBorrowsETH         *big.Int
	CurrentLiquidationThreshold *big.Int
	Ltv                         *big.Int
	HealthFactor                *big.Int
}, error) {
	return _ILendingPool.Contract.GetUserAccountData(&_ILendingPool.CallOpts, user)
}

// GetUserAccountData is a free data retrieval call binding the contract method 0xbf92857c.
//
// Solidity: function getUserAccountData(address user) view returns(uint256 totalCollateralETH, uint256 totalDebtETH, uint256 availableBorrowsETH, uint256 currentLiquidationThreshold, uint256 ltv, uint256 healthFactor)
func (_ILendingPool *ILendingPoolCallerSession) GetUserAccountData(user common.Address) (struct {
	TotalCollateralETH          *big.Int
	TotalDebtETH                *big.Int
	AvailableBorrowsETH         *big.Int
	CurrentLiquidationThreshold *big.Int
	Ltv                         *big.Int
	HealthFactor                *big.Int
}, error) {
	return _ILendingPool.Contract.GetUserAccountData(&_ILendingPool.CallOpts, user)
}

// GetUserConfiguration is a free data retrieval call binding the contract method 0x4417a583.
//
// Solidity: function getUserConfiguration(address user) view returns((uint256))
func (_ILendingPool *ILendingPoolCaller) GetUserConfiguration(opts *bind.CallOpts, user common.Address) (DataTypesUserConfigurationMap, error) {
	var out []interface{}
	err := _ILendingPool.contract.Call(opts, &out, "getUserConfiguration", user)

	if err != nil {
		return *new(DataTypesUserConfigurationMap), err
	}

	out0 := *abi.ConvertType(out[0], new(DataTypesUserConfigurationMap)).(*DataTypesUserConfigurationMap)

	return out0, err

}

// GetUserConfiguration is a free data retrieval call binding the contract method 0x4417a583.
//
// Solidity: function getUserConfiguration(address user) view returns((uint256))
func (_ILendingPool *ILendingPoolSession) GetUserConfiguration(user common.Address) (DataTypesUserConfigurationMap, error) {
	return _ILendingPool.Contract.GetUserConfiguration(&_ILendingPool.CallOpts, user)
}

// GetUserConfiguration is a free data retrieval call binding the contract method 0x4417a583.
//
// Solidity: function getUserConfiguration(address user) view returns((uint256))
func (_ILendingPool *ILendingPoolCallerSession) GetUserConfiguration(user common.Address) (DataTypesUserConfigurationMap, error) {
	return _ILendingPool.Contract.GetUserConfiguration(&_ILendingPool.CallOpts, user)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_ILendingPool *ILendingPoolCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ILendingPool.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_ILendingPool *ILendingPoolSession) Paused() (bool, error) {
	return _ILendingPool.Contract.Paused(&_ILendingPool.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_ILendingPool *ILendingPoolCallerSession) Paused() (bool, error) {
	return _ILendingPool.Contract.Paused(&_ILendingPool.CallOpts)
}

// Borrow is a paid mutator transaction binding the contract method 0xa415bcad.
//
// Solidity: function borrow(address asset, uint256 amount, uint256 interestRateMode, uint16 referralCode, address onBehalfOf) returns()
func (_ILendingPool *ILendingPoolTransactor) Borrow(opts *bind.TransactOpts, asset common.Address, amount *big.Int, interestRateMode *big.Int, referralCode uint16, onBehalfOf common.Address) (*types.Transaction, error) {
	return _ILendingPool.contract.Transact(opts, "borrow", asset, amount, interestRateMode, referralCode, onBehalfOf)
}

// Borrow is a paid mutator transaction binding the contract method 0xa415bcad.
//
// Solidity: function borrow(address asset, uint256 amount, uint256 interestRateMode, uint16 referralCode, address onBehalfOf) returns()
func (_ILendingPool *ILendingPoolSession) Borrow(asset common.Address, amount *big.Int, interestRateMode *big.Int, referralCode uint16, onBehalfOf common.Address) (*types.Transaction, error) {
	return _ILendingPool.Contract.Borrow(&_ILendingPool.TransactOpts, asset, amount, interestRateMode, referralCode, onBehalfOf)
}

// Borrow is a paid mutator transaction binding the contract method 0xa415bcad.
//
// Solidity: function borrow(address asset, uint256 amount, uint256 interestRateMode, uint16 referralCode, address onBehalfOf) returns()
func (_ILendingPool *ILendingPoolTransactorSession) Borrow(asset common.Address, amount *big.Int, interestRateMode *big.Int, referralCode uint16, onBehalfOf common.Address) (*types.Transaction, error) {
	return _ILendingPool.Contract.Borrow(&_ILendingPool.TransactOpts, asset, amount, interestRateMode, referralCode, onBehalfOf)
}

// Deposit is a paid mutator transaction binding the contract method 0xe8eda9df.
//
// Solidity: function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) returns()
func (_ILendingPool *ILendingPoolTransactor) Deposit(opts *bind.TransactOpts, asset common.Address, amount *big.Int, onBehalfOf common.Address, referralCode uint16) (*types.Transaction, error) {
	return _ILendingPool.contract.Transact(opts, "deposit", asset, amount, onBehalfOf, referralCode)
}

// Deposit is a paid mutator transaction binding the contract method 0xe8eda9df.
//
// Solidity: function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) returns()
func (_ILendingPool *ILendingPoolSession) Deposit(asset common.Address, amount *big.Int, onBehalfOf common.Address, referralCode uint16) (*types.Transaction, error) {
	return _ILendingPool.Contract.Deposit(&_ILendingPool.TransactOpts, asset, amount, onBehalfOf, referralCode)
}

// Deposit is a paid mutator transaction binding the contract method 0xe8eda9df.
//
// Solidity: function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) returns()
func (_ILendingPool *ILendingPoolTransactorSession) Deposit(asset common.Address, amount *big.Int, onBehalfOf common.Address, referralCode uint16) (*types.Transaction, error) {
	return _ILendingPool.Contract.Deposit(&_ILendingPool.TransactOpts, asset, amount, onBehalfOf, referralCode)
}

// FinalizeTransfer is a paid mutator transaction binding the contract method 0xd5ed3933.
//
// Solidity: function finalizeTransfer(address asset, address from, address to, uint256 amount, uint256 balanceFromAfter, uint256 balanceToBefore) returns()
func (_ILendingPool *ILendingPoolTransactor) FinalizeTransfer(opts *bind.TransactOpts, asset common.Address, from common.Address, to common.Address, amount *big.Int, balanceFromAfter *big.Int, balanceToBefore *big.Int) (*types.Transaction, error) {
	return _ILendingPool.contract.Transact(opts, "finalizeTransfer", asset, from, to, amount, balanceFromAfter, balanceToBefore)
}

// FinalizeTransfer is a paid mutator transaction binding the contract method 0xd5ed3933.
//
// Solidity: function finalizeTransfer(address asset, address from, address to, uint256 amount, uint256 balanceFromAfter, uint256 balanceToBefore) returns()
func (_ILendingPool *ILendingPoolSession) FinalizeTransfer(asset common.Address, from common.Address, to common.Address, amount *big.Int, balanceFromAfter *big.Int, balanceToBefore *big.Int) (*types.Transaction, error) {
	return _ILendingPool.Contract.FinalizeTransfer(&_ILendingPool.TransactOpts, asset, from, to, amount, balanceFromAfter, balanceToBefore)
}

// FinalizeTransfer is a paid mutator transaction binding the contract method 0xd5ed3933.
//
// Solidity: function finalizeTransfer(address asset, address from, address to, uint256 amount, uint256 balanceFromAfter, uint256 balanceToBefore) returns()
func (_ILendingPool *ILendingPoolTransactorSession) FinalizeTransfer(asset common.Address, from common.Address, to common.Address, amount *big.Int, balanceFromAfter *big.Int, balanceToBefore *big.Int) (*types.Transaction, error) {
	return _ILendingPool.Contract.FinalizeTransfer(&_ILendingPool.TransactOpts, asset, from, to, amount, balanceFromAfter, balanceToBefore)
}

// FlashLoan is a paid mutator transaction binding the contract method 0xab9c4b5d.
//
// Solidity: function flashLoan(address receiverAddress, address[] assets, uint256[] amounts, uint256[] modes, address onBehalfOf, bytes params, uint16 referralCode) returns()
func (_ILendingPool *ILendingPoolTransactor) FlashLoan(opts *bind.TransactOpts, receiverAddress common.Address, assets []common.Address, amounts []*big.Int, modes []*big.Int, onBehalfOf common.Address, params []byte, referralCode uint16) (*types.Transaction, error) {
	return _ILendingPool.contract.Transact(opts, "flashLoan", receiverAddress, assets, amounts, modes, onBehalfOf, params, referralCode)
}

// FlashLoan is a paid mutator transaction binding the contract method 0xab9c4b5d.
//
// Solidity: function flashLoan(address receiverAddress, address[] assets, uint256[] amounts, uint256[] modes, address onBehalfOf, bytes params, uint16 referralCode) returns()
func (_ILendingPool *ILendingPoolSession) FlashLoan(receiverAddress common.Address, assets []common.Address, amounts []*big.Int, modes []*big.Int, onBehalfOf common.Address, params []byte, referralCode uint16) (*types.Transaction, error) {
	return _ILendingPool.Contract.FlashLoan(&_ILendingPool.TransactOpts, receiverAddress, assets, amounts, modes, onBehalfOf, params, referralCode)
}

// FlashLoan is a paid mutator transaction binding the contract method 0xab9c4b5d.
//
// Solidity: function flashLoan(address receiverAddress, address[] assets, uint256[] amounts, uint256[] modes, address onBehalfOf, bytes params, uint16 referralCode) returns()
func (_ILendingPool *ILendingPoolTransactorSession) FlashLoan(receiverAddress common.Address, assets []common.Address, amounts []*big.Int, modes []*big.Int, onBehalfOf common.Address, params []byte, referralCode uint16) (*types.Transaction, error) {
	return _ILendingPool.Contract.FlashLoan(&_ILendingPool.TransactOpts, receiverAddress, assets, amounts, modes, onBehalfOf, params, referralCode)
}

// InitReserve is a paid mutator transaction binding the contract method 0x7a708e92.
//
// Solidity: function initReserve(address reserve, address aTokenAddress, address stableDebtAddress, address variableDebtAddress, address interestRateStrategyAddress) returns()
func (_ILendingPool *ILendingPoolTransactor) InitReserve(opts *bind.TransactOpts, reserve common.Address, aTokenAddress common.Address, stableDebtAddress common.Address, variableDebtAddress common.Address, interestRateStrategyAddress common.Address) (*types.Transaction, error) {
	return _ILendingPool.contract.Transact(opts, "initReserve", reserve, aTokenAddress, stableDebtAddress, variableDebtAddress, interestRateStrategyAddress)
}

// InitReserve is a paid mutator transaction binding the contract method 0x7a708e92.
//
// Solidity: function initReserve(address reserve, address aTokenAddress, address stableDebtAddress, address variableDebtAddress, address interestRateStrategyAddress) returns()
func (_ILendingPool *ILendingPoolSession) InitReserve(reserve common.Address, aTokenAddress common.Address, stableDebtAddress common.Address, variableDebtAddress common.Address, interestRateStrategyAddress common.Address) (*types.Transaction, error) {
	return _ILendingPool.Contract.InitReserve(&_ILendingPool.TransactOpts, reserve, aTokenAddress, stableDebtAddress, variableDebtAddress, interestRateStrategyAddress)
}

// InitReserve is a paid mutator transaction binding the contract method 0x7a708e92.
//
// Solidity: function initReserve(address reserve, address aTokenAddress, address stableDebtAddress, address variableDebtAddress, address interestRateStrategyAddress) returns()
func (_ILendingPool *ILendingPoolTransactorSession) InitReserve(reserve common.Address, aTokenAddress common.Address, stableDebtAddress common.Address, variableDebtAddress common.Address, interestRateStrategyAddress common.Address) (*types.Transaction, error) {
	return _ILendingPool.Contract.InitReserve(&_ILendingPool.TransactOpts, reserve, aTokenAddress, stableDebtAddress, variableDebtAddress, interestRateStrategyAddress)
}

// LiquidationCall is a paid mutator transaction binding the contract method 0x00a718a9.
//
// Solidity: function liquidationCall(address collateralAsset, address debtAsset, address user, uint256 debtToCover, bool receiveAToken) returns()
func (_ILendingPool *ILendingPoolTransactor) LiquidationCall(opts *bind.TransactOpts, collateralAsset common.Address, debtAsset common.Address, user common.Address, debtToCover *big.Int, receiveAToken bool) (*types.Transaction, error) {
	return _ILendingPool.contract.Transact(opts, "liquidationCall", collateralAsset, debtAsset, user, debtToCover, receiveAToken)
}

// LiquidationCall is a paid mutator transaction binding the contract method 0x00a718a9.
//
// Solidity: function liquidationCall(address collateralAsset, address debtAsset, address user, uint256 debtToCover, bool receiveAToken) returns()
func (_ILendingPool *ILendingPoolSession) LiquidationCall(collateralAsset common.Address, debtAsset common.Address, user common.Address, debtToCover *big.Int, receiveAToken bool) (*types.Transaction, error) {
	return _ILendingPool.Contract.LiquidationCall(&_ILendingPool.TransactOpts, collateralAsset, debtAsset, user, debtToCover, receiveAToken)
}

// LiquidationCall is a paid mutator transaction binding the contract method 0x00a718a9.
//
// Solidity: function liquidationCall(address collateralAsset, address debtAsset, address user, uint256 debtToCover, bool receiveAToken) returns()
func (_ILendingPool *ILendingPoolTransactorSession) LiquidationCall(collateralAsset common.Address, debtAsset common.Address, user common.Address, debtToCover *big.Int, receiveAToken bool) (*types.Transaction, error) {
	return _ILendingPool.Contract.LiquidationCall(&_ILendingPool.TransactOpts, collateralAsset, debtAsset, user, debtToCover, receiveAToken)
}

// RebalanceStableBorrowRate is a paid mutator transaction binding the contract method 0xcd112382.
//
// Solidity: function rebalanceStableBorrowRate(address asset, address user) returns()
func (_ILendingPool *ILendingPoolTransactor) RebalanceStableBorrowRate(opts *bind.TransactOpts, asset common.Address, user common.Address) (*types.Transaction, error) {
	return _ILendingPool.contract.Transact(opts, "rebalanceStableBorrowRate", asset, user)
}

// RebalanceStableBorrowRate is a paid mutator transaction binding the contract method 0xcd112382.
//
// Solidity: function rebalanceStableBorrowRate(address asset, address user) returns()
func (_ILendingPool *ILendingPoolSession) RebalanceStableBorrowRate(asset common.Address, user common.Address) (*types.Transaction, error) {
	return _ILendingPool.Contract.RebalanceStableBorrowRate(&_ILendingPool.TransactOpts, asset, user)
}

// RebalanceStableBorrowRate is a paid mutator transaction binding the contract method 0xcd112382.
//
// Solidity: function rebalanceStableBorrowRate(address asset, address user) returns()
func (_ILendingPool *ILendingPoolTransactorSession) RebalanceStableBorrowRate(asset common.Address, user common.Address) (*types.Transaction, error) {
	return _ILendingPool.Contract.RebalanceStableBorrowRate(&_ILendingPool.TransactOpts, asset, user)
}

// Repay is a paid mutator transaction binding the contract method 0x573ade81.
//
// Solidity: function repay(address asset, uint256 amount, uint256 rateMode, address onBehalfOf) returns(uint256)
func (_ILendingPool *ILendingPoolTransactor) Repay(opts *bind.TransactOpts, asset common.Address, amount *big.Int, rateMode *big.Int, onBehalfOf common.Address) (*types.Transaction, error) {
	return _ILendingPool.contract.Transact(opts, "repay", asset, amount, rateMode, onBehalfOf)
}

// Repay is a paid mutator transaction binding the contract method 0x573ade81.
//
// Solidity: function repay(address asset, uint256 amount, uint256 rateMode, address onBehalfOf) returns(uint256)
func (_ILendingPool *ILendingPoolSession) Repay(asset common.Address, amount *big.Int, rateMode *big.Int, onBehalfOf common.Address) (*types.Transaction, error) {
	return _ILendingPool.Contract.Repay(&_ILendingPool.TransactOpts, asset, amount, rateMode, onBehalfOf)
}

// Repay is a paid mutator transaction binding the contract method 0x573ade81.
//
// Solidity: function repay(address asset, uint256 amount, uint256 rateMode, address onBehalfOf) returns(uint256)
func (_ILendingPool *ILendingPoolTransactorSession) Repay(asset common.Address, amount *big.Int, rateMode *big.Int, onBehalfOf common.Address) (*types.Transaction, error) {
	return _ILendingPool.Contract.Repay(&_ILendingPool.TransactOpts, asset, amount, rateMode, onBehalfOf)
}

// SetConfiguration is a paid mutator transaction binding the contract method 0xb8d29276.
//
// Solidity: function setConfiguration(address reserve, uint256 configuration) returns()
func (_ILendingPool *ILendingPoolTransactor) SetConfiguration(opts *bind.TransactOpts, reserve common.Address, configuration *big.Int) (*types.Transaction, error) {
	return _ILendingPool.contract.Transact(opts, "setConfiguration", reserve, configuration)
}

// SetConfiguration is a paid mutator transaction binding the contract method 0xb8d29276.
//
// Solidity: function setConfiguration(address reserve, uint256 configuration) returns()
func (_ILendingPool *ILendingPoolSession) SetConfiguration(reserve common.Address, configuration *big.Int) (*types.Transaction, error) {
	return _ILendingPool.Contract.SetConfiguration(&_ILendingPool.TransactOpts, reserve, configuration)
}

// SetConfiguration is a paid mutator transaction binding the contract method 0xb8d29276.
//
// Solidity: function setConfiguration(address reserve, uint256 configuration) returns()
func (_ILendingPool *ILendingPoolTransactorSession) SetConfiguration(reserve common.Address, configuration *big.Int) (*types.Transaction, error) {
	return _ILendingPool.Contract.SetConfiguration(&_ILendingPool.TransactOpts, reserve, configuration)
}

// SetPause is a paid mutator transaction binding the contract method 0xbedb86fb.
//
// Solidity: function setPause(bool val) returns()
func (_ILendingPool *ILendingPoolTransactor) SetPause(opts *bind.TransactOpts, val bool) (*types.Transaction, error) {
	return _ILendingPool.contract.Transact(opts, "setPause", val)
}

// SetPause is a paid mutator transaction binding the contract method 0xbedb86fb.
//
// Solidity: function setPause(bool val) returns()
func (_ILendingPool *ILendingPoolSession) SetPause(val bool) (*types.Transaction, error) {
	return _ILendingPool.Contract.SetPause(&_ILendingPool.TransactOpts, val)
}

// SetPause is a paid mutator transaction binding the contract method 0xbedb86fb.
//
// Solidity: function setPause(bool val) returns()
func (_ILendingPool *ILendingPoolTransactorSession) SetPause(val bool) (*types.Transaction, error) {
	return _ILendingPool.Contract.SetPause(&_ILendingPool.TransactOpts, val)
}

// SetReserveInterestRateStrategyAddress is a paid mutator transaction binding the contract method 0x1d2118f9.
//
// Solidity: function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress) returns()
func (_ILendingPool *ILendingPoolTransactor) SetReserveInterestRateStrategyAddress(opts *bind.TransactOpts, reserve common.Address, rateStrategyAddress common.Address) (*types.Transaction, error) {
	return _ILendingPool.contract.Transact(opts, "setReserveInterestRateStrategyAddress", reserve, rateStrategyAddress)
}

// SetReserveInterestRateStrategyAddress is a paid mutator transaction binding the contract method 0x1d2118f9.
//
// Solidity: function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress) returns()
func (_ILendingPool *ILendingPoolSession) SetReserveInterestRateStrategyAddress(reserve common.Address, rateStrategyAddress common.Address) (*types.Transaction, error) {
	return _ILendingPool.Contract.SetReserveInterestRateStrategyAddress(&_ILendingPool.TransactOpts, reserve, rateStrategyAddress)
}

// SetReserveInterestRateStrategyAddress is a paid mutator transaction binding the contract method 0x1d2118f9.
//
// Solidity: function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress) returns()
func (_ILendingPool *ILendingPoolTransactorSession) SetReserveInterestRateStrategyAddress(reserve common.Address, rateStrategyAddress common.Address) (*types.Transaction, error) {
	return _ILendingPool.Contract.SetReserveInterestRateStrategyAddress(&_ILendingPool.TransactOpts, reserve, rateStrategyAddress)
}

// SetUserUseReserveAsCollateral is a paid mutator transaction binding the contract method 0x5a3b74b9.
//
// Solidity: function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) returns()
func (_ILendingPool *ILendingPoolTransactor) SetUserUseReserveAsCollateral(opts *bind.TransactOpts, asset common.Address, useAsCollateral bool) (*types.Transaction, error) {
	return _ILendingPool.contract.Transact(opts, "setUserUseReserveAsCollateral", asset, useAsCollateral)
}

// SetUserUseReserveAsCollateral is a paid mutator transaction binding the contract method 0x5a3b74b9.
//
// Solidity: function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) returns()
func (_ILendingPool *ILendingPoolSession) SetUserUseReserveAsCollateral(asset common.Address, useAsCollateral bool) (*types.Transaction, error) {
	return _ILendingPool.Contract.SetUserUseReserveAsCollateral(&_ILendingPool.TransactOpts, asset, useAsCollateral)
}

// SetUserUseReserveAsCollateral is a paid mutator transaction binding the contract method 0x5a3b74b9.
//
// Solidity: function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) returns()
func (_ILendingPool *ILendingPoolTransactorSession) SetUserUseReserveAsCollateral(asset common.Address, useAsCollateral bool) (*types.Transaction, error) {
	return _ILendingPool.Contract.SetUserUseReserveAsCollateral(&_ILendingPool.TransactOpts, asset, useAsCollateral)
}

// SwapBorrowRateMode is a paid mutator transaction binding the contract method 0x94ba89a2.
//
// Solidity: function swapBorrowRateMode(address asset, uint256 rateMode) returns()
func (_ILendingPool *ILendingPoolTransactor) SwapBorrowRateMode(opts *bind.TransactOpts, asset common.Address, rateMode *big.Int) (*types.Transaction, error) {
	return _ILendingPool.contract.Transact(opts, "swapBorrowRateMode", asset, rateMode)
}

// SwapBorrowRateMode is a paid mutator transaction binding the contract method 0x94ba89a2.
//
// Solidity: function swapBorrowRateMode(address asset, uint256 rateMode) returns()
func (_ILendingPool *ILendingPoolSession) SwapBorrowRateMode(asset common.Address, rateMode *big.Int) (*types.Transaction, error) {
	return _ILendingPool.Contract.SwapBorrowRateMode(&_ILendingPool.TransactOpts, asset, rateMode)
}

// SwapBorrowRateMode is a paid mutator transaction binding the contract method 0x94ba89a2.
//
// Solidity: function swapBorrowRateMode(address asset, uint256 rateMode) returns()
func (_ILendingPool *ILendingPoolTransactorSession) SwapBorrowRateMode(asset common.Address, rateMode *big.Int) (*types.Transaction, error) {
	return _ILendingPool.Contract.SwapBorrowRateMode(&_ILendingPool.TransactOpts, asset, rateMode)
}

// Withdraw is a paid mutator transaction binding the contract method 0x69328dec.
//
// Solidity: function withdraw(address asset, uint256 amount, address to) returns(uint256)
func (_ILendingPool *ILendingPoolTransactor) Withdraw(opts *bind.TransactOpts, asset common.Address, amount *big.Int, to common.Address) (*types.Transaction, error) {
	return _ILendingPool.contract.Transact(opts, "withdraw", asset, amount, to)
}

// Withdraw is a paid mutator transaction binding the contract method 0x69328dec.
//
// Solidity: function withdraw(address asset, uint256 amount, address to) returns(uint256)
func (_ILendingPool *ILendingPoolSession) Withdraw(asset common.Address, amount *big.Int, to common.Address) (*types.Transaction, error) {
	return _ILendingPool.Contract.Withdraw(&_ILendingPool.TransactOpts, asset, amount, to)
}

// Withdraw is a paid mutator transaction binding the contract method 0x69328dec.
//
// Solidity: function withdraw(address asset, uint256 amount, address to) returns(uint256)
func (_ILendingPool *ILendingPoolTransactorSession) Withdraw(asset common.Address, amount *big.Int, to common.Address) (*types.Transaction, error) {
	return _ILendingPool.Contract.Withdraw(&_ILendingPool.TransactOpts, asset, amount, to)
}

// ILendingPoolBorrowIterator is returned from FilterBorrow and is used to iterate over the raw logs and unpacked data for Borrow events raised by the ILendingPool contract.
type ILendingPoolBorrowIterator struct {
	Event *ILendingPoolBorrow // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ILendingPoolBorrowIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ILendingPoolBorrow)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ILendingPoolBorrow)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ILendingPoolBorrowIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ILendingPoolBorrowIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ILendingPoolBorrow represents a Borrow event raised by the ILendingPool contract.
type ILendingPoolBorrow struct {
	Reserve        common.Address
	User           common.Address
	OnBehalfOf     common.Address
	Amount         *big.Int
	BorrowRateMode *big.Int
	BorrowRate     *big.Int
	Referral       uint16
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterBorrow is a free log retrieval operation binding the contract event 0xc6a898309e823ee50bac64e45ca8adba6690e99e7841c45d754e2a38e9019d9b.
//
// Solidity: event Borrow(address indexed reserve, address user, address indexed onBehalfOf, uint256 amount, uint256 borrowRateMode, uint256 borrowRate, uint16 indexed referral)
func (_ILendingPool *ILendingPoolFilterer) FilterBorrow(opts *bind.FilterOpts, reserve []common.Address, onBehalfOf []common.Address, referral []uint16) (*ILendingPoolBorrowIterator, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}

	var onBehalfOfRule []interface{}
	for _, onBehalfOfItem := range onBehalfOf {
		onBehalfOfRule = append(onBehalfOfRule, onBehalfOfItem)
	}

	var referralRule []interface{}
	for _, referralItem := range referral {
		referralRule = append(referralRule, referralItem)
	}

	logs, sub, err := _ILendingPool.contract.FilterLogs(opts, "Borrow", reserveRule, onBehalfOfRule, referralRule)
	if err != nil {
		return nil, err
	}
	return &ILendingPoolBorrowIterator{contract: _ILendingPool.contract, event: "Borrow", logs: logs, sub: sub}, nil
}

// WatchBorrow is a free log subscription operation binding the contract event 0xc6a898309e823ee50bac64e45ca8adba6690e99e7841c45d754e2a38e9019d9b.
//
// Solidity: event Borrow(address indexed reserve, address user, address indexed onBehalfOf, uint256 amount, uint256 borrowRateMode, uint256 borrowRate, uint16 indexed referral)
func (_ILendingPool *ILendingPoolFilterer) WatchBorrow(opts *bind.WatchOpts, sink chan<- *ILendingPoolBorrow, reserve []common.Address, onBehalfOf []common.Address, referral []uint16) (event.Subscription, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}

	var onBehalfOfRule []interface{}
	for _, onBehalfOfItem := range onBehalfOf {
		onBehalfOfRule = append(onBehalfOfRule, onBehalfOfItem)
	}

	var referralRule []interface{}
	for _, referralItem := range referral {
		referralRule = append(referralRule, referralItem)
	}

	logs, sub, err := _ILendingPool.contract.WatchLogs(opts, "Borrow", reserveRule, onBehalfOfRule, referralRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ILendingPoolBorrow)
				if err := _ILendingPool.contract.UnpackLog(event, "Borrow", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBorrow is a log parse operation binding the contract event 0xc6a898309e823ee50bac64e45ca8adba6690e99e7841c45d754e2a38e9019d9b.
//
// Solidity: event Borrow(address indexed reserve, address user, address indexed onBehalfOf, uint256 amount, uint256 borrowRateMode, uint256 borrowRate, uint16 indexed referral)
func (_ILendingPool *ILendingPoolFilterer) ParseBorrow(log types.Log) (*ILendingPoolBorrow, error) {
	event := new(ILendingPoolBorrow)
	if err := _ILendingPool.contract.UnpackLog(event, "Borrow", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ILendingPoolDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the ILendingPool contract.
type ILendingPoolDepositIterator struct {
	Event *ILendingPoolDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ILendingPoolDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ILendingPoolDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ILendingPoolDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ILendingPoolDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ILendingPoolDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ILendingPoolDeposit represents a Deposit event raised by the ILendingPool contract.
type ILendingPoolDeposit struct {
	Reserve    common.Address
	User       common.Address
	OnBehalfOf common.Address
	Amount     *big.Int
	Referral   uint16
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0xde6857219544bb5b7746f48ed30be6386fefc61b2f864cacf559893bf50fd951.
//
// Solidity: event Deposit(address indexed reserve, address user, address indexed onBehalfOf, uint256 amount, uint16 indexed referral)
func (_ILendingPool *ILendingPoolFilterer) FilterDeposit(opts *bind.FilterOpts, reserve []common.Address, onBehalfOf []common.Address, referral []uint16) (*ILendingPoolDepositIterator, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}

	var onBehalfOfRule []interface{}
	for _, onBehalfOfItem := range onBehalfOf {
		onBehalfOfRule = append(onBehalfOfRule, onBehalfOfItem)
	}

	var referralRule []interface{}
	for _, referralItem := range referral {
		referralRule = append(referralRule, referralItem)
	}

	logs, sub, err := _ILendingPool.contract.FilterLogs(opts, "Deposit", reserveRule, onBehalfOfRule, referralRule)
	if err != nil {
		return nil, err
	}
	return &ILendingPoolDepositIterator{contract: _ILendingPool.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0xde6857219544bb5b7746f48ed30be6386fefc61b2f864cacf559893bf50fd951.
//
// Solidity: event Deposit(address indexed reserve, address user, address indexed onBehalfOf, uint256 amount, uint16 indexed referral)
func (_ILendingPool *ILendingPoolFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *ILendingPoolDeposit, reserve []common.Address, onBehalfOf []common.Address, referral []uint16) (event.Subscription, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}

	var onBehalfOfRule []interface{}
	for _, onBehalfOfItem := range onBehalfOf {
		onBehalfOfRule = append(onBehalfOfRule, onBehalfOfItem)
	}

	var referralRule []interface{}
	for _, referralItem := range referral {
		referralRule = append(referralRule, referralItem)
	}

	logs, sub, err := _ILendingPool.contract.WatchLogs(opts, "Deposit", reserveRule, onBehalfOfRule, referralRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ILendingPoolDeposit)
				if err := _ILendingPool.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0xde6857219544bb5b7746f48ed30be6386fefc61b2f864cacf559893bf50fd951.
//
// Solidity: event Deposit(address indexed reserve, address user, address indexed onBehalfOf, uint256 amount, uint16 indexed referral)
func (_ILendingPool *ILendingPoolFilterer) ParseDeposit(log types.Log) (*ILendingPoolDeposit, error) {
	event := new(ILendingPoolDeposit)
	if err := _ILendingPool.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ILendingPoolFlashLoanIterator is returned from FilterFlashLoan and is used to iterate over the raw logs and unpacked data for FlashLoan events raised by the ILendingPool contract.
type ILendingPoolFlashLoanIterator struct {
	Event *ILendingPoolFlashLoan // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ILendingPoolFlashLoanIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ILendingPoolFlashLoan)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ILendingPoolFlashLoan)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ILendingPoolFlashLoanIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ILendingPoolFlashLoanIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ILendingPoolFlashLoan represents a FlashLoan event raised by the ILendingPool contract.
type ILendingPoolFlashLoan struct {
	Target       common.Address
	Initiator    common.Address
	Asset        common.Address
	Amount       *big.Int
	Premium      *big.Int
	ReferralCode uint16
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterFlashLoan is a free log retrieval operation binding the contract event 0x631042c832b07452973831137f2d73e395028b44b250dedc5abb0ee766e168ac.
//
// Solidity: event FlashLoan(address indexed target, address indexed initiator, address indexed asset, uint256 amount, uint256 premium, uint16 referralCode)
func (_ILendingPool *ILendingPoolFilterer) FilterFlashLoan(opts *bind.FilterOpts, target []common.Address, initiator []common.Address, asset []common.Address) (*ILendingPoolFlashLoanIterator, error) {

	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}
	var initiatorRule []interface{}
	for _, initiatorItem := range initiator {
		initiatorRule = append(initiatorRule, initiatorItem)
	}
	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}

	logs, sub, err := _ILendingPool.contract.FilterLogs(opts, "FlashLoan", targetRule, initiatorRule, assetRule)
	if err != nil {
		return nil, err
	}
	return &ILendingPoolFlashLoanIterator{contract: _ILendingPool.contract, event: "FlashLoan", logs: logs, sub: sub}, nil
}

// WatchFlashLoan is a free log subscription operation binding the contract event 0x631042c832b07452973831137f2d73e395028b44b250dedc5abb0ee766e168ac.
//
// Solidity: event FlashLoan(address indexed target, address indexed initiator, address indexed asset, uint256 amount, uint256 premium, uint16 referralCode)
func (_ILendingPool *ILendingPoolFilterer) WatchFlashLoan(opts *bind.WatchOpts, sink chan<- *ILendingPoolFlashLoan, target []common.Address, initiator []common.Address, asset []common.Address) (event.Subscription, error) {

	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}
	var initiatorRule []interface{}
	for _, initiatorItem := range initiator {
		initiatorRule = append(initiatorRule, initiatorItem)
	}
	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}

	logs, sub, err := _ILendingPool.contract.WatchLogs(opts, "FlashLoan", targetRule, initiatorRule, assetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ILendingPoolFlashLoan)
				if err := _ILendingPool.contract.UnpackLog(event, "FlashLoan", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFlashLoan is a log parse operation binding the contract event 0x631042c832b07452973831137f2d73e395028b44b250dedc5abb0ee766e168ac.
//
// Solidity: event FlashLoan(address indexed target, address indexed initiator, address indexed asset, uint256 amount, uint256 premium, uint16 referralCode)
func (_ILendingPool *ILendingPoolFilterer) ParseFlashLoan(log types.Log) (*ILendingPoolFlashLoan, error) {
	event := new(ILendingPoolFlashLoan)
	if err := _ILendingPool.contract.UnpackLog(event, "FlashLoan", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ILendingPoolLiquidationCallIterator is returned from FilterLiquidationCall and is used to iterate over the raw logs and unpacked data for LiquidationCall events raised by the ILendingPool contract.
type ILendingPoolLiquidationCallIterator struct {
	Event *ILendingPoolLiquidationCall // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ILendingPoolLiquidationCallIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ILendingPoolLiquidationCall)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ILendingPoolLiquidationCall)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ILendingPoolLiquidationCallIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ILendingPoolLiquidationCallIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ILendingPoolLiquidationCall represents a LiquidationCall event raised by the ILendingPool contract.
type ILendingPoolLiquidationCall struct {
	CollateralAsset            common.Address
	DebtAsset                  common.Address
	User                       common.Address
	DebtToCover                *big.Int
	LiquidatedCollateralAmount *big.Int
	Liquidator                 common.Address
	ReceiveAToken              bool
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterLiquidationCall is a free log retrieval operation binding the contract event 0xe413a321e8681d831f4dbccbca790d2952b56f977908e45be37335533e005286.
//
// Solidity: event LiquidationCall(address indexed collateralAsset, address indexed debtAsset, address indexed user, uint256 debtToCover, uint256 liquidatedCollateralAmount, address liquidator, bool receiveAToken)
func (_ILendingPool *ILendingPoolFilterer) FilterLiquidationCall(opts *bind.FilterOpts, collateralAsset []common.Address, debtAsset []common.Address, user []common.Address) (*ILendingPoolLiquidationCallIterator, error) {

	var collateralAssetRule []interface{}
	for _, collateralAssetItem := range collateralAsset {
		collateralAssetRule = append(collateralAssetRule, collateralAssetItem)
	}
	var debtAssetRule []interface{}
	for _, debtAssetItem := range debtAsset {
		debtAssetRule = append(debtAssetRule, debtAssetItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _ILendingPool.contract.FilterLogs(opts, "LiquidationCall", collateralAssetRule, debtAssetRule, userRule)
	if err != nil {
		return nil, err
	}
	return &ILendingPoolLiquidationCallIterator{contract: _ILendingPool.contract, event: "LiquidationCall", logs: logs, sub: sub}, nil
}

// WatchLiquidationCall is a free log subscription operation binding the contract event 0xe413a321e8681d831f4dbccbca790d2952b56f977908e45be37335533e005286.
//
// Solidity: event LiquidationCall(address indexed collateralAsset, address indexed debtAsset, address indexed user, uint256 debtToCover, uint256 liquidatedCollateralAmount, address liquidator, bool receiveAToken)
func (_ILendingPool *ILendingPoolFilterer) WatchLiquidationCall(opts *bind.WatchOpts, sink chan<- *ILendingPoolLiquidationCall, collateralAsset []common.Address, debtAsset []common.Address, user []common.Address) (event.Subscription, error) {

	var collateralAssetRule []interface{}
	for _, collateralAssetItem := range collateralAsset {
		collateralAssetRule = append(collateralAssetRule, collateralAssetItem)
	}
	var debtAssetRule []interface{}
	for _, debtAssetItem := range debtAsset {
		debtAssetRule = append(debtAssetRule, debtAssetItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _ILendingPool.contract.WatchLogs(opts, "LiquidationCall", collateralAssetRule, debtAssetRule, userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ILendingPoolLiquidationCall)
				if err := _ILendingPool.contract.UnpackLog(event, "LiquidationCall", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLiquidationCall is a log parse operation binding the contract event 0xe413a321e8681d831f4dbccbca790d2952b56f977908e45be37335533e005286.
//
// Solidity: event LiquidationCall(address indexed collateralAsset, address indexed debtAsset, address indexed user, uint256 debtToCover, uint256 liquidatedCollateralAmount, address liquidator, bool receiveAToken)
func (_ILendingPool *ILendingPoolFilterer) ParseLiquidationCall(log types.Log) (*ILendingPoolLiquidationCall, error) {
	event := new(ILendingPoolLiquidationCall)
	if err := _ILendingPool.contract.UnpackLog(event, "LiquidationCall", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ILendingPoolPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the ILendingPool contract.
type ILendingPoolPausedIterator struct {
	Event *ILendingPoolPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ILendingPoolPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ILendingPoolPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ILendingPoolPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ILendingPoolPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ILendingPoolPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ILendingPoolPaused represents a Paused event raised by the ILendingPool contract.
type ILendingPoolPaused struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x9e87fac88ff661f02d44f95383c817fece4bce600a3dab7a54406878b965e752.
//
// Solidity: event Paused()
func (_ILendingPool *ILendingPoolFilterer) FilterPaused(opts *bind.FilterOpts) (*ILendingPoolPausedIterator, error) {

	logs, sub, err := _ILendingPool.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &ILendingPoolPausedIterator{contract: _ILendingPool.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x9e87fac88ff661f02d44f95383c817fece4bce600a3dab7a54406878b965e752.
//
// Solidity: event Paused()
func (_ILendingPool *ILendingPoolFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *ILendingPoolPaused) (event.Subscription, error) {

	logs, sub, err := _ILendingPool.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ILendingPoolPaused)
				if err := _ILendingPool.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x9e87fac88ff661f02d44f95383c817fece4bce600a3dab7a54406878b965e752.
//
// Solidity: event Paused()
func (_ILendingPool *ILendingPoolFilterer) ParsePaused(log types.Log) (*ILendingPoolPaused, error) {
	event := new(ILendingPoolPaused)
	if err := _ILendingPool.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ILendingPoolRebalanceStableBorrowRateIterator is returned from FilterRebalanceStableBorrowRate and is used to iterate over the raw logs and unpacked data for RebalanceStableBorrowRate events raised by the ILendingPool contract.
type ILendingPoolRebalanceStableBorrowRateIterator struct {
	Event *ILendingPoolRebalanceStableBorrowRate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ILendingPoolRebalanceStableBorrowRateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ILendingPoolRebalanceStableBorrowRate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ILendingPoolRebalanceStableBorrowRate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ILendingPoolRebalanceStableBorrowRateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ILendingPoolRebalanceStableBorrowRateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ILendingPoolRebalanceStableBorrowRate represents a RebalanceStableBorrowRate event raised by the ILendingPool contract.
type ILendingPoolRebalanceStableBorrowRate struct {
	Reserve common.Address
	User    common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRebalanceStableBorrowRate is a free log retrieval operation binding the contract event 0x9f439ae0c81e41a04d3fdfe07aed54e6a179fb0db15be7702eb66fa8ef6f5300.
//
// Solidity: event RebalanceStableBorrowRate(address indexed reserve, address indexed user)
func (_ILendingPool *ILendingPoolFilterer) FilterRebalanceStableBorrowRate(opts *bind.FilterOpts, reserve []common.Address, user []common.Address) (*ILendingPoolRebalanceStableBorrowRateIterator, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _ILendingPool.contract.FilterLogs(opts, "RebalanceStableBorrowRate", reserveRule, userRule)
	if err != nil {
		return nil, err
	}
	return &ILendingPoolRebalanceStableBorrowRateIterator{contract: _ILendingPool.contract, event: "RebalanceStableBorrowRate", logs: logs, sub: sub}, nil
}

// WatchRebalanceStableBorrowRate is a free log subscription operation binding the contract event 0x9f439ae0c81e41a04d3fdfe07aed54e6a179fb0db15be7702eb66fa8ef6f5300.
//
// Solidity: event RebalanceStableBorrowRate(address indexed reserve, address indexed user)
func (_ILendingPool *ILendingPoolFilterer) WatchRebalanceStableBorrowRate(opts *bind.WatchOpts, sink chan<- *ILendingPoolRebalanceStableBorrowRate, reserve []common.Address, user []common.Address) (event.Subscription, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _ILendingPool.contract.WatchLogs(opts, "RebalanceStableBorrowRate", reserveRule, userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ILendingPoolRebalanceStableBorrowRate)
				if err := _ILendingPool.contract.UnpackLog(event, "RebalanceStableBorrowRate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRebalanceStableBorrowRate is a log parse operation binding the contract event 0x9f439ae0c81e41a04d3fdfe07aed54e6a179fb0db15be7702eb66fa8ef6f5300.
//
// Solidity: event RebalanceStableBorrowRate(address indexed reserve, address indexed user)
func (_ILendingPool *ILendingPoolFilterer) ParseRebalanceStableBorrowRate(log types.Log) (*ILendingPoolRebalanceStableBorrowRate, error) {
	event := new(ILendingPoolRebalanceStableBorrowRate)
	if err := _ILendingPool.contract.UnpackLog(event, "RebalanceStableBorrowRate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ILendingPoolRepayIterator is returned from FilterRepay and is used to iterate over the raw logs and unpacked data for Repay events raised by the ILendingPool contract.
type ILendingPoolRepayIterator struct {
	Event *ILendingPoolRepay // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ILendingPoolRepayIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ILendingPoolRepay)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ILendingPoolRepay)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ILendingPoolRepayIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ILendingPoolRepayIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ILendingPoolRepay represents a Repay event raised by the ILendingPool contract.
type ILendingPoolRepay struct {
	Reserve common.Address
	User    common.Address
	Repayer common.Address
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRepay is a free log retrieval operation binding the contract event 0x4cdde6e09bb755c9a5589ebaec640bbfedff1362d4b255ebf8339782b9942faa.
//
// Solidity: event Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount)
func (_ILendingPool *ILendingPoolFilterer) FilterRepay(opts *bind.FilterOpts, reserve []common.Address, user []common.Address, repayer []common.Address) (*ILendingPoolRepayIterator, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repayerRule []interface{}
	for _, repayerItem := range repayer {
		repayerRule = append(repayerRule, repayerItem)
	}

	logs, sub, err := _ILendingPool.contract.FilterLogs(opts, "Repay", reserveRule, userRule, repayerRule)
	if err != nil {
		return nil, err
	}
	return &ILendingPoolRepayIterator{contract: _ILendingPool.contract, event: "Repay", logs: logs, sub: sub}, nil
}

// WatchRepay is a free log subscription operation binding the contract event 0x4cdde6e09bb755c9a5589ebaec640bbfedff1362d4b255ebf8339782b9942faa.
//
// Solidity: event Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount)
func (_ILendingPool *ILendingPoolFilterer) WatchRepay(opts *bind.WatchOpts, sink chan<- *ILendingPoolRepay, reserve []common.Address, user []common.Address, repayer []common.Address) (event.Subscription, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repayerRule []interface{}
	for _, repayerItem := range repayer {
		repayerRule = append(repayerRule, repayerItem)
	}

	logs, sub, err := _ILendingPool.contract.WatchLogs(opts, "Repay", reserveRule, userRule, repayerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ILendingPoolRepay)
				if err := _ILendingPool.contract.UnpackLog(event, "Repay", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRepay is a log parse operation binding the contract event 0x4cdde6e09bb755c9a5589ebaec640bbfedff1362d4b255ebf8339782b9942faa.
//
// Solidity: event Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount)
func (_ILendingPool *ILendingPoolFilterer) ParseRepay(log types.Log) (*ILendingPoolRepay, error) {
	event := new(ILendingPoolRepay)
	if err := _ILendingPool.contract.UnpackLog(event, "Repay", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ILendingPoolReserveDataUpdatedIterator is returned from FilterReserveDataUpdated and is used to iterate over the raw logs and unpacked data for ReserveDataUpdated events raised by the ILendingPool contract.
type ILendingPoolReserveDataUpdatedIterator struct {
	Event *ILendingPoolReserveDataUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ILendingPoolReserveDataUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ILendingPoolReserveDataUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ILendingPoolReserveDataUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ILendingPoolReserveDataUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ILendingPoolReserveDataUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ILendingPoolReserveDataUpdated represents a ReserveDataUpdated event raised by the ILendingPool contract.
type ILendingPoolReserveDataUpdated struct {
	Reserve             common.Address
	LiquidityRate       *big.Int
	StableBorrowRate    *big.Int
	VariableBorrowRate  *big.Int
	LiquidityIndex      *big.Int
	VariableBorrowIndex *big.Int
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterReserveDataUpdated is a free log retrieval operation binding the contract event 0x804c9b842b2748a22bb64b345453a3de7ca54a6ca45ce00d415894979e22897a.
//
// Solidity: event ReserveDataUpdated(address indexed reserve, uint256 liquidityRate, uint256 stableBorrowRate, uint256 variableBorrowRate, uint256 liquidityIndex, uint256 variableBorrowIndex)
func (_ILendingPool *ILendingPoolFilterer) FilterReserveDataUpdated(opts *bind.FilterOpts, reserve []common.Address) (*ILendingPoolReserveDataUpdatedIterator, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}

	logs, sub, err := _ILendingPool.contract.FilterLogs(opts, "ReserveDataUpdated", reserveRule)
	if err != nil {
		return nil, err
	}
	return &ILendingPoolReserveDataUpdatedIterator{contract: _ILendingPool.contract, event: "ReserveDataUpdated", logs: logs, sub: sub}, nil
}

// WatchReserveDataUpdated is a free log subscription operation binding the contract event 0x804c9b842b2748a22bb64b345453a3de7ca54a6ca45ce00d415894979e22897a.
//
// Solidity: event ReserveDataUpdated(address indexed reserve, uint256 liquidityRate, uint256 stableBorrowRate, uint256 variableBorrowRate, uint256 liquidityIndex, uint256 variableBorrowIndex)
func (_ILendingPool *ILendingPoolFilterer) WatchReserveDataUpdated(opts *bind.WatchOpts, sink chan<- *ILendingPoolReserveDataUpdated, reserve []common.Address) (event.Subscription, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}

	logs, sub, err := _ILendingPool.contract.WatchLogs(opts, "ReserveDataUpdated", reserveRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ILendingPoolReserveDataUpdated)
				if err := _ILendingPool.contract.UnpackLog(event, "ReserveDataUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReserveDataUpdated is a log parse operation binding the contract event 0x804c9b842b2748a22bb64b345453a3de7ca54a6ca45ce00d415894979e22897a.
//
// Solidity: event ReserveDataUpdated(address indexed reserve, uint256 liquidityRate, uint256 stableBorrowRate, uint256 variableBorrowRate, uint256 liquidityIndex, uint256 variableBorrowIndex)
func (_ILendingPool *ILendingPoolFilterer) ParseReserveDataUpdated(log types.Log) (*ILendingPoolReserveDataUpdated, error) {
	event := new(ILendingPoolReserveDataUpdated)
	if err := _ILendingPool.contract.UnpackLog(event, "ReserveDataUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ILendingPoolReserveUsedAsCollateralDisabledIterator is returned from FilterReserveUsedAsCollateralDisabled and is used to iterate over the raw logs and unpacked data for ReserveUsedAsCollateralDisabled events raised by the ILendingPool contract.
type ILendingPoolReserveUsedAsCollateralDisabledIterator struct {
	Event *ILendingPoolReserveUsedAsCollateralDisabled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ILendingPoolReserveUsedAsCollateralDisabledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ILendingPoolReserveUsedAsCollateralDisabled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ILendingPoolReserveUsedAsCollateralDisabled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ILendingPoolReserveUsedAsCollateralDisabledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ILendingPoolReserveUsedAsCollateralDisabledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ILendingPoolReserveUsedAsCollateralDisabled represents a ReserveUsedAsCollateralDisabled event raised by the ILendingPool contract.
type ILendingPoolReserveUsedAsCollateralDisabled struct {
	Reserve common.Address
	User    common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterReserveUsedAsCollateralDisabled is a free log retrieval operation binding the contract event 0x44c58d81365b66dd4b1a7f36c25aa97b8c71c361ee4937adc1a00000227db5dd.
//
// Solidity: event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user)
func (_ILendingPool *ILendingPoolFilterer) FilterReserveUsedAsCollateralDisabled(opts *bind.FilterOpts, reserve []common.Address, user []common.Address) (*ILendingPoolReserveUsedAsCollateralDisabledIterator, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _ILendingPool.contract.FilterLogs(opts, "ReserveUsedAsCollateralDisabled", reserveRule, userRule)
	if err != nil {
		return nil, err
	}
	return &ILendingPoolReserveUsedAsCollateralDisabledIterator{contract: _ILendingPool.contract, event: "ReserveUsedAsCollateralDisabled", logs: logs, sub: sub}, nil
}

// WatchReserveUsedAsCollateralDisabled is a free log subscription operation binding the contract event 0x44c58d81365b66dd4b1a7f36c25aa97b8c71c361ee4937adc1a00000227db5dd.
//
// Solidity: event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user)
func (_ILendingPool *ILendingPoolFilterer) WatchReserveUsedAsCollateralDisabled(opts *bind.WatchOpts, sink chan<- *ILendingPoolReserveUsedAsCollateralDisabled, reserve []common.Address, user []common.Address) (event.Subscription, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _ILendingPool.contract.WatchLogs(opts, "ReserveUsedAsCollateralDisabled", reserveRule, userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ILendingPoolReserveUsedAsCollateralDisabled)
				if err := _ILendingPool.contract.UnpackLog(event, "ReserveUsedAsCollateralDisabled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReserveUsedAsCollateralDisabled is a log parse operation binding the contract event 0x44c58d81365b66dd4b1a7f36c25aa97b8c71c361ee4937adc1a00000227db5dd.
//
// Solidity: event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user)
func (_ILendingPool *ILendingPoolFilterer) ParseReserveUsedAsCollateralDisabled(log types.Log) (*ILendingPoolReserveUsedAsCollateralDisabled, error) {
	event := new(ILendingPoolReserveUsedAsCollateralDisabled)
	if err := _ILendingPool.contract.UnpackLog(event, "ReserveUsedAsCollateralDisabled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ILendingPoolReserveUsedAsCollateralEnabledIterator is returned from FilterReserveUsedAsCollateralEnabled and is used to iterate over the raw logs and unpacked data for ReserveUsedAsCollateralEnabled events raised by the ILendingPool contract.
type ILendingPoolReserveUsedAsCollateralEnabledIterator struct {
	Event *ILendingPoolReserveUsedAsCollateralEnabled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ILendingPoolReserveUsedAsCollateralEnabledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ILendingPoolReserveUsedAsCollateralEnabled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ILendingPoolReserveUsedAsCollateralEnabled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ILendingPoolReserveUsedAsCollateralEnabledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ILendingPoolReserveUsedAsCollateralEnabledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ILendingPoolReserveUsedAsCollateralEnabled represents a ReserveUsedAsCollateralEnabled event raised by the ILendingPool contract.
type ILendingPoolReserveUsedAsCollateralEnabled struct {
	Reserve common.Address
	User    common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterReserveUsedAsCollateralEnabled is a free log retrieval operation binding the contract event 0x00058a56ea94653cdf4f152d227ace22d4c00ad99e2a43f58cb7d9e3feb295f2.
//
// Solidity: event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user)
func (_ILendingPool *ILendingPoolFilterer) FilterReserveUsedAsCollateralEnabled(opts *bind.FilterOpts, reserve []common.Address, user []common.Address) (*ILendingPoolReserveUsedAsCollateralEnabledIterator, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _ILendingPool.contract.FilterLogs(opts, "ReserveUsedAsCollateralEnabled", reserveRule, userRule)
	if err != nil {
		return nil, err
	}
	return &ILendingPoolReserveUsedAsCollateralEnabledIterator{contract: _ILendingPool.contract, event: "ReserveUsedAsCollateralEnabled", logs: logs, sub: sub}, nil
}

// WatchReserveUsedAsCollateralEnabled is a free log subscription operation binding the contract event 0x00058a56ea94653cdf4f152d227ace22d4c00ad99e2a43f58cb7d9e3feb295f2.
//
// Solidity: event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user)
func (_ILendingPool *ILendingPoolFilterer) WatchReserveUsedAsCollateralEnabled(opts *bind.WatchOpts, sink chan<- *ILendingPoolReserveUsedAsCollateralEnabled, reserve []common.Address, user []common.Address) (event.Subscription, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _ILendingPool.contract.WatchLogs(opts, "ReserveUsedAsCollateralEnabled", reserveRule, userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ILendingPoolReserveUsedAsCollateralEnabled)
				if err := _ILendingPool.contract.UnpackLog(event, "ReserveUsedAsCollateralEnabled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReserveUsedAsCollateralEnabled is a log parse operation binding the contract event 0x00058a56ea94653cdf4f152d227ace22d4c00ad99e2a43f58cb7d9e3feb295f2.
//
// Solidity: event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user)
func (_ILendingPool *ILendingPoolFilterer) ParseReserveUsedAsCollateralEnabled(log types.Log) (*ILendingPoolReserveUsedAsCollateralEnabled, error) {
	event := new(ILendingPoolReserveUsedAsCollateralEnabled)
	if err := _ILendingPool.contract.UnpackLog(event, "ReserveUsedAsCollateralEnabled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ILendingPoolSwapIterator is returned from FilterSwap and is used to iterate over the raw logs and unpacked data for Swap events raised by the ILendingPool contract.
type ILendingPoolSwapIterator struct {
	Event *ILendingPoolSwap // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ILendingPoolSwapIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ILendingPoolSwap)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ILendingPoolSwap)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ILendingPoolSwapIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ILendingPoolSwapIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ILendingPoolSwap represents a Swap event raised by the ILendingPool contract.
type ILendingPoolSwap struct {
	Reserve  common.Address
	User     common.Address
	RateMode *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSwap is a free log retrieval operation binding the contract event 0xea368a40e9570069bb8e6511d668293ad2e1f03b0d982431fd223de9f3b70ca6.
//
// Solidity: event Swap(address indexed reserve, address indexed user, uint256 rateMode)
func (_ILendingPool *ILendingPoolFilterer) FilterSwap(opts *bind.FilterOpts, reserve []common.Address, user []common.Address) (*ILendingPoolSwapIterator, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _ILendingPool.contract.FilterLogs(opts, "Swap", reserveRule, userRule)
	if err != nil {
		return nil, err
	}
	return &ILendingPoolSwapIterator{contract: _ILendingPool.contract, event: "Swap", logs: logs, sub: sub}, nil
}

// WatchSwap is a free log subscription operation binding the contract event 0xea368a40e9570069bb8e6511d668293ad2e1f03b0d982431fd223de9f3b70ca6.
//
// Solidity: event Swap(address indexed reserve, address indexed user, uint256 rateMode)
func (_ILendingPool *ILendingPoolFilterer) WatchSwap(opts *bind.WatchOpts, sink chan<- *ILendingPoolSwap, reserve []common.Address, user []common.Address) (event.Subscription, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _ILendingPool.contract.WatchLogs(opts, "Swap", reserveRule, userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ILendingPoolSwap)
				if err := _ILendingPool.contract.UnpackLog(event, "Swap", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSwap is a log parse operation binding the contract event 0xea368a40e9570069bb8e6511d668293ad2e1f03b0d982431fd223de9f3b70ca6.
//
// Solidity: event Swap(address indexed reserve, address indexed user, uint256 rateMode)
func (_ILendingPool *ILendingPoolFilterer) ParseSwap(log types.Log) (*ILendingPoolSwap, error) {
	event := new(ILendingPoolSwap)
	if err := _ILendingPool.contract.UnpackLog(event, "Swap", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ILendingPoolUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the ILendingPool contract.
type ILendingPoolUnpausedIterator struct {
	Event *ILendingPoolUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ILendingPoolUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ILendingPoolUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ILendingPoolUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ILendingPoolUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ILendingPoolUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ILendingPoolUnpaused represents a Unpaused event raised by the ILendingPool contract.
type ILendingPoolUnpaused struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0xa45f47fdea8a1efdd9029a5691c7f759c32b7c698632b563573e155625d16933.
//
// Solidity: event Unpaused()
func (_ILendingPool *ILendingPoolFilterer) FilterUnpaused(opts *bind.FilterOpts) (*ILendingPoolUnpausedIterator, error) {

	logs, sub, err := _ILendingPool.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &ILendingPoolUnpausedIterator{contract: _ILendingPool.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0xa45f47fdea8a1efdd9029a5691c7f759c32b7c698632b563573e155625d16933.
//
// Solidity: event Unpaused()
func (_ILendingPool *ILendingPoolFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *ILendingPoolUnpaused) (event.Subscription, error) {

	logs, sub, err := _ILendingPool.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ILendingPoolUnpaused)
				if err := _ILendingPool.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0xa45f47fdea8a1efdd9029a5691c7f759c32b7c698632b563573e155625d16933.
//
// Solidity: event Unpaused()
func (_ILendingPool *ILendingPoolFilterer) ParseUnpaused(log types.Log) (*ILendingPoolUnpaused, error) {
	event := new(ILendingPoolUnpaused)
	if err := _ILendingPool.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ILendingPoolWithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the ILendingPool contract.
type ILendingPoolWithdrawIterator struct {
	Event *ILendingPoolWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ILendingPoolWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ILendingPoolWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ILendingPoolWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ILendingPoolWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ILendingPoolWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ILendingPoolWithdraw represents a Withdraw event raised by the ILendingPool contract.
type ILendingPoolWithdraw struct {
	Reserve common.Address
	User    common.Address
	To      common.Address
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterWithdraw is a free log retrieval operation binding the contract event 0x3115d1449a7b732c986cba18244e897a450f61e1bb8d589cd2e69e6c8924f9f7.
//
// Solidity: event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount)
func (_ILendingPool *ILendingPoolFilterer) FilterWithdraw(opts *bind.FilterOpts, reserve []common.Address, user []common.Address, to []common.Address) (*ILendingPoolWithdrawIterator, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ILendingPool.contract.FilterLogs(opts, "Withdraw", reserveRule, userRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ILendingPoolWithdrawIterator{contract: _ILendingPool.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

// WatchWithdraw is a free log subscription operation binding the contract event 0x3115d1449a7b732c986cba18244e897a450f61e1bb8d589cd2e69e6c8924f9f7.
//
// Solidity: event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount)
func (_ILendingPool *ILendingPoolFilterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *ILendingPoolWithdraw, reserve []common.Address, user []common.Address, to []common.Address) (event.Subscription, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ILendingPool.contract.WatchLogs(opts, "Withdraw", reserveRule, userRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ILendingPoolWithdraw)
				if err := _ILendingPool.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdraw is a log parse operation binding the contract event 0x3115d1449a7b732c986cba18244e897a450f61e1bb8d589cd2e69e6c8924f9f7.
//
// Solidity: event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount)
func (_ILendingPool *ILendingPoolFilterer) ParseWithdraw(log types.Log) (*ILendingPoolWithdraw, error) {
	event := new(ILendingPoolWithdraw)
	if err := _ILendingPool.contract.UnpackLog(event, "Withdraw", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ILendingPoolAddressesProviderABI is the input ABI used to generate the binding from.
const ILendingPoolAddressesProviderABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"hasProxy\",\"type\":\"bool\"}],\"name\":\"AddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"ConfigurationAdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"EmergencyAdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"LendingPoolCollateralManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"LendingPoolConfiguratorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"LendingPoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"LendingRateOracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newMarketId\",\"type\":\"string\"}],\"name\":\"MarketIdSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"PriceOracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"ProxyCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEmergencyAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLendingPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLendingPoolCollateralManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLendingPoolConfigurator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLendingRateOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"name\":\"setAddressAsProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"setEmergencyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"setLendingPoolCollateralManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"configurator\",\"type\":\"address\"}],\"name\":\"setLendingPoolConfiguratorImpl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"setLendingPoolImpl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lendingRateOracle\",\"type\":\"address\"}],\"name\":\"setLendingRateOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"marketId\",\"type\":\"string\"}],\"name\":\"setMarketId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"setPoolAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceOracle\",\"type\":\"address\"}],\"name\":\"setPriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ILendingPoolAddressesProvider is an auto generated Go binding around an Ethereum contract.
type ILendingPoolAddressesProvider struct {
	ILendingPoolAddressesProviderCaller     // Read-only binding to the contract
	ILendingPoolAddressesProviderTransactor // Write-only binding to the contract
	ILendingPoolAddressesProviderFilterer   // Log filterer for contract events
}

// ILendingPoolAddressesProviderCaller is an auto generated read-only Go binding around an Ethereum contract.
type ILendingPoolAddressesProviderCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ILendingPoolAddressesProviderTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ILendingPoolAddressesProviderTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ILendingPoolAddressesProviderFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ILendingPoolAddressesProviderFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ILendingPoolAddressesProviderSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ILendingPoolAddressesProviderSession struct {
	Contract     *ILendingPoolAddressesProvider // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                  // Call options to use throughout this session
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// ILendingPoolAddressesProviderCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ILendingPoolAddressesProviderCallerSession struct {
	Contract *ILendingPoolAddressesProviderCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                        // Call options to use throughout this session
}

// ILendingPoolAddressesProviderTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ILendingPoolAddressesProviderTransactorSession struct {
	Contract     *ILendingPoolAddressesProviderTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                        // Transaction auth options to use throughout this session
}

// ILendingPoolAddressesProviderRaw is an auto generated low-level Go binding around an Ethereum contract.
type ILendingPoolAddressesProviderRaw struct {
	Contract *ILendingPoolAddressesProvider // Generic contract binding to access the raw methods on
}

// ILendingPoolAddressesProviderCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ILendingPoolAddressesProviderCallerRaw struct {
	Contract *ILendingPoolAddressesProviderCaller // Generic read-only contract binding to access the raw methods on
}

// ILendingPoolAddressesProviderTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ILendingPoolAddressesProviderTransactorRaw struct {
	Contract *ILendingPoolAddressesProviderTransactor // Generic write-only contract binding to access the raw methods on
}

// NewILendingPoolAddressesProvider creates a new instance of ILendingPoolAddressesProvider, bound to a specific deployed contract.
func NewILendingPoolAddressesProvider(address common.Address, backend bind.ContractBackend) (*ILendingPoolAddressesProvider, error) {
	contract, err := bindILendingPoolAddressesProvider(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ILendingPoolAddressesProvider{ILendingPoolAddressesProviderCaller: ILendingPoolAddressesProviderCaller{contract: contract}, ILendingPoolAddressesProviderTransactor: ILendingPoolAddressesProviderTransactor{contract: contract}, ILendingPoolAddressesProviderFilterer: ILendingPoolAddressesProviderFilterer{contract: contract}}, nil
}

// NewILendingPoolAddressesProviderCaller creates a new read-only instance of ILendingPoolAddressesProvider, bound to a specific deployed contract.
func NewILendingPoolAddressesProviderCaller(address common.Address, caller bind.ContractCaller) (*ILendingPoolAddressesProviderCaller, error) {
	contract, err := bindILendingPoolAddressesProvider(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ILendingPoolAddressesProviderCaller{contract: contract}, nil
}

// NewILendingPoolAddressesProviderTransactor creates a new write-only instance of ILendingPoolAddressesProvider, bound to a specific deployed contract.
func NewILendingPoolAddressesProviderTransactor(address common.Address, transactor bind.ContractTransactor) (*ILendingPoolAddressesProviderTransactor, error) {
	contract, err := bindILendingPoolAddressesProvider(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ILendingPoolAddressesProviderTransactor{contract: contract}, nil
}

// NewILendingPoolAddressesProviderFilterer creates a new log filterer instance of ILendingPoolAddressesProvider, bound to a specific deployed contract.
func NewILendingPoolAddressesProviderFilterer(address common.Address, filterer bind.ContractFilterer) (*ILendingPoolAddressesProviderFilterer, error) {
	contract, err := bindILendingPoolAddressesProvider(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ILendingPoolAddressesProviderFilterer{contract: contract}, nil
}

// bindILendingPoolAddressesProvider binds a generic wrapper to an already deployed contract.
func bindILendingPoolAddressesProvider(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ILendingPoolAddressesProviderABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ILendingPoolAddressesProvider.Contract.ILendingPoolAddressesProviderCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ILendingPoolAddressesProvider.Contract.ILendingPoolAddressesProviderTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ILendingPoolAddressesProvider.Contract.ILendingPoolAddressesProviderTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ILendingPoolAddressesProvider.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ILendingPoolAddressesProvider.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ILendingPoolAddressesProvider.Contract.contract.Transact(opts, method, params...)
}

// GetAddress is a free data retrieval call binding the contract method 0x21f8a721.
//
// Solidity: function getAddress(bytes32 id) view returns(address)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderCaller) GetAddress(opts *bind.CallOpts, id [32]byte) (common.Address, error) {
	var out []interface{}
	err := _ILendingPoolAddressesProvider.contract.Call(opts, &out, "getAddress", id)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAddress is a free data retrieval call binding the contract method 0x21f8a721.
//
// Solidity: function getAddress(bytes32 id) view returns(address)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderSession) GetAddress(id [32]byte) (common.Address, error) {
	return _ILendingPoolAddressesProvider.Contract.GetAddress(&_ILendingPoolAddressesProvider.CallOpts, id)
}

// GetAddress is a free data retrieval call binding the contract method 0x21f8a721.
//
// Solidity: function getAddress(bytes32 id) view returns(address)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderCallerSession) GetAddress(id [32]byte) (common.Address, error) {
	return _ILendingPoolAddressesProvider.Contract.GetAddress(&_ILendingPoolAddressesProvider.CallOpts, id)
}

// GetEmergencyAdmin is a free data retrieval call binding the contract method 0xddcaa9ea.
//
// Solidity: function getEmergencyAdmin() view returns(address)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderCaller) GetEmergencyAdmin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ILendingPoolAddressesProvider.contract.Call(opts, &out, "getEmergencyAdmin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetEmergencyAdmin is a free data retrieval call binding the contract method 0xddcaa9ea.
//
// Solidity: function getEmergencyAdmin() view returns(address)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderSession) GetEmergencyAdmin() (common.Address, error) {
	return _ILendingPoolAddressesProvider.Contract.GetEmergencyAdmin(&_ILendingPoolAddressesProvider.CallOpts)
}

// GetEmergencyAdmin is a free data retrieval call binding the contract method 0xddcaa9ea.
//
// Solidity: function getEmergencyAdmin() view returns(address)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderCallerSession) GetEmergencyAdmin() (common.Address, error) {
	return _ILendingPoolAddressesProvider.Contract.GetEmergencyAdmin(&_ILendingPoolAddressesProvider.CallOpts)
}

// GetLendingPool is a free data retrieval call binding the contract method 0x0261bf8b.
//
// Solidity: function getLendingPool() view returns(address)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderCaller) GetLendingPool(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ILendingPoolAddressesProvider.contract.Call(opts, &out, "getLendingPool")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetLendingPool is a free data retrieval call binding the contract method 0x0261bf8b.
//
// Solidity: function getLendingPool() view returns(address)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderSession) GetLendingPool() (common.Address, error) {
	return _ILendingPoolAddressesProvider.Contract.GetLendingPool(&_ILendingPoolAddressesProvider.CallOpts)
}

// GetLendingPool is a free data retrieval call binding the contract method 0x0261bf8b.
//
// Solidity: function getLendingPool() view returns(address)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderCallerSession) GetLendingPool() (common.Address, error) {
	return _ILendingPoolAddressesProvider.Contract.GetLendingPool(&_ILendingPoolAddressesProvider.CallOpts)
}

// GetLendingPoolCollateralManager is a free data retrieval call binding the contract method 0x712d9171.
//
// Solidity: function getLendingPoolCollateralManager() view returns(address)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderCaller) GetLendingPoolCollateralManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ILendingPoolAddressesProvider.contract.Call(opts, &out, "getLendingPoolCollateralManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetLendingPoolCollateralManager is a free data retrieval call binding the contract method 0x712d9171.
//
// Solidity: function getLendingPoolCollateralManager() view returns(address)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderSession) GetLendingPoolCollateralManager() (common.Address, error) {
	return _ILendingPoolAddressesProvider.Contract.GetLendingPoolCollateralManager(&_ILendingPoolAddressesProvider.CallOpts)
}

// GetLendingPoolCollateralManager is a free data retrieval call binding the contract method 0x712d9171.
//
// Solidity: function getLendingPoolCollateralManager() view returns(address)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderCallerSession) GetLendingPoolCollateralManager() (common.Address, error) {
	return _ILendingPoolAddressesProvider.Contract.GetLendingPoolCollateralManager(&_ILendingPoolAddressesProvider.CallOpts)
}

// GetLendingPoolConfigurator is a free data retrieval call binding the contract method 0x85c858b1.
//
// Solidity: function getLendingPoolConfigurator() view returns(address)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderCaller) GetLendingPoolConfigurator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ILendingPoolAddressesProvider.contract.Call(opts, &out, "getLendingPoolConfigurator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetLendingPoolConfigurator is a free data retrieval call binding the contract method 0x85c858b1.
//
// Solidity: function getLendingPoolConfigurator() view returns(address)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderSession) GetLendingPoolConfigurator() (common.Address, error) {
	return _ILendingPoolAddressesProvider.Contract.GetLendingPoolConfigurator(&_ILendingPoolAddressesProvider.CallOpts)
}

// GetLendingPoolConfigurator is a free data retrieval call binding the contract method 0x85c858b1.
//
// Solidity: function getLendingPoolConfigurator() view returns(address)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderCallerSession) GetLendingPoolConfigurator() (common.Address, error) {
	return _ILendingPoolAddressesProvider.Contract.GetLendingPoolConfigurator(&_ILendingPoolAddressesProvider.CallOpts)
}

// GetLendingRateOracle is a free data retrieval call binding the contract method 0x3618abba.
//
// Solidity: function getLendingRateOracle() view returns(address)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderCaller) GetLendingRateOracle(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ILendingPoolAddressesProvider.contract.Call(opts, &out, "getLendingRateOracle")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetLendingRateOracle is a free data retrieval call binding the contract method 0x3618abba.
//
// Solidity: function getLendingRateOracle() view returns(address)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderSession) GetLendingRateOracle() (common.Address, error) {
	return _ILendingPoolAddressesProvider.Contract.GetLendingRateOracle(&_ILendingPoolAddressesProvider.CallOpts)
}

// GetLendingRateOracle is a free data retrieval call binding the contract method 0x3618abba.
//
// Solidity: function getLendingRateOracle() view returns(address)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderCallerSession) GetLendingRateOracle() (common.Address, error) {
	return _ILendingPoolAddressesProvider.Contract.GetLendingRateOracle(&_ILendingPoolAddressesProvider.CallOpts)
}

// GetMarketId is a free data retrieval call binding the contract method 0x568ef470.
//
// Solidity: function getMarketId() view returns(string)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderCaller) GetMarketId(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ILendingPoolAddressesProvider.contract.Call(opts, &out, "getMarketId")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetMarketId is a free data retrieval call binding the contract method 0x568ef470.
//
// Solidity: function getMarketId() view returns(string)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderSession) GetMarketId() (string, error) {
	return _ILendingPoolAddressesProvider.Contract.GetMarketId(&_ILendingPoolAddressesProvider.CallOpts)
}

// GetMarketId is a free data retrieval call binding the contract method 0x568ef470.
//
// Solidity: function getMarketId() view returns(string)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderCallerSession) GetMarketId() (string, error) {
	return _ILendingPoolAddressesProvider.Contract.GetMarketId(&_ILendingPoolAddressesProvider.CallOpts)
}

// GetPoolAdmin is a free data retrieval call binding the contract method 0xaecda378.
//
// Solidity: function getPoolAdmin() view returns(address)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderCaller) GetPoolAdmin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ILendingPoolAddressesProvider.contract.Call(opts, &out, "getPoolAdmin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetPoolAdmin is a free data retrieval call binding the contract method 0xaecda378.
//
// Solidity: function getPoolAdmin() view returns(address)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderSession) GetPoolAdmin() (common.Address, error) {
	return _ILendingPoolAddressesProvider.Contract.GetPoolAdmin(&_ILendingPoolAddressesProvider.CallOpts)
}

// GetPoolAdmin is a free data retrieval call binding the contract method 0xaecda378.
//
// Solidity: function getPoolAdmin() view returns(address)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderCallerSession) GetPoolAdmin() (common.Address, error) {
	return _ILendingPoolAddressesProvider.Contract.GetPoolAdmin(&_ILendingPoolAddressesProvider.CallOpts)
}

// GetPriceOracle is a free data retrieval call binding the contract method 0xfca513a8.
//
// Solidity: function getPriceOracle() view returns(address)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderCaller) GetPriceOracle(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ILendingPoolAddressesProvider.contract.Call(opts, &out, "getPriceOracle")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetPriceOracle is a free data retrieval call binding the contract method 0xfca513a8.
//
// Solidity: function getPriceOracle() view returns(address)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderSession) GetPriceOracle() (common.Address, error) {
	return _ILendingPoolAddressesProvider.Contract.GetPriceOracle(&_ILendingPoolAddressesProvider.CallOpts)
}

// GetPriceOracle is a free data retrieval call binding the contract method 0xfca513a8.
//
// Solidity: function getPriceOracle() view returns(address)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderCallerSession) GetPriceOracle() (common.Address, error) {
	return _ILendingPoolAddressesProvider.Contract.GetPriceOracle(&_ILendingPoolAddressesProvider.CallOpts)
}

// SetAddress is a paid mutator transaction binding the contract method 0xca446dd9.
//
// Solidity: function setAddress(bytes32 id, address newAddress) returns()
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderTransactor) SetAddress(opts *bind.TransactOpts, id [32]byte, newAddress common.Address) (*types.Transaction, error) {
	return _ILendingPoolAddressesProvider.contract.Transact(opts, "setAddress", id, newAddress)
}

// SetAddress is a paid mutator transaction binding the contract method 0xca446dd9.
//
// Solidity: function setAddress(bytes32 id, address newAddress) returns()
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderSession) SetAddress(id [32]byte, newAddress common.Address) (*types.Transaction, error) {
	return _ILendingPoolAddressesProvider.Contract.SetAddress(&_ILendingPoolAddressesProvider.TransactOpts, id, newAddress)
}

// SetAddress is a paid mutator transaction binding the contract method 0xca446dd9.
//
// Solidity: function setAddress(bytes32 id, address newAddress) returns()
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderTransactorSession) SetAddress(id [32]byte, newAddress common.Address) (*types.Transaction, error) {
	return _ILendingPoolAddressesProvider.Contract.SetAddress(&_ILendingPoolAddressesProvider.TransactOpts, id, newAddress)
}

// SetAddressAsProxy is a paid mutator transaction binding the contract method 0x5dcc528c.
//
// Solidity: function setAddressAsProxy(bytes32 id, address impl) returns()
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderTransactor) SetAddressAsProxy(opts *bind.TransactOpts, id [32]byte, impl common.Address) (*types.Transaction, error) {
	return _ILendingPoolAddressesProvider.contract.Transact(opts, "setAddressAsProxy", id, impl)
}

// SetAddressAsProxy is a paid mutator transaction binding the contract method 0x5dcc528c.
//
// Solidity: function setAddressAsProxy(bytes32 id, address impl) returns()
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderSession) SetAddressAsProxy(id [32]byte, impl common.Address) (*types.Transaction, error) {
	return _ILendingPoolAddressesProvider.Contract.SetAddressAsProxy(&_ILendingPoolAddressesProvider.TransactOpts, id, impl)
}

// SetAddressAsProxy is a paid mutator transaction binding the contract method 0x5dcc528c.
//
// Solidity: function setAddressAsProxy(bytes32 id, address impl) returns()
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderTransactorSession) SetAddressAsProxy(id [32]byte, impl common.Address) (*types.Transaction, error) {
	return _ILendingPoolAddressesProvider.Contract.SetAddressAsProxy(&_ILendingPoolAddressesProvider.TransactOpts, id, impl)
}

// SetEmergencyAdmin is a paid mutator transaction binding the contract method 0x35da3394.
//
// Solidity: function setEmergencyAdmin(address admin) returns()
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderTransactor) SetEmergencyAdmin(opts *bind.TransactOpts, admin common.Address) (*types.Transaction, error) {
	return _ILendingPoolAddressesProvider.contract.Transact(opts, "setEmergencyAdmin", admin)
}

// SetEmergencyAdmin is a paid mutator transaction binding the contract method 0x35da3394.
//
// Solidity: function setEmergencyAdmin(address admin) returns()
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderSession) SetEmergencyAdmin(admin common.Address) (*types.Transaction, error) {
	return _ILendingPoolAddressesProvider.Contract.SetEmergencyAdmin(&_ILendingPoolAddressesProvider.TransactOpts, admin)
}

// SetEmergencyAdmin is a paid mutator transaction binding the contract method 0x35da3394.
//
// Solidity: function setEmergencyAdmin(address admin) returns()
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderTransactorSession) SetEmergencyAdmin(admin common.Address) (*types.Transaction, error) {
	return _ILendingPoolAddressesProvider.Contract.SetEmergencyAdmin(&_ILendingPoolAddressesProvider.TransactOpts, admin)
}

// SetLendingPoolCollateralManager is a paid mutator transaction binding the contract method 0x398e5553.
//
// Solidity: function setLendingPoolCollateralManager(address manager) returns()
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderTransactor) SetLendingPoolCollateralManager(opts *bind.TransactOpts, manager common.Address) (*types.Transaction, error) {
	return _ILendingPoolAddressesProvider.contract.Transact(opts, "setLendingPoolCollateralManager", manager)
}

// SetLendingPoolCollateralManager is a paid mutator transaction binding the contract method 0x398e5553.
//
// Solidity: function setLendingPoolCollateralManager(address manager) returns()
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderSession) SetLendingPoolCollateralManager(manager common.Address) (*types.Transaction, error) {
	return _ILendingPoolAddressesProvider.Contract.SetLendingPoolCollateralManager(&_ILendingPoolAddressesProvider.TransactOpts, manager)
}

// SetLendingPoolCollateralManager is a paid mutator transaction binding the contract method 0x398e5553.
//
// Solidity: function setLendingPoolCollateralManager(address manager) returns()
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderTransactorSession) SetLendingPoolCollateralManager(manager common.Address) (*types.Transaction, error) {
	return _ILendingPoolAddressesProvider.Contract.SetLendingPoolCollateralManager(&_ILendingPoolAddressesProvider.TransactOpts, manager)
}

// SetLendingPoolConfiguratorImpl is a paid mutator transaction binding the contract method 0xc12542df.
//
// Solidity: function setLendingPoolConfiguratorImpl(address configurator) returns()
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderTransactor) SetLendingPoolConfiguratorImpl(opts *bind.TransactOpts, configurator common.Address) (*types.Transaction, error) {
	return _ILendingPoolAddressesProvider.contract.Transact(opts, "setLendingPoolConfiguratorImpl", configurator)
}

// SetLendingPoolConfiguratorImpl is a paid mutator transaction binding the contract method 0xc12542df.
//
// Solidity: function setLendingPoolConfiguratorImpl(address configurator) returns()
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderSession) SetLendingPoolConfiguratorImpl(configurator common.Address) (*types.Transaction, error) {
	return _ILendingPoolAddressesProvider.Contract.SetLendingPoolConfiguratorImpl(&_ILendingPoolAddressesProvider.TransactOpts, configurator)
}

// SetLendingPoolConfiguratorImpl is a paid mutator transaction binding the contract method 0xc12542df.
//
// Solidity: function setLendingPoolConfiguratorImpl(address configurator) returns()
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderTransactorSession) SetLendingPoolConfiguratorImpl(configurator common.Address) (*types.Transaction, error) {
	return _ILendingPoolAddressesProvider.Contract.SetLendingPoolConfiguratorImpl(&_ILendingPoolAddressesProvider.TransactOpts, configurator)
}

// SetLendingPoolImpl is a paid mutator transaction binding the contract method 0x5aef021f.
//
// Solidity: function setLendingPoolImpl(address pool) returns()
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderTransactor) SetLendingPoolImpl(opts *bind.TransactOpts, pool common.Address) (*types.Transaction, error) {
	return _ILendingPoolAddressesProvider.contract.Transact(opts, "setLendingPoolImpl", pool)
}

// SetLendingPoolImpl is a paid mutator transaction binding the contract method 0x5aef021f.
//
// Solidity: function setLendingPoolImpl(address pool) returns()
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderSession) SetLendingPoolImpl(pool common.Address) (*types.Transaction, error) {
	return _ILendingPoolAddressesProvider.Contract.SetLendingPoolImpl(&_ILendingPoolAddressesProvider.TransactOpts, pool)
}

// SetLendingPoolImpl is a paid mutator transaction binding the contract method 0x5aef021f.
//
// Solidity: function setLendingPoolImpl(address pool) returns()
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderTransactorSession) SetLendingPoolImpl(pool common.Address) (*types.Transaction, error) {
	return _ILendingPoolAddressesProvider.Contract.SetLendingPoolImpl(&_ILendingPoolAddressesProvider.TransactOpts, pool)
}

// SetLendingRateOracle is a paid mutator transaction binding the contract method 0x820d1274.
//
// Solidity: function setLendingRateOracle(address lendingRateOracle) returns()
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderTransactor) SetLendingRateOracle(opts *bind.TransactOpts, lendingRateOracle common.Address) (*types.Transaction, error) {
	return _ILendingPoolAddressesProvider.contract.Transact(opts, "setLendingRateOracle", lendingRateOracle)
}

// SetLendingRateOracle is a paid mutator transaction binding the contract method 0x820d1274.
//
// Solidity: function setLendingRateOracle(address lendingRateOracle) returns()
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderSession) SetLendingRateOracle(lendingRateOracle common.Address) (*types.Transaction, error) {
	return _ILendingPoolAddressesProvider.Contract.SetLendingRateOracle(&_ILendingPoolAddressesProvider.TransactOpts, lendingRateOracle)
}

// SetLendingRateOracle is a paid mutator transaction binding the contract method 0x820d1274.
//
// Solidity: function setLendingRateOracle(address lendingRateOracle) returns()
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderTransactorSession) SetLendingRateOracle(lendingRateOracle common.Address) (*types.Transaction, error) {
	return _ILendingPoolAddressesProvider.Contract.SetLendingRateOracle(&_ILendingPoolAddressesProvider.TransactOpts, lendingRateOracle)
}

// SetMarketId is a paid mutator transaction binding the contract method 0xf67b1847.
//
// Solidity: function setMarketId(string marketId) returns()
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderTransactor) SetMarketId(opts *bind.TransactOpts, marketId string) (*types.Transaction, error) {
	return _ILendingPoolAddressesProvider.contract.Transact(opts, "setMarketId", marketId)
}

// SetMarketId is a paid mutator transaction binding the contract method 0xf67b1847.
//
// Solidity: function setMarketId(string marketId) returns()
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderSession) SetMarketId(marketId string) (*types.Transaction, error) {
	return _ILendingPoolAddressesProvider.Contract.SetMarketId(&_ILendingPoolAddressesProvider.TransactOpts, marketId)
}

// SetMarketId is a paid mutator transaction binding the contract method 0xf67b1847.
//
// Solidity: function setMarketId(string marketId) returns()
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderTransactorSession) SetMarketId(marketId string) (*types.Transaction, error) {
	return _ILendingPoolAddressesProvider.Contract.SetMarketId(&_ILendingPoolAddressesProvider.TransactOpts, marketId)
}

// SetPoolAdmin is a paid mutator transaction binding the contract method 0x283d62ad.
//
// Solidity: function setPoolAdmin(address admin) returns()
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderTransactor) SetPoolAdmin(opts *bind.TransactOpts, admin common.Address) (*types.Transaction, error) {
	return _ILendingPoolAddressesProvider.contract.Transact(opts, "setPoolAdmin", admin)
}

// SetPoolAdmin is a paid mutator transaction binding the contract method 0x283d62ad.
//
// Solidity: function setPoolAdmin(address admin) returns()
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderSession) SetPoolAdmin(admin common.Address) (*types.Transaction, error) {
	return _ILendingPoolAddressesProvider.Contract.SetPoolAdmin(&_ILendingPoolAddressesProvider.TransactOpts, admin)
}

// SetPoolAdmin is a paid mutator transaction binding the contract method 0x283d62ad.
//
// Solidity: function setPoolAdmin(address admin) returns()
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderTransactorSession) SetPoolAdmin(admin common.Address) (*types.Transaction, error) {
	return _ILendingPoolAddressesProvider.Contract.SetPoolAdmin(&_ILendingPoolAddressesProvider.TransactOpts, admin)
}

// SetPriceOracle is a paid mutator transaction binding the contract method 0x530e784f.
//
// Solidity: function setPriceOracle(address priceOracle) returns()
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderTransactor) SetPriceOracle(opts *bind.TransactOpts, priceOracle common.Address) (*types.Transaction, error) {
	return _ILendingPoolAddressesProvider.contract.Transact(opts, "setPriceOracle", priceOracle)
}

// SetPriceOracle is a paid mutator transaction binding the contract method 0x530e784f.
//
// Solidity: function setPriceOracle(address priceOracle) returns()
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderSession) SetPriceOracle(priceOracle common.Address) (*types.Transaction, error) {
	return _ILendingPoolAddressesProvider.Contract.SetPriceOracle(&_ILendingPoolAddressesProvider.TransactOpts, priceOracle)
}

// SetPriceOracle is a paid mutator transaction binding the contract method 0x530e784f.
//
// Solidity: function setPriceOracle(address priceOracle) returns()
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderTransactorSession) SetPriceOracle(priceOracle common.Address) (*types.Transaction, error) {
	return _ILendingPoolAddressesProvider.Contract.SetPriceOracle(&_ILendingPoolAddressesProvider.TransactOpts, priceOracle)
}

// ILendingPoolAddressesProviderAddressSetIterator is returned from FilterAddressSet and is used to iterate over the raw logs and unpacked data for AddressSet events raised by the ILendingPoolAddressesProvider contract.
type ILendingPoolAddressesProviderAddressSetIterator struct {
	Event *ILendingPoolAddressesProviderAddressSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ILendingPoolAddressesProviderAddressSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ILendingPoolAddressesProviderAddressSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ILendingPoolAddressesProviderAddressSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ILendingPoolAddressesProviderAddressSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ILendingPoolAddressesProviderAddressSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ILendingPoolAddressesProviderAddressSet represents a AddressSet event raised by the ILendingPoolAddressesProvider contract.
type ILendingPoolAddressesProviderAddressSet struct {
	Id         [32]byte
	NewAddress common.Address
	HasProxy   bool
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterAddressSet is a free log retrieval operation binding the contract event 0xf2689d5d5cd0c639e137642cae5d40afced201a1a0327e7ac9358461dc9fff31.
//
// Solidity: event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderFilterer) FilterAddressSet(opts *bind.FilterOpts, newAddress []common.Address) (*ILendingPoolAddressesProviderAddressSetIterator, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _ILendingPoolAddressesProvider.contract.FilterLogs(opts, "AddressSet", newAddressRule)
	if err != nil {
		return nil, err
	}
	return &ILendingPoolAddressesProviderAddressSetIterator{contract: _ILendingPoolAddressesProvider.contract, event: "AddressSet", logs: logs, sub: sub}, nil
}

// WatchAddressSet is a free log subscription operation binding the contract event 0xf2689d5d5cd0c639e137642cae5d40afced201a1a0327e7ac9358461dc9fff31.
//
// Solidity: event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderFilterer) WatchAddressSet(opts *bind.WatchOpts, sink chan<- *ILendingPoolAddressesProviderAddressSet, newAddress []common.Address) (event.Subscription, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _ILendingPoolAddressesProvider.contract.WatchLogs(opts, "AddressSet", newAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ILendingPoolAddressesProviderAddressSet)
				if err := _ILendingPoolAddressesProvider.contract.UnpackLog(event, "AddressSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddressSet is a log parse operation binding the contract event 0xf2689d5d5cd0c639e137642cae5d40afced201a1a0327e7ac9358461dc9fff31.
//
// Solidity: event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderFilterer) ParseAddressSet(log types.Log) (*ILendingPoolAddressesProviderAddressSet, error) {
	event := new(ILendingPoolAddressesProviderAddressSet)
	if err := _ILendingPoolAddressesProvider.contract.UnpackLog(event, "AddressSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ILendingPoolAddressesProviderConfigurationAdminUpdatedIterator is returned from FilterConfigurationAdminUpdated and is used to iterate over the raw logs and unpacked data for ConfigurationAdminUpdated events raised by the ILendingPoolAddressesProvider contract.
type ILendingPoolAddressesProviderConfigurationAdminUpdatedIterator struct {
	Event *ILendingPoolAddressesProviderConfigurationAdminUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ILendingPoolAddressesProviderConfigurationAdminUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ILendingPoolAddressesProviderConfigurationAdminUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ILendingPoolAddressesProviderConfigurationAdminUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ILendingPoolAddressesProviderConfigurationAdminUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ILendingPoolAddressesProviderConfigurationAdminUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ILendingPoolAddressesProviderConfigurationAdminUpdated represents a ConfigurationAdminUpdated event raised by the ILendingPoolAddressesProvider contract.
type ILendingPoolAddressesProviderConfigurationAdminUpdated struct {
	NewAddress common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterConfigurationAdminUpdated is a free log retrieval operation binding the contract event 0xc20a317155a9e7d84e06b716b4b355d47742ab9f8c5d630e7f556553f582430d.
//
// Solidity: event ConfigurationAdminUpdated(address indexed newAddress)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderFilterer) FilterConfigurationAdminUpdated(opts *bind.FilterOpts, newAddress []common.Address) (*ILendingPoolAddressesProviderConfigurationAdminUpdatedIterator, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _ILendingPoolAddressesProvider.contract.FilterLogs(opts, "ConfigurationAdminUpdated", newAddressRule)
	if err != nil {
		return nil, err
	}
	return &ILendingPoolAddressesProviderConfigurationAdminUpdatedIterator{contract: _ILendingPoolAddressesProvider.contract, event: "ConfigurationAdminUpdated", logs: logs, sub: sub}, nil
}

// WatchConfigurationAdminUpdated is a free log subscription operation binding the contract event 0xc20a317155a9e7d84e06b716b4b355d47742ab9f8c5d630e7f556553f582430d.
//
// Solidity: event ConfigurationAdminUpdated(address indexed newAddress)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderFilterer) WatchConfigurationAdminUpdated(opts *bind.WatchOpts, sink chan<- *ILendingPoolAddressesProviderConfigurationAdminUpdated, newAddress []common.Address) (event.Subscription, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _ILendingPoolAddressesProvider.contract.WatchLogs(opts, "ConfigurationAdminUpdated", newAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ILendingPoolAddressesProviderConfigurationAdminUpdated)
				if err := _ILendingPoolAddressesProvider.contract.UnpackLog(event, "ConfigurationAdminUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseConfigurationAdminUpdated is a log parse operation binding the contract event 0xc20a317155a9e7d84e06b716b4b355d47742ab9f8c5d630e7f556553f582430d.
//
// Solidity: event ConfigurationAdminUpdated(address indexed newAddress)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderFilterer) ParseConfigurationAdminUpdated(log types.Log) (*ILendingPoolAddressesProviderConfigurationAdminUpdated, error) {
	event := new(ILendingPoolAddressesProviderConfigurationAdminUpdated)
	if err := _ILendingPoolAddressesProvider.contract.UnpackLog(event, "ConfigurationAdminUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ILendingPoolAddressesProviderEmergencyAdminUpdatedIterator is returned from FilterEmergencyAdminUpdated and is used to iterate over the raw logs and unpacked data for EmergencyAdminUpdated events raised by the ILendingPoolAddressesProvider contract.
type ILendingPoolAddressesProviderEmergencyAdminUpdatedIterator struct {
	Event *ILendingPoolAddressesProviderEmergencyAdminUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ILendingPoolAddressesProviderEmergencyAdminUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ILendingPoolAddressesProviderEmergencyAdminUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ILendingPoolAddressesProviderEmergencyAdminUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ILendingPoolAddressesProviderEmergencyAdminUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ILendingPoolAddressesProviderEmergencyAdminUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ILendingPoolAddressesProviderEmergencyAdminUpdated represents a EmergencyAdminUpdated event raised by the ILendingPoolAddressesProvider contract.
type ILendingPoolAddressesProviderEmergencyAdminUpdated struct {
	NewAddress common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterEmergencyAdminUpdated is a free log retrieval operation binding the contract event 0xe19673fc861bfeb894cf2d6b7662505497ef31c0f489b742db24ee3310826916.
//
// Solidity: event EmergencyAdminUpdated(address indexed newAddress)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderFilterer) FilterEmergencyAdminUpdated(opts *bind.FilterOpts, newAddress []common.Address) (*ILendingPoolAddressesProviderEmergencyAdminUpdatedIterator, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _ILendingPoolAddressesProvider.contract.FilterLogs(opts, "EmergencyAdminUpdated", newAddressRule)
	if err != nil {
		return nil, err
	}
	return &ILendingPoolAddressesProviderEmergencyAdminUpdatedIterator{contract: _ILendingPoolAddressesProvider.contract, event: "EmergencyAdminUpdated", logs: logs, sub: sub}, nil
}

// WatchEmergencyAdminUpdated is a free log subscription operation binding the contract event 0xe19673fc861bfeb894cf2d6b7662505497ef31c0f489b742db24ee3310826916.
//
// Solidity: event EmergencyAdminUpdated(address indexed newAddress)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderFilterer) WatchEmergencyAdminUpdated(opts *bind.WatchOpts, sink chan<- *ILendingPoolAddressesProviderEmergencyAdminUpdated, newAddress []common.Address) (event.Subscription, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _ILendingPoolAddressesProvider.contract.WatchLogs(opts, "EmergencyAdminUpdated", newAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ILendingPoolAddressesProviderEmergencyAdminUpdated)
				if err := _ILendingPoolAddressesProvider.contract.UnpackLog(event, "EmergencyAdminUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEmergencyAdminUpdated is a log parse operation binding the contract event 0xe19673fc861bfeb894cf2d6b7662505497ef31c0f489b742db24ee3310826916.
//
// Solidity: event EmergencyAdminUpdated(address indexed newAddress)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderFilterer) ParseEmergencyAdminUpdated(log types.Log) (*ILendingPoolAddressesProviderEmergencyAdminUpdated, error) {
	event := new(ILendingPoolAddressesProviderEmergencyAdminUpdated)
	if err := _ILendingPoolAddressesProvider.contract.UnpackLog(event, "EmergencyAdminUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ILendingPoolAddressesProviderLendingPoolCollateralManagerUpdatedIterator is returned from FilterLendingPoolCollateralManagerUpdated and is used to iterate over the raw logs and unpacked data for LendingPoolCollateralManagerUpdated events raised by the ILendingPoolAddressesProvider contract.
type ILendingPoolAddressesProviderLendingPoolCollateralManagerUpdatedIterator struct {
	Event *ILendingPoolAddressesProviderLendingPoolCollateralManagerUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ILendingPoolAddressesProviderLendingPoolCollateralManagerUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ILendingPoolAddressesProviderLendingPoolCollateralManagerUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ILendingPoolAddressesProviderLendingPoolCollateralManagerUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ILendingPoolAddressesProviderLendingPoolCollateralManagerUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ILendingPoolAddressesProviderLendingPoolCollateralManagerUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ILendingPoolAddressesProviderLendingPoolCollateralManagerUpdated represents a LendingPoolCollateralManagerUpdated event raised by the ILendingPoolAddressesProvider contract.
type ILendingPoolAddressesProviderLendingPoolCollateralManagerUpdated struct {
	NewAddress common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterLendingPoolCollateralManagerUpdated is a free log retrieval operation binding the contract event 0x991888326f0eab3df6084aadb82bee6781b5c9aa75379e8bc50ae86934541638.
//
// Solidity: event LendingPoolCollateralManagerUpdated(address indexed newAddress)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderFilterer) FilterLendingPoolCollateralManagerUpdated(opts *bind.FilterOpts, newAddress []common.Address) (*ILendingPoolAddressesProviderLendingPoolCollateralManagerUpdatedIterator, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _ILendingPoolAddressesProvider.contract.FilterLogs(opts, "LendingPoolCollateralManagerUpdated", newAddressRule)
	if err != nil {
		return nil, err
	}
	return &ILendingPoolAddressesProviderLendingPoolCollateralManagerUpdatedIterator{contract: _ILendingPoolAddressesProvider.contract, event: "LendingPoolCollateralManagerUpdated", logs: logs, sub: sub}, nil
}

// WatchLendingPoolCollateralManagerUpdated is a free log subscription operation binding the contract event 0x991888326f0eab3df6084aadb82bee6781b5c9aa75379e8bc50ae86934541638.
//
// Solidity: event LendingPoolCollateralManagerUpdated(address indexed newAddress)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderFilterer) WatchLendingPoolCollateralManagerUpdated(opts *bind.WatchOpts, sink chan<- *ILendingPoolAddressesProviderLendingPoolCollateralManagerUpdated, newAddress []common.Address) (event.Subscription, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _ILendingPoolAddressesProvider.contract.WatchLogs(opts, "LendingPoolCollateralManagerUpdated", newAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ILendingPoolAddressesProviderLendingPoolCollateralManagerUpdated)
				if err := _ILendingPoolAddressesProvider.contract.UnpackLog(event, "LendingPoolCollateralManagerUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLendingPoolCollateralManagerUpdated is a log parse operation binding the contract event 0x991888326f0eab3df6084aadb82bee6781b5c9aa75379e8bc50ae86934541638.
//
// Solidity: event LendingPoolCollateralManagerUpdated(address indexed newAddress)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderFilterer) ParseLendingPoolCollateralManagerUpdated(log types.Log) (*ILendingPoolAddressesProviderLendingPoolCollateralManagerUpdated, error) {
	event := new(ILendingPoolAddressesProviderLendingPoolCollateralManagerUpdated)
	if err := _ILendingPoolAddressesProvider.contract.UnpackLog(event, "LendingPoolCollateralManagerUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ILendingPoolAddressesProviderLendingPoolConfiguratorUpdatedIterator is returned from FilterLendingPoolConfiguratorUpdated and is used to iterate over the raw logs and unpacked data for LendingPoolConfiguratorUpdated events raised by the ILendingPoolAddressesProvider contract.
type ILendingPoolAddressesProviderLendingPoolConfiguratorUpdatedIterator struct {
	Event *ILendingPoolAddressesProviderLendingPoolConfiguratorUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ILendingPoolAddressesProviderLendingPoolConfiguratorUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ILendingPoolAddressesProviderLendingPoolConfiguratorUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ILendingPoolAddressesProviderLendingPoolConfiguratorUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ILendingPoolAddressesProviderLendingPoolConfiguratorUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ILendingPoolAddressesProviderLendingPoolConfiguratorUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ILendingPoolAddressesProviderLendingPoolConfiguratorUpdated represents a LendingPoolConfiguratorUpdated event raised by the ILendingPoolAddressesProvider contract.
type ILendingPoolAddressesProviderLendingPoolConfiguratorUpdated struct {
	NewAddress common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterLendingPoolConfiguratorUpdated is a free log retrieval operation binding the contract event 0xdfabe479bad36782fb1e77fbfddd4e382671713527e4786cfc93a022ae763729.
//
// Solidity: event LendingPoolConfiguratorUpdated(address indexed newAddress)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderFilterer) FilterLendingPoolConfiguratorUpdated(opts *bind.FilterOpts, newAddress []common.Address) (*ILendingPoolAddressesProviderLendingPoolConfiguratorUpdatedIterator, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _ILendingPoolAddressesProvider.contract.FilterLogs(opts, "LendingPoolConfiguratorUpdated", newAddressRule)
	if err != nil {
		return nil, err
	}
	return &ILendingPoolAddressesProviderLendingPoolConfiguratorUpdatedIterator{contract: _ILendingPoolAddressesProvider.contract, event: "LendingPoolConfiguratorUpdated", logs: logs, sub: sub}, nil
}

// WatchLendingPoolConfiguratorUpdated is a free log subscription operation binding the contract event 0xdfabe479bad36782fb1e77fbfddd4e382671713527e4786cfc93a022ae763729.
//
// Solidity: event LendingPoolConfiguratorUpdated(address indexed newAddress)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderFilterer) WatchLendingPoolConfiguratorUpdated(opts *bind.WatchOpts, sink chan<- *ILendingPoolAddressesProviderLendingPoolConfiguratorUpdated, newAddress []common.Address) (event.Subscription, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _ILendingPoolAddressesProvider.contract.WatchLogs(opts, "LendingPoolConfiguratorUpdated", newAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ILendingPoolAddressesProviderLendingPoolConfiguratorUpdated)
				if err := _ILendingPoolAddressesProvider.contract.UnpackLog(event, "LendingPoolConfiguratorUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLendingPoolConfiguratorUpdated is a log parse operation binding the contract event 0xdfabe479bad36782fb1e77fbfddd4e382671713527e4786cfc93a022ae763729.
//
// Solidity: event LendingPoolConfiguratorUpdated(address indexed newAddress)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderFilterer) ParseLendingPoolConfiguratorUpdated(log types.Log) (*ILendingPoolAddressesProviderLendingPoolConfiguratorUpdated, error) {
	event := new(ILendingPoolAddressesProviderLendingPoolConfiguratorUpdated)
	if err := _ILendingPoolAddressesProvider.contract.UnpackLog(event, "LendingPoolConfiguratorUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ILendingPoolAddressesProviderLendingPoolUpdatedIterator is returned from FilterLendingPoolUpdated and is used to iterate over the raw logs and unpacked data for LendingPoolUpdated events raised by the ILendingPoolAddressesProvider contract.
type ILendingPoolAddressesProviderLendingPoolUpdatedIterator struct {
	Event *ILendingPoolAddressesProviderLendingPoolUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ILendingPoolAddressesProviderLendingPoolUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ILendingPoolAddressesProviderLendingPoolUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ILendingPoolAddressesProviderLendingPoolUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ILendingPoolAddressesProviderLendingPoolUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ILendingPoolAddressesProviderLendingPoolUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ILendingPoolAddressesProviderLendingPoolUpdated represents a LendingPoolUpdated event raised by the ILendingPoolAddressesProvider contract.
type ILendingPoolAddressesProviderLendingPoolUpdated struct {
	NewAddress common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterLendingPoolUpdated is a free log retrieval operation binding the contract event 0xc4e6c6cdf28d0edbd8bcf071d724d33cc2e7a30be7d06443925656e9cb492aa4.
//
// Solidity: event LendingPoolUpdated(address indexed newAddress)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderFilterer) FilterLendingPoolUpdated(opts *bind.FilterOpts, newAddress []common.Address) (*ILendingPoolAddressesProviderLendingPoolUpdatedIterator, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _ILendingPoolAddressesProvider.contract.FilterLogs(opts, "LendingPoolUpdated", newAddressRule)
	if err != nil {
		return nil, err
	}
	return &ILendingPoolAddressesProviderLendingPoolUpdatedIterator{contract: _ILendingPoolAddressesProvider.contract, event: "LendingPoolUpdated", logs: logs, sub: sub}, nil
}

// WatchLendingPoolUpdated is a free log subscription operation binding the contract event 0xc4e6c6cdf28d0edbd8bcf071d724d33cc2e7a30be7d06443925656e9cb492aa4.
//
// Solidity: event LendingPoolUpdated(address indexed newAddress)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderFilterer) WatchLendingPoolUpdated(opts *bind.WatchOpts, sink chan<- *ILendingPoolAddressesProviderLendingPoolUpdated, newAddress []common.Address) (event.Subscription, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _ILendingPoolAddressesProvider.contract.WatchLogs(opts, "LendingPoolUpdated", newAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ILendingPoolAddressesProviderLendingPoolUpdated)
				if err := _ILendingPoolAddressesProvider.contract.UnpackLog(event, "LendingPoolUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLendingPoolUpdated is a log parse operation binding the contract event 0xc4e6c6cdf28d0edbd8bcf071d724d33cc2e7a30be7d06443925656e9cb492aa4.
//
// Solidity: event LendingPoolUpdated(address indexed newAddress)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderFilterer) ParseLendingPoolUpdated(log types.Log) (*ILendingPoolAddressesProviderLendingPoolUpdated, error) {
	event := new(ILendingPoolAddressesProviderLendingPoolUpdated)
	if err := _ILendingPoolAddressesProvider.contract.UnpackLog(event, "LendingPoolUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ILendingPoolAddressesProviderLendingRateOracleUpdatedIterator is returned from FilterLendingRateOracleUpdated and is used to iterate over the raw logs and unpacked data for LendingRateOracleUpdated events raised by the ILendingPoolAddressesProvider contract.
type ILendingPoolAddressesProviderLendingRateOracleUpdatedIterator struct {
	Event *ILendingPoolAddressesProviderLendingRateOracleUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ILendingPoolAddressesProviderLendingRateOracleUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ILendingPoolAddressesProviderLendingRateOracleUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ILendingPoolAddressesProviderLendingRateOracleUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ILendingPoolAddressesProviderLendingRateOracleUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ILendingPoolAddressesProviderLendingRateOracleUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ILendingPoolAddressesProviderLendingRateOracleUpdated represents a LendingRateOracleUpdated event raised by the ILendingPoolAddressesProvider contract.
type ILendingPoolAddressesProviderLendingRateOracleUpdated struct {
	NewAddress common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterLendingRateOracleUpdated is a free log retrieval operation binding the contract event 0x5c29179aba6942020a8a2d38f65de02fb6b7f784e7f049ed3a3cab97621859b5.
//
// Solidity: event LendingRateOracleUpdated(address indexed newAddress)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderFilterer) FilterLendingRateOracleUpdated(opts *bind.FilterOpts, newAddress []common.Address) (*ILendingPoolAddressesProviderLendingRateOracleUpdatedIterator, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _ILendingPoolAddressesProvider.contract.FilterLogs(opts, "LendingRateOracleUpdated", newAddressRule)
	if err != nil {
		return nil, err
	}
	return &ILendingPoolAddressesProviderLendingRateOracleUpdatedIterator{contract: _ILendingPoolAddressesProvider.contract, event: "LendingRateOracleUpdated", logs: logs, sub: sub}, nil
}

// WatchLendingRateOracleUpdated is a free log subscription operation binding the contract event 0x5c29179aba6942020a8a2d38f65de02fb6b7f784e7f049ed3a3cab97621859b5.
//
// Solidity: event LendingRateOracleUpdated(address indexed newAddress)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderFilterer) WatchLendingRateOracleUpdated(opts *bind.WatchOpts, sink chan<- *ILendingPoolAddressesProviderLendingRateOracleUpdated, newAddress []common.Address) (event.Subscription, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _ILendingPoolAddressesProvider.contract.WatchLogs(opts, "LendingRateOracleUpdated", newAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ILendingPoolAddressesProviderLendingRateOracleUpdated)
				if err := _ILendingPoolAddressesProvider.contract.UnpackLog(event, "LendingRateOracleUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLendingRateOracleUpdated is a log parse operation binding the contract event 0x5c29179aba6942020a8a2d38f65de02fb6b7f784e7f049ed3a3cab97621859b5.
//
// Solidity: event LendingRateOracleUpdated(address indexed newAddress)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderFilterer) ParseLendingRateOracleUpdated(log types.Log) (*ILendingPoolAddressesProviderLendingRateOracleUpdated, error) {
	event := new(ILendingPoolAddressesProviderLendingRateOracleUpdated)
	if err := _ILendingPoolAddressesProvider.contract.UnpackLog(event, "LendingRateOracleUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ILendingPoolAddressesProviderMarketIdSetIterator is returned from FilterMarketIdSet and is used to iterate over the raw logs and unpacked data for MarketIdSet events raised by the ILendingPoolAddressesProvider contract.
type ILendingPoolAddressesProviderMarketIdSetIterator struct {
	Event *ILendingPoolAddressesProviderMarketIdSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ILendingPoolAddressesProviderMarketIdSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ILendingPoolAddressesProviderMarketIdSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ILendingPoolAddressesProviderMarketIdSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ILendingPoolAddressesProviderMarketIdSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ILendingPoolAddressesProviderMarketIdSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ILendingPoolAddressesProviderMarketIdSet represents a MarketIdSet event raised by the ILendingPoolAddressesProvider contract.
type ILendingPoolAddressesProviderMarketIdSet struct {
	NewMarketId string
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterMarketIdSet is a free log retrieval operation binding the contract event 0x5e667c32fd847cf8bce48ab3400175cbf107bdc82b2dea62e3364909dfaee799.
//
// Solidity: event MarketIdSet(string newMarketId)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderFilterer) FilterMarketIdSet(opts *bind.FilterOpts) (*ILendingPoolAddressesProviderMarketIdSetIterator, error) {

	logs, sub, err := _ILendingPoolAddressesProvider.contract.FilterLogs(opts, "MarketIdSet")
	if err != nil {
		return nil, err
	}
	return &ILendingPoolAddressesProviderMarketIdSetIterator{contract: _ILendingPoolAddressesProvider.contract, event: "MarketIdSet", logs: logs, sub: sub}, nil
}

// WatchMarketIdSet is a free log subscription operation binding the contract event 0x5e667c32fd847cf8bce48ab3400175cbf107bdc82b2dea62e3364909dfaee799.
//
// Solidity: event MarketIdSet(string newMarketId)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderFilterer) WatchMarketIdSet(opts *bind.WatchOpts, sink chan<- *ILendingPoolAddressesProviderMarketIdSet) (event.Subscription, error) {

	logs, sub, err := _ILendingPoolAddressesProvider.contract.WatchLogs(opts, "MarketIdSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ILendingPoolAddressesProviderMarketIdSet)
				if err := _ILendingPoolAddressesProvider.contract.UnpackLog(event, "MarketIdSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMarketIdSet is a log parse operation binding the contract event 0x5e667c32fd847cf8bce48ab3400175cbf107bdc82b2dea62e3364909dfaee799.
//
// Solidity: event MarketIdSet(string newMarketId)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderFilterer) ParseMarketIdSet(log types.Log) (*ILendingPoolAddressesProviderMarketIdSet, error) {
	event := new(ILendingPoolAddressesProviderMarketIdSet)
	if err := _ILendingPoolAddressesProvider.contract.UnpackLog(event, "MarketIdSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ILendingPoolAddressesProviderPriceOracleUpdatedIterator is returned from FilterPriceOracleUpdated and is used to iterate over the raw logs and unpacked data for PriceOracleUpdated events raised by the ILendingPoolAddressesProvider contract.
type ILendingPoolAddressesProviderPriceOracleUpdatedIterator struct {
	Event *ILendingPoolAddressesProviderPriceOracleUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ILendingPoolAddressesProviderPriceOracleUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ILendingPoolAddressesProviderPriceOracleUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ILendingPoolAddressesProviderPriceOracleUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ILendingPoolAddressesProviderPriceOracleUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ILendingPoolAddressesProviderPriceOracleUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ILendingPoolAddressesProviderPriceOracleUpdated represents a PriceOracleUpdated event raised by the ILendingPoolAddressesProvider contract.
type ILendingPoolAddressesProviderPriceOracleUpdated struct {
	NewAddress common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterPriceOracleUpdated is a free log retrieval operation binding the contract event 0xefe8ab924ca486283a79dc604baa67add51afb82af1db8ac386ebbba643cdffd.
//
// Solidity: event PriceOracleUpdated(address indexed newAddress)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderFilterer) FilterPriceOracleUpdated(opts *bind.FilterOpts, newAddress []common.Address) (*ILendingPoolAddressesProviderPriceOracleUpdatedIterator, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _ILendingPoolAddressesProvider.contract.FilterLogs(opts, "PriceOracleUpdated", newAddressRule)
	if err != nil {
		return nil, err
	}
	return &ILendingPoolAddressesProviderPriceOracleUpdatedIterator{contract: _ILendingPoolAddressesProvider.contract, event: "PriceOracleUpdated", logs: logs, sub: sub}, nil
}

// WatchPriceOracleUpdated is a free log subscription operation binding the contract event 0xefe8ab924ca486283a79dc604baa67add51afb82af1db8ac386ebbba643cdffd.
//
// Solidity: event PriceOracleUpdated(address indexed newAddress)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderFilterer) WatchPriceOracleUpdated(opts *bind.WatchOpts, sink chan<- *ILendingPoolAddressesProviderPriceOracleUpdated, newAddress []common.Address) (event.Subscription, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _ILendingPoolAddressesProvider.contract.WatchLogs(opts, "PriceOracleUpdated", newAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ILendingPoolAddressesProviderPriceOracleUpdated)
				if err := _ILendingPoolAddressesProvider.contract.UnpackLog(event, "PriceOracleUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePriceOracleUpdated is a log parse operation binding the contract event 0xefe8ab924ca486283a79dc604baa67add51afb82af1db8ac386ebbba643cdffd.
//
// Solidity: event PriceOracleUpdated(address indexed newAddress)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderFilterer) ParsePriceOracleUpdated(log types.Log) (*ILendingPoolAddressesProviderPriceOracleUpdated, error) {
	event := new(ILendingPoolAddressesProviderPriceOracleUpdated)
	if err := _ILendingPoolAddressesProvider.contract.UnpackLog(event, "PriceOracleUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ILendingPoolAddressesProviderProxyCreatedIterator is returned from FilterProxyCreated and is used to iterate over the raw logs and unpacked data for ProxyCreated events raised by the ILendingPoolAddressesProvider contract.
type ILendingPoolAddressesProviderProxyCreatedIterator struct {
	Event *ILendingPoolAddressesProviderProxyCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ILendingPoolAddressesProviderProxyCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ILendingPoolAddressesProviderProxyCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ILendingPoolAddressesProviderProxyCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ILendingPoolAddressesProviderProxyCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ILendingPoolAddressesProviderProxyCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ILendingPoolAddressesProviderProxyCreated represents a ProxyCreated event raised by the ILendingPoolAddressesProvider contract.
type ILendingPoolAddressesProviderProxyCreated struct {
	Id         [32]byte
	NewAddress common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterProxyCreated is a free log retrieval operation binding the contract event 0x1eb35cb4b5bbb23d152f3b4016a5a46c37a07ae930ed0956aba951e231142438.
//
// Solidity: event ProxyCreated(bytes32 id, address indexed newAddress)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderFilterer) FilterProxyCreated(opts *bind.FilterOpts, newAddress []common.Address) (*ILendingPoolAddressesProviderProxyCreatedIterator, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _ILendingPoolAddressesProvider.contract.FilterLogs(opts, "ProxyCreated", newAddressRule)
	if err != nil {
		return nil, err
	}
	return &ILendingPoolAddressesProviderProxyCreatedIterator{contract: _ILendingPoolAddressesProvider.contract, event: "ProxyCreated", logs: logs, sub: sub}, nil
}

// WatchProxyCreated is a free log subscription operation binding the contract event 0x1eb35cb4b5bbb23d152f3b4016a5a46c37a07ae930ed0956aba951e231142438.
//
// Solidity: event ProxyCreated(bytes32 id, address indexed newAddress)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderFilterer) WatchProxyCreated(opts *bind.WatchOpts, sink chan<- *ILendingPoolAddressesProviderProxyCreated, newAddress []common.Address) (event.Subscription, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _ILendingPoolAddressesProvider.contract.WatchLogs(opts, "ProxyCreated", newAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ILendingPoolAddressesProviderProxyCreated)
				if err := _ILendingPoolAddressesProvider.contract.UnpackLog(event, "ProxyCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProxyCreated is a log parse operation binding the contract event 0x1eb35cb4b5bbb23d152f3b4016a5a46c37a07ae930ed0956aba951e231142438.
//
// Solidity: event ProxyCreated(bytes32 id, address indexed newAddress)
func (_ILendingPoolAddressesProvider *ILendingPoolAddressesProviderFilterer) ParseProxyCreated(log types.Log) (*ILendingPoolAddressesProviderProxyCreated, error) {
	event := new(ILendingPoolAddressesProviderProxyCreated)
	if err := _ILendingPoolAddressesProvider.contract.UnpackLog(event, "ProxyCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ILendingPoolAddressesProviderRegistryABI is the input ABI used to generate the binding from.
const ILendingPoolAddressesProviderRegistryABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"AddressesProviderRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"AddressesProviderUnregistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressesProvider\",\"type\":\"address\"}],\"name\":\"getAddressesProviderIdByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddressesProvidersList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"registerAddressesProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"unregisterAddressesProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ILendingPoolAddressesProviderRegistry is an auto generated Go binding around an Ethereum contract.
type ILendingPoolAddressesProviderRegistry struct {
	ILendingPoolAddressesProviderRegistryCaller     // Read-only binding to the contract
	ILendingPoolAddressesProviderRegistryTransactor // Write-only binding to the contract
	ILendingPoolAddressesProviderRegistryFilterer   // Log filterer for contract events
}

// ILendingPoolAddressesProviderRegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type ILendingPoolAddressesProviderRegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ILendingPoolAddressesProviderRegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ILendingPoolAddressesProviderRegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ILendingPoolAddressesProviderRegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ILendingPoolAddressesProviderRegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ILendingPoolAddressesProviderRegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ILendingPoolAddressesProviderRegistrySession struct {
	Contract     *ILendingPoolAddressesProviderRegistry // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                          // Call options to use throughout this session
	TransactOpts bind.TransactOpts                      // Transaction auth options to use throughout this session
}

// ILendingPoolAddressesProviderRegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ILendingPoolAddressesProviderRegistryCallerSession struct {
	Contract *ILendingPoolAddressesProviderRegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                                // Call options to use throughout this session
}

// ILendingPoolAddressesProviderRegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ILendingPoolAddressesProviderRegistryTransactorSession struct {
	Contract     *ILendingPoolAddressesProviderRegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                                // Transaction auth options to use throughout this session
}

// ILendingPoolAddressesProviderRegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type ILendingPoolAddressesProviderRegistryRaw struct {
	Contract *ILendingPoolAddressesProviderRegistry // Generic contract binding to access the raw methods on
}

// ILendingPoolAddressesProviderRegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ILendingPoolAddressesProviderRegistryCallerRaw struct {
	Contract *ILendingPoolAddressesProviderRegistryCaller // Generic read-only contract binding to access the raw methods on
}

// ILendingPoolAddressesProviderRegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ILendingPoolAddressesProviderRegistryTransactorRaw struct {
	Contract *ILendingPoolAddressesProviderRegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewILendingPoolAddressesProviderRegistry creates a new instance of ILendingPoolAddressesProviderRegistry, bound to a specific deployed contract.
func NewILendingPoolAddressesProviderRegistry(address common.Address, backend bind.ContractBackend) (*ILendingPoolAddressesProviderRegistry, error) {
	contract, err := bindILendingPoolAddressesProviderRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ILendingPoolAddressesProviderRegistry{ILendingPoolAddressesProviderRegistryCaller: ILendingPoolAddressesProviderRegistryCaller{contract: contract}, ILendingPoolAddressesProviderRegistryTransactor: ILendingPoolAddressesProviderRegistryTransactor{contract: contract}, ILendingPoolAddressesProviderRegistryFilterer: ILendingPoolAddressesProviderRegistryFilterer{contract: contract}}, nil
}

// NewILendingPoolAddressesProviderRegistryCaller creates a new read-only instance of ILendingPoolAddressesProviderRegistry, bound to a specific deployed contract.
func NewILendingPoolAddressesProviderRegistryCaller(address common.Address, caller bind.ContractCaller) (*ILendingPoolAddressesProviderRegistryCaller, error) {
	contract, err := bindILendingPoolAddressesProviderRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ILendingPoolAddressesProviderRegistryCaller{contract: contract}, nil
}

// NewILendingPoolAddressesProviderRegistryTransactor creates a new write-only instance of ILendingPoolAddressesProviderRegistry, bound to a specific deployed contract.
func NewILendingPoolAddressesProviderRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*ILendingPoolAddressesProviderRegistryTransactor, error) {
	contract, err := bindILendingPoolAddressesProviderRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ILendingPoolAddressesProviderRegistryTransactor{contract: contract}, nil
}

// NewILendingPoolAddressesProviderRegistryFilterer creates a new log filterer instance of ILendingPoolAddressesProviderRegistry, bound to a specific deployed contract.
func NewILendingPoolAddressesProviderRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*ILendingPoolAddressesProviderRegistryFilterer, error) {
	contract, err := bindILendingPoolAddressesProviderRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ILendingPoolAddressesProviderRegistryFilterer{contract: contract}, nil
}

// bindILendingPoolAddressesProviderRegistry binds a generic wrapper to an already deployed contract.
func bindILendingPoolAddressesProviderRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ILendingPoolAddressesProviderRegistryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ILendingPoolAddressesProviderRegistry *ILendingPoolAddressesProviderRegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ILendingPoolAddressesProviderRegistry.Contract.ILendingPoolAddressesProviderRegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ILendingPoolAddressesProviderRegistry *ILendingPoolAddressesProviderRegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ILendingPoolAddressesProviderRegistry.Contract.ILendingPoolAddressesProviderRegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ILendingPoolAddressesProviderRegistry *ILendingPoolAddressesProviderRegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ILendingPoolAddressesProviderRegistry.Contract.ILendingPoolAddressesProviderRegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ILendingPoolAddressesProviderRegistry *ILendingPoolAddressesProviderRegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ILendingPoolAddressesProviderRegistry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ILendingPoolAddressesProviderRegistry *ILendingPoolAddressesProviderRegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ILendingPoolAddressesProviderRegistry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ILendingPoolAddressesProviderRegistry *ILendingPoolAddressesProviderRegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ILendingPoolAddressesProviderRegistry.Contract.contract.Transact(opts, method, params...)
}

// GetAddressesProviderIdByAddress is a free data retrieval call binding the contract method 0xd0267be7.
//
// Solidity: function getAddressesProviderIdByAddress(address addressesProvider) view returns(uint256)
func (_ILendingPoolAddressesProviderRegistry *ILendingPoolAddressesProviderRegistryCaller) GetAddressesProviderIdByAddress(opts *bind.CallOpts, addressesProvider common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ILendingPoolAddressesProviderRegistry.contract.Call(opts, &out, "getAddressesProviderIdByAddress", addressesProvider)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAddressesProviderIdByAddress is a free data retrieval call binding the contract method 0xd0267be7.
//
// Solidity: function getAddressesProviderIdByAddress(address addressesProvider) view returns(uint256)
func (_ILendingPoolAddressesProviderRegistry *ILendingPoolAddressesProviderRegistrySession) GetAddressesProviderIdByAddress(addressesProvider common.Address) (*big.Int, error) {
	return _ILendingPoolAddressesProviderRegistry.Contract.GetAddressesProviderIdByAddress(&_ILendingPoolAddressesProviderRegistry.CallOpts, addressesProvider)
}

// GetAddressesProviderIdByAddress is a free data retrieval call binding the contract method 0xd0267be7.
//
// Solidity: function getAddressesProviderIdByAddress(address addressesProvider) view returns(uint256)
func (_ILendingPoolAddressesProviderRegistry *ILendingPoolAddressesProviderRegistryCallerSession) GetAddressesProviderIdByAddress(addressesProvider common.Address) (*big.Int, error) {
	return _ILendingPoolAddressesProviderRegistry.Contract.GetAddressesProviderIdByAddress(&_ILendingPoolAddressesProviderRegistry.CallOpts, addressesProvider)
}

// GetAddressesProvidersList is a free data retrieval call binding the contract method 0x365ccbbf.
//
// Solidity: function getAddressesProvidersList() view returns(address[])
func (_ILendingPoolAddressesProviderRegistry *ILendingPoolAddressesProviderRegistryCaller) GetAddressesProvidersList(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _ILendingPoolAddressesProviderRegistry.contract.Call(opts, &out, "getAddressesProvidersList")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetAddressesProvidersList is a free data retrieval call binding the contract method 0x365ccbbf.
//
// Solidity: function getAddressesProvidersList() view returns(address[])
func (_ILendingPoolAddressesProviderRegistry *ILendingPoolAddressesProviderRegistrySession) GetAddressesProvidersList() ([]common.Address, error) {
	return _ILendingPoolAddressesProviderRegistry.Contract.GetAddressesProvidersList(&_ILendingPoolAddressesProviderRegistry.CallOpts)
}

// GetAddressesProvidersList is a free data retrieval call binding the contract method 0x365ccbbf.
//
// Solidity: function getAddressesProvidersList() view returns(address[])
func (_ILendingPoolAddressesProviderRegistry *ILendingPoolAddressesProviderRegistryCallerSession) GetAddressesProvidersList() ([]common.Address, error) {
	return _ILendingPoolAddressesProviderRegistry.Contract.GetAddressesProvidersList(&_ILendingPoolAddressesProviderRegistry.CallOpts)
}

// RegisterAddressesProvider is a paid mutator transaction binding the contract method 0xd258191e.
//
// Solidity: function registerAddressesProvider(address provider, uint256 id) returns()
func (_ILendingPoolAddressesProviderRegistry *ILendingPoolAddressesProviderRegistryTransactor) RegisterAddressesProvider(opts *bind.TransactOpts, provider common.Address, id *big.Int) (*types.Transaction, error) {
	return _ILendingPoolAddressesProviderRegistry.contract.Transact(opts, "registerAddressesProvider", provider, id)
}

// RegisterAddressesProvider is a paid mutator transaction binding the contract method 0xd258191e.
//
// Solidity: function registerAddressesProvider(address provider, uint256 id) returns()
func (_ILendingPoolAddressesProviderRegistry *ILendingPoolAddressesProviderRegistrySession) RegisterAddressesProvider(provider common.Address, id *big.Int) (*types.Transaction, error) {
	return _ILendingPoolAddressesProviderRegistry.Contract.RegisterAddressesProvider(&_ILendingPoolAddressesProviderRegistry.TransactOpts, provider, id)
}

// RegisterAddressesProvider is a paid mutator transaction binding the contract method 0xd258191e.
//
// Solidity: function registerAddressesProvider(address provider, uint256 id) returns()
func (_ILendingPoolAddressesProviderRegistry *ILendingPoolAddressesProviderRegistryTransactorSession) RegisterAddressesProvider(provider common.Address, id *big.Int) (*types.Transaction, error) {
	return _ILendingPoolAddressesProviderRegistry.Contract.RegisterAddressesProvider(&_ILendingPoolAddressesProviderRegistry.TransactOpts, provider, id)
}

// UnregisterAddressesProvider is a paid mutator transaction binding the contract method 0x0de26707.
//
// Solidity: function unregisterAddressesProvider(address provider) returns()
func (_ILendingPoolAddressesProviderRegistry *ILendingPoolAddressesProviderRegistryTransactor) UnregisterAddressesProvider(opts *bind.TransactOpts, provider common.Address) (*types.Transaction, error) {
	return _ILendingPoolAddressesProviderRegistry.contract.Transact(opts, "unregisterAddressesProvider", provider)
}

// UnregisterAddressesProvider is a paid mutator transaction binding the contract method 0x0de26707.
//
// Solidity: function unregisterAddressesProvider(address provider) returns()
func (_ILendingPoolAddressesProviderRegistry *ILendingPoolAddressesProviderRegistrySession) UnregisterAddressesProvider(provider common.Address) (*types.Transaction, error) {
	return _ILendingPoolAddressesProviderRegistry.Contract.UnregisterAddressesProvider(&_ILendingPoolAddressesProviderRegistry.TransactOpts, provider)
}

// UnregisterAddressesProvider is a paid mutator transaction binding the contract method 0x0de26707.
//
// Solidity: function unregisterAddressesProvider(address provider) returns()
func (_ILendingPoolAddressesProviderRegistry *ILendingPoolAddressesProviderRegistryTransactorSession) UnregisterAddressesProvider(provider common.Address) (*types.Transaction, error) {
	return _ILendingPoolAddressesProviderRegistry.Contract.UnregisterAddressesProvider(&_ILendingPoolAddressesProviderRegistry.TransactOpts, provider)
}

// ILendingPoolAddressesProviderRegistryAddressesProviderRegisteredIterator is returned from FilterAddressesProviderRegistered and is used to iterate over the raw logs and unpacked data for AddressesProviderRegistered events raised by the ILendingPoolAddressesProviderRegistry contract.
type ILendingPoolAddressesProviderRegistryAddressesProviderRegisteredIterator struct {
	Event *ILendingPoolAddressesProviderRegistryAddressesProviderRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ILendingPoolAddressesProviderRegistryAddressesProviderRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ILendingPoolAddressesProviderRegistryAddressesProviderRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ILendingPoolAddressesProviderRegistryAddressesProviderRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ILendingPoolAddressesProviderRegistryAddressesProviderRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ILendingPoolAddressesProviderRegistryAddressesProviderRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ILendingPoolAddressesProviderRegistryAddressesProviderRegistered represents a AddressesProviderRegistered event raised by the ILendingPoolAddressesProviderRegistry contract.
type ILendingPoolAddressesProviderRegistryAddressesProviderRegistered struct {
	NewAddress common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterAddressesProviderRegistered is a free log retrieval operation binding the contract event 0x2db38786c10176b033a1608361716b0ca992e3af55dc05b6dc710969790beeda.
//
// Solidity: event AddressesProviderRegistered(address indexed newAddress)
func (_ILendingPoolAddressesProviderRegistry *ILendingPoolAddressesProviderRegistryFilterer) FilterAddressesProviderRegistered(opts *bind.FilterOpts, newAddress []common.Address) (*ILendingPoolAddressesProviderRegistryAddressesProviderRegisteredIterator, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _ILendingPoolAddressesProviderRegistry.contract.FilterLogs(opts, "AddressesProviderRegistered", newAddressRule)
	if err != nil {
		return nil, err
	}
	return &ILendingPoolAddressesProviderRegistryAddressesProviderRegisteredIterator{contract: _ILendingPoolAddressesProviderRegistry.contract, event: "AddressesProviderRegistered", logs: logs, sub: sub}, nil
}

// WatchAddressesProviderRegistered is a free log subscription operation binding the contract event 0x2db38786c10176b033a1608361716b0ca992e3af55dc05b6dc710969790beeda.
//
// Solidity: event AddressesProviderRegistered(address indexed newAddress)
func (_ILendingPoolAddressesProviderRegistry *ILendingPoolAddressesProviderRegistryFilterer) WatchAddressesProviderRegistered(opts *bind.WatchOpts, sink chan<- *ILendingPoolAddressesProviderRegistryAddressesProviderRegistered, newAddress []common.Address) (event.Subscription, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _ILendingPoolAddressesProviderRegistry.contract.WatchLogs(opts, "AddressesProviderRegistered", newAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ILendingPoolAddressesProviderRegistryAddressesProviderRegistered)
				if err := _ILendingPoolAddressesProviderRegistry.contract.UnpackLog(event, "AddressesProviderRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddressesProviderRegistered is a log parse operation binding the contract event 0x2db38786c10176b033a1608361716b0ca992e3af55dc05b6dc710969790beeda.
//
// Solidity: event AddressesProviderRegistered(address indexed newAddress)
func (_ILendingPoolAddressesProviderRegistry *ILendingPoolAddressesProviderRegistryFilterer) ParseAddressesProviderRegistered(log types.Log) (*ILendingPoolAddressesProviderRegistryAddressesProviderRegistered, error) {
	event := new(ILendingPoolAddressesProviderRegistryAddressesProviderRegistered)
	if err := _ILendingPoolAddressesProviderRegistry.contract.UnpackLog(event, "AddressesProviderRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ILendingPoolAddressesProviderRegistryAddressesProviderUnregisteredIterator is returned from FilterAddressesProviderUnregistered and is used to iterate over the raw logs and unpacked data for AddressesProviderUnregistered events raised by the ILendingPoolAddressesProviderRegistry contract.
type ILendingPoolAddressesProviderRegistryAddressesProviderUnregisteredIterator struct {
	Event *ILendingPoolAddressesProviderRegistryAddressesProviderUnregistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ILendingPoolAddressesProviderRegistryAddressesProviderUnregisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ILendingPoolAddressesProviderRegistryAddressesProviderUnregistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ILendingPoolAddressesProviderRegistryAddressesProviderUnregistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ILendingPoolAddressesProviderRegistryAddressesProviderUnregisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ILendingPoolAddressesProviderRegistryAddressesProviderUnregisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ILendingPoolAddressesProviderRegistryAddressesProviderUnregistered represents a AddressesProviderUnregistered event raised by the ILendingPoolAddressesProviderRegistry contract.
type ILendingPoolAddressesProviderRegistryAddressesProviderUnregistered struct {
	NewAddress common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterAddressesProviderUnregistered is a free log retrieval operation binding the contract event 0x851e5971c053e6b76e3a1e0b8ffa81430df738007fad86e195c409a757faccd2.
//
// Solidity: event AddressesProviderUnregistered(address indexed newAddress)
func (_ILendingPoolAddressesProviderRegistry *ILendingPoolAddressesProviderRegistryFilterer) FilterAddressesProviderUnregistered(opts *bind.FilterOpts, newAddress []common.Address) (*ILendingPoolAddressesProviderRegistryAddressesProviderUnregisteredIterator, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _ILendingPoolAddressesProviderRegistry.contract.FilterLogs(opts, "AddressesProviderUnregistered", newAddressRule)
	if err != nil {
		return nil, err
	}
	return &ILendingPoolAddressesProviderRegistryAddressesProviderUnregisteredIterator{contract: _ILendingPoolAddressesProviderRegistry.contract, event: "AddressesProviderUnregistered", logs: logs, sub: sub}, nil
}

// WatchAddressesProviderUnregistered is a free log subscription operation binding the contract event 0x851e5971c053e6b76e3a1e0b8ffa81430df738007fad86e195c409a757faccd2.
//
// Solidity: event AddressesProviderUnregistered(address indexed newAddress)
func (_ILendingPoolAddressesProviderRegistry *ILendingPoolAddressesProviderRegistryFilterer) WatchAddressesProviderUnregistered(opts *bind.WatchOpts, sink chan<- *ILendingPoolAddressesProviderRegistryAddressesProviderUnregistered, newAddress []common.Address) (event.Subscription, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _ILendingPoolAddressesProviderRegistry.contract.WatchLogs(opts, "AddressesProviderUnregistered", newAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ILendingPoolAddressesProviderRegistryAddressesProviderUnregistered)
				if err := _ILendingPoolAddressesProviderRegistry.contract.UnpackLog(event, "AddressesProviderUnregistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddressesProviderUnregistered is a log parse operation binding the contract event 0x851e5971c053e6b76e3a1e0b8ffa81430df738007fad86e195c409a757faccd2.
//
// Solidity: event AddressesProviderUnregistered(address indexed newAddress)
func (_ILendingPoolAddressesProviderRegistry *ILendingPoolAddressesProviderRegistryFilterer) ParseAddressesProviderUnregistered(log types.Log) (*ILendingPoolAddressesProviderRegistryAddressesProviderUnregistered, error) {
	event := new(ILendingPoolAddressesProviderRegistryAddressesProviderUnregistered)
	if err := _ILendingPoolAddressesProviderRegistry.contract.UnpackLog(event, "AddressesProviderUnregistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ILendingPoolCollateralManagerABI is the input ABI used to generate the binding from.
const ILendingPoolCollateralManagerABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"principal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtToCover\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidatedCollateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"receiveAToken\",\"type\":\"bool\"}],\"name\":\"LiquidationCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ReserveUsedAsCollateralDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ReserveUsedAsCollateralEnabled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"principal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debtToCover\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"receiveAToken\",\"type\":\"bool\"}],\"name\":\"liquidationCall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ILendingPoolCollateralManager is an auto generated Go binding around an Ethereum contract.
type ILendingPoolCollateralManager struct {
	ILendingPoolCollateralManagerCaller     // Read-only binding to the contract
	ILendingPoolCollateralManagerTransactor // Write-only binding to the contract
	ILendingPoolCollateralManagerFilterer   // Log filterer for contract events
}

// ILendingPoolCollateralManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type ILendingPoolCollateralManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ILendingPoolCollateralManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ILendingPoolCollateralManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ILendingPoolCollateralManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ILendingPoolCollateralManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ILendingPoolCollateralManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ILendingPoolCollateralManagerSession struct {
	Contract     *ILendingPoolCollateralManager // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                  // Call options to use throughout this session
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// ILendingPoolCollateralManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ILendingPoolCollateralManagerCallerSession struct {
	Contract *ILendingPoolCollateralManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                        // Call options to use throughout this session
}

// ILendingPoolCollateralManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ILendingPoolCollateralManagerTransactorSession struct {
	Contract     *ILendingPoolCollateralManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                        // Transaction auth options to use throughout this session
}

// ILendingPoolCollateralManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type ILendingPoolCollateralManagerRaw struct {
	Contract *ILendingPoolCollateralManager // Generic contract binding to access the raw methods on
}

// ILendingPoolCollateralManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ILendingPoolCollateralManagerCallerRaw struct {
	Contract *ILendingPoolCollateralManagerCaller // Generic read-only contract binding to access the raw methods on
}

// ILendingPoolCollateralManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ILendingPoolCollateralManagerTransactorRaw struct {
	Contract *ILendingPoolCollateralManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewILendingPoolCollateralManager creates a new instance of ILendingPoolCollateralManager, bound to a specific deployed contract.
func NewILendingPoolCollateralManager(address common.Address, backend bind.ContractBackend) (*ILendingPoolCollateralManager, error) {
	contract, err := bindILendingPoolCollateralManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ILendingPoolCollateralManager{ILendingPoolCollateralManagerCaller: ILendingPoolCollateralManagerCaller{contract: contract}, ILendingPoolCollateralManagerTransactor: ILendingPoolCollateralManagerTransactor{contract: contract}, ILendingPoolCollateralManagerFilterer: ILendingPoolCollateralManagerFilterer{contract: contract}}, nil
}

// NewILendingPoolCollateralManagerCaller creates a new read-only instance of ILendingPoolCollateralManager, bound to a specific deployed contract.
func NewILendingPoolCollateralManagerCaller(address common.Address, caller bind.ContractCaller) (*ILendingPoolCollateralManagerCaller, error) {
	contract, err := bindILendingPoolCollateralManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ILendingPoolCollateralManagerCaller{contract: contract}, nil
}

// NewILendingPoolCollateralManagerTransactor creates a new write-only instance of ILendingPoolCollateralManager, bound to a specific deployed contract.
func NewILendingPoolCollateralManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*ILendingPoolCollateralManagerTransactor, error) {
	contract, err := bindILendingPoolCollateralManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ILendingPoolCollateralManagerTransactor{contract: contract}, nil
}

// NewILendingPoolCollateralManagerFilterer creates a new log filterer instance of ILendingPoolCollateralManager, bound to a specific deployed contract.
func NewILendingPoolCollateralManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*ILendingPoolCollateralManagerFilterer, error) {
	contract, err := bindILendingPoolCollateralManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ILendingPoolCollateralManagerFilterer{contract: contract}, nil
}

// bindILendingPoolCollateralManager binds a generic wrapper to an already deployed contract.
func bindILendingPoolCollateralManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ILendingPoolCollateralManagerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ILendingPoolCollateralManager *ILendingPoolCollateralManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ILendingPoolCollateralManager.Contract.ILendingPoolCollateralManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ILendingPoolCollateralManager *ILendingPoolCollateralManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ILendingPoolCollateralManager.Contract.ILendingPoolCollateralManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ILendingPoolCollateralManager *ILendingPoolCollateralManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ILendingPoolCollateralManager.Contract.ILendingPoolCollateralManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ILendingPoolCollateralManager *ILendingPoolCollateralManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ILendingPoolCollateralManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ILendingPoolCollateralManager *ILendingPoolCollateralManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ILendingPoolCollateralManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ILendingPoolCollateralManager *ILendingPoolCollateralManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ILendingPoolCollateralManager.Contract.contract.Transact(opts, method, params...)
}

// LiquidationCall is a paid mutator transaction binding the contract method 0x00a718a9.
//
// Solidity: function liquidationCall(address collateral, address principal, address user, uint256 debtToCover, bool receiveAToken) returns(uint256, string)
func (_ILendingPoolCollateralManager *ILendingPoolCollateralManagerTransactor) LiquidationCall(opts *bind.TransactOpts, collateral common.Address, principal common.Address, user common.Address, debtToCover *big.Int, receiveAToken bool) (*types.Transaction, error) {
	return _ILendingPoolCollateralManager.contract.Transact(opts, "liquidationCall", collateral, principal, user, debtToCover, receiveAToken)
}

// LiquidationCall is a paid mutator transaction binding the contract method 0x00a718a9.
//
// Solidity: function liquidationCall(address collateral, address principal, address user, uint256 debtToCover, bool receiveAToken) returns(uint256, string)
func (_ILendingPoolCollateralManager *ILendingPoolCollateralManagerSession) LiquidationCall(collateral common.Address, principal common.Address, user common.Address, debtToCover *big.Int, receiveAToken bool) (*types.Transaction, error) {
	return _ILendingPoolCollateralManager.Contract.LiquidationCall(&_ILendingPoolCollateralManager.TransactOpts, collateral, principal, user, debtToCover, receiveAToken)
}

// LiquidationCall is a paid mutator transaction binding the contract method 0x00a718a9.
//
// Solidity: function liquidationCall(address collateral, address principal, address user, uint256 debtToCover, bool receiveAToken) returns(uint256, string)
func (_ILendingPoolCollateralManager *ILendingPoolCollateralManagerTransactorSession) LiquidationCall(collateral common.Address, principal common.Address, user common.Address, debtToCover *big.Int, receiveAToken bool) (*types.Transaction, error) {
	return _ILendingPoolCollateralManager.Contract.LiquidationCall(&_ILendingPoolCollateralManager.TransactOpts, collateral, principal, user, debtToCover, receiveAToken)
}

// ILendingPoolCollateralManagerLiquidationCallIterator is returned from FilterLiquidationCall and is used to iterate over the raw logs and unpacked data for LiquidationCall events raised by the ILendingPoolCollateralManager contract.
type ILendingPoolCollateralManagerLiquidationCallIterator struct {
	Event *ILendingPoolCollateralManagerLiquidationCall // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ILendingPoolCollateralManagerLiquidationCallIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ILendingPoolCollateralManagerLiquidationCall)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ILendingPoolCollateralManagerLiquidationCall)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ILendingPoolCollateralManagerLiquidationCallIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ILendingPoolCollateralManagerLiquidationCallIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ILendingPoolCollateralManagerLiquidationCall represents a LiquidationCall event raised by the ILendingPoolCollateralManager contract.
type ILendingPoolCollateralManagerLiquidationCall struct {
	Collateral                 common.Address
	Principal                  common.Address
	User                       common.Address
	DebtToCover                *big.Int
	LiquidatedCollateralAmount *big.Int
	Liquidator                 common.Address
	ReceiveAToken              bool
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterLiquidationCall is a free log retrieval operation binding the contract event 0xe413a321e8681d831f4dbccbca790d2952b56f977908e45be37335533e005286.
//
// Solidity: event LiquidationCall(address indexed collateral, address indexed principal, address indexed user, uint256 debtToCover, uint256 liquidatedCollateralAmount, address liquidator, bool receiveAToken)
func (_ILendingPoolCollateralManager *ILendingPoolCollateralManagerFilterer) FilterLiquidationCall(opts *bind.FilterOpts, collateral []common.Address, principal []common.Address, user []common.Address) (*ILendingPoolCollateralManagerLiquidationCallIterator, error) {

	var collateralRule []interface{}
	for _, collateralItem := range collateral {
		collateralRule = append(collateralRule, collateralItem)
	}
	var principalRule []interface{}
	for _, principalItem := range principal {
		principalRule = append(principalRule, principalItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _ILendingPoolCollateralManager.contract.FilterLogs(opts, "LiquidationCall", collateralRule, principalRule, userRule)
	if err != nil {
		return nil, err
	}
	return &ILendingPoolCollateralManagerLiquidationCallIterator{contract: _ILendingPoolCollateralManager.contract, event: "LiquidationCall", logs: logs, sub: sub}, nil
}

// WatchLiquidationCall is a free log subscription operation binding the contract event 0xe413a321e8681d831f4dbccbca790d2952b56f977908e45be37335533e005286.
//
// Solidity: event LiquidationCall(address indexed collateral, address indexed principal, address indexed user, uint256 debtToCover, uint256 liquidatedCollateralAmount, address liquidator, bool receiveAToken)
func (_ILendingPoolCollateralManager *ILendingPoolCollateralManagerFilterer) WatchLiquidationCall(opts *bind.WatchOpts, sink chan<- *ILendingPoolCollateralManagerLiquidationCall, collateral []common.Address, principal []common.Address, user []common.Address) (event.Subscription, error) {

	var collateralRule []interface{}
	for _, collateralItem := range collateral {
		collateralRule = append(collateralRule, collateralItem)
	}
	var principalRule []interface{}
	for _, principalItem := range principal {
		principalRule = append(principalRule, principalItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _ILendingPoolCollateralManager.contract.WatchLogs(opts, "LiquidationCall", collateralRule, principalRule, userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ILendingPoolCollateralManagerLiquidationCall)
				if err := _ILendingPoolCollateralManager.contract.UnpackLog(event, "LiquidationCall", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLiquidationCall is a log parse operation binding the contract event 0xe413a321e8681d831f4dbccbca790d2952b56f977908e45be37335533e005286.
//
// Solidity: event LiquidationCall(address indexed collateral, address indexed principal, address indexed user, uint256 debtToCover, uint256 liquidatedCollateralAmount, address liquidator, bool receiveAToken)
func (_ILendingPoolCollateralManager *ILendingPoolCollateralManagerFilterer) ParseLiquidationCall(log types.Log) (*ILendingPoolCollateralManagerLiquidationCall, error) {
	event := new(ILendingPoolCollateralManagerLiquidationCall)
	if err := _ILendingPoolCollateralManager.contract.UnpackLog(event, "LiquidationCall", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ILendingPoolCollateralManagerReserveUsedAsCollateralDisabledIterator is returned from FilterReserveUsedAsCollateralDisabled and is used to iterate over the raw logs and unpacked data for ReserveUsedAsCollateralDisabled events raised by the ILendingPoolCollateralManager contract.
type ILendingPoolCollateralManagerReserveUsedAsCollateralDisabledIterator struct {
	Event *ILendingPoolCollateralManagerReserveUsedAsCollateralDisabled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ILendingPoolCollateralManagerReserveUsedAsCollateralDisabledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ILendingPoolCollateralManagerReserveUsedAsCollateralDisabled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ILendingPoolCollateralManagerReserveUsedAsCollateralDisabled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ILendingPoolCollateralManagerReserveUsedAsCollateralDisabledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ILendingPoolCollateralManagerReserveUsedAsCollateralDisabledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ILendingPoolCollateralManagerReserveUsedAsCollateralDisabled represents a ReserveUsedAsCollateralDisabled event raised by the ILendingPoolCollateralManager contract.
type ILendingPoolCollateralManagerReserveUsedAsCollateralDisabled struct {
	Reserve common.Address
	User    common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterReserveUsedAsCollateralDisabled is a free log retrieval operation binding the contract event 0x44c58d81365b66dd4b1a7f36c25aa97b8c71c361ee4937adc1a00000227db5dd.
//
// Solidity: event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user)
func (_ILendingPoolCollateralManager *ILendingPoolCollateralManagerFilterer) FilterReserveUsedAsCollateralDisabled(opts *bind.FilterOpts, reserve []common.Address, user []common.Address) (*ILendingPoolCollateralManagerReserveUsedAsCollateralDisabledIterator, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _ILendingPoolCollateralManager.contract.FilterLogs(opts, "ReserveUsedAsCollateralDisabled", reserveRule, userRule)
	if err != nil {
		return nil, err
	}
	return &ILendingPoolCollateralManagerReserveUsedAsCollateralDisabledIterator{contract: _ILendingPoolCollateralManager.contract, event: "ReserveUsedAsCollateralDisabled", logs: logs, sub: sub}, nil
}

// WatchReserveUsedAsCollateralDisabled is a free log subscription operation binding the contract event 0x44c58d81365b66dd4b1a7f36c25aa97b8c71c361ee4937adc1a00000227db5dd.
//
// Solidity: event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user)
func (_ILendingPoolCollateralManager *ILendingPoolCollateralManagerFilterer) WatchReserveUsedAsCollateralDisabled(opts *bind.WatchOpts, sink chan<- *ILendingPoolCollateralManagerReserveUsedAsCollateralDisabled, reserve []common.Address, user []common.Address) (event.Subscription, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _ILendingPoolCollateralManager.contract.WatchLogs(opts, "ReserveUsedAsCollateralDisabled", reserveRule, userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ILendingPoolCollateralManagerReserveUsedAsCollateralDisabled)
				if err := _ILendingPoolCollateralManager.contract.UnpackLog(event, "ReserveUsedAsCollateralDisabled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReserveUsedAsCollateralDisabled is a log parse operation binding the contract event 0x44c58d81365b66dd4b1a7f36c25aa97b8c71c361ee4937adc1a00000227db5dd.
//
// Solidity: event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user)
func (_ILendingPoolCollateralManager *ILendingPoolCollateralManagerFilterer) ParseReserveUsedAsCollateralDisabled(log types.Log) (*ILendingPoolCollateralManagerReserveUsedAsCollateralDisabled, error) {
	event := new(ILendingPoolCollateralManagerReserveUsedAsCollateralDisabled)
	if err := _ILendingPoolCollateralManager.contract.UnpackLog(event, "ReserveUsedAsCollateralDisabled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ILendingPoolCollateralManagerReserveUsedAsCollateralEnabledIterator is returned from FilterReserveUsedAsCollateralEnabled and is used to iterate over the raw logs and unpacked data for ReserveUsedAsCollateralEnabled events raised by the ILendingPoolCollateralManager contract.
type ILendingPoolCollateralManagerReserveUsedAsCollateralEnabledIterator struct {
	Event *ILendingPoolCollateralManagerReserveUsedAsCollateralEnabled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ILendingPoolCollateralManagerReserveUsedAsCollateralEnabledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ILendingPoolCollateralManagerReserveUsedAsCollateralEnabled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ILendingPoolCollateralManagerReserveUsedAsCollateralEnabled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ILendingPoolCollateralManagerReserveUsedAsCollateralEnabledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ILendingPoolCollateralManagerReserveUsedAsCollateralEnabledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ILendingPoolCollateralManagerReserveUsedAsCollateralEnabled represents a ReserveUsedAsCollateralEnabled event raised by the ILendingPoolCollateralManager contract.
type ILendingPoolCollateralManagerReserveUsedAsCollateralEnabled struct {
	Reserve common.Address
	User    common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterReserveUsedAsCollateralEnabled is a free log retrieval operation binding the contract event 0x00058a56ea94653cdf4f152d227ace22d4c00ad99e2a43f58cb7d9e3feb295f2.
//
// Solidity: event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user)
func (_ILendingPoolCollateralManager *ILendingPoolCollateralManagerFilterer) FilterReserveUsedAsCollateralEnabled(opts *bind.FilterOpts, reserve []common.Address, user []common.Address) (*ILendingPoolCollateralManagerReserveUsedAsCollateralEnabledIterator, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _ILendingPoolCollateralManager.contract.FilterLogs(opts, "ReserveUsedAsCollateralEnabled", reserveRule, userRule)
	if err != nil {
		return nil, err
	}
	return &ILendingPoolCollateralManagerReserveUsedAsCollateralEnabledIterator{contract: _ILendingPoolCollateralManager.contract, event: "ReserveUsedAsCollateralEnabled", logs: logs, sub: sub}, nil
}

// WatchReserveUsedAsCollateralEnabled is a free log subscription operation binding the contract event 0x00058a56ea94653cdf4f152d227ace22d4c00ad99e2a43f58cb7d9e3feb295f2.
//
// Solidity: event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user)
func (_ILendingPoolCollateralManager *ILendingPoolCollateralManagerFilterer) WatchReserveUsedAsCollateralEnabled(opts *bind.WatchOpts, sink chan<- *ILendingPoolCollateralManagerReserveUsedAsCollateralEnabled, reserve []common.Address, user []common.Address) (event.Subscription, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _ILendingPoolCollateralManager.contract.WatchLogs(opts, "ReserveUsedAsCollateralEnabled", reserveRule, userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ILendingPoolCollateralManagerReserveUsedAsCollateralEnabled)
				if err := _ILendingPoolCollateralManager.contract.UnpackLog(event, "ReserveUsedAsCollateralEnabled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReserveUsedAsCollateralEnabled is a log parse operation binding the contract event 0x00058a56ea94653cdf4f152d227ace22d4c00ad99e2a43f58cb7d9e3feb295f2.
//
// Solidity: event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user)
func (_ILendingPoolCollateralManager *ILendingPoolCollateralManagerFilterer) ParseReserveUsedAsCollateralEnabled(log types.Log) (*ILendingPoolCollateralManagerReserveUsedAsCollateralEnabled, error) {
	event := new(ILendingPoolCollateralManagerReserveUsedAsCollateralEnabled)
	if err := _ILendingPoolCollateralManager.contract.UnpackLog(event, "ReserveUsedAsCollateralEnabled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ILendingRateOracleABI is the input ABI used to generate the binding from.
const ILendingRateOracleABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getMarketBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setMarketBorrowRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ILendingRateOracle is an auto generated Go binding around an Ethereum contract.
type ILendingRateOracle struct {
	ILendingRateOracleCaller     // Read-only binding to the contract
	ILendingRateOracleTransactor // Write-only binding to the contract
	ILendingRateOracleFilterer   // Log filterer for contract events
}

// ILendingRateOracleCaller is an auto generated read-only Go binding around an Ethereum contract.
type ILendingRateOracleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ILendingRateOracleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ILendingRateOracleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ILendingRateOracleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ILendingRateOracleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ILendingRateOracleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ILendingRateOracleSession struct {
	Contract     *ILendingRateOracle // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ILendingRateOracleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ILendingRateOracleCallerSession struct {
	Contract *ILendingRateOracleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// ILendingRateOracleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ILendingRateOracleTransactorSession struct {
	Contract     *ILendingRateOracleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// ILendingRateOracleRaw is an auto generated low-level Go binding around an Ethereum contract.
type ILendingRateOracleRaw struct {
	Contract *ILendingRateOracle // Generic contract binding to access the raw methods on
}

// ILendingRateOracleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ILendingRateOracleCallerRaw struct {
	Contract *ILendingRateOracleCaller // Generic read-only contract binding to access the raw methods on
}

// ILendingRateOracleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ILendingRateOracleTransactorRaw struct {
	Contract *ILendingRateOracleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewILendingRateOracle creates a new instance of ILendingRateOracle, bound to a specific deployed contract.
func NewILendingRateOracle(address common.Address, backend bind.ContractBackend) (*ILendingRateOracle, error) {
	contract, err := bindILendingRateOracle(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ILendingRateOracle{ILendingRateOracleCaller: ILendingRateOracleCaller{contract: contract}, ILendingRateOracleTransactor: ILendingRateOracleTransactor{contract: contract}, ILendingRateOracleFilterer: ILendingRateOracleFilterer{contract: contract}}, nil
}

// NewILendingRateOracleCaller creates a new read-only instance of ILendingRateOracle, bound to a specific deployed contract.
func NewILendingRateOracleCaller(address common.Address, caller bind.ContractCaller) (*ILendingRateOracleCaller, error) {
	contract, err := bindILendingRateOracle(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ILendingRateOracleCaller{contract: contract}, nil
}

// NewILendingRateOracleTransactor creates a new write-only instance of ILendingRateOracle, bound to a specific deployed contract.
func NewILendingRateOracleTransactor(address common.Address, transactor bind.ContractTransactor) (*ILendingRateOracleTransactor, error) {
	contract, err := bindILendingRateOracle(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ILendingRateOracleTransactor{contract: contract}, nil
}

// NewILendingRateOracleFilterer creates a new log filterer instance of ILendingRateOracle, bound to a specific deployed contract.
func NewILendingRateOracleFilterer(address common.Address, filterer bind.ContractFilterer) (*ILendingRateOracleFilterer, error) {
	contract, err := bindILendingRateOracle(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ILendingRateOracleFilterer{contract: contract}, nil
}

// bindILendingRateOracle binds a generic wrapper to an already deployed contract.
func bindILendingRateOracle(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ILendingRateOracleABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ILendingRateOracle *ILendingRateOracleRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ILendingRateOracle.Contract.ILendingRateOracleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ILendingRateOracle *ILendingRateOracleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ILendingRateOracle.Contract.ILendingRateOracleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ILendingRateOracle *ILendingRateOracleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ILendingRateOracle.Contract.ILendingRateOracleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ILendingRateOracle *ILendingRateOracleCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ILendingRateOracle.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ILendingRateOracle *ILendingRateOracleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ILendingRateOracle.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ILendingRateOracle *ILendingRateOracleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ILendingRateOracle.Contract.contract.Transact(opts, method, params...)
}

// GetMarketBorrowRate is a free data retrieval call binding the contract method 0xbb85c0bb.
//
// Solidity: function getMarketBorrowRate(address asset) view returns(uint256)
func (_ILendingRateOracle *ILendingRateOracleCaller) GetMarketBorrowRate(opts *bind.CallOpts, asset common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ILendingRateOracle.contract.Call(opts, &out, "getMarketBorrowRate", asset)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMarketBorrowRate is a free data retrieval call binding the contract method 0xbb85c0bb.
//
// Solidity: function getMarketBorrowRate(address asset) view returns(uint256)
func (_ILendingRateOracle *ILendingRateOracleSession) GetMarketBorrowRate(asset common.Address) (*big.Int, error) {
	return _ILendingRateOracle.Contract.GetMarketBorrowRate(&_ILendingRateOracle.CallOpts, asset)
}

// GetMarketBorrowRate is a free data retrieval call binding the contract method 0xbb85c0bb.
//
// Solidity: function getMarketBorrowRate(address asset) view returns(uint256)
func (_ILendingRateOracle *ILendingRateOracleCallerSession) GetMarketBorrowRate(asset common.Address) (*big.Int, error) {
	return _ILendingRateOracle.Contract.GetMarketBorrowRate(&_ILendingRateOracle.CallOpts, asset)
}

// SetMarketBorrowRate is a paid mutator transaction binding the contract method 0x72eb293d.
//
// Solidity: function setMarketBorrowRate(address asset, uint256 rate) returns()
func (_ILendingRateOracle *ILendingRateOracleTransactor) SetMarketBorrowRate(opts *bind.TransactOpts, asset common.Address, rate *big.Int) (*types.Transaction, error) {
	return _ILendingRateOracle.contract.Transact(opts, "setMarketBorrowRate", asset, rate)
}

// SetMarketBorrowRate is a paid mutator transaction binding the contract method 0x72eb293d.
//
// Solidity: function setMarketBorrowRate(address asset, uint256 rate) returns()
func (_ILendingRateOracle *ILendingRateOracleSession) SetMarketBorrowRate(asset common.Address, rate *big.Int) (*types.Transaction, error) {
	return _ILendingRateOracle.Contract.SetMarketBorrowRate(&_ILendingRateOracle.TransactOpts, asset, rate)
}

// SetMarketBorrowRate is a paid mutator transaction binding the contract method 0x72eb293d.
//
// Solidity: function setMarketBorrowRate(address asset, uint256 rate) returns()
func (_ILendingRateOracle *ILendingRateOracleTransactorSession) SetMarketBorrowRate(asset common.Address, rate *big.Int) (*types.Transaction, error) {
	return _ILendingRateOracle.Contract.SetMarketBorrowRate(&_ILendingRateOracle.TransactOpts, asset, rate)
}

// IPriceOracleABI is the input ABI used to generate the binding from.
const IPriceOracleABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getAssetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setAssetPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// IPriceOracle is an auto generated Go binding around an Ethereum contract.
type IPriceOracle struct {
	IPriceOracleCaller     // Read-only binding to the contract
	IPriceOracleTransactor // Write-only binding to the contract
	IPriceOracleFilterer   // Log filterer for contract events
}

// IPriceOracleCaller is an auto generated read-only Go binding around an Ethereum contract.
type IPriceOracleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IPriceOracleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IPriceOracleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IPriceOracleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IPriceOracleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IPriceOracleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IPriceOracleSession struct {
	Contract     *IPriceOracle     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IPriceOracleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IPriceOracleCallerSession struct {
	Contract *IPriceOracleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// IPriceOracleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IPriceOracleTransactorSession struct {
	Contract     *IPriceOracleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// IPriceOracleRaw is an auto generated low-level Go binding around an Ethereum contract.
type IPriceOracleRaw struct {
	Contract *IPriceOracle // Generic contract binding to access the raw methods on
}

// IPriceOracleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IPriceOracleCallerRaw struct {
	Contract *IPriceOracleCaller // Generic read-only contract binding to access the raw methods on
}

// IPriceOracleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IPriceOracleTransactorRaw struct {
	Contract *IPriceOracleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIPriceOracle creates a new instance of IPriceOracle, bound to a specific deployed contract.
func NewIPriceOracle(address common.Address, backend bind.ContractBackend) (*IPriceOracle, error) {
	contract, err := bindIPriceOracle(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IPriceOracle{IPriceOracleCaller: IPriceOracleCaller{contract: contract}, IPriceOracleTransactor: IPriceOracleTransactor{contract: contract}, IPriceOracleFilterer: IPriceOracleFilterer{contract: contract}}, nil
}

// NewIPriceOracleCaller creates a new read-only instance of IPriceOracle, bound to a specific deployed contract.
func NewIPriceOracleCaller(address common.Address, caller bind.ContractCaller) (*IPriceOracleCaller, error) {
	contract, err := bindIPriceOracle(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IPriceOracleCaller{contract: contract}, nil
}

// NewIPriceOracleTransactor creates a new write-only instance of IPriceOracle, bound to a specific deployed contract.
func NewIPriceOracleTransactor(address common.Address, transactor bind.ContractTransactor) (*IPriceOracleTransactor, error) {
	contract, err := bindIPriceOracle(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IPriceOracleTransactor{contract: contract}, nil
}

// NewIPriceOracleFilterer creates a new log filterer instance of IPriceOracle, bound to a specific deployed contract.
func NewIPriceOracleFilterer(address common.Address, filterer bind.ContractFilterer) (*IPriceOracleFilterer, error) {
	contract, err := bindIPriceOracle(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IPriceOracleFilterer{contract: contract}, nil
}

// bindIPriceOracle binds a generic wrapper to an already deployed contract.
func bindIPriceOracle(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IPriceOracleABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IPriceOracle *IPriceOracleRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IPriceOracle.Contract.IPriceOracleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IPriceOracle *IPriceOracleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IPriceOracle.Contract.IPriceOracleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IPriceOracle *IPriceOracleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IPriceOracle.Contract.IPriceOracleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IPriceOracle *IPriceOracleCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IPriceOracle.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IPriceOracle *IPriceOracleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IPriceOracle.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IPriceOracle *IPriceOracleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IPriceOracle.Contract.contract.Transact(opts, method, params...)
}

// GetAssetPrice is a free data retrieval call binding the contract method 0xb3596f07.
//
// Solidity: function getAssetPrice(address asset) view returns(uint256)
func (_IPriceOracle *IPriceOracleCaller) GetAssetPrice(opts *bind.CallOpts, asset common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IPriceOracle.contract.Call(opts, &out, "getAssetPrice", asset)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAssetPrice is a free data retrieval call binding the contract method 0xb3596f07.
//
// Solidity: function getAssetPrice(address asset) view returns(uint256)
func (_IPriceOracle *IPriceOracleSession) GetAssetPrice(asset common.Address) (*big.Int, error) {
	return _IPriceOracle.Contract.GetAssetPrice(&_IPriceOracle.CallOpts, asset)
}

// GetAssetPrice is a free data retrieval call binding the contract method 0xb3596f07.
//
// Solidity: function getAssetPrice(address asset) view returns(uint256)
func (_IPriceOracle *IPriceOracleCallerSession) GetAssetPrice(asset common.Address) (*big.Int, error) {
	return _IPriceOracle.Contract.GetAssetPrice(&_IPriceOracle.CallOpts, asset)
}

// SetAssetPrice is a paid mutator transaction binding the contract method 0x51323f72.
//
// Solidity: function setAssetPrice(address asset, uint256 price) returns()
func (_IPriceOracle *IPriceOracleTransactor) SetAssetPrice(opts *bind.TransactOpts, asset common.Address, price *big.Int) (*types.Transaction, error) {
	return _IPriceOracle.contract.Transact(opts, "setAssetPrice", asset, price)
}

// SetAssetPrice is a paid mutator transaction binding the contract method 0x51323f72.
//
// Solidity: function setAssetPrice(address asset, uint256 price) returns()
func (_IPriceOracle *IPriceOracleSession) SetAssetPrice(asset common.Address, price *big.Int) (*types.Transaction, error) {
	return _IPriceOracle.Contract.SetAssetPrice(&_IPriceOracle.TransactOpts, asset, price)
}

// SetAssetPrice is a paid mutator transaction binding the contract method 0x51323f72.
//
// Solidity: function setAssetPrice(address asset, uint256 price) returns()
func (_IPriceOracle *IPriceOracleTransactorSession) SetAssetPrice(asset common.Address, price *big.Int) (*types.Transaction, error) {
	return _IPriceOracle.Contract.SetAssetPrice(&_IPriceOracle.TransactOpts, asset, price)
}

// IPriceOracleGetterABI is the input ABI used to generate the binding from.
const IPriceOracleGetterABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getAssetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// IPriceOracleGetter is an auto generated Go binding around an Ethereum contract.
type IPriceOracleGetter struct {
	IPriceOracleGetterCaller     // Read-only binding to the contract
	IPriceOracleGetterTransactor // Write-only binding to the contract
	IPriceOracleGetterFilterer   // Log filterer for contract events
}

// IPriceOracleGetterCaller is an auto generated read-only Go binding around an Ethereum contract.
type IPriceOracleGetterCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IPriceOracleGetterTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IPriceOracleGetterTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IPriceOracleGetterFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IPriceOracleGetterFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IPriceOracleGetterSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IPriceOracleGetterSession struct {
	Contract     *IPriceOracleGetter // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// IPriceOracleGetterCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IPriceOracleGetterCallerSession struct {
	Contract *IPriceOracleGetterCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// IPriceOracleGetterTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IPriceOracleGetterTransactorSession struct {
	Contract     *IPriceOracleGetterTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// IPriceOracleGetterRaw is an auto generated low-level Go binding around an Ethereum contract.
type IPriceOracleGetterRaw struct {
	Contract *IPriceOracleGetter // Generic contract binding to access the raw methods on
}

// IPriceOracleGetterCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IPriceOracleGetterCallerRaw struct {
	Contract *IPriceOracleGetterCaller // Generic read-only contract binding to access the raw methods on
}

// IPriceOracleGetterTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IPriceOracleGetterTransactorRaw struct {
	Contract *IPriceOracleGetterTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIPriceOracleGetter creates a new instance of IPriceOracleGetter, bound to a specific deployed contract.
func NewIPriceOracleGetter(address common.Address, backend bind.ContractBackend) (*IPriceOracleGetter, error) {
	contract, err := bindIPriceOracleGetter(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IPriceOracleGetter{IPriceOracleGetterCaller: IPriceOracleGetterCaller{contract: contract}, IPriceOracleGetterTransactor: IPriceOracleGetterTransactor{contract: contract}, IPriceOracleGetterFilterer: IPriceOracleGetterFilterer{contract: contract}}, nil
}

// NewIPriceOracleGetterCaller creates a new read-only instance of IPriceOracleGetter, bound to a specific deployed contract.
func NewIPriceOracleGetterCaller(address common.Address, caller bind.ContractCaller) (*IPriceOracleGetterCaller, error) {
	contract, err := bindIPriceOracleGetter(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IPriceOracleGetterCaller{contract: contract}, nil
}

// NewIPriceOracleGetterTransactor creates a new write-only instance of IPriceOracleGetter, bound to a specific deployed contract.
func NewIPriceOracleGetterTransactor(address common.Address, transactor bind.ContractTransactor) (*IPriceOracleGetterTransactor, error) {
	contract, err := bindIPriceOracleGetter(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IPriceOracleGetterTransactor{contract: contract}, nil
}

// NewIPriceOracleGetterFilterer creates a new log filterer instance of IPriceOracleGetter, bound to a specific deployed contract.
func NewIPriceOracleGetterFilterer(address common.Address, filterer bind.ContractFilterer) (*IPriceOracleGetterFilterer, error) {
	contract, err := bindIPriceOracleGetter(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IPriceOracleGetterFilterer{contract: contract}, nil
}

// bindIPriceOracleGetter binds a generic wrapper to an already deployed contract.
func bindIPriceOracleGetter(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IPriceOracleGetterABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IPriceOracleGetter *IPriceOracleGetterRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IPriceOracleGetter.Contract.IPriceOracleGetterCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IPriceOracleGetter *IPriceOracleGetterRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IPriceOracleGetter.Contract.IPriceOracleGetterTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IPriceOracleGetter *IPriceOracleGetterRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IPriceOracleGetter.Contract.IPriceOracleGetterTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IPriceOracleGetter *IPriceOracleGetterCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IPriceOracleGetter.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IPriceOracleGetter *IPriceOracleGetterTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IPriceOracleGetter.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IPriceOracleGetter *IPriceOracleGetterTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IPriceOracleGetter.Contract.contract.Transact(opts, method, params...)
}

// GetAssetPrice is a free data retrieval call binding the contract method 0xb3596f07.
//
// Solidity: function getAssetPrice(address asset) view returns(uint256)
func (_IPriceOracleGetter *IPriceOracleGetterCaller) GetAssetPrice(opts *bind.CallOpts, asset common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IPriceOracleGetter.contract.Call(opts, &out, "getAssetPrice", asset)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAssetPrice is a free data retrieval call binding the contract method 0xb3596f07.
//
// Solidity: function getAssetPrice(address asset) view returns(uint256)
func (_IPriceOracleGetter *IPriceOracleGetterSession) GetAssetPrice(asset common.Address) (*big.Int, error) {
	return _IPriceOracleGetter.Contract.GetAssetPrice(&_IPriceOracleGetter.CallOpts, asset)
}

// GetAssetPrice is a free data retrieval call binding the contract method 0xb3596f07.
//
// Solidity: function getAssetPrice(address asset) view returns(uint256)
func (_IPriceOracleGetter *IPriceOracleGetterCallerSession) GetAssetPrice(asset common.Address) (*big.Int, error) {
	return _IPriceOracleGetter.Contract.GetAssetPrice(&_IPriceOracleGetter.CallOpts, asset)
}

// IReserveInterestRateStrategyABI is the input ABI used to generate the binding from.
const IReserveInterestRateStrategyABI = "[{\"inputs\":[],\"name\":\"baseVariableBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"utilizationRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStableDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVariableDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averageStableBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactor\",\"type\":\"uint256\"}],\"name\":\"calculateInterestRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableBorrowRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxVariableBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// IReserveInterestRateStrategy is an auto generated Go binding around an Ethereum contract.
type IReserveInterestRateStrategy struct {
	IReserveInterestRateStrategyCaller     // Read-only binding to the contract
	IReserveInterestRateStrategyTransactor // Write-only binding to the contract
	IReserveInterestRateStrategyFilterer   // Log filterer for contract events
}

// IReserveInterestRateStrategyCaller is an auto generated read-only Go binding around an Ethereum contract.
type IReserveInterestRateStrategyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IReserveInterestRateStrategyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IReserveInterestRateStrategyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IReserveInterestRateStrategyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IReserveInterestRateStrategyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IReserveInterestRateStrategySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IReserveInterestRateStrategySession struct {
	Contract     *IReserveInterestRateStrategy // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                 // Call options to use throughout this session
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// IReserveInterestRateStrategyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IReserveInterestRateStrategyCallerSession struct {
	Contract *IReserveInterestRateStrategyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                       // Call options to use throughout this session
}

// IReserveInterestRateStrategyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IReserveInterestRateStrategyTransactorSession struct {
	Contract     *IReserveInterestRateStrategyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                       // Transaction auth options to use throughout this session
}

// IReserveInterestRateStrategyRaw is an auto generated low-level Go binding around an Ethereum contract.
type IReserveInterestRateStrategyRaw struct {
	Contract *IReserveInterestRateStrategy // Generic contract binding to access the raw methods on
}

// IReserveInterestRateStrategyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IReserveInterestRateStrategyCallerRaw struct {
	Contract *IReserveInterestRateStrategyCaller // Generic read-only contract binding to access the raw methods on
}

// IReserveInterestRateStrategyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IReserveInterestRateStrategyTransactorRaw struct {
	Contract *IReserveInterestRateStrategyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIReserveInterestRateStrategy creates a new instance of IReserveInterestRateStrategy, bound to a specific deployed contract.
func NewIReserveInterestRateStrategy(address common.Address, backend bind.ContractBackend) (*IReserveInterestRateStrategy, error) {
	contract, err := bindIReserveInterestRateStrategy(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IReserveInterestRateStrategy{IReserveInterestRateStrategyCaller: IReserveInterestRateStrategyCaller{contract: contract}, IReserveInterestRateStrategyTransactor: IReserveInterestRateStrategyTransactor{contract: contract}, IReserveInterestRateStrategyFilterer: IReserveInterestRateStrategyFilterer{contract: contract}}, nil
}

// NewIReserveInterestRateStrategyCaller creates a new read-only instance of IReserveInterestRateStrategy, bound to a specific deployed contract.
func NewIReserveInterestRateStrategyCaller(address common.Address, caller bind.ContractCaller) (*IReserveInterestRateStrategyCaller, error) {
	contract, err := bindIReserveInterestRateStrategy(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IReserveInterestRateStrategyCaller{contract: contract}, nil
}

// NewIReserveInterestRateStrategyTransactor creates a new write-only instance of IReserveInterestRateStrategy, bound to a specific deployed contract.
func NewIReserveInterestRateStrategyTransactor(address common.Address, transactor bind.ContractTransactor) (*IReserveInterestRateStrategyTransactor, error) {
	contract, err := bindIReserveInterestRateStrategy(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IReserveInterestRateStrategyTransactor{contract: contract}, nil
}

// NewIReserveInterestRateStrategyFilterer creates a new log filterer instance of IReserveInterestRateStrategy, bound to a specific deployed contract.
func NewIReserveInterestRateStrategyFilterer(address common.Address, filterer bind.ContractFilterer) (*IReserveInterestRateStrategyFilterer, error) {
	contract, err := bindIReserveInterestRateStrategy(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IReserveInterestRateStrategyFilterer{contract: contract}, nil
}

// bindIReserveInterestRateStrategy binds a generic wrapper to an already deployed contract.
func bindIReserveInterestRateStrategy(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IReserveInterestRateStrategyABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IReserveInterestRateStrategy *IReserveInterestRateStrategyRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IReserveInterestRateStrategy.Contract.IReserveInterestRateStrategyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IReserveInterestRateStrategy *IReserveInterestRateStrategyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IReserveInterestRateStrategy.Contract.IReserveInterestRateStrategyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IReserveInterestRateStrategy *IReserveInterestRateStrategyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IReserveInterestRateStrategy.Contract.IReserveInterestRateStrategyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IReserveInterestRateStrategy *IReserveInterestRateStrategyCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IReserveInterestRateStrategy.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IReserveInterestRateStrategy *IReserveInterestRateStrategyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IReserveInterestRateStrategy.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IReserveInterestRateStrategy *IReserveInterestRateStrategyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IReserveInterestRateStrategy.Contract.contract.Transact(opts, method, params...)
}

// BaseVariableBorrowRate is a free data retrieval call binding the contract method 0xb2589544.
//
// Solidity: function baseVariableBorrowRate() view returns(uint256)
func (_IReserveInterestRateStrategy *IReserveInterestRateStrategyCaller) BaseVariableBorrowRate(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IReserveInterestRateStrategy.contract.Call(opts, &out, "baseVariableBorrowRate")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseVariableBorrowRate is a free data retrieval call binding the contract method 0xb2589544.
//
// Solidity: function baseVariableBorrowRate() view returns(uint256)
func (_IReserveInterestRateStrategy *IReserveInterestRateStrategySession) BaseVariableBorrowRate() (*big.Int, error) {
	return _IReserveInterestRateStrategy.Contract.BaseVariableBorrowRate(&_IReserveInterestRateStrategy.CallOpts)
}

// BaseVariableBorrowRate is a free data retrieval call binding the contract method 0xb2589544.
//
// Solidity: function baseVariableBorrowRate() view returns(uint256)
func (_IReserveInterestRateStrategy *IReserveInterestRateStrategyCallerSession) BaseVariableBorrowRate() (*big.Int, error) {
	return _IReserveInterestRateStrategy.Contract.BaseVariableBorrowRate(&_IReserveInterestRateStrategy.CallOpts)
}

// CalculateInterestRates is a free data retrieval call binding the contract method 0x9584df28.
//
// Solidity: function calculateInterestRates(address reserve, uint256 utilizationRate, uint256 totalStableDebt, uint256 totalVariableDebt, uint256 averageStableBorrowRate, uint256 reserveFactor) view returns(uint256 liquidityRate, uint256 stableBorrowRate, uint256 variableBorrowRate)
func (_IReserveInterestRateStrategy *IReserveInterestRateStrategyCaller) CalculateInterestRates(opts *bind.CallOpts, reserve common.Address, utilizationRate *big.Int, totalStableDebt *big.Int, totalVariableDebt *big.Int, averageStableBorrowRate *big.Int, reserveFactor *big.Int) (struct {
	LiquidityRate      *big.Int
	StableBorrowRate   *big.Int
	VariableBorrowRate *big.Int
}, error) {
	var out []interface{}
	err := _IReserveInterestRateStrategy.contract.Call(opts, &out, "calculateInterestRates", reserve, utilizationRate, totalStableDebt, totalVariableDebt, averageStableBorrowRate, reserveFactor)

	outstruct := new(struct {
		LiquidityRate      *big.Int
		StableBorrowRate   *big.Int
		VariableBorrowRate *big.Int
	})

	outstruct.LiquidityRate = out[0].(*big.Int)
	outstruct.StableBorrowRate = out[1].(*big.Int)
	outstruct.VariableBorrowRate = out[2].(*big.Int)

	return *outstruct, err

}

// CalculateInterestRates is a free data retrieval call binding the contract method 0x9584df28.
//
// Solidity: function calculateInterestRates(address reserve, uint256 utilizationRate, uint256 totalStableDebt, uint256 totalVariableDebt, uint256 averageStableBorrowRate, uint256 reserveFactor) view returns(uint256 liquidityRate, uint256 stableBorrowRate, uint256 variableBorrowRate)
func (_IReserveInterestRateStrategy *IReserveInterestRateStrategySession) CalculateInterestRates(reserve common.Address, utilizationRate *big.Int, totalStableDebt *big.Int, totalVariableDebt *big.Int, averageStableBorrowRate *big.Int, reserveFactor *big.Int) (struct {
	LiquidityRate      *big.Int
	StableBorrowRate   *big.Int
	VariableBorrowRate *big.Int
}, error) {
	return _IReserveInterestRateStrategy.Contract.CalculateInterestRates(&_IReserveInterestRateStrategy.CallOpts, reserve, utilizationRate, totalStableDebt, totalVariableDebt, averageStableBorrowRate, reserveFactor)
}

// CalculateInterestRates is a free data retrieval call binding the contract method 0x9584df28.
//
// Solidity: function calculateInterestRates(address reserve, uint256 utilizationRate, uint256 totalStableDebt, uint256 totalVariableDebt, uint256 averageStableBorrowRate, uint256 reserveFactor) view returns(uint256 liquidityRate, uint256 stableBorrowRate, uint256 variableBorrowRate)
func (_IReserveInterestRateStrategy *IReserveInterestRateStrategyCallerSession) CalculateInterestRates(reserve common.Address, utilizationRate *big.Int, totalStableDebt *big.Int, totalVariableDebt *big.Int, averageStableBorrowRate *big.Int, reserveFactor *big.Int) (struct {
	LiquidityRate      *big.Int
	StableBorrowRate   *big.Int
	VariableBorrowRate *big.Int
}, error) {
	return _IReserveInterestRateStrategy.Contract.CalculateInterestRates(&_IReserveInterestRateStrategy.CallOpts, reserve, utilizationRate, totalStableDebt, totalVariableDebt, averageStableBorrowRate, reserveFactor)
}

// GetMaxVariableBorrowRate is a free data retrieval call binding the contract method 0x80031e37.
//
// Solidity: function getMaxVariableBorrowRate() view returns(uint256)
func (_IReserveInterestRateStrategy *IReserveInterestRateStrategyCaller) GetMaxVariableBorrowRate(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IReserveInterestRateStrategy.contract.Call(opts, &out, "getMaxVariableBorrowRate")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMaxVariableBorrowRate is a free data retrieval call binding the contract method 0x80031e37.
//
// Solidity: function getMaxVariableBorrowRate() view returns(uint256)
func (_IReserveInterestRateStrategy *IReserveInterestRateStrategySession) GetMaxVariableBorrowRate() (*big.Int, error) {
	return _IReserveInterestRateStrategy.Contract.GetMaxVariableBorrowRate(&_IReserveInterestRateStrategy.CallOpts)
}

// GetMaxVariableBorrowRate is a free data retrieval call binding the contract method 0x80031e37.
//
// Solidity: function getMaxVariableBorrowRate() view returns(uint256)
func (_IReserveInterestRateStrategy *IReserveInterestRateStrategyCallerSession) GetMaxVariableBorrowRate() (*big.Int, error) {
	return _IReserveInterestRateStrategy.Contract.GetMaxVariableBorrowRate(&_IReserveInterestRateStrategy.CallOpts)
}

// IScaledBalanceTokenABI is the input ABI used to generate the binding from.
const IScaledBalanceTokenABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getScaledUserBalanceAndSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"scaledBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scaledTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// IScaledBalanceToken is an auto generated Go binding around an Ethereum contract.
type IScaledBalanceToken struct {
	IScaledBalanceTokenCaller     // Read-only binding to the contract
	IScaledBalanceTokenTransactor // Write-only binding to the contract
	IScaledBalanceTokenFilterer   // Log filterer for contract events
}

// IScaledBalanceTokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type IScaledBalanceTokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IScaledBalanceTokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IScaledBalanceTokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IScaledBalanceTokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IScaledBalanceTokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IScaledBalanceTokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IScaledBalanceTokenSession struct {
	Contract     *IScaledBalanceToken // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// IScaledBalanceTokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IScaledBalanceTokenCallerSession struct {
	Contract *IScaledBalanceTokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// IScaledBalanceTokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IScaledBalanceTokenTransactorSession struct {
	Contract     *IScaledBalanceTokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// IScaledBalanceTokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type IScaledBalanceTokenRaw struct {
	Contract *IScaledBalanceToken // Generic contract binding to access the raw methods on
}

// IScaledBalanceTokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IScaledBalanceTokenCallerRaw struct {
	Contract *IScaledBalanceTokenCaller // Generic read-only contract binding to access the raw methods on
}

// IScaledBalanceTokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IScaledBalanceTokenTransactorRaw struct {
	Contract *IScaledBalanceTokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIScaledBalanceToken creates a new instance of IScaledBalanceToken, bound to a specific deployed contract.
func NewIScaledBalanceToken(address common.Address, backend bind.ContractBackend) (*IScaledBalanceToken, error) {
	contract, err := bindIScaledBalanceToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IScaledBalanceToken{IScaledBalanceTokenCaller: IScaledBalanceTokenCaller{contract: contract}, IScaledBalanceTokenTransactor: IScaledBalanceTokenTransactor{contract: contract}, IScaledBalanceTokenFilterer: IScaledBalanceTokenFilterer{contract: contract}}, nil
}

// NewIScaledBalanceTokenCaller creates a new read-only instance of IScaledBalanceToken, bound to a specific deployed contract.
func NewIScaledBalanceTokenCaller(address common.Address, caller bind.ContractCaller) (*IScaledBalanceTokenCaller, error) {
	contract, err := bindIScaledBalanceToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IScaledBalanceTokenCaller{contract: contract}, nil
}

// NewIScaledBalanceTokenTransactor creates a new write-only instance of IScaledBalanceToken, bound to a specific deployed contract.
func NewIScaledBalanceTokenTransactor(address common.Address, transactor bind.ContractTransactor) (*IScaledBalanceTokenTransactor, error) {
	contract, err := bindIScaledBalanceToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IScaledBalanceTokenTransactor{contract: contract}, nil
}

// NewIScaledBalanceTokenFilterer creates a new log filterer instance of IScaledBalanceToken, bound to a specific deployed contract.
func NewIScaledBalanceTokenFilterer(address common.Address, filterer bind.ContractFilterer) (*IScaledBalanceTokenFilterer, error) {
	contract, err := bindIScaledBalanceToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IScaledBalanceTokenFilterer{contract: contract}, nil
}

// bindIScaledBalanceToken binds a generic wrapper to an already deployed contract.
func bindIScaledBalanceToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IScaledBalanceTokenABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IScaledBalanceToken *IScaledBalanceTokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IScaledBalanceToken.Contract.IScaledBalanceTokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IScaledBalanceToken *IScaledBalanceTokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IScaledBalanceToken.Contract.IScaledBalanceTokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IScaledBalanceToken *IScaledBalanceTokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IScaledBalanceToken.Contract.IScaledBalanceTokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IScaledBalanceToken *IScaledBalanceTokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IScaledBalanceToken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IScaledBalanceToken *IScaledBalanceTokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IScaledBalanceToken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IScaledBalanceToken *IScaledBalanceTokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IScaledBalanceToken.Contract.contract.Transact(opts, method, params...)
}

// GetScaledUserBalanceAndSupply is a free data retrieval call binding the contract method 0x0afbcdc9.
//
// Solidity: function getScaledUserBalanceAndSupply(address user) view returns(uint256, uint256)
func (_IScaledBalanceToken *IScaledBalanceTokenCaller) GetScaledUserBalanceAndSupply(opts *bind.CallOpts, user common.Address) (*big.Int, *big.Int, error) {
	var out []interface{}
	err := _IScaledBalanceToken.contract.Call(opts, &out, "getScaledUserBalanceAndSupply", user)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// GetScaledUserBalanceAndSupply is a free data retrieval call binding the contract method 0x0afbcdc9.
//
// Solidity: function getScaledUserBalanceAndSupply(address user) view returns(uint256, uint256)
func (_IScaledBalanceToken *IScaledBalanceTokenSession) GetScaledUserBalanceAndSupply(user common.Address) (*big.Int, *big.Int, error) {
	return _IScaledBalanceToken.Contract.GetScaledUserBalanceAndSupply(&_IScaledBalanceToken.CallOpts, user)
}

// GetScaledUserBalanceAndSupply is a free data retrieval call binding the contract method 0x0afbcdc9.
//
// Solidity: function getScaledUserBalanceAndSupply(address user) view returns(uint256, uint256)
func (_IScaledBalanceToken *IScaledBalanceTokenCallerSession) GetScaledUserBalanceAndSupply(user common.Address) (*big.Int, *big.Int, error) {
	return _IScaledBalanceToken.Contract.GetScaledUserBalanceAndSupply(&_IScaledBalanceToken.CallOpts, user)
}

// ScaledBalanceOf is a free data retrieval call binding the contract method 0x1da24f3e.
//
// Solidity: function scaledBalanceOf(address user) view returns(uint256)
func (_IScaledBalanceToken *IScaledBalanceTokenCaller) ScaledBalanceOf(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IScaledBalanceToken.contract.Call(opts, &out, "scaledBalanceOf", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ScaledBalanceOf is a free data retrieval call binding the contract method 0x1da24f3e.
//
// Solidity: function scaledBalanceOf(address user) view returns(uint256)
func (_IScaledBalanceToken *IScaledBalanceTokenSession) ScaledBalanceOf(user common.Address) (*big.Int, error) {
	return _IScaledBalanceToken.Contract.ScaledBalanceOf(&_IScaledBalanceToken.CallOpts, user)
}

// ScaledBalanceOf is a free data retrieval call binding the contract method 0x1da24f3e.
//
// Solidity: function scaledBalanceOf(address user) view returns(uint256)
func (_IScaledBalanceToken *IScaledBalanceTokenCallerSession) ScaledBalanceOf(user common.Address) (*big.Int, error) {
	return _IScaledBalanceToken.Contract.ScaledBalanceOf(&_IScaledBalanceToken.CallOpts, user)
}

// ScaledTotalSupply is a free data retrieval call binding the contract method 0xb1bf962d.
//
// Solidity: function scaledTotalSupply() view returns(uint256)
func (_IScaledBalanceToken *IScaledBalanceTokenCaller) ScaledTotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IScaledBalanceToken.contract.Call(opts, &out, "scaledTotalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ScaledTotalSupply is a free data retrieval call binding the contract method 0xb1bf962d.
//
// Solidity: function scaledTotalSupply() view returns(uint256)
func (_IScaledBalanceToken *IScaledBalanceTokenSession) ScaledTotalSupply() (*big.Int, error) {
	return _IScaledBalanceToken.Contract.ScaledTotalSupply(&_IScaledBalanceToken.CallOpts)
}

// ScaledTotalSupply is a free data retrieval call binding the contract method 0xb1bf962d.
//
// Solidity: function scaledTotalSupply() view returns(uint256)
func (_IScaledBalanceToken *IScaledBalanceTokenCallerSession) ScaledTotalSupply() (*big.Int, error) {
	return _IScaledBalanceToken.Contract.ScaledTotalSupply(&_IScaledBalanceToken.CallOpts)
}

// IStableDebtTokenABI is the input ABI used to generate the binding from.
const IStableDebtTokenABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceIncrease\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"avgStableRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceIncrease\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"avgStableRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAverageStableRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupplyData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalSupplyAndAvgRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalSupplyLastUpdated\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserLastUpdated\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserStableRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"principalBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// IStableDebtToken is an auto generated Go binding around an Ethereum contract.
type IStableDebtToken struct {
	IStableDebtTokenCaller     // Read-only binding to the contract
	IStableDebtTokenTransactor // Write-only binding to the contract
	IStableDebtTokenFilterer   // Log filterer for contract events
}

// IStableDebtTokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type IStableDebtTokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IStableDebtTokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IStableDebtTokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IStableDebtTokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IStableDebtTokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IStableDebtTokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IStableDebtTokenSession struct {
	Contract     *IStableDebtToken // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IStableDebtTokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IStableDebtTokenCallerSession struct {
	Contract *IStableDebtTokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// IStableDebtTokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IStableDebtTokenTransactorSession struct {
	Contract     *IStableDebtTokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// IStableDebtTokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type IStableDebtTokenRaw struct {
	Contract *IStableDebtToken // Generic contract binding to access the raw methods on
}

// IStableDebtTokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IStableDebtTokenCallerRaw struct {
	Contract *IStableDebtTokenCaller // Generic read-only contract binding to access the raw methods on
}

// IStableDebtTokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IStableDebtTokenTransactorRaw struct {
	Contract *IStableDebtTokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIStableDebtToken creates a new instance of IStableDebtToken, bound to a specific deployed contract.
func NewIStableDebtToken(address common.Address, backend bind.ContractBackend) (*IStableDebtToken, error) {
	contract, err := bindIStableDebtToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IStableDebtToken{IStableDebtTokenCaller: IStableDebtTokenCaller{contract: contract}, IStableDebtTokenTransactor: IStableDebtTokenTransactor{contract: contract}, IStableDebtTokenFilterer: IStableDebtTokenFilterer{contract: contract}}, nil
}

// NewIStableDebtTokenCaller creates a new read-only instance of IStableDebtToken, bound to a specific deployed contract.
func NewIStableDebtTokenCaller(address common.Address, caller bind.ContractCaller) (*IStableDebtTokenCaller, error) {
	contract, err := bindIStableDebtToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IStableDebtTokenCaller{contract: contract}, nil
}

// NewIStableDebtTokenTransactor creates a new write-only instance of IStableDebtToken, bound to a specific deployed contract.
func NewIStableDebtTokenTransactor(address common.Address, transactor bind.ContractTransactor) (*IStableDebtTokenTransactor, error) {
	contract, err := bindIStableDebtToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IStableDebtTokenTransactor{contract: contract}, nil
}

// NewIStableDebtTokenFilterer creates a new log filterer instance of IStableDebtToken, bound to a specific deployed contract.
func NewIStableDebtTokenFilterer(address common.Address, filterer bind.ContractFilterer) (*IStableDebtTokenFilterer, error) {
	contract, err := bindIStableDebtToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IStableDebtTokenFilterer{contract: contract}, nil
}

// bindIStableDebtToken binds a generic wrapper to an already deployed contract.
func bindIStableDebtToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IStableDebtTokenABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IStableDebtToken *IStableDebtTokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IStableDebtToken.Contract.IStableDebtTokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IStableDebtToken *IStableDebtTokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IStableDebtToken.Contract.IStableDebtTokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IStableDebtToken *IStableDebtTokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IStableDebtToken.Contract.IStableDebtTokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IStableDebtToken *IStableDebtTokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IStableDebtToken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IStableDebtToken *IStableDebtTokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IStableDebtToken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IStableDebtToken *IStableDebtTokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IStableDebtToken.Contract.contract.Transact(opts, method, params...)
}

// GetAverageStableRate is a free data retrieval call binding the contract method 0x90f6fcf2.
//
// Solidity: function getAverageStableRate() view returns(uint256)
func (_IStableDebtToken *IStableDebtTokenCaller) GetAverageStableRate(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IStableDebtToken.contract.Call(opts, &out, "getAverageStableRate")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAverageStableRate is a free data retrieval call binding the contract method 0x90f6fcf2.
//
// Solidity: function getAverageStableRate() view returns(uint256)
func (_IStableDebtToken *IStableDebtTokenSession) GetAverageStableRate() (*big.Int, error) {
	return _IStableDebtToken.Contract.GetAverageStableRate(&_IStableDebtToken.CallOpts)
}

// GetAverageStableRate is a free data retrieval call binding the contract method 0x90f6fcf2.
//
// Solidity: function getAverageStableRate() view returns(uint256)
func (_IStableDebtToken *IStableDebtTokenCallerSession) GetAverageStableRate() (*big.Int, error) {
	return _IStableDebtToken.Contract.GetAverageStableRate(&_IStableDebtToken.CallOpts)
}

// GetSupplyData is a free data retrieval call binding the contract method 0x79774338.
//
// Solidity: function getSupplyData() view returns(uint256, uint256, uint256, uint40)
func (_IStableDebtToken *IStableDebtTokenCaller) GetSupplyData(opts *bind.CallOpts) (*big.Int, *big.Int, *big.Int, *big.Int, error) {
	var out []interface{}
	err := _IStableDebtToken.contract.Call(opts, &out, "getSupplyData")

	if err != nil {
		return *new(*big.Int), *new(*big.Int), *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	out3 := *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return out0, out1, out2, out3, err

}

// GetSupplyData is a free data retrieval call binding the contract method 0x79774338.
//
// Solidity: function getSupplyData() view returns(uint256, uint256, uint256, uint40)
func (_IStableDebtToken *IStableDebtTokenSession) GetSupplyData() (*big.Int, *big.Int, *big.Int, *big.Int, error) {
	return _IStableDebtToken.Contract.GetSupplyData(&_IStableDebtToken.CallOpts)
}

// GetSupplyData is a free data retrieval call binding the contract method 0x79774338.
//
// Solidity: function getSupplyData() view returns(uint256, uint256, uint256, uint40)
func (_IStableDebtToken *IStableDebtTokenCallerSession) GetSupplyData() (*big.Int, *big.Int, *big.Int, *big.Int, error) {
	return _IStableDebtToken.Contract.GetSupplyData(&_IStableDebtToken.CallOpts)
}

// GetTotalSupplyAndAvgRate is a free data retrieval call binding the contract method 0xf731e9be.
//
// Solidity: function getTotalSupplyAndAvgRate() view returns(uint256, uint256)
func (_IStableDebtToken *IStableDebtTokenCaller) GetTotalSupplyAndAvgRate(opts *bind.CallOpts) (*big.Int, *big.Int, error) {
	var out []interface{}
	err := _IStableDebtToken.contract.Call(opts, &out, "getTotalSupplyAndAvgRate")

	if err != nil {
		return *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// GetTotalSupplyAndAvgRate is a free data retrieval call binding the contract method 0xf731e9be.
//
// Solidity: function getTotalSupplyAndAvgRate() view returns(uint256, uint256)
func (_IStableDebtToken *IStableDebtTokenSession) GetTotalSupplyAndAvgRate() (*big.Int, *big.Int, error) {
	return _IStableDebtToken.Contract.GetTotalSupplyAndAvgRate(&_IStableDebtToken.CallOpts)
}

// GetTotalSupplyAndAvgRate is a free data retrieval call binding the contract method 0xf731e9be.
//
// Solidity: function getTotalSupplyAndAvgRate() view returns(uint256, uint256)
func (_IStableDebtToken *IStableDebtTokenCallerSession) GetTotalSupplyAndAvgRate() (*big.Int, *big.Int, error) {
	return _IStableDebtToken.Contract.GetTotalSupplyAndAvgRate(&_IStableDebtToken.CallOpts)
}

// GetTotalSupplyLastUpdated is a free data retrieval call binding the contract method 0xe7484890.
//
// Solidity: function getTotalSupplyLastUpdated() view returns(uint40)
func (_IStableDebtToken *IStableDebtTokenCaller) GetTotalSupplyLastUpdated(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IStableDebtToken.contract.Call(opts, &out, "getTotalSupplyLastUpdated")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalSupplyLastUpdated is a free data retrieval call binding the contract method 0xe7484890.
//
// Solidity: function getTotalSupplyLastUpdated() view returns(uint40)
func (_IStableDebtToken *IStableDebtTokenSession) GetTotalSupplyLastUpdated() (*big.Int, error) {
	return _IStableDebtToken.Contract.GetTotalSupplyLastUpdated(&_IStableDebtToken.CallOpts)
}

// GetTotalSupplyLastUpdated is a free data retrieval call binding the contract method 0xe7484890.
//
// Solidity: function getTotalSupplyLastUpdated() view returns(uint40)
func (_IStableDebtToken *IStableDebtTokenCallerSession) GetTotalSupplyLastUpdated() (*big.Int, error) {
	return _IStableDebtToken.Contract.GetTotalSupplyLastUpdated(&_IStableDebtToken.CallOpts)
}

// GetUserLastUpdated is a free data retrieval call binding the contract method 0x79ce6b8c.
//
// Solidity: function getUserLastUpdated(address user) view returns(uint40)
func (_IStableDebtToken *IStableDebtTokenCaller) GetUserLastUpdated(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IStableDebtToken.contract.Call(opts, &out, "getUserLastUpdated", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetUserLastUpdated is a free data retrieval call binding the contract method 0x79ce6b8c.
//
// Solidity: function getUserLastUpdated(address user) view returns(uint40)
func (_IStableDebtToken *IStableDebtTokenSession) GetUserLastUpdated(user common.Address) (*big.Int, error) {
	return _IStableDebtToken.Contract.GetUserLastUpdated(&_IStableDebtToken.CallOpts, user)
}

// GetUserLastUpdated is a free data retrieval call binding the contract method 0x79ce6b8c.
//
// Solidity: function getUserLastUpdated(address user) view returns(uint40)
func (_IStableDebtToken *IStableDebtTokenCallerSession) GetUserLastUpdated(user common.Address) (*big.Int, error) {
	return _IStableDebtToken.Contract.GetUserLastUpdated(&_IStableDebtToken.CallOpts, user)
}

// GetUserStableRate is a free data retrieval call binding the contract method 0xe78c9b3b.
//
// Solidity: function getUserStableRate(address user) view returns(uint256)
func (_IStableDebtToken *IStableDebtTokenCaller) GetUserStableRate(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IStableDebtToken.contract.Call(opts, &out, "getUserStableRate", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetUserStableRate is a free data retrieval call binding the contract method 0xe78c9b3b.
//
// Solidity: function getUserStableRate(address user) view returns(uint256)
func (_IStableDebtToken *IStableDebtTokenSession) GetUserStableRate(user common.Address) (*big.Int, error) {
	return _IStableDebtToken.Contract.GetUserStableRate(&_IStableDebtToken.CallOpts, user)
}

// GetUserStableRate is a free data retrieval call binding the contract method 0xe78c9b3b.
//
// Solidity: function getUserStableRate(address user) view returns(uint256)
func (_IStableDebtToken *IStableDebtTokenCallerSession) GetUserStableRate(user common.Address) (*big.Int, error) {
	return _IStableDebtToken.Contract.GetUserStableRate(&_IStableDebtToken.CallOpts, user)
}

// PrincipalBalanceOf is a free data retrieval call binding the contract method 0xc634dfaa.
//
// Solidity: function principalBalanceOf(address user) view returns(uint256)
func (_IStableDebtToken *IStableDebtTokenCaller) PrincipalBalanceOf(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IStableDebtToken.contract.Call(opts, &out, "principalBalanceOf", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PrincipalBalanceOf is a free data retrieval call binding the contract method 0xc634dfaa.
//
// Solidity: function principalBalanceOf(address user) view returns(uint256)
func (_IStableDebtToken *IStableDebtTokenSession) PrincipalBalanceOf(user common.Address) (*big.Int, error) {
	return _IStableDebtToken.Contract.PrincipalBalanceOf(&_IStableDebtToken.CallOpts, user)
}

// PrincipalBalanceOf is a free data retrieval call binding the contract method 0xc634dfaa.
//
// Solidity: function principalBalanceOf(address user) view returns(uint256)
func (_IStableDebtToken *IStableDebtTokenCallerSession) PrincipalBalanceOf(user common.Address) (*big.Int, error) {
	return _IStableDebtToken.Contract.PrincipalBalanceOf(&_IStableDebtToken.CallOpts, user)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address user, uint256 amount) returns()
func (_IStableDebtToken *IStableDebtTokenTransactor) Burn(opts *bind.TransactOpts, user common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IStableDebtToken.contract.Transact(opts, "burn", user, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address user, uint256 amount) returns()
func (_IStableDebtToken *IStableDebtTokenSession) Burn(user common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IStableDebtToken.Contract.Burn(&_IStableDebtToken.TransactOpts, user, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address user, uint256 amount) returns()
func (_IStableDebtToken *IStableDebtTokenTransactorSession) Burn(user common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IStableDebtToken.Contract.Burn(&_IStableDebtToken.TransactOpts, user, amount)
}

// Mint is a paid mutator transaction binding the contract method 0xb3f1c93d.
//
// Solidity: function mint(address user, address onBehalfOf, uint256 amount, uint256 rate) returns(bool)
func (_IStableDebtToken *IStableDebtTokenTransactor) Mint(opts *bind.TransactOpts, user common.Address, onBehalfOf common.Address, amount *big.Int, rate *big.Int) (*types.Transaction, error) {
	return _IStableDebtToken.contract.Transact(opts, "mint", user, onBehalfOf, amount, rate)
}

// Mint is a paid mutator transaction binding the contract method 0xb3f1c93d.
//
// Solidity: function mint(address user, address onBehalfOf, uint256 amount, uint256 rate) returns(bool)
func (_IStableDebtToken *IStableDebtTokenSession) Mint(user common.Address, onBehalfOf common.Address, amount *big.Int, rate *big.Int) (*types.Transaction, error) {
	return _IStableDebtToken.Contract.Mint(&_IStableDebtToken.TransactOpts, user, onBehalfOf, amount, rate)
}

// Mint is a paid mutator transaction binding the contract method 0xb3f1c93d.
//
// Solidity: function mint(address user, address onBehalfOf, uint256 amount, uint256 rate) returns(bool)
func (_IStableDebtToken *IStableDebtTokenTransactorSession) Mint(user common.Address, onBehalfOf common.Address, amount *big.Int, rate *big.Int) (*types.Transaction, error) {
	return _IStableDebtToken.Contract.Mint(&_IStableDebtToken.TransactOpts, user, onBehalfOf, amount, rate)
}

// IStableDebtTokenBurnIterator is returned from FilterBurn and is used to iterate over the raw logs and unpacked data for Burn events raised by the IStableDebtToken contract.
type IStableDebtTokenBurnIterator struct {
	Event *IStableDebtTokenBurn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IStableDebtTokenBurnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IStableDebtTokenBurn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IStableDebtTokenBurn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IStableDebtTokenBurnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IStableDebtTokenBurnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IStableDebtTokenBurn represents a Burn event raised by the IStableDebtToken contract.
type IStableDebtTokenBurn struct {
	User            common.Address
	Amount          *big.Int
	CurrentBalance  *big.Int
	BalanceIncrease *big.Int
	AvgStableRate   *big.Int
	NewTotalSupply  *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterBurn is a free log retrieval operation binding the contract event 0x44bd20a79e993bdcc7cbedf54a3b4d19fb78490124b6b90d04fe3242eea579e8.
//
// Solidity: event Burn(address indexed user, uint256 amount, uint256 currentBalance, uint256 balanceIncrease, uint256 avgStableRate, uint256 newTotalSupply)
func (_IStableDebtToken *IStableDebtTokenFilterer) FilterBurn(opts *bind.FilterOpts, user []common.Address) (*IStableDebtTokenBurnIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IStableDebtToken.contract.FilterLogs(opts, "Burn", userRule)
	if err != nil {
		return nil, err
	}
	return &IStableDebtTokenBurnIterator{contract: _IStableDebtToken.contract, event: "Burn", logs: logs, sub: sub}, nil
}

// WatchBurn is a free log subscription operation binding the contract event 0x44bd20a79e993bdcc7cbedf54a3b4d19fb78490124b6b90d04fe3242eea579e8.
//
// Solidity: event Burn(address indexed user, uint256 amount, uint256 currentBalance, uint256 balanceIncrease, uint256 avgStableRate, uint256 newTotalSupply)
func (_IStableDebtToken *IStableDebtTokenFilterer) WatchBurn(opts *bind.WatchOpts, sink chan<- *IStableDebtTokenBurn, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IStableDebtToken.contract.WatchLogs(opts, "Burn", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IStableDebtTokenBurn)
				if err := _IStableDebtToken.contract.UnpackLog(event, "Burn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurn is a log parse operation binding the contract event 0x44bd20a79e993bdcc7cbedf54a3b4d19fb78490124b6b90d04fe3242eea579e8.
//
// Solidity: event Burn(address indexed user, uint256 amount, uint256 currentBalance, uint256 balanceIncrease, uint256 avgStableRate, uint256 newTotalSupply)
func (_IStableDebtToken *IStableDebtTokenFilterer) ParseBurn(log types.Log) (*IStableDebtTokenBurn, error) {
	event := new(IStableDebtTokenBurn)
	if err := _IStableDebtToken.contract.UnpackLog(event, "Burn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IStableDebtTokenMintIterator is returned from FilterMint and is used to iterate over the raw logs and unpacked data for Mint events raised by the IStableDebtToken contract.
type IStableDebtTokenMintIterator struct {
	Event *IStableDebtTokenMint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IStableDebtTokenMintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IStableDebtTokenMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IStableDebtTokenMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IStableDebtTokenMintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IStableDebtTokenMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IStableDebtTokenMint represents a Mint event raised by the IStableDebtToken contract.
type IStableDebtTokenMint struct {
	User            common.Address
	OnBehalfOf      common.Address
	Amount          *big.Int
	CurrentBalance  *big.Int
	BalanceIncrease *big.Int
	NewRate         *big.Int
	AvgStableRate   *big.Int
	NewTotalSupply  *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterMint is a free log retrieval operation binding the contract event 0xc16f4e4ca34d790de4c656c72fd015c667d688f20be64eea360618545c4c530f.
//
// Solidity: event Mint(address indexed user, address indexed onBehalfOf, uint256 amount, uint256 currentBalance, uint256 balanceIncrease, uint256 newRate, uint256 avgStableRate, uint256 newTotalSupply)
func (_IStableDebtToken *IStableDebtTokenFilterer) FilterMint(opts *bind.FilterOpts, user []common.Address, onBehalfOf []common.Address) (*IStableDebtTokenMintIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var onBehalfOfRule []interface{}
	for _, onBehalfOfItem := range onBehalfOf {
		onBehalfOfRule = append(onBehalfOfRule, onBehalfOfItem)
	}

	logs, sub, err := _IStableDebtToken.contract.FilterLogs(opts, "Mint", userRule, onBehalfOfRule)
	if err != nil {
		return nil, err
	}
	return &IStableDebtTokenMintIterator{contract: _IStableDebtToken.contract, event: "Mint", logs: logs, sub: sub}, nil
}

// WatchMint is a free log subscription operation binding the contract event 0xc16f4e4ca34d790de4c656c72fd015c667d688f20be64eea360618545c4c530f.
//
// Solidity: event Mint(address indexed user, address indexed onBehalfOf, uint256 amount, uint256 currentBalance, uint256 balanceIncrease, uint256 newRate, uint256 avgStableRate, uint256 newTotalSupply)
func (_IStableDebtToken *IStableDebtTokenFilterer) WatchMint(opts *bind.WatchOpts, sink chan<- *IStableDebtTokenMint, user []common.Address, onBehalfOf []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var onBehalfOfRule []interface{}
	for _, onBehalfOfItem := range onBehalfOf {
		onBehalfOfRule = append(onBehalfOfRule, onBehalfOfItem)
	}

	logs, sub, err := _IStableDebtToken.contract.WatchLogs(opts, "Mint", userRule, onBehalfOfRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IStableDebtTokenMint)
				if err := _IStableDebtToken.contract.UnpackLog(event, "Mint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMint is a log parse operation binding the contract event 0xc16f4e4ca34d790de4c656c72fd015c667d688f20be64eea360618545c4c530f.
//
// Solidity: event Mint(address indexed user, address indexed onBehalfOf, uint256 amount, uint256 currentBalance, uint256 balanceIncrease, uint256 newRate, uint256 avgStableRate, uint256 newTotalSupply)
func (_IStableDebtToken *IStableDebtTokenFilterer) ParseMint(log types.Log) (*IStableDebtTokenMint, error) {
	event := new(IStableDebtTokenMint)
	if err := _IStableDebtToken.contract.UnpackLog(event, "Mint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ITokenConfigurationABI is the input ABI used to generate the binding from.
const ITokenConfigurationABI = "[{\"inputs\":[],\"name\":\"POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNDERLYING_ASSET_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// ITokenConfiguration is an auto generated Go binding around an Ethereum contract.
type ITokenConfiguration struct {
	ITokenConfigurationCaller     // Read-only binding to the contract
	ITokenConfigurationTransactor // Write-only binding to the contract
	ITokenConfigurationFilterer   // Log filterer for contract events
}

// ITokenConfigurationCaller is an auto generated read-only Go binding around an Ethereum contract.
type ITokenConfigurationCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ITokenConfigurationTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ITokenConfigurationTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ITokenConfigurationFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ITokenConfigurationFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ITokenConfigurationSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ITokenConfigurationSession struct {
	Contract     *ITokenConfiguration // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ITokenConfigurationCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ITokenConfigurationCallerSession struct {
	Contract *ITokenConfigurationCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// ITokenConfigurationTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ITokenConfigurationTransactorSession struct {
	Contract     *ITokenConfigurationTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// ITokenConfigurationRaw is an auto generated low-level Go binding around an Ethereum contract.
type ITokenConfigurationRaw struct {
	Contract *ITokenConfiguration // Generic contract binding to access the raw methods on
}

// ITokenConfigurationCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ITokenConfigurationCallerRaw struct {
	Contract *ITokenConfigurationCaller // Generic read-only contract binding to access the raw methods on
}

// ITokenConfigurationTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ITokenConfigurationTransactorRaw struct {
	Contract *ITokenConfigurationTransactor // Generic write-only contract binding to access the raw methods on
}

// NewITokenConfiguration creates a new instance of ITokenConfiguration, bound to a specific deployed contract.
func NewITokenConfiguration(address common.Address, backend bind.ContractBackend) (*ITokenConfiguration, error) {
	contract, err := bindITokenConfiguration(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ITokenConfiguration{ITokenConfigurationCaller: ITokenConfigurationCaller{contract: contract}, ITokenConfigurationTransactor: ITokenConfigurationTransactor{contract: contract}, ITokenConfigurationFilterer: ITokenConfigurationFilterer{contract: contract}}, nil
}

// NewITokenConfigurationCaller creates a new read-only instance of ITokenConfiguration, bound to a specific deployed contract.
func NewITokenConfigurationCaller(address common.Address, caller bind.ContractCaller) (*ITokenConfigurationCaller, error) {
	contract, err := bindITokenConfiguration(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ITokenConfigurationCaller{contract: contract}, nil
}

// NewITokenConfigurationTransactor creates a new write-only instance of ITokenConfiguration, bound to a specific deployed contract.
func NewITokenConfigurationTransactor(address common.Address, transactor bind.ContractTransactor) (*ITokenConfigurationTransactor, error) {
	contract, err := bindITokenConfiguration(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ITokenConfigurationTransactor{contract: contract}, nil
}

// NewITokenConfigurationFilterer creates a new log filterer instance of ITokenConfiguration, bound to a specific deployed contract.
func NewITokenConfigurationFilterer(address common.Address, filterer bind.ContractFilterer) (*ITokenConfigurationFilterer, error) {
	contract, err := bindITokenConfiguration(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ITokenConfigurationFilterer{contract: contract}, nil
}

// bindITokenConfiguration binds a generic wrapper to an already deployed contract.
func bindITokenConfiguration(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ITokenConfigurationABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ITokenConfiguration *ITokenConfigurationRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ITokenConfiguration.Contract.ITokenConfigurationCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ITokenConfiguration *ITokenConfigurationRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ITokenConfiguration.Contract.ITokenConfigurationTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ITokenConfiguration *ITokenConfigurationRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ITokenConfiguration.Contract.ITokenConfigurationTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ITokenConfiguration *ITokenConfigurationCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ITokenConfiguration.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ITokenConfiguration *ITokenConfigurationTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ITokenConfiguration.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ITokenConfiguration *ITokenConfigurationTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ITokenConfiguration.Contract.contract.Transact(opts, method, params...)
}

// POOL is a free data retrieval call binding the contract method 0x7535d246.
//
// Solidity: function POOL() view returns(address)
func (_ITokenConfiguration *ITokenConfigurationCaller) POOL(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ITokenConfiguration.contract.Call(opts, &out, "POOL")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// POOL is a free data retrieval call binding the contract method 0x7535d246.
//
// Solidity: function POOL() view returns(address)
func (_ITokenConfiguration *ITokenConfigurationSession) POOL() (common.Address, error) {
	return _ITokenConfiguration.Contract.POOL(&_ITokenConfiguration.CallOpts)
}

// POOL is a free data retrieval call binding the contract method 0x7535d246.
//
// Solidity: function POOL() view returns(address)
func (_ITokenConfiguration *ITokenConfigurationCallerSession) POOL() (common.Address, error) {
	return _ITokenConfiguration.Contract.POOL(&_ITokenConfiguration.CallOpts)
}

// UNDERLYINGASSETADDRESS is a free data retrieval call binding the contract method 0xb16a19de.
//
// Solidity: function UNDERLYING_ASSET_ADDRESS() view returns(address)
func (_ITokenConfiguration *ITokenConfigurationCaller) UNDERLYINGASSETADDRESS(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ITokenConfiguration.contract.Call(opts, &out, "UNDERLYING_ASSET_ADDRESS")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// UNDERLYINGASSETADDRESS is a free data retrieval call binding the contract method 0xb16a19de.
//
// Solidity: function UNDERLYING_ASSET_ADDRESS() view returns(address)
func (_ITokenConfiguration *ITokenConfigurationSession) UNDERLYINGASSETADDRESS() (common.Address, error) {
	return _ITokenConfiguration.Contract.UNDERLYINGASSETADDRESS(&_ITokenConfiguration.CallOpts)
}

// UNDERLYINGASSETADDRESS is a free data retrieval call binding the contract method 0xb16a19de.
//
// Solidity: function UNDERLYING_ASSET_ADDRESS() view returns(address)
func (_ITokenConfiguration *ITokenConfigurationCallerSession) UNDERLYINGASSETADDRESS() (common.Address, error) {
	return _ITokenConfiguration.Contract.UNDERLYINGASSETADDRESS(&_ITokenConfiguration.CallOpts)
}

// IUiPoolDataProviderABI is the input ABI used to generate the binding from.
const IUiPoolDataProviderABI = "[{\"inputs\":[{\"internalType\":\"contractILendingPoolAddressesProvider\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getReservesData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseLTVasCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveLiquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveLiquidationBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"usageAsCollateralEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"borrowingEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"stableBorrowRateEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFrozen\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"liquidityIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"variableBorrowIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"liquidityRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"variableBorrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"stableBorrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint40\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"aTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableDebtTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"variableDebtTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interestRateStrategyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"availableLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPrincipalStableDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averageStableRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableDebtLastUpdateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalScaledVariableDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceInEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableRateSlope1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableRateSlope2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableRateSlope1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableRateSlope2\",\"type\":\"uint256\"}],\"internalType\":\"structIUiPoolDataProvider.AggregatedReserveData[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scaledATokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"usageAsCollateralEnabledOnUser\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"stableBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scaledVariableDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalStableDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableBorrowLastUpdateTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"structIUiPoolDataProvider.UserReserveData[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// IUiPoolDataProvider is an auto generated Go binding around an Ethereum contract.
type IUiPoolDataProvider struct {
	IUiPoolDataProviderCaller     // Read-only binding to the contract
	IUiPoolDataProviderTransactor // Write-only binding to the contract
	IUiPoolDataProviderFilterer   // Log filterer for contract events
}

// IUiPoolDataProviderCaller is an auto generated read-only Go binding around an Ethereum contract.
type IUiPoolDataProviderCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IUiPoolDataProviderTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IUiPoolDataProviderTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IUiPoolDataProviderFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IUiPoolDataProviderFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IUiPoolDataProviderSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IUiPoolDataProviderSession struct {
	Contract     *IUiPoolDataProvider // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// IUiPoolDataProviderCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IUiPoolDataProviderCallerSession struct {
	Contract *IUiPoolDataProviderCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// IUiPoolDataProviderTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IUiPoolDataProviderTransactorSession struct {
	Contract     *IUiPoolDataProviderTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// IUiPoolDataProviderRaw is an auto generated low-level Go binding around an Ethereum contract.
type IUiPoolDataProviderRaw struct {
	Contract *IUiPoolDataProvider // Generic contract binding to access the raw methods on
}

// IUiPoolDataProviderCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IUiPoolDataProviderCallerRaw struct {
	Contract *IUiPoolDataProviderCaller // Generic read-only contract binding to access the raw methods on
}

// IUiPoolDataProviderTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IUiPoolDataProviderTransactorRaw struct {
	Contract *IUiPoolDataProviderTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIUiPoolDataProvider creates a new instance of IUiPoolDataProvider, bound to a specific deployed contract.
func NewIUiPoolDataProvider(address common.Address, backend bind.ContractBackend) (*IUiPoolDataProvider, error) {
	contract, err := bindIUiPoolDataProvider(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IUiPoolDataProvider{IUiPoolDataProviderCaller: IUiPoolDataProviderCaller{contract: contract}, IUiPoolDataProviderTransactor: IUiPoolDataProviderTransactor{contract: contract}, IUiPoolDataProviderFilterer: IUiPoolDataProviderFilterer{contract: contract}}, nil
}

// NewIUiPoolDataProviderCaller creates a new read-only instance of IUiPoolDataProvider, bound to a specific deployed contract.
func NewIUiPoolDataProviderCaller(address common.Address, caller bind.ContractCaller) (*IUiPoolDataProviderCaller, error) {
	contract, err := bindIUiPoolDataProvider(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IUiPoolDataProviderCaller{contract: contract}, nil
}

// NewIUiPoolDataProviderTransactor creates a new write-only instance of IUiPoolDataProvider, bound to a specific deployed contract.
func NewIUiPoolDataProviderTransactor(address common.Address, transactor bind.ContractTransactor) (*IUiPoolDataProviderTransactor, error) {
	contract, err := bindIUiPoolDataProvider(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IUiPoolDataProviderTransactor{contract: contract}, nil
}

// NewIUiPoolDataProviderFilterer creates a new log filterer instance of IUiPoolDataProvider, bound to a specific deployed contract.
func NewIUiPoolDataProviderFilterer(address common.Address, filterer bind.ContractFilterer) (*IUiPoolDataProviderFilterer, error) {
	contract, err := bindIUiPoolDataProvider(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IUiPoolDataProviderFilterer{contract: contract}, nil
}

// bindIUiPoolDataProvider binds a generic wrapper to an already deployed contract.
func bindIUiPoolDataProvider(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IUiPoolDataProviderABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IUiPoolDataProvider *IUiPoolDataProviderRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IUiPoolDataProvider.Contract.IUiPoolDataProviderCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IUiPoolDataProvider *IUiPoolDataProviderRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IUiPoolDataProvider.Contract.IUiPoolDataProviderTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IUiPoolDataProvider *IUiPoolDataProviderRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IUiPoolDataProvider.Contract.IUiPoolDataProviderTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IUiPoolDataProvider *IUiPoolDataProviderCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IUiPoolDataProvider.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IUiPoolDataProvider *IUiPoolDataProviderTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IUiPoolDataProvider.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IUiPoolDataProvider *IUiPoolDataProviderTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IUiPoolDataProvider.Contract.contract.Transact(opts, method, params...)
}

// GetReservesData is a free data retrieval call binding the contract method 0x87e40db7.
//
// Solidity: function getReservesData(address provider, address user) view returns((address,string,string,uint256,uint256,uint256,uint256,uint256,bool,bool,bool,bool,bool,uint128,uint128,uint128,uint128,uint128,uint40,address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)[], (address,uint256,bool,uint256,uint256,uint256,uint256)[], uint256)
func (_IUiPoolDataProvider *IUiPoolDataProviderCaller) GetReservesData(opts *bind.CallOpts, provider common.Address, user common.Address) ([]IUiPoolDataProviderAggregatedReserveData, []IUiPoolDataProviderUserReserveData, *big.Int, error) {
	var out []interface{}
	err := _IUiPoolDataProvider.contract.Call(opts, &out, "getReservesData", provider, user)

	if err != nil {
		return *new([]IUiPoolDataProviderAggregatedReserveData), *new([]IUiPoolDataProviderUserReserveData), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]IUiPoolDataProviderAggregatedReserveData)).(*[]IUiPoolDataProviderAggregatedReserveData)
	out1 := *abi.ConvertType(out[1], new([]IUiPoolDataProviderUserReserveData)).(*[]IUiPoolDataProviderUserReserveData)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return out0, out1, out2, err

}

// GetReservesData is a free data retrieval call binding the contract method 0x87e40db7.
//
// Solidity: function getReservesData(address provider, address user) view returns((address,string,string,uint256,uint256,uint256,uint256,uint256,bool,bool,bool,bool,bool,uint128,uint128,uint128,uint128,uint128,uint40,address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)[], (address,uint256,bool,uint256,uint256,uint256,uint256)[], uint256)
func (_IUiPoolDataProvider *IUiPoolDataProviderSession) GetReservesData(provider common.Address, user common.Address) ([]IUiPoolDataProviderAggregatedReserveData, []IUiPoolDataProviderUserReserveData, *big.Int, error) {
	return _IUiPoolDataProvider.Contract.GetReservesData(&_IUiPoolDataProvider.CallOpts, provider, user)
}

// GetReservesData is a free data retrieval call binding the contract method 0x87e40db7.
//
// Solidity: function getReservesData(address provider, address user) view returns((address,string,string,uint256,uint256,uint256,uint256,uint256,bool,bool,bool,bool,bool,uint128,uint128,uint128,uint128,uint128,uint40,address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)[], (address,uint256,bool,uint256,uint256,uint256,uint256)[], uint256)
func (_IUiPoolDataProvider *IUiPoolDataProviderCallerSession) GetReservesData(provider common.Address, user common.Address) ([]IUiPoolDataProviderAggregatedReserveData, []IUiPoolDataProviderUserReserveData, *big.Int, error) {
	return _IUiPoolDataProvider.Contract.GetReservesData(&_IUiPoolDataProvider.CallOpts, provider, user)
}

// IVariableDebtTokenABI is the input ABI used to generate the binding from.
const IVariableDebtTokenABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getScaledUserBalanceAndSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"scaledBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scaledTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// IVariableDebtToken is an auto generated Go binding around an Ethereum contract.
type IVariableDebtToken struct {
	IVariableDebtTokenCaller     // Read-only binding to the contract
	IVariableDebtTokenTransactor // Write-only binding to the contract
	IVariableDebtTokenFilterer   // Log filterer for contract events
}

// IVariableDebtTokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type IVariableDebtTokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IVariableDebtTokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IVariableDebtTokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IVariableDebtTokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IVariableDebtTokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IVariableDebtTokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IVariableDebtTokenSession struct {
	Contract     *IVariableDebtToken // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// IVariableDebtTokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IVariableDebtTokenCallerSession struct {
	Contract *IVariableDebtTokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// IVariableDebtTokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IVariableDebtTokenTransactorSession struct {
	Contract     *IVariableDebtTokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// IVariableDebtTokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type IVariableDebtTokenRaw struct {
	Contract *IVariableDebtToken // Generic contract binding to access the raw methods on
}

// IVariableDebtTokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IVariableDebtTokenCallerRaw struct {
	Contract *IVariableDebtTokenCaller // Generic read-only contract binding to access the raw methods on
}

// IVariableDebtTokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IVariableDebtTokenTransactorRaw struct {
	Contract *IVariableDebtTokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIVariableDebtToken creates a new instance of IVariableDebtToken, bound to a specific deployed contract.
func NewIVariableDebtToken(address common.Address, backend bind.ContractBackend) (*IVariableDebtToken, error) {
	contract, err := bindIVariableDebtToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IVariableDebtToken{IVariableDebtTokenCaller: IVariableDebtTokenCaller{contract: contract}, IVariableDebtTokenTransactor: IVariableDebtTokenTransactor{contract: contract}, IVariableDebtTokenFilterer: IVariableDebtTokenFilterer{contract: contract}}, nil
}

// NewIVariableDebtTokenCaller creates a new read-only instance of IVariableDebtToken, bound to a specific deployed contract.
func NewIVariableDebtTokenCaller(address common.Address, caller bind.ContractCaller) (*IVariableDebtTokenCaller, error) {
	contract, err := bindIVariableDebtToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IVariableDebtTokenCaller{contract: contract}, nil
}

// NewIVariableDebtTokenTransactor creates a new write-only instance of IVariableDebtToken, bound to a specific deployed contract.
func NewIVariableDebtTokenTransactor(address common.Address, transactor bind.ContractTransactor) (*IVariableDebtTokenTransactor, error) {
	contract, err := bindIVariableDebtToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IVariableDebtTokenTransactor{contract: contract}, nil
}

// NewIVariableDebtTokenFilterer creates a new log filterer instance of IVariableDebtToken, bound to a specific deployed contract.
func NewIVariableDebtTokenFilterer(address common.Address, filterer bind.ContractFilterer) (*IVariableDebtTokenFilterer, error) {
	contract, err := bindIVariableDebtToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IVariableDebtTokenFilterer{contract: contract}, nil
}

// bindIVariableDebtToken binds a generic wrapper to an already deployed contract.
func bindIVariableDebtToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IVariableDebtTokenABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IVariableDebtToken *IVariableDebtTokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IVariableDebtToken.Contract.IVariableDebtTokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IVariableDebtToken *IVariableDebtTokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IVariableDebtToken.Contract.IVariableDebtTokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IVariableDebtToken *IVariableDebtTokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IVariableDebtToken.Contract.IVariableDebtTokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IVariableDebtToken *IVariableDebtTokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IVariableDebtToken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IVariableDebtToken *IVariableDebtTokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IVariableDebtToken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IVariableDebtToken *IVariableDebtTokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IVariableDebtToken.Contract.contract.Transact(opts, method, params...)
}

// GetScaledUserBalanceAndSupply is a free data retrieval call binding the contract method 0x0afbcdc9.
//
// Solidity: function getScaledUserBalanceAndSupply(address user) view returns(uint256, uint256)
func (_IVariableDebtToken *IVariableDebtTokenCaller) GetScaledUserBalanceAndSupply(opts *bind.CallOpts, user common.Address) (*big.Int, *big.Int, error) {
	var out []interface{}
	err := _IVariableDebtToken.contract.Call(opts, &out, "getScaledUserBalanceAndSupply", user)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// GetScaledUserBalanceAndSupply is a free data retrieval call binding the contract method 0x0afbcdc9.
//
// Solidity: function getScaledUserBalanceAndSupply(address user) view returns(uint256, uint256)
func (_IVariableDebtToken *IVariableDebtTokenSession) GetScaledUserBalanceAndSupply(user common.Address) (*big.Int, *big.Int, error) {
	return _IVariableDebtToken.Contract.GetScaledUserBalanceAndSupply(&_IVariableDebtToken.CallOpts, user)
}

// GetScaledUserBalanceAndSupply is a free data retrieval call binding the contract method 0x0afbcdc9.
//
// Solidity: function getScaledUserBalanceAndSupply(address user) view returns(uint256, uint256)
func (_IVariableDebtToken *IVariableDebtTokenCallerSession) GetScaledUserBalanceAndSupply(user common.Address) (*big.Int, *big.Int, error) {
	return _IVariableDebtToken.Contract.GetScaledUserBalanceAndSupply(&_IVariableDebtToken.CallOpts, user)
}

// ScaledBalanceOf is a free data retrieval call binding the contract method 0x1da24f3e.
//
// Solidity: function scaledBalanceOf(address user) view returns(uint256)
func (_IVariableDebtToken *IVariableDebtTokenCaller) ScaledBalanceOf(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IVariableDebtToken.contract.Call(opts, &out, "scaledBalanceOf", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ScaledBalanceOf is a free data retrieval call binding the contract method 0x1da24f3e.
//
// Solidity: function scaledBalanceOf(address user) view returns(uint256)
func (_IVariableDebtToken *IVariableDebtTokenSession) ScaledBalanceOf(user common.Address) (*big.Int, error) {
	return _IVariableDebtToken.Contract.ScaledBalanceOf(&_IVariableDebtToken.CallOpts, user)
}

// ScaledBalanceOf is a free data retrieval call binding the contract method 0x1da24f3e.
//
// Solidity: function scaledBalanceOf(address user) view returns(uint256)
func (_IVariableDebtToken *IVariableDebtTokenCallerSession) ScaledBalanceOf(user common.Address) (*big.Int, error) {
	return _IVariableDebtToken.Contract.ScaledBalanceOf(&_IVariableDebtToken.CallOpts, user)
}

// ScaledTotalSupply is a free data retrieval call binding the contract method 0xb1bf962d.
//
// Solidity: function scaledTotalSupply() view returns(uint256)
func (_IVariableDebtToken *IVariableDebtTokenCaller) ScaledTotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IVariableDebtToken.contract.Call(opts, &out, "scaledTotalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ScaledTotalSupply is a free data retrieval call binding the contract method 0xb1bf962d.
//
// Solidity: function scaledTotalSupply() view returns(uint256)
func (_IVariableDebtToken *IVariableDebtTokenSession) ScaledTotalSupply() (*big.Int, error) {
	return _IVariableDebtToken.Contract.ScaledTotalSupply(&_IVariableDebtToken.CallOpts)
}

// ScaledTotalSupply is a free data retrieval call binding the contract method 0xb1bf962d.
//
// Solidity: function scaledTotalSupply() view returns(uint256)
func (_IVariableDebtToken *IVariableDebtTokenCallerSession) ScaledTotalSupply() (*big.Int, error) {
	return _IVariableDebtToken.Contract.ScaledTotalSupply(&_IVariableDebtToken.CallOpts)
}

// Burn is a paid mutator transaction binding the contract method 0xf5298aca.
//
// Solidity: function burn(address user, uint256 amount, uint256 index) returns()
func (_IVariableDebtToken *IVariableDebtTokenTransactor) Burn(opts *bind.TransactOpts, user common.Address, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _IVariableDebtToken.contract.Transact(opts, "burn", user, amount, index)
}

// Burn is a paid mutator transaction binding the contract method 0xf5298aca.
//
// Solidity: function burn(address user, uint256 amount, uint256 index) returns()
func (_IVariableDebtToken *IVariableDebtTokenSession) Burn(user common.Address, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _IVariableDebtToken.Contract.Burn(&_IVariableDebtToken.TransactOpts, user, amount, index)
}

// Burn is a paid mutator transaction binding the contract method 0xf5298aca.
//
// Solidity: function burn(address user, uint256 amount, uint256 index) returns()
func (_IVariableDebtToken *IVariableDebtTokenTransactorSession) Burn(user common.Address, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _IVariableDebtToken.Contract.Burn(&_IVariableDebtToken.TransactOpts, user, amount, index)
}

// Mint is a paid mutator transaction binding the contract method 0xb3f1c93d.
//
// Solidity: function mint(address user, address onBehalfOf, uint256 amount, uint256 index) returns(bool)
func (_IVariableDebtToken *IVariableDebtTokenTransactor) Mint(opts *bind.TransactOpts, user common.Address, onBehalfOf common.Address, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _IVariableDebtToken.contract.Transact(opts, "mint", user, onBehalfOf, amount, index)
}

// Mint is a paid mutator transaction binding the contract method 0xb3f1c93d.
//
// Solidity: function mint(address user, address onBehalfOf, uint256 amount, uint256 index) returns(bool)
func (_IVariableDebtToken *IVariableDebtTokenSession) Mint(user common.Address, onBehalfOf common.Address, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _IVariableDebtToken.Contract.Mint(&_IVariableDebtToken.TransactOpts, user, onBehalfOf, amount, index)
}

// Mint is a paid mutator transaction binding the contract method 0xb3f1c93d.
//
// Solidity: function mint(address user, address onBehalfOf, uint256 amount, uint256 index) returns(bool)
func (_IVariableDebtToken *IVariableDebtTokenTransactorSession) Mint(user common.Address, onBehalfOf common.Address, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _IVariableDebtToken.Contract.Mint(&_IVariableDebtToken.TransactOpts, user, onBehalfOf, amount, index)
}

// IVariableDebtTokenBurnIterator is returned from FilterBurn and is used to iterate over the raw logs and unpacked data for Burn events raised by the IVariableDebtToken contract.
type IVariableDebtTokenBurnIterator struct {
	Event *IVariableDebtTokenBurn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IVariableDebtTokenBurnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IVariableDebtTokenBurn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IVariableDebtTokenBurn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IVariableDebtTokenBurnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IVariableDebtTokenBurnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IVariableDebtTokenBurn represents a Burn event raised by the IVariableDebtToken contract.
type IVariableDebtTokenBurn struct {
	User   common.Address
	Amount *big.Int
	Index  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBurn is a free log retrieval operation binding the contract event 0x49995e5dd6158cf69ad3e9777c46755a1a826a446c6416992167462dad033b2a.
//
// Solidity: event Burn(address indexed user, uint256 amount, uint256 index)
func (_IVariableDebtToken *IVariableDebtTokenFilterer) FilterBurn(opts *bind.FilterOpts, user []common.Address) (*IVariableDebtTokenBurnIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IVariableDebtToken.contract.FilterLogs(opts, "Burn", userRule)
	if err != nil {
		return nil, err
	}
	return &IVariableDebtTokenBurnIterator{contract: _IVariableDebtToken.contract, event: "Burn", logs: logs, sub: sub}, nil
}

// WatchBurn is a free log subscription operation binding the contract event 0x49995e5dd6158cf69ad3e9777c46755a1a826a446c6416992167462dad033b2a.
//
// Solidity: event Burn(address indexed user, uint256 amount, uint256 index)
func (_IVariableDebtToken *IVariableDebtTokenFilterer) WatchBurn(opts *bind.WatchOpts, sink chan<- *IVariableDebtTokenBurn, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IVariableDebtToken.contract.WatchLogs(opts, "Burn", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IVariableDebtTokenBurn)
				if err := _IVariableDebtToken.contract.UnpackLog(event, "Burn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurn is a log parse operation binding the contract event 0x49995e5dd6158cf69ad3e9777c46755a1a826a446c6416992167462dad033b2a.
//
// Solidity: event Burn(address indexed user, uint256 amount, uint256 index)
func (_IVariableDebtToken *IVariableDebtTokenFilterer) ParseBurn(log types.Log) (*IVariableDebtTokenBurn, error) {
	event := new(IVariableDebtTokenBurn)
	if err := _IVariableDebtToken.contract.UnpackLog(event, "Burn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IVariableDebtTokenMintIterator is returned from FilterMint and is used to iterate over the raw logs and unpacked data for Mint events raised by the IVariableDebtToken contract.
type IVariableDebtTokenMintIterator struct {
	Event *IVariableDebtTokenMint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IVariableDebtTokenMintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IVariableDebtTokenMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IVariableDebtTokenMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IVariableDebtTokenMintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IVariableDebtTokenMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IVariableDebtTokenMint represents a Mint event raised by the IVariableDebtToken contract.
type IVariableDebtTokenMint struct {
	From       common.Address
	OnBehalfOf common.Address
	Value      *big.Int
	Index      *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterMint is a free log retrieval operation binding the contract event 0x2f00e3cdd69a77be7ed215ec7b2a36784dd158f921fca79ac29deffa353fe6ee.
//
// Solidity: event Mint(address indexed from, address indexed onBehalfOf, uint256 value, uint256 index)
func (_IVariableDebtToken *IVariableDebtTokenFilterer) FilterMint(opts *bind.FilterOpts, from []common.Address, onBehalfOf []common.Address) (*IVariableDebtTokenMintIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var onBehalfOfRule []interface{}
	for _, onBehalfOfItem := range onBehalfOf {
		onBehalfOfRule = append(onBehalfOfRule, onBehalfOfItem)
	}

	logs, sub, err := _IVariableDebtToken.contract.FilterLogs(opts, "Mint", fromRule, onBehalfOfRule)
	if err != nil {
		return nil, err
	}
	return &IVariableDebtTokenMintIterator{contract: _IVariableDebtToken.contract, event: "Mint", logs: logs, sub: sub}, nil
}

// WatchMint is a free log subscription operation binding the contract event 0x2f00e3cdd69a77be7ed215ec7b2a36784dd158f921fca79ac29deffa353fe6ee.
//
// Solidity: event Mint(address indexed from, address indexed onBehalfOf, uint256 value, uint256 index)
func (_IVariableDebtToken *IVariableDebtTokenFilterer) WatchMint(opts *bind.WatchOpts, sink chan<- *IVariableDebtTokenMint, from []common.Address, onBehalfOf []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var onBehalfOfRule []interface{}
	for _, onBehalfOfItem := range onBehalfOf {
		onBehalfOfRule = append(onBehalfOfRule, onBehalfOfItem)
	}

	logs, sub, err := _IVariableDebtToken.contract.WatchLogs(opts, "Mint", fromRule, onBehalfOfRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IVariableDebtTokenMint)
				if err := _IVariableDebtToken.contract.UnpackLog(event, "Mint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMint is a log parse operation binding the contract event 0x2f00e3cdd69a77be7ed215ec7b2a36784dd158f921fca79ac29deffa353fe6ee.
//
// Solidity: event Mint(address indexed from, address indexed onBehalfOf, uint256 value, uint256 index)
func (_IVariableDebtToken *IVariableDebtTokenFilterer) ParseMint(log types.Log) (*IVariableDebtTokenMint, error) {
	event := new(IVariableDebtTokenMint)
	if err := _IVariableDebtToken.contract.UnpackLog(event, "Mint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IWETHABI is the input ABI used to generate the binding from.
const IWETHABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// IWETH is an auto generated Go binding around an Ethereum contract.
type IWETH struct {
	IWETHCaller     // Read-only binding to the contract
	IWETHTransactor // Write-only binding to the contract
	IWETHFilterer   // Log filterer for contract events
}

// IWETHCaller is an auto generated read-only Go binding around an Ethereum contract.
type IWETHCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IWETHTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IWETHTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IWETHFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IWETHFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IWETHSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IWETHSession struct {
	Contract     *IWETH            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IWETHCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IWETHCallerSession struct {
	Contract *IWETHCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// IWETHTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IWETHTransactorSession struct {
	Contract     *IWETHTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IWETHRaw is an auto generated low-level Go binding around an Ethereum contract.
type IWETHRaw struct {
	Contract *IWETH // Generic contract binding to access the raw methods on
}

// IWETHCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IWETHCallerRaw struct {
	Contract *IWETHCaller // Generic read-only contract binding to access the raw methods on
}

// IWETHTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IWETHTransactorRaw struct {
	Contract *IWETHTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIWETH creates a new instance of IWETH, bound to a specific deployed contract.
func NewIWETH(address common.Address, backend bind.ContractBackend) (*IWETH, error) {
	contract, err := bindIWETH(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IWETH{IWETHCaller: IWETHCaller{contract: contract}, IWETHTransactor: IWETHTransactor{contract: contract}, IWETHFilterer: IWETHFilterer{contract: contract}}, nil
}

// NewIWETHCaller creates a new read-only instance of IWETH, bound to a specific deployed contract.
func NewIWETHCaller(address common.Address, caller bind.ContractCaller) (*IWETHCaller, error) {
	contract, err := bindIWETH(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IWETHCaller{contract: contract}, nil
}

// NewIWETHTransactor creates a new write-only instance of IWETH, bound to a specific deployed contract.
func NewIWETHTransactor(address common.Address, transactor bind.ContractTransactor) (*IWETHTransactor, error) {
	contract, err := bindIWETH(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IWETHTransactor{contract: contract}, nil
}

// NewIWETHFilterer creates a new log filterer instance of IWETH, bound to a specific deployed contract.
func NewIWETHFilterer(address common.Address, filterer bind.ContractFilterer) (*IWETHFilterer, error) {
	contract, err := bindIWETH(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IWETHFilterer{contract: contract}, nil
}

// bindIWETH binds a generic wrapper to an already deployed contract.
func bindIWETH(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IWETHABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IWETH *IWETHRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IWETH.Contract.IWETHCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IWETH *IWETHRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IWETH.Contract.IWETHTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IWETH *IWETHRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IWETH.Contract.IWETHTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IWETH *IWETHCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IWETH.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IWETH *IWETHTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IWETH.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IWETH *IWETHTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IWETH.Contract.contract.Transact(opts, method, params...)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address guy, uint256 wad) returns(bool)
func (_IWETH *IWETHTransactor) Approve(opts *bind.TransactOpts, guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _IWETH.contract.Transact(opts, "approve", guy, wad)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address guy, uint256 wad) returns(bool)
func (_IWETH *IWETHSession) Approve(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _IWETH.Contract.Approve(&_IWETH.TransactOpts, guy, wad)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address guy, uint256 wad) returns(bool)
func (_IWETH *IWETHTransactorSession) Approve(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _IWETH.Contract.Approve(&_IWETH.TransactOpts, guy, wad)
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() payable returns()
func (_IWETH *IWETHTransactor) Deposit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IWETH.contract.Transact(opts, "deposit")
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() payable returns()
func (_IWETH *IWETHSession) Deposit() (*types.Transaction, error) {
	return _IWETH.Contract.Deposit(&_IWETH.TransactOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() payable returns()
func (_IWETH *IWETHTransactorSession) Deposit() (*types.Transaction, error) {
	return _IWETH.Contract.Deposit(&_IWETH.TransactOpts)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_IWETH *IWETHTransactor) TransferFrom(opts *bind.TransactOpts, src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _IWETH.contract.Transact(opts, "transferFrom", src, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_IWETH *IWETHSession) TransferFrom(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _IWETH.Contract.TransferFrom(&_IWETH.TransactOpts, src, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_IWETH *IWETHTransactorSession) TransferFrom(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _IWETH.Contract.TransferFrom(&_IWETH.TransactOpts, src, dst, wad)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 ) returns()
func (_IWETH *IWETHTransactor) Withdraw(opts *bind.TransactOpts, arg0 *big.Int) (*types.Transaction, error) {
	return _IWETH.contract.Transact(opts, "withdraw", arg0)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 ) returns()
func (_IWETH *IWETHSession) Withdraw(arg0 *big.Int) (*types.Transaction, error) {
	return _IWETH.Contract.Withdraw(&_IWETH.TransactOpts, arg0)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 ) returns()
func (_IWETH *IWETHTransactorSession) Withdraw(arg0 *big.Int) (*types.Transaction, error) {
	return _IWETH.Contract.Withdraw(&_IWETH.TransactOpts, arg0)
}

// IWETHGatewayABI is the input ABI used to generate the binding from.
const IWETHGatewayABI = "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interesRateMode\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"borrowETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateMode\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"}],\"name\":\"repayETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// IWETHGateway is an auto generated Go binding around an Ethereum contract.
type IWETHGateway struct {
	IWETHGatewayCaller     // Read-only binding to the contract
	IWETHGatewayTransactor // Write-only binding to the contract
	IWETHGatewayFilterer   // Log filterer for contract events
}

// IWETHGatewayCaller is an auto generated read-only Go binding around an Ethereum contract.
type IWETHGatewayCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IWETHGatewayTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IWETHGatewayTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IWETHGatewayFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IWETHGatewayFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IWETHGatewaySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IWETHGatewaySession struct {
	Contract     *IWETHGateway     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IWETHGatewayCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IWETHGatewayCallerSession struct {
	Contract *IWETHGatewayCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// IWETHGatewayTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IWETHGatewayTransactorSession struct {
	Contract     *IWETHGatewayTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// IWETHGatewayRaw is an auto generated low-level Go binding around an Ethereum contract.
type IWETHGatewayRaw struct {
	Contract *IWETHGateway // Generic contract binding to access the raw methods on
}

// IWETHGatewayCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IWETHGatewayCallerRaw struct {
	Contract *IWETHGatewayCaller // Generic read-only contract binding to access the raw methods on
}

// IWETHGatewayTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IWETHGatewayTransactorRaw struct {
	Contract *IWETHGatewayTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIWETHGateway creates a new instance of IWETHGateway, bound to a specific deployed contract.
func NewIWETHGateway(address common.Address, backend bind.ContractBackend) (*IWETHGateway, error) {
	contract, err := bindIWETHGateway(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IWETHGateway{IWETHGatewayCaller: IWETHGatewayCaller{contract: contract}, IWETHGatewayTransactor: IWETHGatewayTransactor{contract: contract}, IWETHGatewayFilterer: IWETHGatewayFilterer{contract: contract}}, nil
}

// NewIWETHGatewayCaller creates a new read-only instance of IWETHGateway, bound to a specific deployed contract.
func NewIWETHGatewayCaller(address common.Address, caller bind.ContractCaller) (*IWETHGatewayCaller, error) {
	contract, err := bindIWETHGateway(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IWETHGatewayCaller{contract: contract}, nil
}

// NewIWETHGatewayTransactor creates a new write-only instance of IWETHGateway, bound to a specific deployed contract.
func NewIWETHGatewayTransactor(address common.Address, transactor bind.ContractTransactor) (*IWETHGatewayTransactor, error) {
	contract, err := bindIWETHGateway(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IWETHGatewayTransactor{contract: contract}, nil
}

// NewIWETHGatewayFilterer creates a new log filterer instance of IWETHGateway, bound to a specific deployed contract.
func NewIWETHGatewayFilterer(address common.Address, filterer bind.ContractFilterer) (*IWETHGatewayFilterer, error) {
	contract, err := bindIWETHGateway(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IWETHGatewayFilterer{contract: contract}, nil
}

// bindIWETHGateway binds a generic wrapper to an already deployed contract.
func bindIWETHGateway(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IWETHGatewayABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IWETHGateway *IWETHGatewayRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IWETHGateway.Contract.IWETHGatewayCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IWETHGateway *IWETHGatewayRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IWETHGateway.Contract.IWETHGatewayTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IWETHGateway *IWETHGatewayRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IWETHGateway.Contract.IWETHGatewayTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IWETHGateway *IWETHGatewayCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IWETHGateway.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IWETHGateway *IWETHGatewayTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IWETHGateway.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IWETHGateway *IWETHGatewayTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IWETHGateway.Contract.contract.Transact(opts, method, params...)
}

// BorrowETH is a paid mutator transaction binding the contract method 0x7d5155fd.
//
// Solidity: function borrowETH(uint256 amount, uint256 interesRateMode, uint16 referralCode) returns()
func (_IWETHGateway *IWETHGatewayTransactor) BorrowETH(opts *bind.TransactOpts, amount *big.Int, interesRateMode *big.Int, referralCode uint16) (*types.Transaction, error) {
	return _IWETHGateway.contract.Transact(opts, "borrowETH", amount, interesRateMode, referralCode)
}

// BorrowETH is a paid mutator transaction binding the contract method 0x7d5155fd.
//
// Solidity: function borrowETH(uint256 amount, uint256 interesRateMode, uint16 referralCode) returns()
func (_IWETHGateway *IWETHGatewaySession) BorrowETH(amount *big.Int, interesRateMode *big.Int, referralCode uint16) (*types.Transaction, error) {
	return _IWETHGateway.Contract.BorrowETH(&_IWETHGateway.TransactOpts, amount, interesRateMode, referralCode)
}

// BorrowETH is a paid mutator transaction binding the contract method 0x7d5155fd.
//
// Solidity: function borrowETH(uint256 amount, uint256 interesRateMode, uint16 referralCode) returns()
func (_IWETHGateway *IWETHGatewayTransactorSession) BorrowETH(amount *big.Int, interesRateMode *big.Int, referralCode uint16) (*types.Transaction, error) {
	return _IWETHGateway.Contract.BorrowETH(&_IWETHGateway.TransactOpts, amount, interesRateMode, referralCode)
}

// DepositETH is a paid mutator transaction binding the contract method 0x58c22be7.
//
// Solidity: function depositETH(address onBehalfOf, uint16 referralCode) payable returns()
func (_IWETHGateway *IWETHGatewayTransactor) DepositETH(opts *bind.TransactOpts, onBehalfOf common.Address, referralCode uint16) (*types.Transaction, error) {
	return _IWETHGateway.contract.Transact(opts, "depositETH", onBehalfOf, referralCode)
}

// DepositETH is a paid mutator transaction binding the contract method 0x58c22be7.
//
// Solidity: function depositETH(address onBehalfOf, uint16 referralCode) payable returns()
func (_IWETHGateway *IWETHGatewaySession) DepositETH(onBehalfOf common.Address, referralCode uint16) (*types.Transaction, error) {
	return _IWETHGateway.Contract.DepositETH(&_IWETHGateway.TransactOpts, onBehalfOf, referralCode)
}

// DepositETH is a paid mutator transaction binding the contract method 0x58c22be7.
//
// Solidity: function depositETH(address onBehalfOf, uint16 referralCode) payable returns()
func (_IWETHGateway *IWETHGatewayTransactorSession) DepositETH(onBehalfOf common.Address, referralCode uint16) (*types.Transaction, error) {
	return _IWETHGateway.Contract.DepositETH(&_IWETHGateway.TransactOpts, onBehalfOf, referralCode)
}

// RepayETH is a paid mutator transaction binding the contract method 0xf538ba51.
//
// Solidity: function repayETH(uint256 amount, uint256 rateMode, address onBehalfOf) payable returns()
func (_IWETHGateway *IWETHGatewayTransactor) RepayETH(opts *bind.TransactOpts, amount *big.Int, rateMode *big.Int, onBehalfOf common.Address) (*types.Transaction, error) {
	return _IWETHGateway.contract.Transact(opts, "repayETH", amount, rateMode, onBehalfOf)
}

// RepayETH is a paid mutator transaction binding the contract method 0xf538ba51.
//
// Solidity: function repayETH(uint256 amount, uint256 rateMode, address onBehalfOf) payable returns()
func (_IWETHGateway *IWETHGatewaySession) RepayETH(amount *big.Int, rateMode *big.Int, onBehalfOf common.Address) (*types.Transaction, error) {
	return _IWETHGateway.Contract.RepayETH(&_IWETHGateway.TransactOpts, amount, rateMode, onBehalfOf)
}

// RepayETH is a paid mutator transaction binding the contract method 0xf538ba51.
//
// Solidity: function repayETH(uint256 amount, uint256 rateMode, address onBehalfOf) payable returns()
func (_IWETHGateway *IWETHGatewayTransactorSession) RepayETH(amount *big.Int, rateMode *big.Int, onBehalfOf common.Address) (*types.Transaction, error) {
	return _IWETHGateway.Contract.RepayETH(&_IWETHGateway.TransactOpts, amount, rateMode, onBehalfOf)
}

// WithdrawETH is a paid mutator transaction binding the contract method 0x36118b52.
//
// Solidity: function withdrawETH(uint256 amount, address onBehalfOf) returns()
func (_IWETHGateway *IWETHGatewayTransactor) WithdrawETH(opts *bind.TransactOpts, amount *big.Int, onBehalfOf common.Address) (*types.Transaction, error) {
	return _IWETHGateway.contract.Transact(opts, "withdrawETH", amount, onBehalfOf)
}

// WithdrawETH is a paid mutator transaction binding the contract method 0x36118b52.
//
// Solidity: function withdrawETH(uint256 amount, address onBehalfOf) returns()
func (_IWETHGateway *IWETHGatewaySession) WithdrawETH(amount *big.Int, onBehalfOf common.Address) (*types.Transaction, error) {
	return _IWETHGateway.Contract.WithdrawETH(&_IWETHGateway.TransactOpts, amount, onBehalfOf)
}

// WithdrawETH is a paid mutator transaction binding the contract method 0x36118b52.
//
// Solidity: function withdrawETH(uint256 amount, address onBehalfOf) returns()
func (_IWETHGateway *IWETHGatewayTransactorSession) WithdrawETH(amount *big.Int, onBehalfOf common.Address) (*types.Transaction, error) {
	return _IWETHGateway.Contract.WithdrawETH(&_IWETHGateway.TransactOpts, amount, onBehalfOf)
}

// IncentivizedERC20ABI is the input ABI used to generate the binding from.
const IncentivizedERC20ABI = "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"incentivesController\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// IncentivizedERC20Bin is the compiled bytecode used for deploying new contracts.
var IncentivizedERC20Bin = "0x60a06040523480156200001157600080fd5b5060405162000eb538038062000eb5833981810160405260808110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82516401000000008111828201881017156200008957600080fd5b82525081516020918201929091019080838360005b83811015620000b85781810151838201526020016200009e565b50505050905090810190601f168015620000e65780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200010a57600080fd5b9083019060208201858111156200012057600080fd5b82516401000000008111828201881017156200013b57600080fd5b82525081516020918201929091019080838360005b838110156200016a57818101518382015260200162000150565b50505050905090810190601f168015620001985780820380516001836020036101000a031916815260200191505b506040908152602082810151929091015186519294509250620001c19160039187019062000206565b508251620001d790600490602086019062000206565b506005805460ff191660ff939093169290921790915560601b6001600160601b03191660805250620002a29050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200024957805160ff191683800117855562000279565b8280016001018555821562000279579182015b82811115620002795782518255916020019190600101906200025c565b50620002879291506200028b565b5090565b5b808211156200028757600081556001016200028c565b60805160601c610beb620002ca6000398061083a528061086852806109185250610beb6000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063395093511161007157806339509351146101d957806370a082311461020557806395d89b411461022b578063a457c2d714610233578063a9059cbb1461025f578063dd62ed3e1461028b576100a9565b806306fdde03146100ae578063095ea7b31461012b57806318160ddd1461016b57806323b872dd14610185578063313ce567146101bb575b600080fd5b6100b66102b9565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100f05781810151838201526020016100d8565b50505050905090810190601f16801561011d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101576004803603604081101561014157600080fd5b506001600160a01b03813516906020013561034f565b604080519115158252519081900360200190f35b61017361036c565b60408051918252519081900360200190f35b6101576004803603606081101561019b57600080fd5b506001600160a01b03813581169160208101359091169060400135610372565b6101c3610444565b6040805160ff9092168252519081900360200190f35b610157600480360360408110156101ef57600080fd5b506001600160a01b03813516906020013561044d565b6101736004803603602081101561021b57600080fd5b50356001600160a01b031661049b565b6100b66104b6565b6101576004803603604081101561024957600080fd5b506001600160a01b038135169060200135610517565b6101576004803603604081101561027557600080fd5b506001600160a01b03813516906020013561057f565b610173600480360360408110156102a157600080fd5b506001600160a01b03813581169160200135166105ee565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103455780601f1061031a57610100808354040283529160200191610345565b820191906000526020600020905b81548152906001019060200180831161032857829003601f168201915b5050505050905090565b600061036361035c610619565b848461061d565b50600192915050565b60025490565b600061037f848484610709565b6103ef8461038b610619565b6103ea85604051806060016040528060288152602001610b20602891396001600160a01b038a166000908152600160205260408120906103c9610619565b6001600160a01b0316815260208101919091526040016000205491906109b7565b61061d565b826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35060019392505050565b60055460ff1690565b600061036361045a610619565b846103ea856001600061046b610619565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490610a4e565b6001600160a01b031660009081526020819052604090205490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103455780601f1061031a57610100808354040283529160200191610345565b6000610363610524610619565b846103ea85604051806060016040528060258152602001610b91602591396001600061054e610619565b6001600160a01b03908116825260208083019390935260409182016000908120918d168152925290205491906109b7565b600061059361058c610619565b8484610709565b826001600160a01b03166105a5610619565b6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a350600192915050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3390565b6001600160a01b0383166106625760405162461bcd60e51b8152600401808060200182810382526024815260200180610b6d6024913960400191505060405180910390fd5b6001600160a01b0382166106a75760405162461bcd60e51b8152600401808060200182810382526022815260200180610ad86022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b03831661074e5760405162461bcd60e51b8152600401808060200182810382526025815260200180610b486025913960400191505060405180910390fd5b6001600160a01b0382166107935760405162461bcd60e51b8152600401808060200182810382526023815260200180610ab56023913960400191505060405180910390fd5b61079e838383610aaf565b6000806000856001600160a01b03166001600160a01b031681526020019081526020016000205490506107ec82604051806060016040528060268152602001610afa602691398391906109b7565b6001600160a01b03808616600090815260208190526040808220939093559085168152205461081b8184610a4e565b6001600160a01b038086166000908152602081905260409020919091557f000000000000000000000000000000000000000000000000000000000000000016156109b057600060025490507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166331873e2e8783866040518463ffffffff1660e01b815260040180846001600160a01b031681526020018381526020018281526020019350505050600060405180830381600087803b1580156108e557600080fd5b505af11580156108f9573d6000803e3d6000fd5b50505050846001600160a01b0316866001600160a01b0316146109ae577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166331873e2e8683856040518463ffffffff1660e01b815260040180846001600160a01b031681526020018381526020018281526020019350505050600060405180830381600087803b15801561099557600080fd5b505af11580156109a9573d6000803e3d6000fd5b505050505b505b5050505050565b60008184841115610a465760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610a0b5781810151838201526020016109f3565b50505050905090810190601f168015610a385780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600082820183811015610aa8576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b50505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122040b9f9919eeca7b8353d2915803597b8c936154eb06a4498ba6d01c12376922f64736f6c634300060c0033"

// DeployIncentivizedERC20 deploys a new Ethereum contract, binding an instance of IncentivizedERC20 to it.
func DeployIncentivizedERC20(auth *bind.TransactOpts, backend bind.ContractBackend, name string, symbol string, decimals uint8, incentivesController common.Address) (common.Address, *types.Transaction, *IncentivizedERC20, error) {
	parsed, err := abi.JSON(strings.NewReader(IncentivizedERC20ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(IncentivizedERC20Bin), backend, name, symbol, decimals, incentivesController)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &IncentivizedERC20{IncentivizedERC20Caller: IncentivizedERC20Caller{contract: contract}, IncentivizedERC20Transactor: IncentivizedERC20Transactor{contract: contract}, IncentivizedERC20Filterer: IncentivizedERC20Filterer{contract: contract}}, nil
}

// IncentivizedERC20 is an auto generated Go binding around an Ethereum contract.
type IncentivizedERC20 struct {
	IncentivizedERC20Caller     // Read-only binding to the contract
	IncentivizedERC20Transactor // Write-only binding to the contract
	IncentivizedERC20Filterer   // Log filterer for contract events
}

// IncentivizedERC20Caller is an auto generated read-only Go binding around an Ethereum contract.
type IncentivizedERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IncentivizedERC20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type IncentivizedERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IncentivizedERC20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IncentivizedERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IncentivizedERC20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IncentivizedERC20Session struct {
	Contract     *IncentivizedERC20 // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// IncentivizedERC20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IncentivizedERC20CallerSession struct {
	Contract *IncentivizedERC20Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// IncentivizedERC20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IncentivizedERC20TransactorSession struct {
	Contract     *IncentivizedERC20Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// IncentivizedERC20Raw is an auto generated low-level Go binding around an Ethereum contract.
type IncentivizedERC20Raw struct {
	Contract *IncentivizedERC20 // Generic contract binding to access the raw methods on
}

// IncentivizedERC20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IncentivizedERC20CallerRaw struct {
	Contract *IncentivizedERC20Caller // Generic read-only contract binding to access the raw methods on
}

// IncentivizedERC20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IncentivizedERC20TransactorRaw struct {
	Contract *IncentivizedERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewIncentivizedERC20 creates a new instance of IncentivizedERC20, bound to a specific deployed contract.
func NewIncentivizedERC20(address common.Address, backend bind.ContractBackend) (*IncentivizedERC20, error) {
	contract, err := bindIncentivizedERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IncentivizedERC20{IncentivizedERC20Caller: IncentivizedERC20Caller{contract: contract}, IncentivizedERC20Transactor: IncentivizedERC20Transactor{contract: contract}, IncentivizedERC20Filterer: IncentivizedERC20Filterer{contract: contract}}, nil
}

// NewIncentivizedERC20Caller creates a new read-only instance of IncentivizedERC20, bound to a specific deployed contract.
func NewIncentivizedERC20Caller(address common.Address, caller bind.ContractCaller) (*IncentivizedERC20Caller, error) {
	contract, err := bindIncentivizedERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IncentivizedERC20Caller{contract: contract}, nil
}

// NewIncentivizedERC20Transactor creates a new write-only instance of IncentivizedERC20, bound to a specific deployed contract.
func NewIncentivizedERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*IncentivizedERC20Transactor, error) {
	contract, err := bindIncentivizedERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IncentivizedERC20Transactor{contract: contract}, nil
}

// NewIncentivizedERC20Filterer creates a new log filterer instance of IncentivizedERC20, bound to a specific deployed contract.
func NewIncentivizedERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*IncentivizedERC20Filterer, error) {
	contract, err := bindIncentivizedERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IncentivizedERC20Filterer{contract: contract}, nil
}

// bindIncentivizedERC20 binds a generic wrapper to an already deployed contract.
func bindIncentivizedERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IncentivizedERC20ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IncentivizedERC20 *IncentivizedERC20Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IncentivizedERC20.Contract.IncentivizedERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IncentivizedERC20 *IncentivizedERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IncentivizedERC20.Contract.IncentivizedERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IncentivizedERC20 *IncentivizedERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IncentivizedERC20.Contract.IncentivizedERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IncentivizedERC20 *IncentivizedERC20CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IncentivizedERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IncentivizedERC20 *IncentivizedERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IncentivizedERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IncentivizedERC20 *IncentivizedERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IncentivizedERC20.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IncentivizedERC20 *IncentivizedERC20Caller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IncentivizedERC20.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IncentivizedERC20 *IncentivizedERC20Session) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IncentivizedERC20.Contract.Allowance(&_IncentivizedERC20.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IncentivizedERC20 *IncentivizedERC20CallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IncentivizedERC20.Contract.Allowance(&_IncentivizedERC20.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IncentivizedERC20 *IncentivizedERC20Caller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IncentivizedERC20.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IncentivizedERC20 *IncentivizedERC20Session) BalanceOf(account common.Address) (*big.Int, error) {
	return _IncentivizedERC20.Contract.BalanceOf(&_IncentivizedERC20.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IncentivizedERC20 *IncentivizedERC20CallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _IncentivizedERC20.Contract.BalanceOf(&_IncentivizedERC20.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_IncentivizedERC20 *IncentivizedERC20Caller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _IncentivizedERC20.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_IncentivizedERC20 *IncentivizedERC20Session) Decimals() (uint8, error) {
	return _IncentivizedERC20.Contract.Decimals(&_IncentivizedERC20.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_IncentivizedERC20 *IncentivizedERC20CallerSession) Decimals() (uint8, error) {
	return _IncentivizedERC20.Contract.Decimals(&_IncentivizedERC20.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_IncentivizedERC20 *IncentivizedERC20Caller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _IncentivizedERC20.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_IncentivizedERC20 *IncentivizedERC20Session) Name() (string, error) {
	return _IncentivizedERC20.Contract.Name(&_IncentivizedERC20.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_IncentivizedERC20 *IncentivizedERC20CallerSession) Name() (string, error) {
	return _IncentivizedERC20.Contract.Name(&_IncentivizedERC20.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_IncentivizedERC20 *IncentivizedERC20Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _IncentivizedERC20.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_IncentivizedERC20 *IncentivizedERC20Session) Symbol() (string, error) {
	return _IncentivizedERC20.Contract.Symbol(&_IncentivizedERC20.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_IncentivizedERC20 *IncentivizedERC20CallerSession) Symbol() (string, error) {
	return _IncentivizedERC20.Contract.Symbol(&_IncentivizedERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IncentivizedERC20 *IncentivizedERC20Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IncentivizedERC20.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IncentivizedERC20 *IncentivizedERC20Session) TotalSupply() (*big.Int, error) {
	return _IncentivizedERC20.Contract.TotalSupply(&_IncentivizedERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IncentivizedERC20 *IncentivizedERC20CallerSession) TotalSupply() (*big.Int, error) {
	return _IncentivizedERC20.Contract.TotalSupply(&_IncentivizedERC20.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IncentivizedERC20 *IncentivizedERC20Transactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IncentivizedERC20.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IncentivizedERC20 *IncentivizedERC20Session) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IncentivizedERC20.Contract.Approve(&_IncentivizedERC20.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IncentivizedERC20 *IncentivizedERC20TransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IncentivizedERC20.Contract.Approve(&_IncentivizedERC20.TransactOpts, spender, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_IncentivizedERC20 *IncentivizedERC20Transactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _IncentivizedERC20.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_IncentivizedERC20 *IncentivizedERC20Session) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _IncentivizedERC20.Contract.DecreaseAllowance(&_IncentivizedERC20.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_IncentivizedERC20 *IncentivizedERC20TransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _IncentivizedERC20.Contract.DecreaseAllowance(&_IncentivizedERC20.TransactOpts, spender, subtractedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_IncentivizedERC20 *IncentivizedERC20Transactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _IncentivizedERC20.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_IncentivizedERC20 *IncentivizedERC20Session) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _IncentivizedERC20.Contract.IncreaseAllowance(&_IncentivizedERC20.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_IncentivizedERC20 *IncentivizedERC20TransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _IncentivizedERC20.Contract.IncreaseAllowance(&_IncentivizedERC20.TransactOpts, spender, addedValue)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IncentivizedERC20 *IncentivizedERC20Transactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IncentivizedERC20.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IncentivizedERC20 *IncentivizedERC20Session) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IncentivizedERC20.Contract.Transfer(&_IncentivizedERC20.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IncentivizedERC20 *IncentivizedERC20TransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IncentivizedERC20.Contract.Transfer(&_IncentivizedERC20.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IncentivizedERC20 *IncentivizedERC20Transactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IncentivizedERC20.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IncentivizedERC20 *IncentivizedERC20Session) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IncentivizedERC20.Contract.TransferFrom(&_IncentivizedERC20.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IncentivizedERC20 *IncentivizedERC20TransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IncentivizedERC20.Contract.TransferFrom(&_IncentivizedERC20.TransactOpts, sender, recipient, amount)
}

// IncentivizedERC20ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the IncentivizedERC20 contract.
type IncentivizedERC20ApprovalIterator struct {
	Event *IncentivizedERC20Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncentivizedERC20ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncentivizedERC20Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncentivizedERC20Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncentivizedERC20ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncentivizedERC20ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncentivizedERC20Approval represents a Approval event raised by the IncentivizedERC20 contract.
type IncentivizedERC20Approval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IncentivizedERC20 *IncentivizedERC20Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*IncentivizedERC20ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IncentivizedERC20.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &IncentivizedERC20ApprovalIterator{contract: _IncentivizedERC20.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IncentivizedERC20 *IncentivizedERC20Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *IncentivizedERC20Approval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IncentivizedERC20.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncentivizedERC20Approval)
				if err := _IncentivizedERC20.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IncentivizedERC20 *IncentivizedERC20Filterer) ParseApproval(log types.Log) (*IncentivizedERC20Approval, error) {
	event := new(IncentivizedERC20Approval)
	if err := _IncentivizedERC20.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IncentivizedERC20TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the IncentivizedERC20 contract.
type IncentivizedERC20TransferIterator struct {
	Event *IncentivizedERC20Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncentivizedERC20TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncentivizedERC20Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncentivizedERC20Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncentivizedERC20TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncentivizedERC20TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncentivizedERC20Transfer represents a Transfer event raised by the IncentivizedERC20 contract.
type IncentivizedERC20Transfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IncentivizedERC20 *IncentivizedERC20Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*IncentivizedERC20TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IncentivizedERC20.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &IncentivizedERC20TransferIterator{contract: _IncentivizedERC20.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IncentivizedERC20 *IncentivizedERC20Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *IncentivizedERC20Transfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IncentivizedERC20.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncentivizedERC20Transfer)
				if err := _IncentivizedERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IncentivizedERC20 *IncentivizedERC20Filterer) ParseTransfer(log types.Log) (*IncentivizedERC20Transfer, error) {
	event := new(IncentivizedERC20Transfer)
	if err := _IncentivizedERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InitializableABI is the input ABI used to generate the binding from.
const InitializableABI = "[]"

// InitializableBin is the compiled bytecode used for deploying new contracts.
var InitializableBin = "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea264697066735822122072d8d5db6e14af65c10a9582013b98b3691097a627a38d6378267de83a4ca57c64736f6c634300060c0033"

// DeployInitializable deploys a new Ethereum contract, binding an instance of Initializable to it.
func DeployInitializable(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Initializable, error) {
	parsed, err := abi.JSON(strings.NewReader(InitializableABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(InitializableBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Initializable{InitializableCaller: InitializableCaller{contract: contract}, InitializableTransactor: InitializableTransactor{contract: contract}, InitializableFilterer: InitializableFilterer{contract: contract}}, nil
}

// Initializable is an auto generated Go binding around an Ethereum contract.
type Initializable struct {
	InitializableCaller     // Read-only binding to the contract
	InitializableTransactor // Write-only binding to the contract
	InitializableFilterer   // Log filterer for contract events
}

// InitializableCaller is an auto generated read-only Go binding around an Ethereum contract.
type InitializableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InitializableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type InitializableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InitializableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type InitializableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InitializableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type InitializableSession struct {
	Contract     *Initializable    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// InitializableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type InitializableCallerSession struct {
	Contract *InitializableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// InitializableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type InitializableTransactorSession struct {
	Contract     *InitializableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// InitializableRaw is an auto generated low-level Go binding around an Ethereum contract.
type InitializableRaw struct {
	Contract *Initializable // Generic contract binding to access the raw methods on
}

// InitializableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type InitializableCallerRaw struct {
	Contract *InitializableCaller // Generic read-only contract binding to access the raw methods on
}

// InitializableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type InitializableTransactorRaw struct {
	Contract *InitializableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewInitializable creates a new instance of Initializable, bound to a specific deployed contract.
func NewInitializable(address common.Address, backend bind.ContractBackend) (*Initializable, error) {
	contract, err := bindInitializable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Initializable{InitializableCaller: InitializableCaller{contract: contract}, InitializableTransactor: InitializableTransactor{contract: contract}, InitializableFilterer: InitializableFilterer{contract: contract}}, nil
}

// NewInitializableCaller creates a new read-only instance of Initializable, bound to a specific deployed contract.
func NewInitializableCaller(address common.Address, caller bind.ContractCaller) (*InitializableCaller, error) {
	contract, err := bindInitializable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &InitializableCaller{contract: contract}, nil
}

// NewInitializableTransactor creates a new write-only instance of Initializable, bound to a specific deployed contract.
func NewInitializableTransactor(address common.Address, transactor bind.ContractTransactor) (*InitializableTransactor, error) {
	contract, err := bindInitializable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &InitializableTransactor{contract: contract}, nil
}

// NewInitializableFilterer creates a new log filterer instance of Initializable, bound to a specific deployed contract.
func NewInitializableFilterer(address common.Address, filterer bind.ContractFilterer) (*InitializableFilterer, error) {
	contract, err := bindInitializable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &InitializableFilterer{contract: contract}, nil
}

// bindInitializable binds a generic wrapper to an already deployed contract.
func bindInitializable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(InitializableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Initializable *InitializableRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Initializable.Contract.InitializableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Initializable *InitializableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Initializable.Contract.InitializableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Initializable *InitializableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Initializable.Contract.InitializableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Initializable *InitializableCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Initializable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Initializable *InitializableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Initializable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Initializable *InitializableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Initializable.Contract.contract.Transact(opts, method, params...)
}

// InitializableAdminUpgradeabilityProxyABI is the input ABI used to generate the binding from.
const InitializableAdminUpgradeabilityProxyABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"logic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]"

// InitializableAdminUpgradeabilityProxyBin is the compiled bytecode used for deploying new contracts.
var InitializableAdminUpgradeabilityProxyBin = "0x608060405234801561001057600080fd5b50610905806100206000396000f3fe6080604052600436106100705760003560e01c80638f2839701161004e5780638f2839701461015e578063cf7a1d7714610191578063d1f5789414610250578063f851a4401461030657610070565b80633659cfe61461007a5780634f1ef286146100ad5780635c60da1b1461012d575b61007861031b565b005b34801561008657600080fd5b506100786004803603602081101561009d57600080fd5b50356001600160a01b0316610335565b610078600480360360408110156100c357600080fd5b6001600160a01b0382351691908101906040810160208201356401000000008111156100ee57600080fd5b82018360208201111561010057600080fd5b8035906020019184600183028401116401000000008311171561012257600080fd5b50909250905061036f565b34801561013957600080fd5b5061014261041c565b604080516001600160a01b039092168252519081900360200190f35b34801561016a57600080fd5b506100786004803603602081101561018157600080fd5b50356001600160a01b0316610459565b610078600480360360608110156101a757600080fd5b6001600160a01b0382358116926020810135909116918101906060810160408201356401000000008111156101db57600080fd5b8201836020820111156101ed57600080fd5b8035906020019184600183028401116401000000008311171561020f57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610513945050505050565b6100786004803603604081101561026657600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561029157600080fd5b8201836020820111156102a357600080fd5b803590602001918460018302840111640100000000831117156102c557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610543945050505050565b34801561031257600080fd5b50610142610623565b61032361064e565b61033361032e610656565b61067b565b565b61033d61069f565b6001600160a01b0316336001600160a01b031614156103645761035f816106c4565b61036c565b61036c61031b565b50565b61037761069f565b6001600160a01b0316336001600160a01b0316141561040f57610399836106c4565b6000836001600160a01b031683836040518083838082843760405192019450600093509091505080830381855af49150503d80600081146103f6576040519150601f19603f3d011682016040523d82523d6000602084013e6103fb565b606091505b505090508061040957600080fd5b50610417565b61041761031b565b505050565b600061042661069f565b6001600160a01b0316336001600160a01b0316141561044e57610447610656565b9050610456565b61045661031b565b90565b61046161069f565b6001600160a01b0316336001600160a01b03161415610364576001600160a01b0381166104bf5760405162461bcd60e51b815260040180806020018281038252603681526020018061085f6036913960400191505060405180910390fd5b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6104e861069f565b604080516001600160a01b03928316815291841660208301528051918290030190a161035f81610704565b600061051d610656565b6001600160a01b03161461053057600080fd5b61053a8382610543565b61041782610704565b600061054d610656565b6001600160a01b03161461056057600080fd5b61056982610728565b80511561061f576000826001600160a01b0316826040518082805190602001908083835b602083106105ac5780518252601f19909201916020918201910161058d565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d806000811461060c576040519150601f19603f3d011682016040523d82523d6000602084013e610611565b606091505b505090508061041757600080fd5b5050565b600061062d61069f565b6001600160a01b0316336001600160a01b0316141561044e5761044761069f565b610333610790565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b3660008037600080366000845af43d6000803e80801561069a573d6000f35b3d6000fd5b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b6106cd81610728565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355565b610731816107f0565b61076c5760405162461bcd60e51b815260040180806020018281038252603b815260200180610895603b913960400191505060405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b61079861069f565b6001600160a01b0316336001600160a01b031614156107e85760405162461bcd60e51b815260040180806020018281038252603281526020018061082d6032913960400191505060405180910390fd5b610333610333565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061082457508115155b94935050505056fe43616e6e6f742063616c6c2066616c6c6261636b2066756e6374696f6e2066726f6d207468652070726f78792061646d696e43616e6e6f74206368616e6765207468652061646d696e206f6620612070726f787920746f20746865207a65726f206164647265737343616e6e6f742073657420612070726f787920696d706c656d656e746174696f6e20746f2061206e6f6e2d636f6e74726163742061646472657373a2646970667358221220c51d6476a0bf6a2da5622ff4bf1147bbd0c5a4d20b9d01b5121fa0ea947db57e64736f6c634300060c0033"

// DeployInitializableAdminUpgradeabilityProxy deploys a new Ethereum contract, binding an instance of InitializableAdminUpgradeabilityProxy to it.
func DeployInitializableAdminUpgradeabilityProxy(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *InitializableAdminUpgradeabilityProxy, error) {
	parsed, err := abi.JSON(strings.NewReader(InitializableAdminUpgradeabilityProxyABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(InitializableAdminUpgradeabilityProxyBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &InitializableAdminUpgradeabilityProxy{InitializableAdminUpgradeabilityProxyCaller: InitializableAdminUpgradeabilityProxyCaller{contract: contract}, InitializableAdminUpgradeabilityProxyTransactor: InitializableAdminUpgradeabilityProxyTransactor{contract: contract}, InitializableAdminUpgradeabilityProxyFilterer: InitializableAdminUpgradeabilityProxyFilterer{contract: contract}}, nil
}

// InitializableAdminUpgradeabilityProxy is an auto generated Go binding around an Ethereum contract.
type InitializableAdminUpgradeabilityProxy struct {
	InitializableAdminUpgradeabilityProxyCaller     // Read-only binding to the contract
	InitializableAdminUpgradeabilityProxyTransactor // Write-only binding to the contract
	InitializableAdminUpgradeabilityProxyFilterer   // Log filterer for contract events
}

// InitializableAdminUpgradeabilityProxyCaller is an auto generated read-only Go binding around an Ethereum contract.
type InitializableAdminUpgradeabilityProxyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InitializableAdminUpgradeabilityProxyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type InitializableAdminUpgradeabilityProxyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InitializableAdminUpgradeabilityProxyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type InitializableAdminUpgradeabilityProxyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InitializableAdminUpgradeabilityProxySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type InitializableAdminUpgradeabilityProxySession struct {
	Contract     *InitializableAdminUpgradeabilityProxy // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                          // Call options to use throughout this session
	TransactOpts bind.TransactOpts                      // Transaction auth options to use throughout this session
}

// InitializableAdminUpgradeabilityProxyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type InitializableAdminUpgradeabilityProxyCallerSession struct {
	Contract *InitializableAdminUpgradeabilityProxyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                                // Call options to use throughout this session
}

// InitializableAdminUpgradeabilityProxyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type InitializableAdminUpgradeabilityProxyTransactorSession struct {
	Contract     *InitializableAdminUpgradeabilityProxyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                                // Transaction auth options to use throughout this session
}

// InitializableAdminUpgradeabilityProxyRaw is an auto generated low-level Go binding around an Ethereum contract.
type InitializableAdminUpgradeabilityProxyRaw struct {
	Contract *InitializableAdminUpgradeabilityProxy // Generic contract binding to access the raw methods on
}

// InitializableAdminUpgradeabilityProxyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type InitializableAdminUpgradeabilityProxyCallerRaw struct {
	Contract *InitializableAdminUpgradeabilityProxyCaller // Generic read-only contract binding to access the raw methods on
}

// InitializableAdminUpgradeabilityProxyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type InitializableAdminUpgradeabilityProxyTransactorRaw struct {
	Contract *InitializableAdminUpgradeabilityProxyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewInitializableAdminUpgradeabilityProxy creates a new instance of InitializableAdminUpgradeabilityProxy, bound to a specific deployed contract.
func NewInitializableAdminUpgradeabilityProxy(address common.Address, backend bind.ContractBackend) (*InitializableAdminUpgradeabilityProxy, error) {
	contract, err := bindInitializableAdminUpgradeabilityProxy(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &InitializableAdminUpgradeabilityProxy{InitializableAdminUpgradeabilityProxyCaller: InitializableAdminUpgradeabilityProxyCaller{contract: contract}, InitializableAdminUpgradeabilityProxyTransactor: InitializableAdminUpgradeabilityProxyTransactor{contract: contract}, InitializableAdminUpgradeabilityProxyFilterer: InitializableAdminUpgradeabilityProxyFilterer{contract: contract}}, nil
}

// NewInitializableAdminUpgradeabilityProxyCaller creates a new read-only instance of InitializableAdminUpgradeabilityProxy, bound to a specific deployed contract.
func NewInitializableAdminUpgradeabilityProxyCaller(address common.Address, caller bind.ContractCaller) (*InitializableAdminUpgradeabilityProxyCaller, error) {
	contract, err := bindInitializableAdminUpgradeabilityProxy(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &InitializableAdminUpgradeabilityProxyCaller{contract: contract}, nil
}

// NewInitializableAdminUpgradeabilityProxyTransactor creates a new write-only instance of InitializableAdminUpgradeabilityProxy, bound to a specific deployed contract.
func NewInitializableAdminUpgradeabilityProxyTransactor(address common.Address, transactor bind.ContractTransactor) (*InitializableAdminUpgradeabilityProxyTransactor, error) {
	contract, err := bindInitializableAdminUpgradeabilityProxy(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &InitializableAdminUpgradeabilityProxyTransactor{contract: contract}, nil
}

// NewInitializableAdminUpgradeabilityProxyFilterer creates a new log filterer instance of InitializableAdminUpgradeabilityProxy, bound to a specific deployed contract.
func NewInitializableAdminUpgradeabilityProxyFilterer(address common.Address, filterer bind.ContractFilterer) (*InitializableAdminUpgradeabilityProxyFilterer, error) {
	contract, err := bindInitializableAdminUpgradeabilityProxy(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &InitializableAdminUpgradeabilityProxyFilterer{contract: contract}, nil
}

// bindInitializableAdminUpgradeabilityProxy binds a generic wrapper to an already deployed contract.
func bindInitializableAdminUpgradeabilityProxy(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(InitializableAdminUpgradeabilityProxyABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _InitializableAdminUpgradeabilityProxy.Contract.InitializableAdminUpgradeabilityProxyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.Contract.InitializableAdminUpgradeabilityProxyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.Contract.InitializableAdminUpgradeabilityProxyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _InitializableAdminUpgradeabilityProxy.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.Contract.contract.Transact(opts, method, params...)
}

// Admin is a paid mutator transaction binding the contract method 0xf851a440.
//
// Solidity: function admin() returns(address)
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyTransactor) Admin(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.contract.Transact(opts, "admin")
}

// Admin is a paid mutator transaction binding the contract method 0xf851a440.
//
// Solidity: function admin() returns(address)
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxySession) Admin() (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.Contract.Admin(&_InitializableAdminUpgradeabilityProxy.TransactOpts)
}

// Admin is a paid mutator transaction binding the contract method 0xf851a440.
//
// Solidity: function admin() returns(address)
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyTransactorSession) Admin() (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.Contract.Admin(&_InitializableAdminUpgradeabilityProxy.TransactOpts)
}

// ChangeAdmin is a paid mutator transaction binding the contract method 0x8f283970.
//
// Solidity: function changeAdmin(address newAdmin) returns()
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyTransactor) ChangeAdmin(opts *bind.TransactOpts, newAdmin common.Address) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.contract.Transact(opts, "changeAdmin", newAdmin)
}

// ChangeAdmin is a paid mutator transaction binding the contract method 0x8f283970.
//
// Solidity: function changeAdmin(address newAdmin) returns()
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxySession) ChangeAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.Contract.ChangeAdmin(&_InitializableAdminUpgradeabilityProxy.TransactOpts, newAdmin)
}

// ChangeAdmin is a paid mutator transaction binding the contract method 0x8f283970.
//
// Solidity: function changeAdmin(address newAdmin) returns()
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyTransactorSession) ChangeAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.Contract.ChangeAdmin(&_InitializableAdminUpgradeabilityProxy.TransactOpts, newAdmin)
}

// Implementation is a paid mutator transaction binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() returns(address)
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyTransactor) Implementation(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.contract.Transact(opts, "implementation")
}

// Implementation is a paid mutator transaction binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() returns(address)
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxySession) Implementation() (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.Contract.Implementation(&_InitializableAdminUpgradeabilityProxy.TransactOpts)
}

// Implementation is a paid mutator transaction binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() returns(address)
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyTransactorSession) Implementation() (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.Contract.Implementation(&_InitializableAdminUpgradeabilityProxy.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xcf7a1d77.
//
// Solidity: function initialize(address logic, address admin, bytes data) payable returns()
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyTransactor) Initialize(opts *bind.TransactOpts, logic common.Address, admin common.Address, data []byte) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.contract.Transact(opts, "initialize", logic, admin, data)
}

// Initialize is a paid mutator transaction binding the contract method 0xcf7a1d77.
//
// Solidity: function initialize(address logic, address admin, bytes data) payable returns()
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxySession) Initialize(logic common.Address, admin common.Address, data []byte) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.Contract.Initialize(&_InitializableAdminUpgradeabilityProxy.TransactOpts, logic, admin, data)
}

// Initialize is a paid mutator transaction binding the contract method 0xcf7a1d77.
//
// Solidity: function initialize(address logic, address admin, bytes data) payable returns()
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyTransactorSession) Initialize(logic common.Address, admin common.Address, data []byte) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.Contract.Initialize(&_InitializableAdminUpgradeabilityProxy.TransactOpts, logic, admin, data)
}

// Initialize0 is a paid mutator transaction binding the contract method 0xd1f57894.
//
// Solidity: function initialize(address _logic, bytes _data) payable returns()
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyTransactor) Initialize0(opts *bind.TransactOpts, _logic common.Address, _data []byte) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.contract.Transact(opts, "initialize0", _logic, _data)
}

// Initialize0 is a paid mutator transaction binding the contract method 0xd1f57894.
//
// Solidity: function initialize(address _logic, bytes _data) payable returns()
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxySession) Initialize0(_logic common.Address, _data []byte) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.Contract.Initialize0(&_InitializableAdminUpgradeabilityProxy.TransactOpts, _logic, _data)
}

// Initialize0 is a paid mutator transaction binding the contract method 0xd1f57894.
//
// Solidity: function initialize(address _logic, bytes _data) payable returns()
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyTransactorSession) Initialize0(_logic common.Address, _data []byte) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.Contract.Initialize0(&_InitializableAdminUpgradeabilityProxy.TransactOpts, _logic, _data)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxySession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.Contract.UpgradeTo(&_InitializableAdminUpgradeabilityProxy.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.Contract.UpgradeTo(&_InitializableAdminUpgradeabilityProxy.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxySession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.Contract.UpgradeToAndCall(&_InitializableAdminUpgradeabilityProxy.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.Contract.UpgradeToAndCall(&_InitializableAdminUpgradeabilityProxy.TransactOpts, newImplementation, data)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxySession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.Contract.Fallback(&_InitializableAdminUpgradeabilityProxy.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.Contract.Fallback(&_InitializableAdminUpgradeabilityProxy.TransactOpts, calldata)
}

// InitializableAdminUpgradeabilityProxyAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the InitializableAdminUpgradeabilityProxy contract.
type InitializableAdminUpgradeabilityProxyAdminChangedIterator struct {
	Event *InitializableAdminUpgradeabilityProxyAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitializableAdminUpgradeabilityProxyAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitializableAdminUpgradeabilityProxyAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitializableAdminUpgradeabilityProxyAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitializableAdminUpgradeabilityProxyAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitializableAdminUpgradeabilityProxyAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitializableAdminUpgradeabilityProxyAdminChanged represents a AdminChanged event raised by the InitializableAdminUpgradeabilityProxy contract.
type InitializableAdminUpgradeabilityProxyAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*InitializableAdminUpgradeabilityProxyAdminChangedIterator, error) {

	logs, sub, err := _InitializableAdminUpgradeabilityProxy.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &InitializableAdminUpgradeabilityProxyAdminChangedIterator{contract: _InitializableAdminUpgradeabilityProxy.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *InitializableAdminUpgradeabilityProxyAdminChanged) (event.Subscription, error) {

	logs, sub, err := _InitializableAdminUpgradeabilityProxy.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitializableAdminUpgradeabilityProxyAdminChanged)
				if err := _InitializableAdminUpgradeabilityProxy.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyFilterer) ParseAdminChanged(log types.Log) (*InitializableAdminUpgradeabilityProxyAdminChanged, error) {
	event := new(InitializableAdminUpgradeabilityProxyAdminChanged)
	if err := _InitializableAdminUpgradeabilityProxy.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InitializableAdminUpgradeabilityProxyUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the InitializableAdminUpgradeabilityProxy contract.
type InitializableAdminUpgradeabilityProxyUpgradedIterator struct {
	Event *InitializableAdminUpgradeabilityProxyUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitializableAdminUpgradeabilityProxyUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitializableAdminUpgradeabilityProxyUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitializableAdminUpgradeabilityProxyUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitializableAdminUpgradeabilityProxyUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitializableAdminUpgradeabilityProxyUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitializableAdminUpgradeabilityProxyUpgraded represents a Upgraded event raised by the InitializableAdminUpgradeabilityProxy contract.
type InitializableAdminUpgradeabilityProxyUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*InitializableAdminUpgradeabilityProxyUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _InitializableAdminUpgradeabilityProxy.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &InitializableAdminUpgradeabilityProxyUpgradedIterator{contract: _InitializableAdminUpgradeabilityProxy.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *InitializableAdminUpgradeabilityProxyUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _InitializableAdminUpgradeabilityProxy.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitializableAdminUpgradeabilityProxyUpgraded)
				if err := _InitializableAdminUpgradeabilityProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyFilterer) ParseUpgraded(log types.Log) (*InitializableAdminUpgradeabilityProxyUpgraded, error) {
	event := new(InitializableAdminUpgradeabilityProxyUpgraded)
	if err := _InitializableAdminUpgradeabilityProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InitializableImmutableAdminUpgradeabilityProxyABI is the input ABI used to generate the binding from.
const InitializableImmutableAdminUpgradeabilityProxyABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]"

// InitializableImmutableAdminUpgradeabilityProxyBin is the compiled bytecode used for deploying new contracts.
var InitializableImmutableAdminUpgradeabilityProxyBin = "0x60a060405234801561001057600080fd5b506040516107733803806107738339818101604052602081101561003357600080fd5b5051606081901b6001600160601b0319166080526001600160a01b03166106f36100806000398061022852806102725280610331528061045e528061048752806105af52506106f36000f3fe60806040526004361061004a5760003560e01c80633659cfe6146100545780634f1ef286146100875780635c60da1b14610107578063d1f5789414610138578063f851a440146101ee575b610052610203565b005b34801561006057600080fd5b506100526004803603602081101561007757600080fd5b50356001600160a01b031661021d565b6100526004803603604081101561009d57600080fd5b6001600160a01b0382351691908101906040810160208201356401000000008111156100c857600080fd5b8201836020820111156100da57600080fd5b803590602001918460018302840111640100000000831117156100fc57600080fd5b509092509050610267565b34801561011357600080fd5b5061011c610324565b604080516001600160a01b039092168252519081900360200190f35b6100526004803603604081101561014e57600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561017957600080fd5b82018360208201111561018b57600080fd5b803590602001918460018302840111640100000000831117156101ad57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610371945050505050565b3480156101fa57600080fd5b5061011c610451565b61020b6104ab565b61021b6102166104b3565b6104d8565b565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561025c57610257816104fc565b610264565b610264610203565b50565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610317576102a1836104fc565b6000836001600160a01b031683836040518083838082843760405192019450600093509091505080830381855af49150503d80600081146102fe576040519150601f19603f3d011682016040523d82523d6000602084013e610303565b606091505b505090508061031157600080fd5b5061031f565b61031f610203565b505050565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156103665761035f6104b3565b905061036e565b61036e610203565b90565b600061037b6104b3565b6001600160a01b03161461038e57600080fd5b6103978261053c565b80511561044d576000826001600160a01b0316826040518082805190602001908083835b602083106103da5780518252601f1990920191602091820191016103bb565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d806000811461043a576040519150601f19603f3d011682016040523d82523d6000602084013e61043f565b606091505b505090508061031f57600080fd5b5050565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561036657507f000000000000000000000000000000000000000000000000000000000000000061036e565b61021b6105a4565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b3660008037600080366000845af43d6000803e8080156104f7573d6000f35b3d6000fd5b6105058161053c565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b61054581610614565b6105805760405162461bcd60e51b815260040180806020018281038252603b815260200180610683603b913960400191505060405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561060c5760405162461bcd60e51b81526004018080602001828103825260328152602001806106516032913960400191505060405180910390fd5b61021b61021b565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061064857508115155b94935050505056fe43616e6e6f742063616c6c2066616c6c6261636b2066756e6374696f6e2066726f6d207468652070726f78792061646d696e43616e6e6f742073657420612070726f787920696d706c656d656e746174696f6e20746f2061206e6f6e2d636f6e74726163742061646472657373a2646970667358221220c998aceaee89984e41376643cace9bef07887c2711cb0f7a736da40d75e0ac1164736f6c634300060c0033"

// DeployInitializableImmutableAdminUpgradeabilityProxy deploys a new Ethereum contract, binding an instance of InitializableImmutableAdminUpgradeabilityProxy to it.
func DeployInitializableImmutableAdminUpgradeabilityProxy(auth *bind.TransactOpts, backend bind.ContractBackend, admin common.Address) (common.Address, *types.Transaction, *InitializableImmutableAdminUpgradeabilityProxy, error) {
	parsed, err := abi.JSON(strings.NewReader(InitializableImmutableAdminUpgradeabilityProxyABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(InitializableImmutableAdminUpgradeabilityProxyBin), backend, admin)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &InitializableImmutableAdminUpgradeabilityProxy{InitializableImmutableAdminUpgradeabilityProxyCaller: InitializableImmutableAdminUpgradeabilityProxyCaller{contract: contract}, InitializableImmutableAdminUpgradeabilityProxyTransactor: InitializableImmutableAdminUpgradeabilityProxyTransactor{contract: contract}, InitializableImmutableAdminUpgradeabilityProxyFilterer: InitializableImmutableAdminUpgradeabilityProxyFilterer{contract: contract}}, nil
}

// InitializableImmutableAdminUpgradeabilityProxy is an auto generated Go binding around an Ethereum contract.
type InitializableImmutableAdminUpgradeabilityProxy struct {
	InitializableImmutableAdminUpgradeabilityProxyCaller     // Read-only binding to the contract
	InitializableImmutableAdminUpgradeabilityProxyTransactor // Write-only binding to the contract
	InitializableImmutableAdminUpgradeabilityProxyFilterer   // Log filterer for contract events
}

// InitializableImmutableAdminUpgradeabilityProxyCaller is an auto generated read-only Go binding around an Ethereum contract.
type InitializableImmutableAdminUpgradeabilityProxyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InitializableImmutableAdminUpgradeabilityProxyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type InitializableImmutableAdminUpgradeabilityProxyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InitializableImmutableAdminUpgradeabilityProxyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type InitializableImmutableAdminUpgradeabilityProxyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InitializableImmutableAdminUpgradeabilityProxySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type InitializableImmutableAdminUpgradeabilityProxySession struct {
	Contract     *InitializableImmutableAdminUpgradeabilityProxy // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                                   // Call options to use throughout this session
	TransactOpts bind.TransactOpts                               // Transaction auth options to use throughout this session
}

// InitializableImmutableAdminUpgradeabilityProxyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type InitializableImmutableAdminUpgradeabilityProxyCallerSession struct {
	Contract *InitializableImmutableAdminUpgradeabilityProxyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                                         // Call options to use throughout this session
}

// InitializableImmutableAdminUpgradeabilityProxyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type InitializableImmutableAdminUpgradeabilityProxyTransactorSession struct {
	Contract     *InitializableImmutableAdminUpgradeabilityProxyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                                         // Transaction auth options to use throughout this session
}

// InitializableImmutableAdminUpgradeabilityProxyRaw is an auto generated low-level Go binding around an Ethereum contract.
type InitializableImmutableAdminUpgradeabilityProxyRaw struct {
	Contract *InitializableImmutableAdminUpgradeabilityProxy // Generic contract binding to access the raw methods on
}

// InitializableImmutableAdminUpgradeabilityProxyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type InitializableImmutableAdminUpgradeabilityProxyCallerRaw struct {
	Contract *InitializableImmutableAdminUpgradeabilityProxyCaller // Generic read-only contract binding to access the raw methods on
}

// InitializableImmutableAdminUpgradeabilityProxyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type InitializableImmutableAdminUpgradeabilityProxyTransactorRaw struct {
	Contract *InitializableImmutableAdminUpgradeabilityProxyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewInitializableImmutableAdminUpgradeabilityProxy creates a new instance of InitializableImmutableAdminUpgradeabilityProxy, bound to a specific deployed contract.
func NewInitializableImmutableAdminUpgradeabilityProxy(address common.Address, backend bind.ContractBackend) (*InitializableImmutableAdminUpgradeabilityProxy, error) {
	contract, err := bindInitializableImmutableAdminUpgradeabilityProxy(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &InitializableImmutableAdminUpgradeabilityProxy{InitializableImmutableAdminUpgradeabilityProxyCaller: InitializableImmutableAdminUpgradeabilityProxyCaller{contract: contract}, InitializableImmutableAdminUpgradeabilityProxyTransactor: InitializableImmutableAdminUpgradeabilityProxyTransactor{contract: contract}, InitializableImmutableAdminUpgradeabilityProxyFilterer: InitializableImmutableAdminUpgradeabilityProxyFilterer{contract: contract}}, nil
}

// NewInitializableImmutableAdminUpgradeabilityProxyCaller creates a new read-only instance of InitializableImmutableAdminUpgradeabilityProxy, bound to a specific deployed contract.
func NewInitializableImmutableAdminUpgradeabilityProxyCaller(address common.Address, caller bind.ContractCaller) (*InitializableImmutableAdminUpgradeabilityProxyCaller, error) {
	contract, err := bindInitializableImmutableAdminUpgradeabilityProxy(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &InitializableImmutableAdminUpgradeabilityProxyCaller{contract: contract}, nil
}

// NewInitializableImmutableAdminUpgradeabilityProxyTransactor creates a new write-only instance of InitializableImmutableAdminUpgradeabilityProxy, bound to a specific deployed contract.
func NewInitializableImmutableAdminUpgradeabilityProxyTransactor(address common.Address, transactor bind.ContractTransactor) (*InitializableImmutableAdminUpgradeabilityProxyTransactor, error) {
	contract, err := bindInitializableImmutableAdminUpgradeabilityProxy(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &InitializableImmutableAdminUpgradeabilityProxyTransactor{contract: contract}, nil
}

// NewInitializableImmutableAdminUpgradeabilityProxyFilterer creates a new log filterer instance of InitializableImmutableAdminUpgradeabilityProxy, bound to a specific deployed contract.
func NewInitializableImmutableAdminUpgradeabilityProxyFilterer(address common.Address, filterer bind.ContractFilterer) (*InitializableImmutableAdminUpgradeabilityProxyFilterer, error) {
	contract, err := bindInitializableImmutableAdminUpgradeabilityProxy(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &InitializableImmutableAdminUpgradeabilityProxyFilterer{contract: contract}, nil
}

// bindInitializableImmutableAdminUpgradeabilityProxy binds a generic wrapper to an already deployed contract.
func bindInitializableImmutableAdminUpgradeabilityProxy(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(InitializableImmutableAdminUpgradeabilityProxyABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_InitializableImmutableAdminUpgradeabilityProxy *InitializableImmutableAdminUpgradeabilityProxyRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _InitializableImmutableAdminUpgradeabilityProxy.Contract.InitializableImmutableAdminUpgradeabilityProxyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_InitializableImmutableAdminUpgradeabilityProxy *InitializableImmutableAdminUpgradeabilityProxyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _InitializableImmutableAdminUpgradeabilityProxy.Contract.InitializableImmutableAdminUpgradeabilityProxyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_InitializableImmutableAdminUpgradeabilityProxy *InitializableImmutableAdminUpgradeabilityProxyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _InitializableImmutableAdminUpgradeabilityProxy.Contract.InitializableImmutableAdminUpgradeabilityProxyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_InitializableImmutableAdminUpgradeabilityProxy *InitializableImmutableAdminUpgradeabilityProxyCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _InitializableImmutableAdminUpgradeabilityProxy.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_InitializableImmutableAdminUpgradeabilityProxy *InitializableImmutableAdminUpgradeabilityProxyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _InitializableImmutableAdminUpgradeabilityProxy.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_InitializableImmutableAdminUpgradeabilityProxy *InitializableImmutableAdminUpgradeabilityProxyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _InitializableImmutableAdminUpgradeabilityProxy.Contract.contract.Transact(opts, method, params...)
}

// Admin is a paid mutator transaction binding the contract method 0xf851a440.
//
// Solidity: function admin() returns(address)
func (_InitializableImmutableAdminUpgradeabilityProxy *InitializableImmutableAdminUpgradeabilityProxyTransactor) Admin(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _InitializableImmutableAdminUpgradeabilityProxy.contract.Transact(opts, "admin")
}

// Admin is a paid mutator transaction binding the contract method 0xf851a440.
//
// Solidity: function admin() returns(address)
func (_InitializableImmutableAdminUpgradeabilityProxy *InitializableImmutableAdminUpgradeabilityProxySession) Admin() (*types.Transaction, error) {
	return _InitializableImmutableAdminUpgradeabilityProxy.Contract.Admin(&_InitializableImmutableAdminUpgradeabilityProxy.TransactOpts)
}

// Admin is a paid mutator transaction binding the contract method 0xf851a440.
//
// Solidity: function admin() returns(address)
func (_InitializableImmutableAdminUpgradeabilityProxy *InitializableImmutableAdminUpgradeabilityProxyTransactorSession) Admin() (*types.Transaction, error) {
	return _InitializableImmutableAdminUpgradeabilityProxy.Contract.Admin(&_InitializableImmutableAdminUpgradeabilityProxy.TransactOpts)
}

// Implementation is a paid mutator transaction binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() returns(address)
func (_InitializableImmutableAdminUpgradeabilityProxy *InitializableImmutableAdminUpgradeabilityProxyTransactor) Implementation(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _InitializableImmutableAdminUpgradeabilityProxy.contract.Transact(opts, "implementation")
}

// Implementation is a paid mutator transaction binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() returns(address)
func (_InitializableImmutableAdminUpgradeabilityProxy *InitializableImmutableAdminUpgradeabilityProxySession) Implementation() (*types.Transaction, error) {
	return _InitializableImmutableAdminUpgradeabilityProxy.Contract.Implementation(&_InitializableImmutableAdminUpgradeabilityProxy.TransactOpts)
}

// Implementation is a paid mutator transaction binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() returns(address)
func (_InitializableImmutableAdminUpgradeabilityProxy *InitializableImmutableAdminUpgradeabilityProxyTransactorSession) Implementation() (*types.Transaction, error) {
	return _InitializableImmutableAdminUpgradeabilityProxy.Contract.Implementation(&_InitializableImmutableAdminUpgradeabilityProxy.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xd1f57894.
//
// Solidity: function initialize(address _logic, bytes _data) payable returns()
func (_InitializableImmutableAdminUpgradeabilityProxy *InitializableImmutableAdminUpgradeabilityProxyTransactor) Initialize(opts *bind.TransactOpts, _logic common.Address, _data []byte) (*types.Transaction, error) {
	return _InitializableImmutableAdminUpgradeabilityProxy.contract.Transact(opts, "initialize", _logic, _data)
}

// Initialize is a paid mutator transaction binding the contract method 0xd1f57894.
//
// Solidity: function initialize(address _logic, bytes _data) payable returns()
func (_InitializableImmutableAdminUpgradeabilityProxy *InitializableImmutableAdminUpgradeabilityProxySession) Initialize(_logic common.Address, _data []byte) (*types.Transaction, error) {
	return _InitializableImmutableAdminUpgradeabilityProxy.Contract.Initialize(&_InitializableImmutableAdminUpgradeabilityProxy.TransactOpts, _logic, _data)
}

// Initialize is a paid mutator transaction binding the contract method 0xd1f57894.
//
// Solidity: function initialize(address _logic, bytes _data) payable returns()
func (_InitializableImmutableAdminUpgradeabilityProxy *InitializableImmutableAdminUpgradeabilityProxyTransactorSession) Initialize(_logic common.Address, _data []byte) (*types.Transaction, error) {
	return _InitializableImmutableAdminUpgradeabilityProxy.Contract.Initialize(&_InitializableImmutableAdminUpgradeabilityProxy.TransactOpts, _logic, _data)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_InitializableImmutableAdminUpgradeabilityProxy *InitializableImmutableAdminUpgradeabilityProxyTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _InitializableImmutableAdminUpgradeabilityProxy.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_InitializableImmutableAdminUpgradeabilityProxy *InitializableImmutableAdminUpgradeabilityProxySession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _InitializableImmutableAdminUpgradeabilityProxy.Contract.UpgradeTo(&_InitializableImmutableAdminUpgradeabilityProxy.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_InitializableImmutableAdminUpgradeabilityProxy *InitializableImmutableAdminUpgradeabilityProxyTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _InitializableImmutableAdminUpgradeabilityProxy.Contract.UpgradeTo(&_InitializableImmutableAdminUpgradeabilityProxy.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_InitializableImmutableAdminUpgradeabilityProxy *InitializableImmutableAdminUpgradeabilityProxyTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _InitializableImmutableAdminUpgradeabilityProxy.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_InitializableImmutableAdminUpgradeabilityProxy *InitializableImmutableAdminUpgradeabilityProxySession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _InitializableImmutableAdminUpgradeabilityProxy.Contract.UpgradeToAndCall(&_InitializableImmutableAdminUpgradeabilityProxy.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_InitializableImmutableAdminUpgradeabilityProxy *InitializableImmutableAdminUpgradeabilityProxyTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _InitializableImmutableAdminUpgradeabilityProxy.Contract.UpgradeToAndCall(&_InitializableImmutableAdminUpgradeabilityProxy.TransactOpts, newImplementation, data)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_InitializableImmutableAdminUpgradeabilityProxy *InitializableImmutableAdminUpgradeabilityProxyTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _InitializableImmutableAdminUpgradeabilityProxy.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_InitializableImmutableAdminUpgradeabilityProxy *InitializableImmutableAdminUpgradeabilityProxySession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _InitializableImmutableAdminUpgradeabilityProxy.Contract.Fallback(&_InitializableImmutableAdminUpgradeabilityProxy.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_InitializableImmutableAdminUpgradeabilityProxy *InitializableImmutableAdminUpgradeabilityProxyTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _InitializableImmutableAdminUpgradeabilityProxy.Contract.Fallback(&_InitializableImmutableAdminUpgradeabilityProxy.TransactOpts, calldata)
}

// InitializableImmutableAdminUpgradeabilityProxyUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the InitializableImmutableAdminUpgradeabilityProxy contract.
type InitializableImmutableAdminUpgradeabilityProxyUpgradedIterator struct {
	Event *InitializableImmutableAdminUpgradeabilityProxyUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitializableImmutableAdminUpgradeabilityProxyUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitializableImmutableAdminUpgradeabilityProxyUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitializableImmutableAdminUpgradeabilityProxyUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitializableImmutableAdminUpgradeabilityProxyUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitializableImmutableAdminUpgradeabilityProxyUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitializableImmutableAdminUpgradeabilityProxyUpgraded represents a Upgraded event raised by the InitializableImmutableAdminUpgradeabilityProxy contract.
type InitializableImmutableAdminUpgradeabilityProxyUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_InitializableImmutableAdminUpgradeabilityProxy *InitializableImmutableAdminUpgradeabilityProxyFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*InitializableImmutableAdminUpgradeabilityProxyUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _InitializableImmutableAdminUpgradeabilityProxy.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &InitializableImmutableAdminUpgradeabilityProxyUpgradedIterator{contract: _InitializableImmutableAdminUpgradeabilityProxy.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_InitializableImmutableAdminUpgradeabilityProxy *InitializableImmutableAdminUpgradeabilityProxyFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *InitializableImmutableAdminUpgradeabilityProxyUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _InitializableImmutableAdminUpgradeabilityProxy.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitializableImmutableAdminUpgradeabilityProxyUpgraded)
				if err := _InitializableImmutableAdminUpgradeabilityProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_InitializableImmutableAdminUpgradeabilityProxy *InitializableImmutableAdminUpgradeabilityProxyFilterer) ParseUpgraded(log types.Log) (*InitializableImmutableAdminUpgradeabilityProxyUpgraded, error) {
	event := new(InitializableImmutableAdminUpgradeabilityProxyUpgraded)
	if err := _InitializableImmutableAdminUpgradeabilityProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InitializableUpgradeabilityProxyABI is the input ABI used to generate the binding from.
const InitializableUpgradeabilityProxyABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]"

// InitializableUpgradeabilityProxyBin is the compiled bytecode used for deploying new contracts.
var InitializableUpgradeabilityProxyBin = "0x608060405234801561001057600080fd5b50610338806100206000396000f3fe60806040526004361061001e5760003560e01c8063d1f5789414610028575b6100266100de565b005b6100266004803603604081101561003e57600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561006957600080fd5b82018360208201111561007b57600080fd5b8035906020019184600183028401116401000000008311171561009d57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506100f8945050505050565b6100e66100f6565b6100f66100f16101da565b6101ff565b565b60006101026101da565b6001600160a01b03161461011557600080fd5b61011e82610223565b8051156101d6576000826001600160a01b0316826040518082805190602001908083835b602083106101615780518252601f199092019160209182019101610142565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d80600081146101c1576040519150601f19603f3d011682016040523d82523d6000602084013e6101c6565b606091505b50509050806101d457600080fd5b505b5050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b3660008037600080366000845af43d6000803e80801561021e573d6000f35b3d6000fd5b61022c8161028b565b6102675760405162461bcd60e51b815260040180806020018281038252603b8152602001806102c8603b913960400191505060405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906102bf57508115155b94935050505056fe43616e6e6f742073657420612070726f787920696d706c656d656e746174696f6e20746f2061206e6f6e2d636f6e74726163742061646472657373a2646970667358221220211306dbe5716cbe1290b9edacd2f3f97feef02f22517d1059c832fd3fc2228b64736f6c634300060c0033"

// DeployInitializableUpgradeabilityProxy deploys a new Ethereum contract, binding an instance of InitializableUpgradeabilityProxy to it.
func DeployInitializableUpgradeabilityProxy(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *InitializableUpgradeabilityProxy, error) {
	parsed, err := abi.JSON(strings.NewReader(InitializableUpgradeabilityProxyABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(InitializableUpgradeabilityProxyBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &InitializableUpgradeabilityProxy{InitializableUpgradeabilityProxyCaller: InitializableUpgradeabilityProxyCaller{contract: contract}, InitializableUpgradeabilityProxyTransactor: InitializableUpgradeabilityProxyTransactor{contract: contract}, InitializableUpgradeabilityProxyFilterer: InitializableUpgradeabilityProxyFilterer{contract: contract}}, nil
}

// InitializableUpgradeabilityProxy is an auto generated Go binding around an Ethereum contract.
type InitializableUpgradeabilityProxy struct {
	InitializableUpgradeabilityProxyCaller     // Read-only binding to the contract
	InitializableUpgradeabilityProxyTransactor // Write-only binding to the contract
	InitializableUpgradeabilityProxyFilterer   // Log filterer for contract events
}

// InitializableUpgradeabilityProxyCaller is an auto generated read-only Go binding around an Ethereum contract.
type InitializableUpgradeabilityProxyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InitializableUpgradeabilityProxyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type InitializableUpgradeabilityProxyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InitializableUpgradeabilityProxyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type InitializableUpgradeabilityProxyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InitializableUpgradeabilityProxySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type InitializableUpgradeabilityProxySession struct {
	Contract     *InitializableUpgradeabilityProxy // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                     // Call options to use throughout this session
	TransactOpts bind.TransactOpts                 // Transaction auth options to use throughout this session
}

// InitializableUpgradeabilityProxyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type InitializableUpgradeabilityProxyCallerSession struct {
	Contract *InitializableUpgradeabilityProxyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                           // Call options to use throughout this session
}

// InitializableUpgradeabilityProxyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type InitializableUpgradeabilityProxyTransactorSession struct {
	Contract     *InitializableUpgradeabilityProxyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                           // Transaction auth options to use throughout this session
}

// InitializableUpgradeabilityProxyRaw is an auto generated low-level Go binding around an Ethereum contract.
type InitializableUpgradeabilityProxyRaw struct {
	Contract *InitializableUpgradeabilityProxy // Generic contract binding to access the raw methods on
}

// InitializableUpgradeabilityProxyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type InitializableUpgradeabilityProxyCallerRaw struct {
	Contract *InitializableUpgradeabilityProxyCaller // Generic read-only contract binding to access the raw methods on
}

// InitializableUpgradeabilityProxyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type InitializableUpgradeabilityProxyTransactorRaw struct {
	Contract *InitializableUpgradeabilityProxyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewInitializableUpgradeabilityProxy creates a new instance of InitializableUpgradeabilityProxy, bound to a specific deployed contract.
func NewInitializableUpgradeabilityProxy(address common.Address, backend bind.ContractBackend) (*InitializableUpgradeabilityProxy, error) {
	contract, err := bindInitializableUpgradeabilityProxy(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &InitializableUpgradeabilityProxy{InitializableUpgradeabilityProxyCaller: InitializableUpgradeabilityProxyCaller{contract: contract}, InitializableUpgradeabilityProxyTransactor: InitializableUpgradeabilityProxyTransactor{contract: contract}, InitializableUpgradeabilityProxyFilterer: InitializableUpgradeabilityProxyFilterer{contract: contract}}, nil
}

// NewInitializableUpgradeabilityProxyCaller creates a new read-only instance of InitializableUpgradeabilityProxy, bound to a specific deployed contract.
func NewInitializableUpgradeabilityProxyCaller(address common.Address, caller bind.ContractCaller) (*InitializableUpgradeabilityProxyCaller, error) {
	contract, err := bindInitializableUpgradeabilityProxy(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &InitializableUpgradeabilityProxyCaller{contract: contract}, nil
}

// NewInitializableUpgradeabilityProxyTransactor creates a new write-only instance of InitializableUpgradeabilityProxy, bound to a specific deployed contract.
func NewInitializableUpgradeabilityProxyTransactor(address common.Address, transactor bind.ContractTransactor) (*InitializableUpgradeabilityProxyTransactor, error) {
	contract, err := bindInitializableUpgradeabilityProxy(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &InitializableUpgradeabilityProxyTransactor{contract: contract}, nil
}

// NewInitializableUpgradeabilityProxyFilterer creates a new log filterer instance of InitializableUpgradeabilityProxy, bound to a specific deployed contract.
func NewInitializableUpgradeabilityProxyFilterer(address common.Address, filterer bind.ContractFilterer) (*InitializableUpgradeabilityProxyFilterer, error) {
	contract, err := bindInitializableUpgradeabilityProxy(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &InitializableUpgradeabilityProxyFilterer{contract: contract}, nil
}

// bindInitializableUpgradeabilityProxy binds a generic wrapper to an already deployed contract.
func bindInitializableUpgradeabilityProxy(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(InitializableUpgradeabilityProxyABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_InitializableUpgradeabilityProxy *InitializableUpgradeabilityProxyRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _InitializableUpgradeabilityProxy.Contract.InitializableUpgradeabilityProxyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_InitializableUpgradeabilityProxy *InitializableUpgradeabilityProxyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _InitializableUpgradeabilityProxy.Contract.InitializableUpgradeabilityProxyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_InitializableUpgradeabilityProxy *InitializableUpgradeabilityProxyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _InitializableUpgradeabilityProxy.Contract.InitializableUpgradeabilityProxyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_InitializableUpgradeabilityProxy *InitializableUpgradeabilityProxyCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _InitializableUpgradeabilityProxy.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_InitializableUpgradeabilityProxy *InitializableUpgradeabilityProxyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _InitializableUpgradeabilityProxy.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_InitializableUpgradeabilityProxy *InitializableUpgradeabilityProxyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _InitializableUpgradeabilityProxy.Contract.contract.Transact(opts, method, params...)
}

// Initialize is a paid mutator transaction binding the contract method 0xd1f57894.
//
// Solidity: function initialize(address _logic, bytes _data) payable returns()
func (_InitializableUpgradeabilityProxy *InitializableUpgradeabilityProxyTransactor) Initialize(opts *bind.TransactOpts, _logic common.Address, _data []byte) (*types.Transaction, error) {
	return _InitializableUpgradeabilityProxy.contract.Transact(opts, "initialize", _logic, _data)
}

// Initialize is a paid mutator transaction binding the contract method 0xd1f57894.
//
// Solidity: function initialize(address _logic, bytes _data) payable returns()
func (_InitializableUpgradeabilityProxy *InitializableUpgradeabilityProxySession) Initialize(_logic common.Address, _data []byte) (*types.Transaction, error) {
	return _InitializableUpgradeabilityProxy.Contract.Initialize(&_InitializableUpgradeabilityProxy.TransactOpts, _logic, _data)
}

// Initialize is a paid mutator transaction binding the contract method 0xd1f57894.
//
// Solidity: function initialize(address _logic, bytes _data) payable returns()
func (_InitializableUpgradeabilityProxy *InitializableUpgradeabilityProxyTransactorSession) Initialize(_logic common.Address, _data []byte) (*types.Transaction, error) {
	return _InitializableUpgradeabilityProxy.Contract.Initialize(&_InitializableUpgradeabilityProxy.TransactOpts, _logic, _data)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_InitializableUpgradeabilityProxy *InitializableUpgradeabilityProxyTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _InitializableUpgradeabilityProxy.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_InitializableUpgradeabilityProxy *InitializableUpgradeabilityProxySession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _InitializableUpgradeabilityProxy.Contract.Fallback(&_InitializableUpgradeabilityProxy.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_InitializableUpgradeabilityProxy *InitializableUpgradeabilityProxyTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _InitializableUpgradeabilityProxy.Contract.Fallback(&_InitializableUpgradeabilityProxy.TransactOpts, calldata)
}

// InitializableUpgradeabilityProxyUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the InitializableUpgradeabilityProxy contract.
type InitializableUpgradeabilityProxyUpgradedIterator struct {
	Event *InitializableUpgradeabilityProxyUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitializableUpgradeabilityProxyUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitializableUpgradeabilityProxyUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitializableUpgradeabilityProxyUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitializableUpgradeabilityProxyUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitializableUpgradeabilityProxyUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitializableUpgradeabilityProxyUpgraded represents a Upgraded event raised by the InitializableUpgradeabilityProxy contract.
type InitializableUpgradeabilityProxyUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_InitializableUpgradeabilityProxy *InitializableUpgradeabilityProxyFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*InitializableUpgradeabilityProxyUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _InitializableUpgradeabilityProxy.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &InitializableUpgradeabilityProxyUpgradedIterator{contract: _InitializableUpgradeabilityProxy.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_InitializableUpgradeabilityProxy *InitializableUpgradeabilityProxyFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *InitializableUpgradeabilityProxyUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _InitializableUpgradeabilityProxy.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitializableUpgradeabilityProxyUpgraded)
				if err := _InitializableUpgradeabilityProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_InitializableUpgradeabilityProxy *InitializableUpgradeabilityProxyFilterer) ParseUpgraded(log types.Log) (*InitializableUpgradeabilityProxyUpgraded, error) {
	event := new(InitializableUpgradeabilityProxyUpgraded)
	if err := _InitializableUpgradeabilityProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolABI is the input ABI used to generate the binding from.
const LendingPoolABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowRateMode\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowRate\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"referral\",\"type\":\"uint16\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"referral\",\"type\":\"uint16\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"FlashLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"debtAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtToCover\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidatedCollateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"receiveAToken\",\"type\":\"bool\"}],\"name\":\"LiquidationCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"RebalanceStableBorrowRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"repayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableBorrowRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"variableBorrowRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"variableBorrowIndex\",\"type\":\"uint256\"}],\"name\":\"ReserveDataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ReserveUsedAsCollateralDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ReserveUsedAsCollateralEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rateMode\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FLASHLOAN_PREMIUM_TOTAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LENDINGPOOL_REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_NUMBER_RESERVES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_STABLE_RATE_BORROW_SIZE_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRateMode\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceFromBefore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceToBefore\",\"type\":\"uint256\"}],\"name\":\"finalizeTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"modes\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"flashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddressesProvider\",\"outputs\":[{\"internalType\":\"contractILendingPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getConfiguration\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"structDataTypes.ReserveConfigurationMap\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getReserveData\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"structDataTypes.ReserveConfigurationMap\",\"name\":\"configuration\",\"type\":\"tuple\"},{\"internalType\":\"uint128\",\"name\":\"liquidityIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"variableBorrowIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentLiquidityRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentVariableBorrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentStableBorrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint40\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"aTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableDebtTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"variableDebtTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interestRateStrategyAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"}],\"internalType\":\"structDataTypes.ReserveData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getReserveNormalizedIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getReserveNormalizedVariableDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReservesList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserAccountData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCollateralETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebtETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableBorrowsETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentLiquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserConfiguration\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"structDataTypes.UserConfigurationMap\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"aTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableDebtAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"variableDebtAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interestRateStrategyAddress\",\"type\":\"address\"}],\"name\":\"initReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractILendingPoolAddressesProvider\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debtToCover\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"receiveAToken\",\"type\":\"bool\"}],\"name\":\"liquidationCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"rebalanceStableBorrowRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateMode\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"}],\"name\":\"repay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"configuration\",\"type\":\"uint256\"}],\"name\":\"setConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rateStrategyAddress\",\"type\":\"address\"}],\"name\":\"setReserveInterestRateStrategyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useAsCollateral\",\"type\":\"bool\"}],\"name\":\"setUserUseReserveAsCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rateMode\",\"type\":\"uint256\"}],\"name\":\"swapBorrowRateMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// LendingPoolBin is the compiled bytecode used for deploying new contracts.
var LendingPoolBin = "0x60806040526000805534801561001457600080fd5b506155cd80620000256000396000f3fe608060405234801561001057600080fd5b50600436106101c35760003560e01c8063ab9c4b5d116100f9578063d15e005311610097578063e82fec2f11610071578063e82fec2f146103c2578063e8eda9df146103ca578063f8119d51146103dd578063fe65acfe146103e5576101c3565b8063d15e005314610387578063d1946dbc1461039a578063d5ed3933146103af576101c3565b8063bf92857c116100d3578063bf92857c14610329578063c44b11f71461034e578063c4d66de814610361578063cd11238214610374576101c3565b8063ab9c4b5d146102f0578063b8d2927614610303578063bedb86fb14610316576101c3565b80635a3b74b9116101665780637a708e92116101405780637a708e92146102af5780638afaff02146102c257806394ba89a2146102ca578063a415bcad146102dd576101c3565b80635a3b74b9146102745780635c975abb1461028757806369328dec1461029c576101c3565b806335ea6a75116101a257806335ea6a751461020e578063386497fd1461022e5780634417a58314610241578063573ade8114610261576101c3565b8062a718a9146101c8578063074b2e43146101dd5780631d2118f9146101fb575b600080fd5b6101db6101d636600461488a565b6103fa565b005b6101e56105d0565b6040516101f291906154c4565b60405180910390f35b6101db6102093660046147e2565b6105d5565b61022161021c3660046147aa565b61060e565b6040516101f291906152d9565b6101e561023c3660046147aa565b6106f0565b61025461024f3660046147aa565b610717565b6040516101f291906152cf565b6101e561026f366004614b29565b61074a565b6101db610282366004614a3f565b610a16565b61028f610bdb565b6040516101f29190615115565b6101e56102aa366004614a97565b610be4565b6101db6102bd36600461481a565b610f0e565b6101e5610ff0565b6101db6102d8366004614a6c565b610ff5565b6101db6102eb366004614b72565b611362565b6101db6102fe366004614947565b6113e2565b6101db610311366004614a6c565b611ab5565b6101db610324366004614bb1565b611ad9565b61033c6103373660046147aa565b611b54565b6040516101f296959493929190615516565b61025461035c3660046147aa565b611c50565b6101db61036f3660046147aa565b611c83565b6101db6103823660046147e2565b611d1b565b6101e56103953660046147aa565b611f91565b6103a2611fb2565b6040516101f291906150c8565b6101db6103bd3660046148e3565b612057565b6101e56122a0565b6101db6103d8366004614ad8565b6122a6565b6101e56124d3565b6103ed6124d8565b6040516101f29190614df8565b6104026124e7565b6034546040805163712d917160e01b815290516000926001600160a01b03169163712d9171916004808301926020929190829003018186803b15801561044757600080fd5b505afa15801561045b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047f91906147c6565b905060006060826001600160a01b031688888888886040516024016104a8959493929190614e80565b60408051601f198184030181529181526020820180516001600160e01b031662a718a960e01b179052516104dc9190614ddc565b600060405180830381855af49150503d8060008114610517576040519150601f19603f3d011682016040523d82523d6000602084013e61051c565b606091505b50915091508160405180604001604052806002815260200161323360f01b815250906105645760405162461bcd60e51b815260040161055b9190615120565b60405180910390fd5b50600060608280602001905181019061057d9190614c01565b9150915081600014816040516020016105969190614ddc565b604051602081830303815290604052906105c35760405162461bcd60e51b815260040161055b9190615120565b5050505050505050505050565b600981565b6105dd612525565b6001600160a01b03918216600090815260356020526040902060070180546001600160a01b03191691909216179055565b6106166144f8565b506001600160a01b0381811660009081526035602090815260409182902082516101a08101845281546101808201908152815260018201546001600160801b0380821694830194909452600160801b908190048416948201949094526002820154808416606083015284900483166080820152600382015492831660a08201529290910464ffffffffff1660c08301526004810154831660e0830152600581015483166101008301526006810154831661012083015260070154918216610140820152600160a01b90910460ff166101608201525b919050565b6001600160a01b0381166000908152603560205260408120610711906125e4565b92915050565b61071f614563565b506001600160a01b031660009081526036602090815260409182902082519182019092529054815290565b60006107546124e7565b6001600160a01b038516600090815260356020526040812090806107788584612661565b91509150600086600281111561078a57fe5b60405163fa0c214960e01b815290915073__$1bcb88e8c11bbe24182074a8232234694a$__9063fa0c2149906107ce9087908c9086908c908a908a90600401615480565b60006040518083038186803b1580156107e657600080fd5b505af41580156107fa573d6000803e3d6000fd5b50600092506001915061080a9050565b82600281111561081657fe5b146108215782610823565b835b9050808910156108305750875b61083985612776565b600182600281111561084757fe5b14156108b8576005850154604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac90610881908a908590600401614e3d565b600060405180830381600087803b15801561089b57600080fd5b505af11580156108af573d6000803e3d6000fd5b50505050610936565b60068501546001860154604051637a94c56560e11b81526001600160a01b039092169163f5298aca91610903918b918691600160801b9091046001600160801b031690600401614e56565b600060405180830381600087803b15801561091d57600080fd5b505af1158015610931573d6000803e3d6000fd5b505050505b60048501546001600160a01b0316610952868c83856000612843565b610966826109608787612c35565b90612c5a565b61099e5760078601546001600160a01b038916600090815260366020526040812061099e929091600160a01b90910460ff1690612c9c565b6109b36001600160a01b038c16338385612d0c565b336001600160a01b0316886001600160a01b03168c6001600160a01b03167f4cdde6e09bb755c9a5589ebaec640bbfedff1362d4b255ebf8339782b9942faa85604051610a0091906154c4565b60405180910390a4509998505050505050505050565b610a1e6124e7565b6001600160a01b03808316600090815260356020818152604080842033855260368352938190206038546034548351631f94a27560e31b81529351969773__$1bcb88e8c11bbe24182074a8232234694a$__97635fa297e5978a978d978d9792969295603795939493169263fca513a892600480840193919291829003018186803b158015610aac57600080fd5b505afa158015610ac0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae491906147c6565b6040518963ffffffff1660e01b8152600401610b079897969594939291906153fa565b60006040518083038186803b158015610b1f57600080fd5b505af4158015610b33573d6000803e3d6000fd5b505050506007810154336000908152603660205260409020610b5f91600160a01b900460ff1684612d6a565b8115610b9f5760405133906001600160a01b038516907e058a56ea94653cdf4f152d227ace22d4c00ad99e2a43f58cb7d9e3feb295f290600090a3610bd6565b60405133906001600160a01b038516907f44c58d81365b66dd4b1a7f36c25aa97b8c71c361ee4937adc1a00000227db5dd90600090a35b505050565b60395460ff1690565b6000610bee6124e7565b6001600160a01b0380851660009081526035602052604080822060048082015492516370a0823160e01b8152919492909216929183916370a0823191610c3691339101614df8565b60206040518083038186803b158015610c4e57600080fd5b505afa158015610c62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c869190614be9565b905085600019811415610c965750805b73__$1bcb88e8c11bbe24182074a8232234694a$__63d09db04a898385603560366000336001600160a01b03166001600160a01b031681526020019081526020016000206037603854603460009054906101000a90046001600160a01b03166001600160a01b031663fca513a86040518163ffffffff1660e01b815260040160206040518083038186803b158015610d2d57600080fd5b505afa158015610d41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6591906147c6565b6040518963ffffffff1660e01b8152600401610d88989796959493929190614f65565b60006040518083038186803b158015610da057600080fd5b505af4158015610db4573d6000803e3d6000fd5b50505050610dc184612776565b610dcf848985600085612843565b81811415610e39576007840154336000908152603660205260408120610e02929091600160a01b90910460ff1690612d6a565b60405133906001600160a01b038a16907f44c58d81365b66dd4b1a7f36c25aa97b8c71c361ee4937adc1a00000227db5dd90600090a35b6001840154604051636b81068560e11b81526001600160a01b0385169163d7020d0a91610e7a9133918b9187916001600160801b0390911690600401614e0c565b600060405180830381600087803b158015610e9457600080fd5b505af1158015610ea8573d6000803e3d6000fd5b50505050856001600160a01b0316336001600160a01b0316896001600160a01b03167f3115d1449a7b732c986cba18244e897a450f61e1bb8d589cd2e69e6c8924f9f784604051610ef991906154c4565b60405180910390a493505050505b9392505050565b610f16612525565b610f1f85612de0565b6040518060400160405280600281526020016106e760f31b81525090610f585760405162461bcd60e51b815260040161055b9190615120565b506001600160a01b038516600090815260356020526040908190209051630acce25f60e21b815273__$40f0de17db8d5bc5f7c18656d6c356a0c7$__91632b33897c91610fb0919088908890889088906004016153cc565b60006040518083038186803b158015610fc857600080fd5b505af4158015610fdc573d6000803e3d6000fd5b50505050610fe985612e19565b5050505050565b600281565b610ffd6124e7565b6001600160a01b038216600090815260356020526040812090806110213384612661565b91509150600084600281111561103357fe5b3360009081526036602052604090819020905163a8695b1d60e01b815291925073__$1bcb88e8c11bbe24182074a8232234694a$__9163a8695b1d916110849188919088908890889060040161543c565b60006040518083038186803b15801561109c57600080fd5b505af41580156110b0573d6000803e3d6000fd5b505050506110bd84612776565b60018160028111156110cb57fe5b14156111db576005840154604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac906111059033908790600401614e3d565b600060405180830381600087803b15801561111f57600080fd5b505af1158015611133573d6000803e3d6000fd5b505050506006840154600185015460405163b3f1c93d60e01b81526001600160a01b039092169163b3f1c93d9161118391339182918991600160801b90046001600160801b031690600401614e0c565b602060405180830381600087803b15801561119d57600080fd5b505af11580156111b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d59190614bcd565b506112f1565b60068401546001850154604051637a94c56560e11b81526001600160a01b039092169163f5298aca916112269133918791600160801b9091046001600160801b031690600401614e56565b600060405180830381600087803b15801561124057600080fd5b505af1158015611254573d6000803e3d6000fd5b505050506005840154600385015460405163b3f1c93d60e01b81526001600160a01b039092169163b3f1c93d9161129d913391829188916001600160801b031690600401614e0c565b602060405180830381600087803b1580156112b757600080fd5b505af11580156112cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ef9190614bcd565b505b600484015461130f90859088906001600160a01b0316600080612843565b336001600160a01b0316866001600160a01b03167fea368a40e9570069bb8e6511d668293ad2e1f03b0d982431fd223de9f3b70ca68760405161135291906154c4565b60405180910390a3505050505050565b61136a6124e7565b6001600160a01b038086166000818152603560209081526040918290208251610100810184529384523391840191909152848416918301919091526060820187905260808201869052600481015490921660a082015261ffff841660c0820152600160e08201526113da90612f20565b505050505050565b6113ea6124e7565b6113f2614576565b61145f8b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808f0282810182019093528e82529093508e92508d91829185019084908082843760009201919091525061341992505050565b60608a67ffffffffffffffff8111801561147857600080fd5b506040519080825280602002602001820160405280156114a2578160200160208202803683370190505b50905060608b67ffffffffffffffff811180156114be57600080fd5b506040519080825280602002602001820160405280156114e8578160200160208202803683370190505b506001600160a01b038f1684526000604085015290505b60408301518c11156116ab57603560008e8e866040015181811061151f57fe5b905060200201602081019061153491906147aa565b6001600160a01b03166001600160a01b0316815260200190815260200160002060040160009054906101000a90046001600160a01b03168284604001518151811061157b57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506115d16127106115cb60098e8e88604001518181106115b657fe5b9050602002013561345790919063ffffffff16565b90613491565b818460400151815181106115e157fe5b602002602001018181525050818360400151815181106115fd57fe5b60200260200101516001600160a01b0316634efecaa58f8d8d876040015181811061162457fe5b905060200201356040518363ffffffff1660e01b8152600401611648929190614e3d565b602060405180830381600087803b15801561166257600080fd5b505af1158015611676573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169a9190614be9565b5060408301805160010190526114ff565b82600001516001600160a01b031663920f5c848e8e8e8e86338d8d6040518963ffffffff1660e01b81526004016116e9989796959493929190615004565b602060405180830381600087803b15801561170357600080fd5b505af1158015611717573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173b9190614bcd565b604051806040016040528060028152602001611b1b60f11b815250906117745760405162461bcd60e51b815260040161055b9190615120565b50600060408401525b60408301518c1115611aa5578c8c846040015181811061179957fe5b90506020020160208101906117ae91906147aa565b6001600160a01b0316606084015260408301518b908b908181106117ce57fe5b905060200201358360a0018181525050808360400151815181106117ee57fe5b60200260200101518360c00181815250508183604001518151811061180f57fe5b60209081029190910101516001600160a01b0316608084015260c083015160a084015161183b91612c35565b60e084015260008989856040015181811061185257fe5b90506020020135600281111561186457fe5b600281111561186f57fe5b14156119a15760608301516001600160a01b0316600090815260356020526040902061189a90612776565b61193a83608001516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118da57600080fd5b505afa1580156118ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119129190614be9565b60c085015160608601516001600160a01b0316600090815260356020526040902091906134d3565b6060830151608084015160e08501516001600160a01b038316600090815260356020526040812061197094909390929091612843565b61199c8e84608001518560e0015186606001516001600160a01b0316612d0c909392919063ffffffff16565b611a30565b611a3060405180610100016040528085606001516001600160a01b03168152602001336001600160a01b03168152602001896001600160a01b031681526020018560a0015181526020018b8b87604001518181106119fb57fe5b90506020020135815260200185608001516001600160a01b031681526020018661ffff16815260200160001515815250612f20565b82606001516001600160a01b0316336001600160a01b03168f6001600160a01b03167f631042c832b07452973831137f2d73e395028b44b250dedc5abb0ee766e168ac8660a001518760c0015189604051611a8d939291906154cd565b60405180910390a4604083018051600101905261177d565b5050505050505050505050505050565b611abd612525565b6001600160a01b03909116600090815260356020526040902055565b611ae1612525565b6039805460ff1916821515179081905560ff1615611b27576040517f9e87fac88ff661f02d44f95383c817fece4bce600a3dab7a54406878b965e75290600090a1611b51565b6040517fa45f47fdea8a1efdd9029a5691c7f759c32b7c698632b563573e155625d1693390600090a15b50565b600080600080600080611c2d876035603660008b6001600160a01b03166001600160a01b031681526020019081526020016000206040518060200160405290816000820154815250506037603854603460009054906101000a90046001600160a01b03166001600160a01b031663fca513a86040518163ffffffff1660e01b815260040160206040518083038186803b158015611bf057600080fd5b505afa158015611c04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2891906147c6565b613590565b93995091975090945092509050611c45868684613a51565b935091939550919395565b611c58614563565b506001600160a01b031660009081526035602090815260409182902082519182019092529054815290565b6000611c8d613a85565b60015490915060ff1680611ca45750611ca4613a8a565b80611cb0575060005481115b611ccc5760405162461bcd60e51b815260040161055b90615200565b60015460ff16158015611ceb576001805460ff19168117905560008290555b603480546001600160a01b0319166001600160a01b0385161790558015610bd6576001805460ff19169055505050565b611d236124e7565b6001600160a01b038083166000908152603560205260408082206005810154600682015460048084015494516370a0823160e01b81529396928316959183169490921692909185916370a0823191611d7d918a9101614df8565b60206040518083038186803b158015611d9557600080fd5b505afa158015611da9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dcd9190614be9565b60405163548cad0960e01b815290915073__$1bcb88e8c11bbe24182074a8232234694a$__9063548cad0990611e0f9088908b908990899089906004016153cc565b60006040518083038186803b158015611e2757600080fd5b505af4158015611e3b573d6000803e3d6000fd5b50505050611e4885612776565b604051632770a7eb60e21b81526001600160a01b03851690639dc29fac90611e769089908590600401614e3d565b600060405180830381600087803b158015611e9057600080fd5b505af1158015611ea4573d6000803e3d6000fd5b505050600386015460405163b3f1c93d60e01b81526001600160a01b038716925063b3f1c93d91611ee7918a91829187916001600160801b031690600401614e0c565b602060405180830381600087803b158015611f0157600080fd5b505af1158015611f15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f399190614bcd565b50611f48858884600080612843565b856001600160a01b0316876001600160a01b03167f9f439ae0c81e41a04d3fdfe07aed54e6a179fb0db15be7702eb66fa8ef6f530060405160405180910390a350505050505050565b6001600160a01b038116600090815260356020526040812061071190613a90565b60608060385467ffffffffffffffff81118015611fce57600080fd5b50604051908082528060200260200182016040528015611ff8578160200160208202803683370190505b50905060005b6038548110156120515760008181526037602052604090205482516001600160a01b039091169083908390811061203157fe5b6001600160a01b0390921660209283029190910190910152600101611ffe565b50905090565b61205f6124e7565b6001600160a01b038681166000908152603560209081526040918290206004015482518084019093526002835261363360f01b9183019190915290911633146120bb5760405162461bcd60e51b815260040161055b9190615120565b5061217785603560366000896001600160a01b03166001600160a01b031681526020019081526020016000206037603854603460009054906101000a90046001600160a01b03166001600160a01b031663fca513a86040518163ffffffff1660e01b815260040160206040518083038186803b15801561213a57600080fd5b505afa15801561214e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217291906147c6565b613aef565b6001600160a01b03868116600090815260356020526040902060070154600160a01b900460ff169085811690871614612297576121b48385612c5a565b612220576001600160a01b0386166000908152603660205260408120906121de9082908490612d6a565b866001600160a01b0316886001600160a01b03167f44c58d81365b66dd4b1a7f36c25aa97b8c71c361ee4937adc1a00000227db5dd60405160405180910390a3505b8115801561222d57508315155b15612297576001600160a01b038516600090815260366020526040902061225681836001612d6a565b856001600160a01b0316886001600160a01b03167e058a56ea94653cdf4f152d227ace22d4c00ad99e2a43f58cb7d9e3feb295f260405160405180910390a3505b50505050505050565b6109c481565b6122ae6124e7565b6001600160a01b038416600090815260356020526040908190209051630eca322b60e01b815273__$1bcb88e8c11bbe24182074a8232234694a$__90630eca322b906123009084908890600401615472565b60006040518083038186803b15801561231857600080fd5b505af415801561232c573d6000803e3d6000fd5b5050505060048101546001600160a01b031661234782612776565b612355828783886000612843565b61236a6001600160a01b038716338388612d0c565b6001820154604051630ab714fb60e11b81526000916001600160a01b0384169163156e29f6916123ac9189918b916001600160801b0390911690600401614e56565b602060405180830381600087803b1580156123c657600080fd5b505af11580156123da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123fe9190614bcd565b905080156124785760078301546001600160a01b038616600090815260366020526040902061243891600160a01b900460ff166001612d6a565b846001600160a01b0316876001600160a01b03167e058a56ea94653cdf4f152d227ace22d4c00ad99e2a43f58cb7d9e3feb295f260405160405180910390a35b8361ffff16856001600160a01b0316886001600160a01b03167fde6857219544bb5b7746f48ed30be6386fefc61b2f864cacf559893bf50fd951338a6040516124c2929190614e3d565b60405180910390a450505050505050565b608081565b6034546001600160a01b031690565b6039546040805180820190915260028152610d8d60f21b60208201529060ff1615611b515760405162461bcd60e51b815260040161055b9190615120565b603454604080516385c858b160e01b8152905133926001600160a01b0316916385c858b1916004808301926020929190829003018186803b15801561256957600080fd5b505afa15801561257d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a191906147c6565b6001600160a01b03161460405180604001604052806002815260200161323760f01b81525090611b515760405162461bcd60e51b815260040161055b9190615120565b600381015460009064ffffffffff600160801b90910481169042168114156126225750506001810154600160801b90046001600160801b03166106eb565b60018301546002840154600091612659916001600160801b03600160801b9283900481169261265392041685613b65565b90613b72565b949350505050565b60058101546040516370a0823160e01b815260009182916001600160a01b03909116906370a0823190612698908790600401614df8565b60206040518083038186803b1580156126b057600080fd5b505afa1580156126c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e89190614be9565b60068401546040516370a0823160e01b81526001600160a01b03909116906370a082319061271a908890600401614df8565b60206040518083038186803b15801561273257600080fd5b505afa158015612746573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061276a9190614be9565b915091505b9250929050565b60068101546040805163b1bf962d60e01b815290516000926001600160a01b03169163b1bf962d916004808301926020929190829003018186803b1580156127bd57600080fd5b505afa1580156127d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127f59190614be9565b60018301546003840154919250600160801b8082046001600160801b03908116939216910464ffffffffff166000806128318787868887613c05565b91509150612297878787858588613d62565b61284b6145c2565b60058601546001600160a01b031680825260408051637b98f4df60e11b8152815163f731e9be92600480840193919291829003018186803b15801561288f57600080fd5b505afa1580156128a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128c79190614ca8565b60c083015260408083019190915260018701546006880154825163b1bf962d60e01b8152925161296c93600160801b9093046001600160801b0316926001600160a01b039092169163b1bf962d916004808301926020929190829003018186803b15801561293457600080fd5b505afa158015612948573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126539190614be9565b60e08201526040516370a0823160e01b81526001600160a01b038616906370a082319061299d908790600401614df8565b60206040518083038186803b1580156129b557600080fd5b505afa1580156129c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ed9190614be9565b6020820181905260078701546001600160a01b031690639584df28908790612a1b9086906109609089612c35565b604085015160e086015160c0870151612a338d613f25565b6040518763ffffffff1660e01b8152600401612a5496959493929190614fd1565b60606040518083038186803b158015612a6c57600080fd5b505afa158015612a80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aa49190614ccb565b60a0840152608083015260608201819052604080518082019091526002815261353360f01b6020820152906001600160801b031015612af65760405162461bcd60e51b815260040161055b9190615120565b506080810151604080518082019091526002815261353560f01b6020820152906001600160801b031015612b3d5760405162461bcd60e51b815260040161055b9190615120565b5060a08101516040805180820190915260028152610d4d60f21b6020820152906001600160801b031015612b845760405162461bcd60e51b815260040161055b9190615120565b506060810151600287018054608084015160038a0180546001600160801b03199081166001600160801b038085169190911790925560a08701519316818616178116600160801b84831681029190911790945560018b01546040516001600160a01b038c16967f804c9b842b2748a22bb64b345453a3de7ca54a6ca45ce00d415894979e22897a96612c2596919594919380831693919004909116906154e7565b60405180910390a2505050505050565b600082820183811015610f075760405162461bcd60e51b815260040161055b90615153565b6000610f0783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613f30565b604080518082019091526002815261373760f01b602082015260808310612cd65760405162461bcd60e51b815260040161055b9190615120565b508160020281612ce7576000612cea565b60015b60ff16901b826002026001901b19846000015416178360000181905550505050565b612d64846323b872dd60e01b858585604051602401612d2d93929190614eb4565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613f5c565b50505050565b604080518082019091526002815261373760f01b602082015260808310612da45760405162461bcd60e51b815260040161055b9190615120565b508160020260010181612db8576000612dbb565b60015b60ff16901b826002026001016001901b19846000015416178360000181905550505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590612659575050151592915050565b603854604080518082019091526002815261363560f01b602082015260808210612e565760405162461bcd60e51b815260040161055b9190615120565b506001600160a01b038216600090815260356020526040812060070154600160a01b900460ff16151580612ebf57506000805260376020527fa0a618d80eda9243166be83cb7421d97e9dab6ddddd3c70ac7a6b4440256e8e7546001600160a01b038481169116145b905080610bd657506001600160a01b03919091166000818152603560209081526040808320600701805460ff60a01b1916600160a01b60ff8816021790558483526037909152902080546001600160a01b0319169091179055600101603855565b80516001600160a01b0390811660009081526035602090815260408083208186015185168452603683528184206034548351631f94a27560e31b81529351929691959491169263fca513a89260048083019392829003018186803b158015612f8757600080fd5b505afa158015612f9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fbf91906147c6565b90506000613060612fcf85614041565b600a0a6115cb8760600151856001600160a01b031663b3596f078a600001516040518263ffffffff1660e01b815260040161300a9190614df8565b60206040518083038186803b15801561302257600080fd5b505afa158015613036573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061305a9190614be9565b90613457565b905073__$1bcb88e8c11bbe24182074a8232234694a$__63721a92f986600001518688604001518960600151868b608001516109c460358c60376038548e6040518d63ffffffff1660e01b81526004016130c59c9b9a99989796959493929190614f01565b60006040518083038186803b1580156130dd57600080fd5b505af41580156130f1573d6000803e3d6000fd5b505050506130fe84612776565b60008060018760800151600281111561311357fe5b600281111561311e57fe5b14156131d3576003860154600587015460208901516040808b015160608c0151915163b3f1c93d60e01b81526001600160801b0390951696506001600160a01b039093169363b3f1c93d9361317a939290918890600401614ed8565b602060405180830381600087803b15801561319457600080fd5b505af11580156131a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131cc9190614bcd565b9050613282565b600686015460208801516040808a015160608b015160018b0154925163b3f1c93d60e01b81526001600160a01b039095169463b3f1c93d9461322d9490939291600160801b9091046001600160801b031690600401614e0c565b602060405180830381600087803b15801561324757600080fd5b505af115801561325b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061327f9190614bcd565b90505b80156132a45760078601546132a4908690600160a01b900460ff166001612c9c565b6132d387600001518860a0015160008a60e001516132c35760006132c9565b8a606001515b8a93929190612843565b8660e001511561336b578660a001516001600160a01b0316634efecaa5886020015189606001516040518363ffffffff1660e01b8152600401613317929190614e3d565b602060405180830381600087803b15801561333157600080fd5b505af1158015613345573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133699190614be9565b505b8660c0015161ffff1687604001516001600160a01b031688600001516001600160a01b03167fc6a898309e823ee50bac64e45ca8adba6690e99e7841c45d754e2a38e9019d9b8a602001518b606001518c60800151600160028111156133cd57fe5b8e6080015160028111156133dd57fe5b60028111156133e857fe5b146134075760028d0154600160801b90046001600160801b0316613409565b885b6040516124c29493929190614fab565b805182511460405180604001604052806002815260200161373360f01b81525090610bd65760405162461bcd60e51b815260040161055b9190615120565b60008261346657506000610711565b8282028284828161347357fe5b0414610f075760405162461bcd60e51b815260040161055b906151bf565b6000610f0783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061404b565b60006134f06134e184614082565b6134ea84614082565b906140d2565b905060006135066134ff61417d565b8390612c35565b60018601549091506135229082906001600160801b0316613b72565b604080518082019091526002815261353160f01b60208201529091506001600160801b038211156135665760405162461bcd60e51b815260040161055b9190615120565b5060019490940180546001600160801b0319166001600160801b0390951694909417909355505050565b60008060008060006135a0614610565b6135a98a61418d565b156135c7576000806000806000199550955095509550955050613a43565b600060e08201525b878160e0015110156139a25760e08101516135eb908b90614192565b6135f457613992565b60e0810151600090815260208a81526040808320546001600160a01b03166101e085018190528352908d9052902061362b816141e3565b506080860181905260c08601929092525060a0840191909152600a0a60208301526101e082015160405163b3596f0760e01b81526001600160a01b038a169163b3596f079161367d9190600401614df8565b60206040518083038186803b15801561369557600080fd5b505afa1580156136a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136cd9190614be9565b825260c0820151158015906136ed575060e08201516136ed908c9061420e565b1561380b578060040160009054906101000a90046001600160a01b03166001600160a01b03166370a082318e6040518263ffffffff1660e01b81526004016137359190614df8565b60206040518083038186803b15801561374d57600080fd5b505afa158015613761573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137859190614be9565b60408301819052602083015183516000926137a492916115cb91613457565b6101208401519091506137b79082612c35565b61012084015260a08301516137dd906137d1908390613457565b61016085015190612c35565b61016084015260c0830151613803906137f7908390613457565b61018085015190612c35565b610180840152505b60e082015161381b908c90614266565b15613990578060050160009054906101000a90046001600160a01b03166001600160a01b03166370a082318e6040518263ffffffff1660e01b81526004016138639190614df8565b60206040518083038186803b15801561387b57600080fd5b505afa15801561388f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138b39190614be9565b82606001818152505061395d8160060160009054906101000a90046001600160a01b03166001600160a01b03166370a082318f6040518263ffffffff1660e01b81526004016139029190614df8565b60206040518083038186803b15801561391a57600080fd5b505afa15801561392e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139529190614be9565b606084015190612c35565b60608301819052602083015183516139899261397d92916115cb91613457565b61014084015190612c35565b6101408301525b505b60e08101805160010190526135cf565b6000816101200151116139b65760006139cb565b6101208101516101608201516139cb91613491565b6101608201526101208101516139e25760006139f7565b6101208101516101808201516139f791613491565b6101808201819052610120820151610140830151613a14926142b7565b610100820181905261012082015161014083015161016084015161018090940151919850965091945090925090505b965096509650965096915050565b600080613a5e85846142db565b905083811015613a72576000915050610f07565b613a7c8185612c5a565b95945050505050565b600290565b303b1590565b600381015460009064ffffffffff600160801b9091048116904216811415613ac757505060018101546001600160801b03166106eb565b60018301546002840154600091612659916001600160801b039182169161265391168561434a565b604080516020810190915284548152600090613b119088908890878787613590565b945050505050670de0b6b3a7640000811015604051806040016040528060018152602001601b60f91b81525090613b5b5760405162461bcd60e51b815260040161055b9190615120565b5050505050505050565b6000610f07838342614388565b6000821580613b7f575081155b15613b8c57506000610711565b816b019d971e4fe8401e740000001981613ba257fe5b0483111560405180604001604052806002815260200161068760f31b81525090613bdf5760405162461bcd60e51b815260040161055b9190615120565b506b033b2e3c9fd0803ce80000006002815b048385020181613bfd57fe5b049392505050565b600285015460009081906001600160801b031685858215613d33576000613c2c848861434a565b9050613c38818a613b72565b604080518082019091526002815261353160f01b60208201529093506001600160801b03841115613c7c5760405162461bcd60e51b815260040161055b9190615120565b5060018b0180546001600160801b0319166001600160801b0385161790558915613d315760028b0154600090613cc290600160801b90046001600160801b031689613b65565b9050613cce818a613b72565b6040805180820190915260028152611a9960f11b60208201529093506001600160801b03841115613d125760405162461bcd60e51b815260040161055b9190615120565b505060018b0180546001600160801b03808516600160801b0291161790555b505b600399909901805464ffffffffff60801b1916600160801b4264ffffffffff1602179055989650505050505050565b613d6a6146aa565b613d7387613f25565b6101208201819052613d8557506113da565b8660050160009054906101000a90046001600160a01b03166001600160a01b031663797743386040518163ffffffff1660e01b815260040160806040518083038186803b158015613dd557600080fd5b505afa158015613de9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e0d9190614cf8565b64ffffffffff1661014085015260a084015282526020820152613e308686613b72565b6080820152613e3f8684613b72565b606082015260a0810151610140820151613e61919064ffffffffff8516614388565b60c082018190526020820151613e7691613b72565b60408201819052608082015182516060840151613e9b93926109609290918391612c35565b60e08201819052610120820151613eb291906142db565b61010082018190521561229757600480880154610100830151604051637df5bd3b60e01b81526001600160a01b0390921692637df5bd3b92613ef79291899101615472565b600060405180830381600087803b158015613f1157600080fd5b505af11580156105c3573d6000803e3d6000fd5b5460401c61ffff1690565b60008184841115613f545760405162461bcd60e51b815260040161055b9190615120565b505050900390565b613f6e826001600160a01b0316612de0565b613f8a5760405162461bcd60e51b815260040161055b90615298565b60006060836001600160a01b031683604051613fa69190614ddc565b6000604051808303816000865af19150503d8060008114613fe3576040519150601f19603f3d011682016040523d82523d6000602084013e613fe8565b606091505b50915091508161400a5760405162461bcd60e51b815260040161055b9061518a565b805115612d6457808060200190518101906140259190614bcd565b612d645760405162461bcd60e51b815260040161055b9061524e565b5460301c60ff1690565b6000818361406c5760405162461bcd60e51b815260040161055b9190615120565b50600083858161407857fe5b0495945050505050565b6000633b9aca0082810290839082041460405180604001604052806002815260200161068760f31b815250906140cb5760405162461bcd60e51b815260040161055b9190615120565b5092915050565b604080518082019091526002815261035360f41b60208201526000908261410c5760405162461bcd60e51b815260040161055b9190615120565b5060408051808201909152600280825261068760f31b60208301528304906b033b2e3c9fd0803ce800000082190485111561415a5760405162461bcd60e51b815260040161055b9190615120565b5082816b033b2e3c9fd0803ce80000008602018161417457fe5b04949350505050565b6b033b2e3c9fd0803ce800000090565b511590565b60006080821060405180604001604052806002815260200161373760f01b815250906141d15760405162461bcd60e51b815260040161055b9190615120565b50509051600360029092021c16151590565b5461ffff80821692601083901c821692602081901c831692603082901c60ff169260409290921c1690565b60006080821060405180604001604052806002815260200161373760f01b8152509061424d5760405162461bcd60e51b815260040161055b9190615120565b5050815160016002830281019190911c16151592915050565b60006080821060405180604001604052806002815260200161373760f01b815250906142a55760405162461bcd60e51b815260040161055b9190615120565b50509051600160029092021c16151590565b6000826142c75750600019610f07565b612659836142d586856142db565b9061445e565b60008215806142e8575081155b156142f557506000610711565b81611388198161430157fe5b0483111560405180604001604052806002815260200161068760f31b8152509061433e5760405162461bcd60e51b815260040161055b9190615120565b50612710600281613bf1565b60008061435e4264ffffffffff8516612c5a565b905061265961436b61417d565b6301e1338061437a8785613457565b8161438157fe5b0490612c35565b60008061439c8364ffffffffff8616612c5a565b9050806143b3576143ab61417d565b915050610f07565b60001981016000600283116143c95760006143ce565b600283035b90506301e13380870460006143e38280613b72565b905060006143f18284613b72565b9050600060026144058461305a8a8a613457565b8161440c57fe5b049050600060066144238461305a89818d8d613457565b8161442a57fe5b04905061444e8161444884816144408a8e613457565b61444861417d565b90612c35565b9c9b505050505050505050505050565b604080518082019091526002815261035360f41b6020820152600090826144985760405162461bcd60e51b815260040161055b9190615120565b5060408051808201909152600280825261068760f31b6020830152830490670de0b6b3a76400008219048511156144e25760405162461bcd60e51b815260040161055b9190615120565b508281670de0b6b3a76400008602018161417457fe5b60405180610180016040528061450c614563565b815260006020820181905260408201819052606082018190526080820181905260a0820181905260c0820181905260e082018190526101008201819052610120820181905261014082018190526101609091015290565b6040518060200160405280600081525090565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081019190915290565b60405180610100016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051806102400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160001515815260200160006001600160a01b031681526020016000151581526020016000151581525090565b60405180610160016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600064ffffffffff1681525090565b803561071181615574565b60008083601f840112614727578182fd5b50813567ffffffffffffffff81111561473e578182fd5b602083019150836020808302850101111561276f57600080fd5b60008083601f840112614769578182fd5b50813567ffffffffffffffff811115614780578182fd5b60208301915083602082850101111561276f57600080fd5b803561ffff8116811461071157600080fd5b6000602082840312156147bb578081fd5b8135610f0781615574565b6000602082840312156147d7578081fd5b8151610f0781615574565b600080604083850312156147f4578081fd5b82356147ff81615574565b9150602083013561480f81615574565b809150509250929050565b600080600080600060a08688031215614831578081fd5b853561483c81615574565b9450602086013561484c81615574565b9350604086013561485c81615574565b9250606086013561486c81615574565b9150608086013561487c81615574565b809150509295509295909350565b600080600080600060a086880312156148a1578081fd5b85356148ac81615574565b945060208601356148bc81615574565b935060408601356148cc81615574565b925060608601359150608086013561487c81615589565b60008060008060008060c087890312156148fb578081fd5b863561490681615574565b9550602087013561491681615574565b9450604087013561492681615574565b959894975094956060810135955060808101359460a0909101359350915050565b600080600080600080600080600080600060e08c8e031215614967578485fd5b6149718d8d61470b565b9a5067ffffffffffffffff8060208e0135111561498c578586fd5b61499c8e60208f01358f01614716565b909b50995060408d01358110156149b1578586fd5b6149c18e60408f01358f01614716565b909950975060608d01358110156149d6578586fd5b6149e68e60608f01358f01614716565b90975095506149f88e60808f0161470b565b94508060a08e01351115614a0a578384fd5b50614a1b8d60a08e01358e01614758565b9093509150614a2d8d60c08e01614798565b90509295989b509295989b9093969950565b60008060408385031215614a51578081fd5b8235614a5c81615574565b9150602083013561480f81615589565b60008060408385031215614a7e578182fd5b8235614a8981615574565b946020939093013593505050565b600080600060608486031215614aab578081fd5b8335614ab681615574565b9250602084013591506040840135614acd81615574565b809150509250925092565b60008060008060808587031215614aed578182fd5b8435614af881615574565b9350602085013592506040850135614b0f81615574565b9150614b1e8660608701614798565b905092959194509250565b60008060008060808587031215614b3e578182fd5b8435614b4981615574565b935060208501359250604085013591506060850135614b6781615574565b939692955090935050565b600080600080600060a08688031215614b89578283fd5b8535614b9481615574565b9450602086013593506040860135925061486c8760608801614798565b600060208284031215614bc2578081fd5b8135610f0781615589565b600060208284031215614bde578081fd5b8151610f0781615589565b600060208284031215614bfa578081fd5b5051919050565b60008060408385031215614c13578182fd5b82519150602083015167ffffffffffffffff80821115614c31578283fd5b818501915085601f830112614c44578283fd5b815181811115614c52578384fd5b604051601f8201601f191681016020018381118282101715614c72578586fd5b604052818152838201602001881015614c89578485fd5b614c9a82602083016020870161553e565b809450505050509250929050565b60008060408385031215614cba578182fd5b505080516020909101519092909150565b600080600060608486031215614cdf578081fd5b8351925060208401519150604084015190509250925092565b60008060008060808587031215614d0d578182fd5b845193506020850151925060408501519150606085015164ffffffffff81168114614b67578182fd5b6001600160a01b0316815260200190565b6001600160a01b03169052565b6000815180845260208085019450808401835b83811015614d8357815187529582019590820190600101614d67565b509495945050505050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b519052565b6001600160801b03169052565b64ffffffffff169052565b60ff169052565b60008251614dee81846020870161553e565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03948516815292909316602083015260408201526001600160801b03909116606082015260800190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0393909316835260208301919091526001600160801b0316604082015260600190565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252901515608082015260a00190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b039c8d168152602081019b909b52988b1660408b015260608a0197909752608089019590955260a088019390935260c087019190915260e08601526101008501526101208401526101408301529091166101608201526101800190565b6001600160a01b039889168152602081019790975260408701959095526060860193909352608085019190915260a084015260c083015290911660e08201526101000190565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b6001600160a01b03969096168652602086019490945260408501929092526060840152608083015260a082015260c00190565b600060a0820160a08352806150198b836154c4565b90508b9150825b8b81101561504c576020830161503f8361503a838761470b565b614d36565b9093509150600101615020565b5083810360208501528881526001600160fb1b0389111561506b578283fd5b602089029150818a602083013701602081810183815284830390910160408501526150968189614d54565b9150506150a66060840187614d47565b82810360808401526150b9818587614d8e565b9b9a5050505050505050505050565b6020808252825182820181905260009190848201906040850190845b818110156151095783516001600160a01b0316835292840192918401916001016150e4565b50909695505050505050565b901515815260200190565b600060208252825180602084015261513f81604085016020870161553e565b601f01601f19169190910160400192915050565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252601f908201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604082015260600190565b9051815260200190565b6000610180820190506152ed828451614db8565b60208301516152ff6020840182614dbd565b5060408301516153126040840182614dbd565b5060608301516153256060840182614dbd565b5060808301516153386080840182614dbd565b5060a083015161534b60a0840182614dbd565b5060c083015161535e60c0840182614dca565b5060e083015161537160e0840182614d47565b506101008084015161538582850182614d47565b50506101208084015161539a82850182614d47565b5050610140808401516153af82850182614d47565b5050610160808401516153c482850182614dd5565b505092915050565b9485526001600160a01b03938416602086015291831660408501528216606084015216608082015260a00190565b9788526001600160a01b03968716602089015294151560408801526060870193909352608086019190915260a085015260c08401521660e08201526101000190565b600060a0820190508682528560208301528460408301528360608301526154628361556a565b8260808301529695505050505050565b918252602082015260400190565b8681526020810186905260c081016154978661556a565b60408201959095526001600160a01b03939093166060840152608083019190915260a09091015292915050565b90815260200190565b928352602083019190915261ffff16604082015260600190565b948552602085019390935260408401919091526001600160801b03908116606084015216608082015260a00190565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b60005b83811015615559578181015183820152602001615541565b83811115612d645750506000910152565b60038110611b5157fe5b6001600160a01b0381168114611b5157600080fd5b8015158114611b5157600080fdfea2646970667358221220be2f0049de505f52d2b6e8acd7a5ecf24da742a15b5dc3b0184a3f1a97cf6b6b64736f6c634300060c0033"

// DeployLendingPool deploys a new Ethereum contract, binding an instance of LendingPool to it.
func DeployLendingPool(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *LendingPool, error) {
	parsed, err := abi.JSON(strings.NewReader(LendingPoolABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	validationLogicAddr, _, _, _ := DeployValidationLogic(auth, backend)
	LendingPoolBin = strings.Replace(LendingPoolBin, "__$1bcb88e8c11bbe24182074a8232234694a$__", validationLogicAddr.String()[2:], -1)

	reserveLogicAddr, _, _, _ := DeployReserveLogic(auth, backend)
	LendingPoolBin = strings.Replace(LendingPoolBin, "__$40f0de17db8d5bc5f7c18656d6c356a0c7$__", reserveLogicAddr.String()[2:], -1)

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(LendingPoolBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LendingPool{LendingPoolCaller: LendingPoolCaller{contract: contract}, LendingPoolTransactor: LendingPoolTransactor{contract: contract}, LendingPoolFilterer: LendingPoolFilterer{contract: contract}}, nil
}

// LendingPool is an auto generated Go binding around an Ethereum contract.
type LendingPool struct {
	LendingPoolCaller     // Read-only binding to the contract
	LendingPoolTransactor // Write-only binding to the contract
	LendingPoolFilterer   // Log filterer for contract events
}

// LendingPoolCaller is an auto generated read-only Go binding around an Ethereum contract.
type LendingPoolCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LendingPoolTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LendingPoolTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LendingPoolFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LendingPoolFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LendingPoolSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LendingPoolSession struct {
	Contract     *LendingPool      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// LendingPoolCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LendingPoolCallerSession struct {
	Contract *LendingPoolCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// LendingPoolTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LendingPoolTransactorSession struct {
	Contract     *LendingPoolTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// LendingPoolRaw is an auto generated low-level Go binding around an Ethereum contract.
type LendingPoolRaw struct {
	Contract *LendingPool // Generic contract binding to access the raw methods on
}

// LendingPoolCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LendingPoolCallerRaw struct {
	Contract *LendingPoolCaller // Generic read-only contract binding to access the raw methods on
}

// LendingPoolTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LendingPoolTransactorRaw struct {
	Contract *LendingPoolTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLendingPool creates a new instance of LendingPool, bound to a specific deployed contract.
func NewLendingPool(address common.Address, backend bind.ContractBackend) (*LendingPool, error) {
	contract, err := bindLendingPool(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LendingPool{LendingPoolCaller: LendingPoolCaller{contract: contract}, LendingPoolTransactor: LendingPoolTransactor{contract: contract}, LendingPoolFilterer: LendingPoolFilterer{contract: contract}}, nil
}

// NewLendingPoolCaller creates a new read-only instance of LendingPool, bound to a specific deployed contract.
func NewLendingPoolCaller(address common.Address, caller bind.ContractCaller) (*LendingPoolCaller, error) {
	contract, err := bindLendingPool(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LendingPoolCaller{contract: contract}, nil
}

// NewLendingPoolTransactor creates a new write-only instance of LendingPool, bound to a specific deployed contract.
func NewLendingPoolTransactor(address common.Address, transactor bind.ContractTransactor) (*LendingPoolTransactor, error) {
	contract, err := bindLendingPool(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LendingPoolTransactor{contract: contract}, nil
}

// NewLendingPoolFilterer creates a new log filterer instance of LendingPool, bound to a specific deployed contract.
func NewLendingPoolFilterer(address common.Address, filterer bind.ContractFilterer) (*LendingPoolFilterer, error) {
	contract, err := bindLendingPool(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LendingPoolFilterer{contract: contract}, nil
}

// bindLendingPool binds a generic wrapper to an already deployed contract.
func bindLendingPool(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(LendingPoolABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LendingPool *LendingPoolRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LendingPool.Contract.LendingPoolCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LendingPool *LendingPoolRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LendingPool.Contract.LendingPoolTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LendingPool *LendingPoolRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LendingPool.Contract.LendingPoolTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LendingPool *LendingPoolCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LendingPool.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LendingPool *LendingPoolTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LendingPool.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LendingPool *LendingPoolTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LendingPool.Contract.contract.Transact(opts, method, params...)
}

// FLASHLOANPREMIUMTOTAL is a free data retrieval call binding the contract method 0x074b2e43.
//
// Solidity: function FLASHLOAN_PREMIUM_TOTAL() view returns(uint256)
func (_LendingPool *LendingPoolCaller) FLASHLOANPREMIUMTOTAL(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LendingPool.contract.Call(opts, &out, "FLASHLOAN_PREMIUM_TOTAL")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// FLASHLOANPREMIUMTOTAL is a free data retrieval call binding the contract method 0x074b2e43.
//
// Solidity: function FLASHLOAN_PREMIUM_TOTAL() view returns(uint256)
func (_LendingPool *LendingPoolSession) FLASHLOANPREMIUMTOTAL() (*big.Int, error) {
	return _LendingPool.Contract.FLASHLOANPREMIUMTOTAL(&_LendingPool.CallOpts)
}

// FLASHLOANPREMIUMTOTAL is a free data retrieval call binding the contract method 0x074b2e43.
//
// Solidity: function FLASHLOAN_PREMIUM_TOTAL() view returns(uint256)
func (_LendingPool *LendingPoolCallerSession) FLASHLOANPREMIUMTOTAL() (*big.Int, error) {
	return _LendingPool.Contract.FLASHLOANPREMIUMTOTAL(&_LendingPool.CallOpts)
}

// LENDINGPOOLREVISION is a free data retrieval call binding the contract method 0x8afaff02.
//
// Solidity: function LENDINGPOOL_REVISION() view returns(uint256)
func (_LendingPool *LendingPoolCaller) LENDINGPOOLREVISION(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LendingPool.contract.Call(opts, &out, "LENDINGPOOL_REVISION")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LENDINGPOOLREVISION is a free data retrieval call binding the contract method 0x8afaff02.
//
// Solidity: function LENDINGPOOL_REVISION() view returns(uint256)
func (_LendingPool *LendingPoolSession) LENDINGPOOLREVISION() (*big.Int, error) {
	return _LendingPool.Contract.LENDINGPOOLREVISION(&_LendingPool.CallOpts)
}

// LENDINGPOOLREVISION is a free data retrieval call binding the contract method 0x8afaff02.
//
// Solidity: function LENDINGPOOL_REVISION() view returns(uint256)
func (_LendingPool *LendingPoolCallerSession) LENDINGPOOLREVISION() (*big.Int, error) {
	return _LendingPool.Contract.LENDINGPOOLREVISION(&_LendingPool.CallOpts)
}

// MAXNUMBERRESERVES is a free data retrieval call binding the contract method 0xf8119d51.
//
// Solidity: function MAX_NUMBER_RESERVES() view returns(uint256)
func (_LendingPool *LendingPoolCaller) MAXNUMBERRESERVES(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LendingPool.contract.Call(opts, &out, "MAX_NUMBER_RESERVES")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXNUMBERRESERVES is a free data retrieval call binding the contract method 0xf8119d51.
//
// Solidity: function MAX_NUMBER_RESERVES() view returns(uint256)
func (_LendingPool *LendingPoolSession) MAXNUMBERRESERVES() (*big.Int, error) {
	return _LendingPool.Contract.MAXNUMBERRESERVES(&_LendingPool.CallOpts)
}

// MAXNUMBERRESERVES is a free data retrieval call binding the contract method 0xf8119d51.
//
// Solidity: function MAX_NUMBER_RESERVES() view returns(uint256)
func (_LendingPool *LendingPoolCallerSession) MAXNUMBERRESERVES() (*big.Int, error) {
	return _LendingPool.Contract.MAXNUMBERRESERVES(&_LendingPool.CallOpts)
}

// MAXSTABLERATEBORROWSIZEPERCENT is a free data retrieval call binding the contract method 0xe82fec2f.
//
// Solidity: function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() view returns(uint256)
func (_LendingPool *LendingPoolCaller) MAXSTABLERATEBORROWSIZEPERCENT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LendingPool.contract.Call(opts, &out, "MAX_STABLE_RATE_BORROW_SIZE_PERCENT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXSTABLERATEBORROWSIZEPERCENT is a free data retrieval call binding the contract method 0xe82fec2f.
//
// Solidity: function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() view returns(uint256)
func (_LendingPool *LendingPoolSession) MAXSTABLERATEBORROWSIZEPERCENT() (*big.Int, error) {
	return _LendingPool.Contract.MAXSTABLERATEBORROWSIZEPERCENT(&_LendingPool.CallOpts)
}

// MAXSTABLERATEBORROWSIZEPERCENT is a free data retrieval call binding the contract method 0xe82fec2f.
//
// Solidity: function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() view returns(uint256)
func (_LendingPool *LendingPoolCallerSession) MAXSTABLERATEBORROWSIZEPERCENT() (*big.Int, error) {
	return _LendingPool.Contract.MAXSTABLERATEBORROWSIZEPERCENT(&_LendingPool.CallOpts)
}

// GetAddressesProvider is a free data retrieval call binding the contract method 0xfe65acfe.
//
// Solidity: function getAddressesProvider() view returns(address)
func (_LendingPool *LendingPoolCaller) GetAddressesProvider(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LendingPool.contract.Call(opts, &out, "getAddressesProvider")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAddressesProvider is a free data retrieval call binding the contract method 0xfe65acfe.
//
// Solidity: function getAddressesProvider() view returns(address)
func (_LendingPool *LendingPoolSession) GetAddressesProvider() (common.Address, error) {
	return _LendingPool.Contract.GetAddressesProvider(&_LendingPool.CallOpts)
}

// GetAddressesProvider is a free data retrieval call binding the contract method 0xfe65acfe.
//
// Solidity: function getAddressesProvider() view returns(address)
func (_LendingPool *LendingPoolCallerSession) GetAddressesProvider() (common.Address, error) {
	return _LendingPool.Contract.GetAddressesProvider(&_LendingPool.CallOpts)
}

// GetConfiguration is a free data retrieval call binding the contract method 0xc44b11f7.
//
// Solidity: function getConfiguration(address asset) view returns((uint256))
func (_LendingPool *LendingPoolCaller) GetConfiguration(opts *bind.CallOpts, asset common.Address) (DataTypesReserveConfigurationMap, error) {
	var out []interface{}
	err := _LendingPool.contract.Call(opts, &out, "getConfiguration", asset)

	if err != nil {
		return *new(DataTypesReserveConfigurationMap), err
	}

	out0 := *abi.ConvertType(out[0], new(DataTypesReserveConfigurationMap)).(*DataTypesReserveConfigurationMap)

	return out0, err

}

// GetConfiguration is a free data retrieval call binding the contract method 0xc44b11f7.
//
// Solidity: function getConfiguration(address asset) view returns((uint256))
func (_LendingPool *LendingPoolSession) GetConfiguration(asset common.Address) (DataTypesReserveConfigurationMap, error) {
	return _LendingPool.Contract.GetConfiguration(&_LendingPool.CallOpts, asset)
}

// GetConfiguration is a free data retrieval call binding the contract method 0xc44b11f7.
//
// Solidity: function getConfiguration(address asset) view returns((uint256))
func (_LendingPool *LendingPoolCallerSession) GetConfiguration(asset common.Address) (DataTypesReserveConfigurationMap, error) {
	return _LendingPool.Contract.GetConfiguration(&_LendingPool.CallOpts, asset)
}

// GetReserveData is a free data retrieval call binding the contract method 0x35ea6a75.
//
// Solidity: function getReserveData(address asset) view returns(((uint256),uint128,uint128,uint128,uint128,uint128,uint40,address,address,address,address,uint8))
func (_LendingPool *LendingPoolCaller) GetReserveData(opts *bind.CallOpts, asset common.Address) (DataTypesReserveData, error) {
	var out []interface{}
	err := _LendingPool.contract.Call(opts, &out, "getReserveData", asset)

	if err != nil {
		return *new(DataTypesReserveData), err
	}

	out0 := *abi.ConvertType(out[0], new(DataTypesReserveData)).(*DataTypesReserveData)

	return out0, err

}

// GetReserveData is a free data retrieval call binding the contract method 0x35ea6a75.
//
// Solidity: function getReserveData(address asset) view returns(((uint256),uint128,uint128,uint128,uint128,uint128,uint40,address,address,address,address,uint8))
func (_LendingPool *LendingPoolSession) GetReserveData(asset common.Address) (DataTypesReserveData, error) {
	return _LendingPool.Contract.GetReserveData(&_LendingPool.CallOpts, asset)
}

// GetReserveData is a free data retrieval call binding the contract method 0x35ea6a75.
//
// Solidity: function getReserveData(address asset) view returns(((uint256),uint128,uint128,uint128,uint128,uint128,uint40,address,address,address,address,uint8))
func (_LendingPool *LendingPoolCallerSession) GetReserveData(asset common.Address) (DataTypesReserveData, error) {
	return _LendingPool.Contract.GetReserveData(&_LendingPool.CallOpts, asset)
}

// GetReserveNormalizedIncome is a free data retrieval call binding the contract method 0xd15e0053.
//
// Solidity: function getReserveNormalizedIncome(address asset) view returns(uint256)
func (_LendingPool *LendingPoolCaller) GetReserveNormalizedIncome(opts *bind.CallOpts, asset common.Address) (*big.Int, error) {
	var out []interface{}
	err := _LendingPool.contract.Call(opts, &out, "getReserveNormalizedIncome", asset)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetReserveNormalizedIncome is a free data retrieval call binding the contract method 0xd15e0053.
//
// Solidity: function getReserveNormalizedIncome(address asset) view returns(uint256)
func (_LendingPool *LendingPoolSession) GetReserveNormalizedIncome(asset common.Address) (*big.Int, error) {
	return _LendingPool.Contract.GetReserveNormalizedIncome(&_LendingPool.CallOpts, asset)
}

// GetReserveNormalizedIncome is a free data retrieval call binding the contract method 0xd15e0053.
//
// Solidity: function getReserveNormalizedIncome(address asset) view returns(uint256)
func (_LendingPool *LendingPoolCallerSession) GetReserveNormalizedIncome(asset common.Address) (*big.Int, error) {
	return _LendingPool.Contract.GetReserveNormalizedIncome(&_LendingPool.CallOpts, asset)
}

// GetReserveNormalizedVariableDebt is a free data retrieval call binding the contract method 0x386497fd.
//
// Solidity: function getReserveNormalizedVariableDebt(address asset) view returns(uint256)
func (_LendingPool *LendingPoolCaller) GetReserveNormalizedVariableDebt(opts *bind.CallOpts, asset common.Address) (*big.Int, error) {
	var out []interface{}
	err := _LendingPool.contract.Call(opts, &out, "getReserveNormalizedVariableDebt", asset)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetReserveNormalizedVariableDebt is a free data retrieval call binding the contract method 0x386497fd.
//
// Solidity: function getReserveNormalizedVariableDebt(address asset) view returns(uint256)
func (_LendingPool *LendingPoolSession) GetReserveNormalizedVariableDebt(asset common.Address) (*big.Int, error) {
	return _LendingPool.Contract.GetReserveNormalizedVariableDebt(&_LendingPool.CallOpts, asset)
}

// GetReserveNormalizedVariableDebt is a free data retrieval call binding the contract method 0x386497fd.
//
// Solidity: function getReserveNormalizedVariableDebt(address asset) view returns(uint256)
func (_LendingPool *LendingPoolCallerSession) GetReserveNormalizedVariableDebt(asset common.Address) (*big.Int, error) {
	return _LendingPool.Contract.GetReserveNormalizedVariableDebt(&_LendingPool.CallOpts, asset)
}

// GetReservesList is a free data retrieval call binding the contract method 0xd1946dbc.
//
// Solidity: function getReservesList() view returns(address[])
func (_LendingPool *LendingPoolCaller) GetReservesList(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _LendingPool.contract.Call(opts, &out, "getReservesList")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetReservesList is a free data retrieval call binding the contract method 0xd1946dbc.
//
// Solidity: function getReservesList() view returns(address[])
func (_LendingPool *LendingPoolSession) GetReservesList() ([]common.Address, error) {
	return _LendingPool.Contract.GetReservesList(&_LendingPool.CallOpts)
}

// GetReservesList is a free data retrieval call binding the contract method 0xd1946dbc.
//
// Solidity: function getReservesList() view returns(address[])
func (_LendingPool *LendingPoolCallerSession) GetReservesList() ([]common.Address, error) {
	return _LendingPool.Contract.GetReservesList(&_LendingPool.CallOpts)
}

// GetUserAccountData is a free data retrieval call binding the contract method 0xbf92857c.
//
// Solidity: function getUserAccountData(address user) view returns(uint256 totalCollateralETH, uint256 totalDebtETH, uint256 availableBorrowsETH, uint256 currentLiquidationThreshold, uint256 ltv, uint256 healthFactor)
func (_LendingPool *LendingPoolCaller) GetUserAccountData(opts *bind.CallOpts, user common.Address) (struct {
	TotalCollateralETH          *big.Int
	TotalDebtETH                *big.Int
	AvailableBorrowsETH         *big.Int
	CurrentLiquidationThreshold *big.Int
	Ltv                         *big.Int
	HealthFactor                *big.Int
}, error) {
	var out []interface{}
	err := _LendingPool.contract.Call(opts, &out, "getUserAccountData", user)

	outstruct := new(struct {
		TotalCollateralETH          *big.Int
		TotalDebtETH                *big.Int
		AvailableBorrowsETH         *big.Int
		CurrentLiquidationThreshold *big.Int
		Ltv                         *big.Int
		HealthFactor                *big.Int
	})

	outstruct.TotalCollateralETH = out[0].(*big.Int)
	outstruct.TotalDebtETH = out[1].(*big.Int)
	outstruct.AvailableBorrowsETH = out[2].(*big.Int)
	outstruct.CurrentLiquidationThreshold = out[3].(*big.Int)
	outstruct.Ltv = out[4].(*big.Int)
	outstruct.HealthFactor = out[5].(*big.Int)

	return *outstruct, err

}

// GetUserAccountData is a free data retrieval call binding the contract method 0xbf92857c.
//
// Solidity: function getUserAccountData(address user) view returns(uint256 totalCollateralETH, uint256 totalDebtETH, uint256 availableBorrowsETH, uint256 currentLiquidationThreshold, uint256 ltv, uint256 healthFactor)
func (_LendingPool *LendingPoolSession) GetUserAccountData(user common.Address) (struct {
	TotalCollateralETH          *big.Int
	TotalDebtETH                *big.Int
	AvailableBorrowsETH         *big.Int
	CurrentLiquidationThreshold *big.Int
	Ltv                         *big.Int
	HealthFactor                *big.Int
}, error) {
	return _LendingPool.Contract.GetUserAccountData(&_LendingPool.CallOpts, user)
}

// GetUserAccountData is a free data retrieval call binding the contract method 0xbf92857c.
//
// Solidity: function getUserAccountData(address user) view returns(uint256 totalCollateralETH, uint256 totalDebtETH, uint256 availableBorrowsETH, uint256 currentLiquidationThreshold, uint256 ltv, uint256 healthFactor)
func (_LendingPool *LendingPoolCallerSession) GetUserAccountData(user common.Address) (struct {
	TotalCollateralETH          *big.Int
	TotalDebtETH                *big.Int
	AvailableBorrowsETH         *big.Int
	CurrentLiquidationThreshold *big.Int
	Ltv                         *big.Int
	HealthFactor                *big.Int
}, error) {
	return _LendingPool.Contract.GetUserAccountData(&_LendingPool.CallOpts, user)
}

// GetUserConfiguration is a free data retrieval call binding the contract method 0x4417a583.
//
// Solidity: function getUserConfiguration(address user) view returns((uint256))
func (_LendingPool *LendingPoolCaller) GetUserConfiguration(opts *bind.CallOpts, user common.Address) (DataTypesUserConfigurationMap, error) {
	var out []interface{}
	err := _LendingPool.contract.Call(opts, &out, "getUserConfiguration", user)

	if err != nil {
		return *new(DataTypesUserConfigurationMap), err
	}

	out0 := *abi.ConvertType(out[0], new(DataTypesUserConfigurationMap)).(*DataTypesUserConfigurationMap)

	return out0, err

}

// GetUserConfiguration is a free data retrieval call binding the contract method 0x4417a583.
//
// Solidity: function getUserConfiguration(address user) view returns((uint256))
func (_LendingPool *LendingPoolSession) GetUserConfiguration(user common.Address) (DataTypesUserConfigurationMap, error) {
	return _LendingPool.Contract.GetUserConfiguration(&_LendingPool.CallOpts, user)
}

// GetUserConfiguration is a free data retrieval call binding the contract method 0x4417a583.
//
// Solidity: function getUserConfiguration(address user) view returns((uint256))
func (_LendingPool *LendingPoolCallerSession) GetUserConfiguration(user common.Address) (DataTypesUserConfigurationMap, error) {
	return _LendingPool.Contract.GetUserConfiguration(&_LendingPool.CallOpts, user)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_LendingPool *LendingPoolCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _LendingPool.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_LendingPool *LendingPoolSession) Paused() (bool, error) {
	return _LendingPool.Contract.Paused(&_LendingPool.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_LendingPool *LendingPoolCallerSession) Paused() (bool, error) {
	return _LendingPool.Contract.Paused(&_LendingPool.CallOpts)
}

// Borrow is a paid mutator transaction binding the contract method 0xa415bcad.
//
// Solidity: function borrow(address asset, uint256 amount, uint256 interestRateMode, uint16 referralCode, address onBehalfOf) returns()
func (_LendingPool *LendingPoolTransactor) Borrow(opts *bind.TransactOpts, asset common.Address, amount *big.Int, interestRateMode *big.Int, referralCode uint16, onBehalfOf common.Address) (*types.Transaction, error) {
	return _LendingPool.contract.Transact(opts, "borrow", asset, amount, interestRateMode, referralCode, onBehalfOf)
}

// Borrow is a paid mutator transaction binding the contract method 0xa415bcad.
//
// Solidity: function borrow(address asset, uint256 amount, uint256 interestRateMode, uint16 referralCode, address onBehalfOf) returns()
func (_LendingPool *LendingPoolSession) Borrow(asset common.Address, amount *big.Int, interestRateMode *big.Int, referralCode uint16, onBehalfOf common.Address) (*types.Transaction, error) {
	return _LendingPool.Contract.Borrow(&_LendingPool.TransactOpts, asset, amount, interestRateMode, referralCode, onBehalfOf)
}

// Borrow is a paid mutator transaction binding the contract method 0xa415bcad.
//
// Solidity: function borrow(address asset, uint256 amount, uint256 interestRateMode, uint16 referralCode, address onBehalfOf) returns()
func (_LendingPool *LendingPoolTransactorSession) Borrow(asset common.Address, amount *big.Int, interestRateMode *big.Int, referralCode uint16, onBehalfOf common.Address) (*types.Transaction, error) {
	return _LendingPool.Contract.Borrow(&_LendingPool.TransactOpts, asset, amount, interestRateMode, referralCode, onBehalfOf)
}

// Deposit is a paid mutator transaction binding the contract method 0xe8eda9df.
//
// Solidity: function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) returns()
func (_LendingPool *LendingPoolTransactor) Deposit(opts *bind.TransactOpts, asset common.Address, amount *big.Int, onBehalfOf common.Address, referralCode uint16) (*types.Transaction, error) {
	return _LendingPool.contract.Transact(opts, "deposit", asset, amount, onBehalfOf, referralCode)
}

// Deposit is a paid mutator transaction binding the contract method 0xe8eda9df.
//
// Solidity: function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) returns()
func (_LendingPool *LendingPoolSession) Deposit(asset common.Address, amount *big.Int, onBehalfOf common.Address, referralCode uint16) (*types.Transaction, error) {
	return _LendingPool.Contract.Deposit(&_LendingPool.TransactOpts, asset, amount, onBehalfOf, referralCode)
}

// Deposit is a paid mutator transaction binding the contract method 0xe8eda9df.
//
// Solidity: function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) returns()
func (_LendingPool *LendingPoolTransactorSession) Deposit(asset common.Address, amount *big.Int, onBehalfOf common.Address, referralCode uint16) (*types.Transaction, error) {
	return _LendingPool.Contract.Deposit(&_LendingPool.TransactOpts, asset, amount, onBehalfOf, referralCode)
}

// FinalizeTransfer is a paid mutator transaction binding the contract method 0xd5ed3933.
//
// Solidity: function finalizeTransfer(address asset, address from, address to, uint256 amount, uint256 balanceFromBefore, uint256 balanceToBefore) returns()
func (_LendingPool *LendingPoolTransactor) FinalizeTransfer(opts *bind.TransactOpts, asset common.Address, from common.Address, to common.Address, amount *big.Int, balanceFromBefore *big.Int, balanceToBefore *big.Int) (*types.Transaction, error) {
	return _LendingPool.contract.Transact(opts, "finalizeTransfer", asset, from, to, amount, balanceFromBefore, balanceToBefore)
}

// FinalizeTransfer is a paid mutator transaction binding the contract method 0xd5ed3933.
//
// Solidity: function finalizeTransfer(address asset, address from, address to, uint256 amount, uint256 balanceFromBefore, uint256 balanceToBefore) returns()
func (_LendingPool *LendingPoolSession) FinalizeTransfer(asset common.Address, from common.Address, to common.Address, amount *big.Int, balanceFromBefore *big.Int, balanceToBefore *big.Int) (*types.Transaction, error) {
	return _LendingPool.Contract.FinalizeTransfer(&_LendingPool.TransactOpts, asset, from, to, amount, balanceFromBefore, balanceToBefore)
}

// FinalizeTransfer is a paid mutator transaction binding the contract method 0xd5ed3933.
//
// Solidity: function finalizeTransfer(address asset, address from, address to, uint256 amount, uint256 balanceFromBefore, uint256 balanceToBefore) returns()
func (_LendingPool *LendingPoolTransactorSession) FinalizeTransfer(asset common.Address, from common.Address, to common.Address, amount *big.Int, balanceFromBefore *big.Int, balanceToBefore *big.Int) (*types.Transaction, error) {
	return _LendingPool.Contract.FinalizeTransfer(&_LendingPool.TransactOpts, asset, from, to, amount, balanceFromBefore, balanceToBefore)
}

// FlashLoan is a paid mutator transaction binding the contract method 0xab9c4b5d.
//
// Solidity: function flashLoan(address receiverAddress, address[] assets, uint256[] amounts, uint256[] modes, address onBehalfOf, bytes params, uint16 referralCode) returns()
func (_LendingPool *LendingPoolTransactor) FlashLoan(opts *bind.TransactOpts, receiverAddress common.Address, assets []common.Address, amounts []*big.Int, modes []*big.Int, onBehalfOf common.Address, params []byte, referralCode uint16) (*types.Transaction, error) {
	return _LendingPool.contract.Transact(opts, "flashLoan", receiverAddress, assets, amounts, modes, onBehalfOf, params, referralCode)
}

// FlashLoan is a paid mutator transaction binding the contract method 0xab9c4b5d.
//
// Solidity: function flashLoan(address receiverAddress, address[] assets, uint256[] amounts, uint256[] modes, address onBehalfOf, bytes params, uint16 referralCode) returns()
func (_LendingPool *LendingPoolSession) FlashLoan(receiverAddress common.Address, assets []common.Address, amounts []*big.Int, modes []*big.Int, onBehalfOf common.Address, params []byte, referralCode uint16) (*types.Transaction, error) {
	return _LendingPool.Contract.FlashLoan(&_LendingPool.TransactOpts, receiverAddress, assets, amounts, modes, onBehalfOf, params, referralCode)
}

// FlashLoan is a paid mutator transaction binding the contract method 0xab9c4b5d.
//
// Solidity: function flashLoan(address receiverAddress, address[] assets, uint256[] amounts, uint256[] modes, address onBehalfOf, bytes params, uint16 referralCode) returns()
func (_LendingPool *LendingPoolTransactorSession) FlashLoan(receiverAddress common.Address, assets []common.Address, amounts []*big.Int, modes []*big.Int, onBehalfOf common.Address, params []byte, referralCode uint16) (*types.Transaction, error) {
	return _LendingPool.Contract.FlashLoan(&_LendingPool.TransactOpts, receiverAddress, assets, amounts, modes, onBehalfOf, params, referralCode)
}

// InitReserve is a paid mutator transaction binding the contract method 0x7a708e92.
//
// Solidity: function initReserve(address asset, address aTokenAddress, address stableDebtAddress, address variableDebtAddress, address interestRateStrategyAddress) returns()
func (_LendingPool *LendingPoolTransactor) InitReserve(opts *bind.TransactOpts, asset common.Address, aTokenAddress common.Address, stableDebtAddress common.Address, variableDebtAddress common.Address, interestRateStrategyAddress common.Address) (*types.Transaction, error) {
	return _LendingPool.contract.Transact(opts, "initReserve", asset, aTokenAddress, stableDebtAddress, variableDebtAddress, interestRateStrategyAddress)
}

// InitReserve is a paid mutator transaction binding the contract method 0x7a708e92.
//
// Solidity: function initReserve(address asset, address aTokenAddress, address stableDebtAddress, address variableDebtAddress, address interestRateStrategyAddress) returns()
func (_LendingPool *LendingPoolSession) InitReserve(asset common.Address, aTokenAddress common.Address, stableDebtAddress common.Address, variableDebtAddress common.Address, interestRateStrategyAddress common.Address) (*types.Transaction, error) {
	return _LendingPool.Contract.InitReserve(&_LendingPool.TransactOpts, asset, aTokenAddress, stableDebtAddress, variableDebtAddress, interestRateStrategyAddress)
}

// InitReserve is a paid mutator transaction binding the contract method 0x7a708e92.
//
// Solidity: function initReserve(address asset, address aTokenAddress, address stableDebtAddress, address variableDebtAddress, address interestRateStrategyAddress) returns()
func (_LendingPool *LendingPoolTransactorSession) InitReserve(asset common.Address, aTokenAddress common.Address, stableDebtAddress common.Address, variableDebtAddress common.Address, interestRateStrategyAddress common.Address) (*types.Transaction, error) {
	return _LendingPool.Contract.InitReserve(&_LendingPool.TransactOpts, asset, aTokenAddress, stableDebtAddress, variableDebtAddress, interestRateStrategyAddress)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address provider) returns()
func (_LendingPool *LendingPoolTransactor) Initialize(opts *bind.TransactOpts, provider common.Address) (*types.Transaction, error) {
	return _LendingPool.contract.Transact(opts, "initialize", provider)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address provider) returns()
func (_LendingPool *LendingPoolSession) Initialize(provider common.Address) (*types.Transaction, error) {
	return _LendingPool.Contract.Initialize(&_LendingPool.TransactOpts, provider)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address provider) returns()
func (_LendingPool *LendingPoolTransactorSession) Initialize(provider common.Address) (*types.Transaction, error) {
	return _LendingPool.Contract.Initialize(&_LendingPool.TransactOpts, provider)
}

// LiquidationCall is a paid mutator transaction binding the contract method 0x00a718a9.
//
// Solidity: function liquidationCall(address collateralAsset, address debtAsset, address user, uint256 debtToCover, bool receiveAToken) returns()
func (_LendingPool *LendingPoolTransactor) LiquidationCall(opts *bind.TransactOpts, collateralAsset common.Address, debtAsset common.Address, user common.Address, debtToCover *big.Int, receiveAToken bool) (*types.Transaction, error) {
	return _LendingPool.contract.Transact(opts, "liquidationCall", collateralAsset, debtAsset, user, debtToCover, receiveAToken)
}

// LiquidationCall is a paid mutator transaction binding the contract method 0x00a718a9.
//
// Solidity: function liquidationCall(address collateralAsset, address debtAsset, address user, uint256 debtToCover, bool receiveAToken) returns()
func (_LendingPool *LendingPoolSession) LiquidationCall(collateralAsset common.Address, debtAsset common.Address, user common.Address, debtToCover *big.Int, receiveAToken bool) (*types.Transaction, error) {
	return _LendingPool.Contract.LiquidationCall(&_LendingPool.TransactOpts, collateralAsset, debtAsset, user, debtToCover, receiveAToken)
}

// LiquidationCall is a paid mutator transaction binding the contract method 0x00a718a9.
//
// Solidity: function liquidationCall(address collateralAsset, address debtAsset, address user, uint256 debtToCover, bool receiveAToken) returns()
func (_LendingPool *LendingPoolTransactorSession) LiquidationCall(collateralAsset common.Address, debtAsset common.Address, user common.Address, debtToCover *big.Int, receiveAToken bool) (*types.Transaction, error) {
	return _LendingPool.Contract.LiquidationCall(&_LendingPool.TransactOpts, collateralAsset, debtAsset, user, debtToCover, receiveAToken)
}

// RebalanceStableBorrowRate is a paid mutator transaction binding the contract method 0xcd112382.
//
// Solidity: function rebalanceStableBorrowRate(address asset, address user) returns()
func (_LendingPool *LendingPoolTransactor) RebalanceStableBorrowRate(opts *bind.TransactOpts, asset common.Address, user common.Address) (*types.Transaction, error) {
	return _LendingPool.contract.Transact(opts, "rebalanceStableBorrowRate", asset, user)
}

// RebalanceStableBorrowRate is a paid mutator transaction binding the contract method 0xcd112382.
//
// Solidity: function rebalanceStableBorrowRate(address asset, address user) returns()
func (_LendingPool *LendingPoolSession) RebalanceStableBorrowRate(asset common.Address, user common.Address) (*types.Transaction, error) {
	return _LendingPool.Contract.RebalanceStableBorrowRate(&_LendingPool.TransactOpts, asset, user)
}

// RebalanceStableBorrowRate is a paid mutator transaction binding the contract method 0xcd112382.
//
// Solidity: function rebalanceStableBorrowRate(address asset, address user) returns()
func (_LendingPool *LendingPoolTransactorSession) RebalanceStableBorrowRate(asset common.Address, user common.Address) (*types.Transaction, error) {
	return _LendingPool.Contract.RebalanceStableBorrowRate(&_LendingPool.TransactOpts, asset, user)
}

// Repay is a paid mutator transaction binding the contract method 0x573ade81.
//
// Solidity: function repay(address asset, uint256 amount, uint256 rateMode, address onBehalfOf) returns(uint256)
func (_LendingPool *LendingPoolTransactor) Repay(opts *bind.TransactOpts, asset common.Address, amount *big.Int, rateMode *big.Int, onBehalfOf common.Address) (*types.Transaction, error) {
	return _LendingPool.contract.Transact(opts, "repay", asset, amount, rateMode, onBehalfOf)
}

// Repay is a paid mutator transaction binding the contract method 0x573ade81.
//
// Solidity: function repay(address asset, uint256 amount, uint256 rateMode, address onBehalfOf) returns(uint256)
func (_LendingPool *LendingPoolSession) Repay(asset common.Address, amount *big.Int, rateMode *big.Int, onBehalfOf common.Address) (*types.Transaction, error) {
	return _LendingPool.Contract.Repay(&_LendingPool.TransactOpts, asset, amount, rateMode, onBehalfOf)
}

// Repay is a paid mutator transaction binding the contract method 0x573ade81.
//
// Solidity: function repay(address asset, uint256 amount, uint256 rateMode, address onBehalfOf) returns(uint256)
func (_LendingPool *LendingPoolTransactorSession) Repay(asset common.Address, amount *big.Int, rateMode *big.Int, onBehalfOf common.Address) (*types.Transaction, error) {
	return _LendingPool.Contract.Repay(&_LendingPool.TransactOpts, asset, amount, rateMode, onBehalfOf)
}

// SetConfiguration is a paid mutator transaction binding the contract method 0xb8d29276.
//
// Solidity: function setConfiguration(address asset, uint256 configuration) returns()
func (_LendingPool *LendingPoolTransactor) SetConfiguration(opts *bind.TransactOpts, asset common.Address, configuration *big.Int) (*types.Transaction, error) {
	return _LendingPool.contract.Transact(opts, "setConfiguration", asset, configuration)
}

// SetConfiguration is a paid mutator transaction binding the contract method 0xb8d29276.
//
// Solidity: function setConfiguration(address asset, uint256 configuration) returns()
func (_LendingPool *LendingPoolSession) SetConfiguration(asset common.Address, configuration *big.Int) (*types.Transaction, error) {
	return _LendingPool.Contract.SetConfiguration(&_LendingPool.TransactOpts, asset, configuration)
}

// SetConfiguration is a paid mutator transaction binding the contract method 0xb8d29276.
//
// Solidity: function setConfiguration(address asset, uint256 configuration) returns()
func (_LendingPool *LendingPoolTransactorSession) SetConfiguration(asset common.Address, configuration *big.Int) (*types.Transaction, error) {
	return _LendingPool.Contract.SetConfiguration(&_LendingPool.TransactOpts, asset, configuration)
}

// SetPause is a paid mutator transaction binding the contract method 0xbedb86fb.
//
// Solidity: function setPause(bool val) returns()
func (_LendingPool *LendingPoolTransactor) SetPause(opts *bind.TransactOpts, val bool) (*types.Transaction, error) {
	return _LendingPool.contract.Transact(opts, "setPause", val)
}

// SetPause is a paid mutator transaction binding the contract method 0xbedb86fb.
//
// Solidity: function setPause(bool val) returns()
func (_LendingPool *LendingPoolSession) SetPause(val bool) (*types.Transaction, error) {
	return _LendingPool.Contract.SetPause(&_LendingPool.TransactOpts, val)
}

// SetPause is a paid mutator transaction binding the contract method 0xbedb86fb.
//
// Solidity: function setPause(bool val) returns()
func (_LendingPool *LendingPoolTransactorSession) SetPause(val bool) (*types.Transaction, error) {
	return _LendingPool.Contract.SetPause(&_LendingPool.TransactOpts, val)
}

// SetReserveInterestRateStrategyAddress is a paid mutator transaction binding the contract method 0x1d2118f9.
//
// Solidity: function setReserveInterestRateStrategyAddress(address asset, address rateStrategyAddress) returns()
func (_LendingPool *LendingPoolTransactor) SetReserveInterestRateStrategyAddress(opts *bind.TransactOpts, asset common.Address, rateStrategyAddress common.Address) (*types.Transaction, error) {
	return _LendingPool.contract.Transact(opts, "setReserveInterestRateStrategyAddress", asset, rateStrategyAddress)
}

// SetReserveInterestRateStrategyAddress is a paid mutator transaction binding the contract method 0x1d2118f9.
//
// Solidity: function setReserveInterestRateStrategyAddress(address asset, address rateStrategyAddress) returns()
func (_LendingPool *LendingPoolSession) SetReserveInterestRateStrategyAddress(asset common.Address, rateStrategyAddress common.Address) (*types.Transaction, error) {
	return _LendingPool.Contract.SetReserveInterestRateStrategyAddress(&_LendingPool.TransactOpts, asset, rateStrategyAddress)
}

// SetReserveInterestRateStrategyAddress is a paid mutator transaction binding the contract method 0x1d2118f9.
//
// Solidity: function setReserveInterestRateStrategyAddress(address asset, address rateStrategyAddress) returns()
func (_LendingPool *LendingPoolTransactorSession) SetReserveInterestRateStrategyAddress(asset common.Address, rateStrategyAddress common.Address) (*types.Transaction, error) {
	return _LendingPool.Contract.SetReserveInterestRateStrategyAddress(&_LendingPool.TransactOpts, asset, rateStrategyAddress)
}

// SetUserUseReserveAsCollateral is a paid mutator transaction binding the contract method 0x5a3b74b9.
//
// Solidity: function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) returns()
func (_LendingPool *LendingPoolTransactor) SetUserUseReserveAsCollateral(opts *bind.TransactOpts, asset common.Address, useAsCollateral bool) (*types.Transaction, error) {
	return _LendingPool.contract.Transact(opts, "setUserUseReserveAsCollateral", asset, useAsCollateral)
}

// SetUserUseReserveAsCollateral is a paid mutator transaction binding the contract method 0x5a3b74b9.
//
// Solidity: function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) returns()
func (_LendingPool *LendingPoolSession) SetUserUseReserveAsCollateral(asset common.Address, useAsCollateral bool) (*types.Transaction, error) {
	return _LendingPool.Contract.SetUserUseReserveAsCollateral(&_LendingPool.TransactOpts, asset, useAsCollateral)
}

// SetUserUseReserveAsCollateral is a paid mutator transaction binding the contract method 0x5a3b74b9.
//
// Solidity: function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) returns()
func (_LendingPool *LendingPoolTransactorSession) SetUserUseReserveAsCollateral(asset common.Address, useAsCollateral bool) (*types.Transaction, error) {
	return _LendingPool.Contract.SetUserUseReserveAsCollateral(&_LendingPool.TransactOpts, asset, useAsCollateral)
}

// SwapBorrowRateMode is a paid mutator transaction binding the contract method 0x94ba89a2.
//
// Solidity: function swapBorrowRateMode(address asset, uint256 rateMode) returns()
func (_LendingPool *LendingPoolTransactor) SwapBorrowRateMode(opts *bind.TransactOpts, asset common.Address, rateMode *big.Int) (*types.Transaction, error) {
	return _LendingPool.contract.Transact(opts, "swapBorrowRateMode", asset, rateMode)
}

// SwapBorrowRateMode is a paid mutator transaction binding the contract method 0x94ba89a2.
//
// Solidity: function swapBorrowRateMode(address asset, uint256 rateMode) returns()
func (_LendingPool *LendingPoolSession) SwapBorrowRateMode(asset common.Address, rateMode *big.Int) (*types.Transaction, error) {
	return _LendingPool.Contract.SwapBorrowRateMode(&_LendingPool.TransactOpts, asset, rateMode)
}

// SwapBorrowRateMode is a paid mutator transaction binding the contract method 0x94ba89a2.
//
// Solidity: function swapBorrowRateMode(address asset, uint256 rateMode) returns()
func (_LendingPool *LendingPoolTransactorSession) SwapBorrowRateMode(asset common.Address, rateMode *big.Int) (*types.Transaction, error) {
	return _LendingPool.Contract.SwapBorrowRateMode(&_LendingPool.TransactOpts, asset, rateMode)
}

// Withdraw is a paid mutator transaction binding the contract method 0x69328dec.
//
// Solidity: function withdraw(address asset, uint256 amount, address to) returns(uint256)
func (_LendingPool *LendingPoolTransactor) Withdraw(opts *bind.TransactOpts, asset common.Address, amount *big.Int, to common.Address) (*types.Transaction, error) {
	return _LendingPool.contract.Transact(opts, "withdraw", asset, amount, to)
}

// Withdraw is a paid mutator transaction binding the contract method 0x69328dec.
//
// Solidity: function withdraw(address asset, uint256 amount, address to) returns(uint256)
func (_LendingPool *LendingPoolSession) Withdraw(asset common.Address, amount *big.Int, to common.Address) (*types.Transaction, error) {
	return _LendingPool.Contract.Withdraw(&_LendingPool.TransactOpts, asset, amount, to)
}

// Withdraw is a paid mutator transaction binding the contract method 0x69328dec.
//
// Solidity: function withdraw(address asset, uint256 amount, address to) returns(uint256)
func (_LendingPool *LendingPoolTransactorSession) Withdraw(asset common.Address, amount *big.Int, to common.Address) (*types.Transaction, error) {
	return _LendingPool.Contract.Withdraw(&_LendingPool.TransactOpts, asset, amount, to)
}

// LendingPoolBorrowIterator is returned from FilterBorrow and is used to iterate over the raw logs and unpacked data for Borrow events raised by the LendingPool contract.
type LendingPoolBorrowIterator struct {
	Event *LendingPoolBorrow // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolBorrowIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolBorrow)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolBorrow)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolBorrowIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolBorrowIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolBorrow represents a Borrow event raised by the LendingPool contract.
type LendingPoolBorrow struct {
	Reserve        common.Address
	User           common.Address
	OnBehalfOf     common.Address
	Amount         *big.Int
	BorrowRateMode *big.Int
	BorrowRate     *big.Int
	Referral       uint16
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterBorrow is a free log retrieval operation binding the contract event 0xc6a898309e823ee50bac64e45ca8adba6690e99e7841c45d754e2a38e9019d9b.
//
// Solidity: event Borrow(address indexed reserve, address user, address indexed onBehalfOf, uint256 amount, uint256 borrowRateMode, uint256 borrowRate, uint16 indexed referral)
func (_LendingPool *LendingPoolFilterer) FilterBorrow(opts *bind.FilterOpts, reserve []common.Address, onBehalfOf []common.Address, referral []uint16) (*LendingPoolBorrowIterator, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}

	var onBehalfOfRule []interface{}
	for _, onBehalfOfItem := range onBehalfOf {
		onBehalfOfRule = append(onBehalfOfRule, onBehalfOfItem)
	}

	var referralRule []interface{}
	for _, referralItem := range referral {
		referralRule = append(referralRule, referralItem)
	}

	logs, sub, err := _LendingPool.contract.FilterLogs(opts, "Borrow", reserveRule, onBehalfOfRule, referralRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolBorrowIterator{contract: _LendingPool.contract, event: "Borrow", logs: logs, sub: sub}, nil
}

// WatchBorrow is a free log subscription operation binding the contract event 0xc6a898309e823ee50bac64e45ca8adba6690e99e7841c45d754e2a38e9019d9b.
//
// Solidity: event Borrow(address indexed reserve, address user, address indexed onBehalfOf, uint256 amount, uint256 borrowRateMode, uint256 borrowRate, uint16 indexed referral)
func (_LendingPool *LendingPoolFilterer) WatchBorrow(opts *bind.WatchOpts, sink chan<- *LendingPoolBorrow, reserve []common.Address, onBehalfOf []common.Address, referral []uint16) (event.Subscription, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}

	var onBehalfOfRule []interface{}
	for _, onBehalfOfItem := range onBehalfOf {
		onBehalfOfRule = append(onBehalfOfRule, onBehalfOfItem)
	}

	var referralRule []interface{}
	for _, referralItem := range referral {
		referralRule = append(referralRule, referralItem)
	}

	logs, sub, err := _LendingPool.contract.WatchLogs(opts, "Borrow", reserveRule, onBehalfOfRule, referralRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolBorrow)
				if err := _LendingPool.contract.UnpackLog(event, "Borrow", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBorrow is a log parse operation binding the contract event 0xc6a898309e823ee50bac64e45ca8adba6690e99e7841c45d754e2a38e9019d9b.
//
// Solidity: event Borrow(address indexed reserve, address user, address indexed onBehalfOf, uint256 amount, uint256 borrowRateMode, uint256 borrowRate, uint16 indexed referral)
func (_LendingPool *LendingPoolFilterer) ParseBorrow(log types.Log) (*LendingPoolBorrow, error) {
	event := new(LendingPoolBorrow)
	if err := _LendingPool.contract.UnpackLog(event, "Borrow", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the LendingPool contract.
type LendingPoolDepositIterator struct {
	Event *LendingPoolDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolDeposit represents a Deposit event raised by the LendingPool contract.
type LendingPoolDeposit struct {
	Reserve    common.Address
	User       common.Address
	OnBehalfOf common.Address
	Amount     *big.Int
	Referral   uint16
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0xde6857219544bb5b7746f48ed30be6386fefc61b2f864cacf559893bf50fd951.
//
// Solidity: event Deposit(address indexed reserve, address user, address indexed onBehalfOf, uint256 amount, uint16 indexed referral)
func (_LendingPool *LendingPoolFilterer) FilterDeposit(opts *bind.FilterOpts, reserve []common.Address, onBehalfOf []common.Address, referral []uint16) (*LendingPoolDepositIterator, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}

	var onBehalfOfRule []interface{}
	for _, onBehalfOfItem := range onBehalfOf {
		onBehalfOfRule = append(onBehalfOfRule, onBehalfOfItem)
	}

	var referralRule []interface{}
	for _, referralItem := range referral {
		referralRule = append(referralRule, referralItem)
	}

	logs, sub, err := _LendingPool.contract.FilterLogs(opts, "Deposit", reserveRule, onBehalfOfRule, referralRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolDepositIterator{contract: _LendingPool.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0xde6857219544bb5b7746f48ed30be6386fefc61b2f864cacf559893bf50fd951.
//
// Solidity: event Deposit(address indexed reserve, address user, address indexed onBehalfOf, uint256 amount, uint16 indexed referral)
func (_LendingPool *LendingPoolFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *LendingPoolDeposit, reserve []common.Address, onBehalfOf []common.Address, referral []uint16) (event.Subscription, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}

	var onBehalfOfRule []interface{}
	for _, onBehalfOfItem := range onBehalfOf {
		onBehalfOfRule = append(onBehalfOfRule, onBehalfOfItem)
	}

	var referralRule []interface{}
	for _, referralItem := range referral {
		referralRule = append(referralRule, referralItem)
	}

	logs, sub, err := _LendingPool.contract.WatchLogs(opts, "Deposit", reserveRule, onBehalfOfRule, referralRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolDeposit)
				if err := _LendingPool.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0xde6857219544bb5b7746f48ed30be6386fefc61b2f864cacf559893bf50fd951.
//
// Solidity: event Deposit(address indexed reserve, address user, address indexed onBehalfOf, uint256 amount, uint16 indexed referral)
func (_LendingPool *LendingPoolFilterer) ParseDeposit(log types.Log) (*LendingPoolDeposit, error) {
	event := new(LendingPoolDeposit)
	if err := _LendingPool.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolFlashLoanIterator is returned from FilterFlashLoan and is used to iterate over the raw logs and unpacked data for FlashLoan events raised by the LendingPool contract.
type LendingPoolFlashLoanIterator struct {
	Event *LendingPoolFlashLoan // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolFlashLoanIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolFlashLoan)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolFlashLoan)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolFlashLoanIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolFlashLoanIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolFlashLoan represents a FlashLoan event raised by the LendingPool contract.
type LendingPoolFlashLoan struct {
	Target       common.Address
	Initiator    common.Address
	Asset        common.Address
	Amount       *big.Int
	Premium      *big.Int
	ReferralCode uint16
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterFlashLoan is a free log retrieval operation binding the contract event 0x631042c832b07452973831137f2d73e395028b44b250dedc5abb0ee766e168ac.
//
// Solidity: event FlashLoan(address indexed target, address indexed initiator, address indexed asset, uint256 amount, uint256 premium, uint16 referralCode)
func (_LendingPool *LendingPoolFilterer) FilterFlashLoan(opts *bind.FilterOpts, target []common.Address, initiator []common.Address, asset []common.Address) (*LendingPoolFlashLoanIterator, error) {

	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}
	var initiatorRule []interface{}
	for _, initiatorItem := range initiator {
		initiatorRule = append(initiatorRule, initiatorItem)
	}
	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}

	logs, sub, err := _LendingPool.contract.FilterLogs(opts, "FlashLoan", targetRule, initiatorRule, assetRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolFlashLoanIterator{contract: _LendingPool.contract, event: "FlashLoan", logs: logs, sub: sub}, nil
}

// WatchFlashLoan is a free log subscription operation binding the contract event 0x631042c832b07452973831137f2d73e395028b44b250dedc5abb0ee766e168ac.
//
// Solidity: event FlashLoan(address indexed target, address indexed initiator, address indexed asset, uint256 amount, uint256 premium, uint16 referralCode)
func (_LendingPool *LendingPoolFilterer) WatchFlashLoan(opts *bind.WatchOpts, sink chan<- *LendingPoolFlashLoan, target []common.Address, initiator []common.Address, asset []common.Address) (event.Subscription, error) {

	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}
	var initiatorRule []interface{}
	for _, initiatorItem := range initiator {
		initiatorRule = append(initiatorRule, initiatorItem)
	}
	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}

	logs, sub, err := _LendingPool.contract.WatchLogs(opts, "FlashLoan", targetRule, initiatorRule, assetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolFlashLoan)
				if err := _LendingPool.contract.UnpackLog(event, "FlashLoan", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFlashLoan is a log parse operation binding the contract event 0x631042c832b07452973831137f2d73e395028b44b250dedc5abb0ee766e168ac.
//
// Solidity: event FlashLoan(address indexed target, address indexed initiator, address indexed asset, uint256 amount, uint256 premium, uint16 referralCode)
func (_LendingPool *LendingPoolFilterer) ParseFlashLoan(log types.Log) (*LendingPoolFlashLoan, error) {
	event := new(LendingPoolFlashLoan)
	if err := _LendingPool.contract.UnpackLog(event, "FlashLoan", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolLiquidationCallIterator is returned from FilterLiquidationCall and is used to iterate over the raw logs and unpacked data for LiquidationCall events raised by the LendingPool contract.
type LendingPoolLiquidationCallIterator struct {
	Event *LendingPoolLiquidationCall // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolLiquidationCallIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolLiquidationCall)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolLiquidationCall)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolLiquidationCallIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolLiquidationCallIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolLiquidationCall represents a LiquidationCall event raised by the LendingPool contract.
type LendingPoolLiquidationCall struct {
	CollateralAsset            common.Address
	DebtAsset                  common.Address
	User                       common.Address
	DebtToCover                *big.Int
	LiquidatedCollateralAmount *big.Int
	Liquidator                 common.Address
	ReceiveAToken              bool
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterLiquidationCall is a free log retrieval operation binding the contract event 0xe413a321e8681d831f4dbccbca790d2952b56f977908e45be37335533e005286.
//
// Solidity: event LiquidationCall(address indexed collateralAsset, address indexed debtAsset, address indexed user, uint256 debtToCover, uint256 liquidatedCollateralAmount, address liquidator, bool receiveAToken)
func (_LendingPool *LendingPoolFilterer) FilterLiquidationCall(opts *bind.FilterOpts, collateralAsset []common.Address, debtAsset []common.Address, user []common.Address) (*LendingPoolLiquidationCallIterator, error) {

	var collateralAssetRule []interface{}
	for _, collateralAssetItem := range collateralAsset {
		collateralAssetRule = append(collateralAssetRule, collateralAssetItem)
	}
	var debtAssetRule []interface{}
	for _, debtAssetItem := range debtAsset {
		debtAssetRule = append(debtAssetRule, debtAssetItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _LendingPool.contract.FilterLogs(opts, "LiquidationCall", collateralAssetRule, debtAssetRule, userRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolLiquidationCallIterator{contract: _LendingPool.contract, event: "LiquidationCall", logs: logs, sub: sub}, nil
}

// WatchLiquidationCall is a free log subscription operation binding the contract event 0xe413a321e8681d831f4dbccbca790d2952b56f977908e45be37335533e005286.
//
// Solidity: event LiquidationCall(address indexed collateralAsset, address indexed debtAsset, address indexed user, uint256 debtToCover, uint256 liquidatedCollateralAmount, address liquidator, bool receiveAToken)
func (_LendingPool *LendingPoolFilterer) WatchLiquidationCall(opts *bind.WatchOpts, sink chan<- *LendingPoolLiquidationCall, collateralAsset []common.Address, debtAsset []common.Address, user []common.Address) (event.Subscription, error) {

	var collateralAssetRule []interface{}
	for _, collateralAssetItem := range collateralAsset {
		collateralAssetRule = append(collateralAssetRule, collateralAssetItem)
	}
	var debtAssetRule []interface{}
	for _, debtAssetItem := range debtAsset {
		debtAssetRule = append(debtAssetRule, debtAssetItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _LendingPool.contract.WatchLogs(opts, "LiquidationCall", collateralAssetRule, debtAssetRule, userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolLiquidationCall)
				if err := _LendingPool.contract.UnpackLog(event, "LiquidationCall", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLiquidationCall is a log parse operation binding the contract event 0xe413a321e8681d831f4dbccbca790d2952b56f977908e45be37335533e005286.
//
// Solidity: event LiquidationCall(address indexed collateralAsset, address indexed debtAsset, address indexed user, uint256 debtToCover, uint256 liquidatedCollateralAmount, address liquidator, bool receiveAToken)
func (_LendingPool *LendingPoolFilterer) ParseLiquidationCall(log types.Log) (*LendingPoolLiquidationCall, error) {
	event := new(LendingPoolLiquidationCall)
	if err := _LendingPool.contract.UnpackLog(event, "LiquidationCall", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the LendingPool contract.
type LendingPoolPausedIterator struct {
	Event *LendingPoolPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolPaused represents a Paused event raised by the LendingPool contract.
type LendingPoolPaused struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x9e87fac88ff661f02d44f95383c817fece4bce600a3dab7a54406878b965e752.
//
// Solidity: event Paused()
func (_LendingPool *LendingPoolFilterer) FilterPaused(opts *bind.FilterOpts) (*LendingPoolPausedIterator, error) {

	logs, sub, err := _LendingPool.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &LendingPoolPausedIterator{contract: _LendingPool.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x9e87fac88ff661f02d44f95383c817fece4bce600a3dab7a54406878b965e752.
//
// Solidity: event Paused()
func (_LendingPool *LendingPoolFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *LendingPoolPaused) (event.Subscription, error) {

	logs, sub, err := _LendingPool.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolPaused)
				if err := _LendingPool.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x9e87fac88ff661f02d44f95383c817fece4bce600a3dab7a54406878b965e752.
//
// Solidity: event Paused()
func (_LendingPool *LendingPoolFilterer) ParsePaused(log types.Log) (*LendingPoolPaused, error) {
	event := new(LendingPoolPaused)
	if err := _LendingPool.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolRebalanceStableBorrowRateIterator is returned from FilterRebalanceStableBorrowRate and is used to iterate over the raw logs and unpacked data for RebalanceStableBorrowRate events raised by the LendingPool contract.
type LendingPoolRebalanceStableBorrowRateIterator struct {
	Event *LendingPoolRebalanceStableBorrowRate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolRebalanceStableBorrowRateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolRebalanceStableBorrowRate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolRebalanceStableBorrowRate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolRebalanceStableBorrowRateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolRebalanceStableBorrowRateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolRebalanceStableBorrowRate represents a RebalanceStableBorrowRate event raised by the LendingPool contract.
type LendingPoolRebalanceStableBorrowRate struct {
	Reserve common.Address
	User    common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRebalanceStableBorrowRate is a free log retrieval operation binding the contract event 0x9f439ae0c81e41a04d3fdfe07aed54e6a179fb0db15be7702eb66fa8ef6f5300.
//
// Solidity: event RebalanceStableBorrowRate(address indexed reserve, address indexed user)
func (_LendingPool *LendingPoolFilterer) FilterRebalanceStableBorrowRate(opts *bind.FilterOpts, reserve []common.Address, user []common.Address) (*LendingPoolRebalanceStableBorrowRateIterator, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _LendingPool.contract.FilterLogs(opts, "RebalanceStableBorrowRate", reserveRule, userRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolRebalanceStableBorrowRateIterator{contract: _LendingPool.contract, event: "RebalanceStableBorrowRate", logs: logs, sub: sub}, nil
}

// WatchRebalanceStableBorrowRate is a free log subscription operation binding the contract event 0x9f439ae0c81e41a04d3fdfe07aed54e6a179fb0db15be7702eb66fa8ef6f5300.
//
// Solidity: event RebalanceStableBorrowRate(address indexed reserve, address indexed user)
func (_LendingPool *LendingPoolFilterer) WatchRebalanceStableBorrowRate(opts *bind.WatchOpts, sink chan<- *LendingPoolRebalanceStableBorrowRate, reserve []common.Address, user []common.Address) (event.Subscription, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _LendingPool.contract.WatchLogs(opts, "RebalanceStableBorrowRate", reserveRule, userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolRebalanceStableBorrowRate)
				if err := _LendingPool.contract.UnpackLog(event, "RebalanceStableBorrowRate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRebalanceStableBorrowRate is a log parse operation binding the contract event 0x9f439ae0c81e41a04d3fdfe07aed54e6a179fb0db15be7702eb66fa8ef6f5300.
//
// Solidity: event RebalanceStableBorrowRate(address indexed reserve, address indexed user)
func (_LendingPool *LendingPoolFilterer) ParseRebalanceStableBorrowRate(log types.Log) (*LendingPoolRebalanceStableBorrowRate, error) {
	event := new(LendingPoolRebalanceStableBorrowRate)
	if err := _LendingPool.contract.UnpackLog(event, "RebalanceStableBorrowRate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolRepayIterator is returned from FilterRepay and is used to iterate over the raw logs and unpacked data for Repay events raised by the LendingPool contract.
type LendingPoolRepayIterator struct {
	Event *LendingPoolRepay // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolRepayIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolRepay)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolRepay)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolRepayIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolRepayIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolRepay represents a Repay event raised by the LendingPool contract.
type LendingPoolRepay struct {
	Reserve common.Address
	User    common.Address
	Repayer common.Address
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRepay is a free log retrieval operation binding the contract event 0x4cdde6e09bb755c9a5589ebaec640bbfedff1362d4b255ebf8339782b9942faa.
//
// Solidity: event Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount)
func (_LendingPool *LendingPoolFilterer) FilterRepay(opts *bind.FilterOpts, reserve []common.Address, user []common.Address, repayer []common.Address) (*LendingPoolRepayIterator, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repayerRule []interface{}
	for _, repayerItem := range repayer {
		repayerRule = append(repayerRule, repayerItem)
	}

	logs, sub, err := _LendingPool.contract.FilterLogs(opts, "Repay", reserveRule, userRule, repayerRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolRepayIterator{contract: _LendingPool.contract, event: "Repay", logs: logs, sub: sub}, nil
}

// WatchRepay is a free log subscription operation binding the contract event 0x4cdde6e09bb755c9a5589ebaec640bbfedff1362d4b255ebf8339782b9942faa.
//
// Solidity: event Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount)
func (_LendingPool *LendingPoolFilterer) WatchRepay(opts *bind.WatchOpts, sink chan<- *LendingPoolRepay, reserve []common.Address, user []common.Address, repayer []common.Address) (event.Subscription, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repayerRule []interface{}
	for _, repayerItem := range repayer {
		repayerRule = append(repayerRule, repayerItem)
	}

	logs, sub, err := _LendingPool.contract.WatchLogs(opts, "Repay", reserveRule, userRule, repayerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolRepay)
				if err := _LendingPool.contract.UnpackLog(event, "Repay", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRepay is a log parse operation binding the contract event 0x4cdde6e09bb755c9a5589ebaec640bbfedff1362d4b255ebf8339782b9942faa.
//
// Solidity: event Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount)
func (_LendingPool *LendingPoolFilterer) ParseRepay(log types.Log) (*LendingPoolRepay, error) {
	event := new(LendingPoolRepay)
	if err := _LendingPool.contract.UnpackLog(event, "Repay", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolReserveDataUpdatedIterator is returned from FilterReserveDataUpdated and is used to iterate over the raw logs and unpacked data for ReserveDataUpdated events raised by the LendingPool contract.
type LendingPoolReserveDataUpdatedIterator struct {
	Event *LendingPoolReserveDataUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolReserveDataUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolReserveDataUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolReserveDataUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolReserveDataUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolReserveDataUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolReserveDataUpdated represents a ReserveDataUpdated event raised by the LendingPool contract.
type LendingPoolReserveDataUpdated struct {
	Reserve             common.Address
	LiquidityRate       *big.Int
	StableBorrowRate    *big.Int
	VariableBorrowRate  *big.Int
	LiquidityIndex      *big.Int
	VariableBorrowIndex *big.Int
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterReserveDataUpdated is a free log retrieval operation binding the contract event 0x804c9b842b2748a22bb64b345453a3de7ca54a6ca45ce00d415894979e22897a.
//
// Solidity: event ReserveDataUpdated(address indexed reserve, uint256 liquidityRate, uint256 stableBorrowRate, uint256 variableBorrowRate, uint256 liquidityIndex, uint256 variableBorrowIndex)
func (_LendingPool *LendingPoolFilterer) FilterReserveDataUpdated(opts *bind.FilterOpts, reserve []common.Address) (*LendingPoolReserveDataUpdatedIterator, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}

	logs, sub, err := _LendingPool.contract.FilterLogs(opts, "ReserveDataUpdated", reserveRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolReserveDataUpdatedIterator{contract: _LendingPool.contract, event: "ReserveDataUpdated", logs: logs, sub: sub}, nil
}

// WatchReserveDataUpdated is a free log subscription operation binding the contract event 0x804c9b842b2748a22bb64b345453a3de7ca54a6ca45ce00d415894979e22897a.
//
// Solidity: event ReserveDataUpdated(address indexed reserve, uint256 liquidityRate, uint256 stableBorrowRate, uint256 variableBorrowRate, uint256 liquidityIndex, uint256 variableBorrowIndex)
func (_LendingPool *LendingPoolFilterer) WatchReserveDataUpdated(opts *bind.WatchOpts, sink chan<- *LendingPoolReserveDataUpdated, reserve []common.Address) (event.Subscription, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}

	logs, sub, err := _LendingPool.contract.WatchLogs(opts, "ReserveDataUpdated", reserveRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolReserveDataUpdated)
				if err := _LendingPool.contract.UnpackLog(event, "ReserveDataUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReserveDataUpdated is a log parse operation binding the contract event 0x804c9b842b2748a22bb64b345453a3de7ca54a6ca45ce00d415894979e22897a.
//
// Solidity: event ReserveDataUpdated(address indexed reserve, uint256 liquidityRate, uint256 stableBorrowRate, uint256 variableBorrowRate, uint256 liquidityIndex, uint256 variableBorrowIndex)
func (_LendingPool *LendingPoolFilterer) ParseReserveDataUpdated(log types.Log) (*LendingPoolReserveDataUpdated, error) {
	event := new(LendingPoolReserveDataUpdated)
	if err := _LendingPool.contract.UnpackLog(event, "ReserveDataUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolReserveUsedAsCollateralDisabledIterator is returned from FilterReserveUsedAsCollateralDisabled and is used to iterate over the raw logs and unpacked data for ReserveUsedAsCollateralDisabled events raised by the LendingPool contract.
type LendingPoolReserveUsedAsCollateralDisabledIterator struct {
	Event *LendingPoolReserveUsedAsCollateralDisabled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolReserveUsedAsCollateralDisabledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolReserveUsedAsCollateralDisabled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolReserveUsedAsCollateralDisabled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolReserveUsedAsCollateralDisabledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolReserveUsedAsCollateralDisabledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolReserveUsedAsCollateralDisabled represents a ReserveUsedAsCollateralDisabled event raised by the LendingPool contract.
type LendingPoolReserveUsedAsCollateralDisabled struct {
	Reserve common.Address
	User    common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterReserveUsedAsCollateralDisabled is a free log retrieval operation binding the contract event 0x44c58d81365b66dd4b1a7f36c25aa97b8c71c361ee4937adc1a00000227db5dd.
//
// Solidity: event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user)
func (_LendingPool *LendingPoolFilterer) FilterReserveUsedAsCollateralDisabled(opts *bind.FilterOpts, reserve []common.Address, user []common.Address) (*LendingPoolReserveUsedAsCollateralDisabledIterator, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _LendingPool.contract.FilterLogs(opts, "ReserveUsedAsCollateralDisabled", reserveRule, userRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolReserveUsedAsCollateralDisabledIterator{contract: _LendingPool.contract, event: "ReserveUsedAsCollateralDisabled", logs: logs, sub: sub}, nil
}

// WatchReserveUsedAsCollateralDisabled is a free log subscription operation binding the contract event 0x44c58d81365b66dd4b1a7f36c25aa97b8c71c361ee4937adc1a00000227db5dd.
//
// Solidity: event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user)
func (_LendingPool *LendingPoolFilterer) WatchReserveUsedAsCollateralDisabled(opts *bind.WatchOpts, sink chan<- *LendingPoolReserveUsedAsCollateralDisabled, reserve []common.Address, user []common.Address) (event.Subscription, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _LendingPool.contract.WatchLogs(opts, "ReserveUsedAsCollateralDisabled", reserveRule, userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolReserveUsedAsCollateralDisabled)
				if err := _LendingPool.contract.UnpackLog(event, "ReserveUsedAsCollateralDisabled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReserveUsedAsCollateralDisabled is a log parse operation binding the contract event 0x44c58d81365b66dd4b1a7f36c25aa97b8c71c361ee4937adc1a00000227db5dd.
//
// Solidity: event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user)
func (_LendingPool *LendingPoolFilterer) ParseReserveUsedAsCollateralDisabled(log types.Log) (*LendingPoolReserveUsedAsCollateralDisabled, error) {
	event := new(LendingPoolReserveUsedAsCollateralDisabled)
	if err := _LendingPool.contract.UnpackLog(event, "ReserveUsedAsCollateralDisabled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolReserveUsedAsCollateralEnabledIterator is returned from FilterReserveUsedAsCollateralEnabled and is used to iterate over the raw logs and unpacked data for ReserveUsedAsCollateralEnabled events raised by the LendingPool contract.
type LendingPoolReserveUsedAsCollateralEnabledIterator struct {
	Event *LendingPoolReserveUsedAsCollateralEnabled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolReserveUsedAsCollateralEnabledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolReserveUsedAsCollateralEnabled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolReserveUsedAsCollateralEnabled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolReserveUsedAsCollateralEnabledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolReserveUsedAsCollateralEnabledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolReserveUsedAsCollateralEnabled represents a ReserveUsedAsCollateralEnabled event raised by the LendingPool contract.
type LendingPoolReserveUsedAsCollateralEnabled struct {
	Reserve common.Address
	User    common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterReserveUsedAsCollateralEnabled is a free log retrieval operation binding the contract event 0x00058a56ea94653cdf4f152d227ace22d4c00ad99e2a43f58cb7d9e3feb295f2.
//
// Solidity: event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user)
func (_LendingPool *LendingPoolFilterer) FilterReserveUsedAsCollateralEnabled(opts *bind.FilterOpts, reserve []common.Address, user []common.Address) (*LendingPoolReserveUsedAsCollateralEnabledIterator, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _LendingPool.contract.FilterLogs(opts, "ReserveUsedAsCollateralEnabled", reserveRule, userRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolReserveUsedAsCollateralEnabledIterator{contract: _LendingPool.contract, event: "ReserveUsedAsCollateralEnabled", logs: logs, sub: sub}, nil
}

// WatchReserveUsedAsCollateralEnabled is a free log subscription operation binding the contract event 0x00058a56ea94653cdf4f152d227ace22d4c00ad99e2a43f58cb7d9e3feb295f2.
//
// Solidity: event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user)
func (_LendingPool *LendingPoolFilterer) WatchReserveUsedAsCollateralEnabled(opts *bind.WatchOpts, sink chan<- *LendingPoolReserveUsedAsCollateralEnabled, reserve []common.Address, user []common.Address) (event.Subscription, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _LendingPool.contract.WatchLogs(opts, "ReserveUsedAsCollateralEnabled", reserveRule, userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolReserveUsedAsCollateralEnabled)
				if err := _LendingPool.contract.UnpackLog(event, "ReserveUsedAsCollateralEnabled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReserveUsedAsCollateralEnabled is a log parse operation binding the contract event 0x00058a56ea94653cdf4f152d227ace22d4c00ad99e2a43f58cb7d9e3feb295f2.
//
// Solidity: event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user)
func (_LendingPool *LendingPoolFilterer) ParseReserveUsedAsCollateralEnabled(log types.Log) (*LendingPoolReserveUsedAsCollateralEnabled, error) {
	event := new(LendingPoolReserveUsedAsCollateralEnabled)
	if err := _LendingPool.contract.UnpackLog(event, "ReserveUsedAsCollateralEnabled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolSwapIterator is returned from FilterSwap and is used to iterate over the raw logs and unpacked data for Swap events raised by the LendingPool contract.
type LendingPoolSwapIterator struct {
	Event *LendingPoolSwap // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolSwapIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolSwap)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolSwap)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolSwapIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolSwapIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolSwap represents a Swap event raised by the LendingPool contract.
type LendingPoolSwap struct {
	Reserve  common.Address
	User     common.Address
	RateMode *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSwap is a free log retrieval operation binding the contract event 0xea368a40e9570069bb8e6511d668293ad2e1f03b0d982431fd223de9f3b70ca6.
//
// Solidity: event Swap(address indexed reserve, address indexed user, uint256 rateMode)
func (_LendingPool *LendingPoolFilterer) FilterSwap(opts *bind.FilterOpts, reserve []common.Address, user []common.Address) (*LendingPoolSwapIterator, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _LendingPool.contract.FilterLogs(opts, "Swap", reserveRule, userRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolSwapIterator{contract: _LendingPool.contract, event: "Swap", logs: logs, sub: sub}, nil
}

// WatchSwap is a free log subscription operation binding the contract event 0xea368a40e9570069bb8e6511d668293ad2e1f03b0d982431fd223de9f3b70ca6.
//
// Solidity: event Swap(address indexed reserve, address indexed user, uint256 rateMode)
func (_LendingPool *LendingPoolFilterer) WatchSwap(opts *bind.WatchOpts, sink chan<- *LendingPoolSwap, reserve []common.Address, user []common.Address) (event.Subscription, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _LendingPool.contract.WatchLogs(opts, "Swap", reserveRule, userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolSwap)
				if err := _LendingPool.contract.UnpackLog(event, "Swap", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSwap is a log parse operation binding the contract event 0xea368a40e9570069bb8e6511d668293ad2e1f03b0d982431fd223de9f3b70ca6.
//
// Solidity: event Swap(address indexed reserve, address indexed user, uint256 rateMode)
func (_LendingPool *LendingPoolFilterer) ParseSwap(log types.Log) (*LendingPoolSwap, error) {
	event := new(LendingPoolSwap)
	if err := _LendingPool.contract.UnpackLog(event, "Swap", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the LendingPool contract.
type LendingPoolUnpausedIterator struct {
	Event *LendingPoolUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolUnpaused represents a Unpaused event raised by the LendingPool contract.
type LendingPoolUnpaused struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0xa45f47fdea8a1efdd9029a5691c7f759c32b7c698632b563573e155625d16933.
//
// Solidity: event Unpaused()
func (_LendingPool *LendingPoolFilterer) FilterUnpaused(opts *bind.FilterOpts) (*LendingPoolUnpausedIterator, error) {

	logs, sub, err := _LendingPool.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &LendingPoolUnpausedIterator{contract: _LendingPool.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0xa45f47fdea8a1efdd9029a5691c7f759c32b7c698632b563573e155625d16933.
//
// Solidity: event Unpaused()
func (_LendingPool *LendingPoolFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *LendingPoolUnpaused) (event.Subscription, error) {

	logs, sub, err := _LendingPool.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolUnpaused)
				if err := _LendingPool.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0xa45f47fdea8a1efdd9029a5691c7f759c32b7c698632b563573e155625d16933.
//
// Solidity: event Unpaused()
func (_LendingPool *LendingPoolFilterer) ParseUnpaused(log types.Log) (*LendingPoolUnpaused, error) {
	event := new(LendingPoolUnpaused)
	if err := _LendingPool.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolWithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the LendingPool contract.
type LendingPoolWithdrawIterator struct {
	Event *LendingPoolWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolWithdraw represents a Withdraw event raised by the LendingPool contract.
type LendingPoolWithdraw struct {
	Reserve common.Address
	User    common.Address
	To      common.Address
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterWithdraw is a free log retrieval operation binding the contract event 0x3115d1449a7b732c986cba18244e897a450f61e1bb8d589cd2e69e6c8924f9f7.
//
// Solidity: event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount)
func (_LendingPool *LendingPoolFilterer) FilterWithdraw(opts *bind.FilterOpts, reserve []common.Address, user []common.Address, to []common.Address) (*LendingPoolWithdrawIterator, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _LendingPool.contract.FilterLogs(opts, "Withdraw", reserveRule, userRule, toRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolWithdrawIterator{contract: _LendingPool.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

// WatchWithdraw is a free log subscription operation binding the contract event 0x3115d1449a7b732c986cba18244e897a450f61e1bb8d589cd2e69e6c8924f9f7.
//
// Solidity: event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount)
func (_LendingPool *LendingPoolFilterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *LendingPoolWithdraw, reserve []common.Address, user []common.Address, to []common.Address) (event.Subscription, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _LendingPool.contract.WatchLogs(opts, "Withdraw", reserveRule, userRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolWithdraw)
				if err := _LendingPool.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdraw is a log parse operation binding the contract event 0x3115d1449a7b732c986cba18244e897a450f61e1bb8d589cd2e69e6c8924f9f7.
//
// Solidity: event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount)
func (_LendingPool *LendingPoolFilterer) ParseWithdraw(log types.Log) (*LendingPoolWithdraw, error) {
	event := new(LendingPoolWithdraw)
	if err := _LendingPool.contract.UnpackLog(event, "Withdraw", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolAddressesProviderABI is the input ABI used to generate the binding from.
const LendingPoolAddressesProviderABI = "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"marketId\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"hasProxy\",\"type\":\"bool\"}],\"name\":\"AddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"ConfigurationAdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"EmergencyAdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"LendingPoolCollateralManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"LendingPoolConfiguratorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"LendingPoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"LendingRateOracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newMarketId\",\"type\":\"string\"}],\"name\":\"MarketIdSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"PriceOracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"ProxyCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEmergencyAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLendingPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLendingPoolCollateralManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLendingPoolConfigurator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLendingRateOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"implementationAddress\",\"type\":\"address\"}],\"name\":\"setAddressAsProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emergencyAdmin\",\"type\":\"address\"}],\"name\":\"setEmergencyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"setLendingPoolCollateralManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"configurator\",\"type\":\"address\"}],\"name\":\"setLendingPoolConfiguratorImpl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"setLendingPoolImpl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lendingRateOracle\",\"type\":\"address\"}],\"name\":\"setLendingRateOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"marketId\",\"type\":\"string\"}],\"name\":\"setMarketId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"setPoolAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceOracle\",\"type\":\"address\"}],\"name\":\"setPriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// LendingPoolAddressesProviderBin is the compiled bytecode used for deploying new contracts.
var LendingPoolAddressesProviderBin = "0x60806040523480156200001157600080fd5b5060405162001dca38038062001dca833981810160405260208110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82516401000000008111828201881017156200008957600080fd5b82525081516020918201929091019080838360005b83811015620000b85781810151838201526020016200009e565b50505050905090810190601f168015620000e65780820380516001836020036101000a031916815260200191505b506040525050506000620000ff6200015b60201b60201c565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35062000154816200015f565b50620002b0565b3390565b80516200017490600190602084019062000214565b507f5e667c32fd847cf8bce48ab3400175cbf107bdc82b2dea62e3364909dfaee799816040518080602001828103825283818151815260200191508051906020019080838360005b83811015620001d6578181015183820152602001620001bc565b50505050905090810190601f168015620002045780820380516001836020036101000a031916815260200191505b509250505060405180910390a150565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200025757805160ff191683800117855562000287565b8280016001018555821562000287579182015b82811115620002875782518255916020019190600101906200026a565b506200029592915062000299565b5090565b5b808211156200029557600081556001016200029a565b611b0a80620002c06000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c8063715018a6116100b8578063c12542df1161007c578063c12542df14610347578063ca446dd91461036d578063ddcaa9ea14610399578063f2fde38b146103a1578063f67b1847146103c7578063fca513a81461046d57610142565b8063715018a614610301578063820d12741461030957806385c858b11461032f5780638da5cb5b14610337578063aecda3781461033f57610142565b8063398e55531161010a578063398e5553146101de578063530e784f14610204578063568ef4701461022a5780635aef021f146102a75780635dcc528c146102cd578063712d9171146102f957610142565b80630261bf8b1461014757806321f8a7211461016b578063283d62ad1461018857806335da3394146101b05780633618abba146101d6575b600080fd5b61014f610475565b604080516001600160a01b039092168252519081900360200190f35b61014f6004803603602081101561018157600080fd5b5035610494565b6101ae6004803603602081101561019e57600080fd5b50356001600160a01b03166104af565b005b6101ae600480360360208110156101c657600080fd5b50356001600160a01b0316610587565b61014f610664565b6101ae600480360360208110156101f457600080fd5b50356001600160a01b0316610685565b6101ae6004803603602081101561021a57600080fd5b50356001600160a01b0316610765565b61023261083f565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561026c578181015183820152602001610254565b50505050905090810190601f1680156102995780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101ae600480360360208110156102bd57600080fd5b50356001600160a01b03166108d4565b6101ae600480360360408110156102e357600080fd5b50803590602001356001600160a01b031661097c565b61014f610a25565b6101ae610a45565b6101ae6004803603602081101561031f57600080fd5b50356001600160a01b0316610ae7565b61014f610bc8565b61014f610bef565b61014f610bfe565b6101ae6004803603602081101561035d57600080fd5b50356001600160a01b0316610c16565b6101ae6004803603604081101561038357600080fd5b50803590602001356001600160a01b0316610ccb565b61014f610d8c565b6101ae600480360360208110156103b757600080fd5b50356001600160a01b0316610da9565b6101ae600480360360208110156103dd57600080fd5b8101906020810181356401000000008111156103f857600080fd5b82018360208201111561040a57600080fd5b8035906020019184600183028401116401000000008311171561042c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610ea1945050505050565b61014f610f05565b600061048f6b13115391125391d7d413d3d360a21b610494565b905090565b6000908152600260205260409020546001600160a01b031690565b6104b7610f1f565b6000546001600160a01b03908116911614610507576040805162461bcd60e51b81526020600482018190526024820152600080516020611ab5833981519152604482015290519081900360640190fd5b692827a7a62fa0a226a4a760b11b600090815260026020527f8625fbc469bac10fd11de1d783dcd446542784dbcc535ef64a1da61860fda74c80546001600160a01b0319166001600160a01b03841690811790915560405190917fc20a317155a9e7d84e06b716b4b355d47742ab9f8c5d630e7f556553f582430d91a250565b61058f610f1f565b6000546001600160a01b039081169116146105df576040805162461bcd60e51b81526020600482018190526024820152600080516020611ab5833981519152604482015290519081900360640190fd5b6e22a6a2a923a2a721acafa0a226a4a760891b600090815260026020527f767aa9c986e1d88108b2558f00fbd21b689a0397581446e2e868cd70421026cc80546001600160a01b0319166001600160a01b03841690811790915560405190917fe19673fc861bfeb894cf2d6b7662505497ef31c0f489b742db24ee331082691691a250565b600061048f724c454e44494e475f524154455f4f5241434c4560681b610494565b61068d610f1f565b6000546001600160a01b039081169116146106dd576040805162461bcd60e51b81526020600482018190526024820152600080516020611ab5833981519152604482015290519081900360640190fd5b7121a7a62620aa22a920a62fa6a0a720a3a2a960711b600090815260026020527f65e3f3080e9127c1765503a54b8dbb495249e66169f096dfc87ee63bed17e22c80546001600160a01b0319166001600160a01b03841690811790915560405190917f991888326f0eab3df6084aadb82bee6781b5c9aa75379e8bc50ae8693454163891a250565b61076d610f1f565b6000546001600160a01b039081169116146107bd576040805162461bcd60e51b81526020600482018190526024820152600080516020611ab5833981519152604482015290519081900360640190fd5b6b50524943455f4f5241434c4560a01b600090815260026020527f740f710666bd7a12af42df98311e541e47f7fd33d382d11602457a6d540cbd6380546001600160a01b0319166001600160a01b03841690811790915560405190917fefe8ab924ca486283a79dc604baa67add51afb82af1db8ac386ebbba643cdffd91a250565b60018054604080516020601f600260001961010087891615020190951694909404938401819004810282018101909252828152606093909290918301828280156108ca5780601f1061089f576101008083540402835291602001916108ca565b820191906000526020600020905b8154815290600101906020018083116108ad57829003601f168201915b5050505050905090565b6108dc610f1f565b6000546001600160a01b0390811691161461092c576040805162461bcd60e51b81526020600482018190526024820152600080516020611ab5833981519152604482015290519081900360640190fd5b6109456b13115391125391d7d413d3d360a21b82610f23565b6040516001600160a01b038216907fc4e6c6cdf28d0edbd8bcf071d724d33cc2e7a30be7d06443925656e9cb492aa490600090a250565b610984610f1f565b6000546001600160a01b039081169116146109d4576040805162461bcd60e51b81526020600482018190526024820152600080516020611ab5833981519152604482015290519081900360640190fd5b6109de8282610f23565b604080518381526001602082015281516001600160a01b038416927ff2689d5d5cd0c639e137642cae5d40afced201a1a0327e7ac9358461dc9fff31928290030190a25050565b600061048f7121a7a62620aa22a920a62fa6a0a720a3a2a960711b610494565b610a4d610f1f565b6000546001600160a01b03908116911614610a9d576040805162461bcd60e51b81526020600482018190526024820152600080516020611ab5833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b610aef610f1f565b6000546001600160a01b03908116911614610b3f576040805162461bcd60e51b81526020600482018190526024820152600080516020611ab5833981519152604482015290519081900360640190fd5b724c454e44494e475f524154455f4f5241434c4560681b600090815260026020527f10f0e20294ece4bd93e7a467dbf22ab9ab1740ebd0a532cc53066601e880c0cf80546001600160a01b0319166001600160a01b03841690811790915560405190917f5c29179aba6942020a8a2d38f65de02fb6b7f784e7f049ed3a3cab97621859b591a250565b600061048f782622a72224a723afa827a7a62fa1a7a72324a3aaa920aa27a960391b610494565b6000546001600160a01b031690565b600061048f692827a7a62fa0a226a4a760b11b610494565b610c1e610f1f565b6000546001600160a01b03908116911614610c6e576040805162461bcd60e51b81526020600482018190526024820152600080516020611ab5833981519152604482015290519081900360640190fd5b610c94782622a72224a723afa827a7a62fa1a7a72324a3aaa920aa27a960391b82610f23565b6040516001600160a01b038216907fdfabe479bad36782fb1e77fbfddd4e382671713527e4786cfc93a022ae76372990600090a250565b610cd3610f1f565b6000546001600160a01b03908116911614610d23576040805162461bcd60e51b81526020600482018190526024820152600080516020611ab5833981519152604482015290519081900360640190fd5b600082815260026020908152604080832080546001600160a01b0319166001600160a01b03861690811790915581518681529283019390935280517ff2689d5d5cd0c639e137642cae5d40afced201a1a0327e7ac9358461dc9fff319281900390910190a25050565b600061048f6e22a6a2a923a2a721acafa0a226a4a760891b610494565b610db1610f1f565b6000546001600160a01b03908116911614610e01576040805162461bcd60e51b81526020600482018190526024820152600080516020611ab5833981519152604482015290519081900360640190fd5b6001600160a01b038116610e465760405162461bcd60e51b8152600401808060200182810382526026815260200180611a8f6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b610ea9610f1f565b6000546001600160a01b03908116911614610ef9576040805162461bcd60e51b81526020600482018190526024820152600080516020611ab5833981519152604482015290519081900360640190fd5b610f02816111cb565b50565b600061048f6b50524943455f4f5241434c4560a01b610494565b3390565b6000828152600260209081526040918290205482513060248083019190915284518083039091018152604490910190935290820180516001600160e01b031663189acdbd60e31b1790526001600160a01b0316908190816110f25730604051610f8b9061127b565b6001600160a01b03909116815260405190819003602001906000f080158015610fb8573d6000803e3d6000fd5b509150816001600160a01b031663d1f5789485836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561102757818101518382015260200161100f565b50505050905090810190601f1680156110545780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561107457600080fd5b505af1158015611088573d6000803e3d6000fd5b50505060008681526002602090815260409182902080546001600160a01b0319166001600160a01b038716908117909155825189815292519093507f1eb35cb4b5bbb23d152f3b4016a5a46c37a07ae930ed0956aba951e2311424389281900390910190a26111c4565b816001600160a01b0316634f1ef28685836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561115e578181015183820152602001611146565b50505050905090810190601f16801561118b5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b1580156111ab57600080fd5b505af11580156111bf573d6000803e3d6000fd5b505050505b5050505050565b80516111de906001906020840190611288565b507f5e667c32fd847cf8bce48ab3400175cbf107bdc82b2dea62e3364909dfaee799816040518080602001828103825283818151815260200191508051906020019080838360005b8381101561123e578181015183820152602001611226565b50505050905090810190601f16801561126b5780820380516001836020036101000a031916815260200191505b509250505060405180910390a150565b6107738061131c83390190565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106112c957805160ff19168380011785556112f6565b828001600101855582156112f6579182015b828111156112f65782518255916020019190600101906112db565b50611302929150611306565b5090565b5b80821115611302576000815560010161130756fe60a060405234801561001057600080fd5b506040516107733803806107738339818101604052602081101561003357600080fd5b5051606081901b6001600160601b0319166080526001600160a01b03166106f36100806000398061022852806102725280610331528061045e528061048752806105af52506106f36000f3fe60806040526004361061004a5760003560e01c80633659cfe6146100545780634f1ef286146100875780635c60da1b14610107578063d1f5789414610138578063f851a440146101ee575b610052610203565b005b34801561006057600080fd5b506100526004803603602081101561007757600080fd5b50356001600160a01b031661021d565b6100526004803603604081101561009d57600080fd5b6001600160a01b0382351691908101906040810160208201356401000000008111156100c857600080fd5b8201836020820111156100da57600080fd5b803590602001918460018302840111640100000000831117156100fc57600080fd5b509092509050610267565b34801561011357600080fd5b5061011c610324565b604080516001600160a01b039092168252519081900360200190f35b6100526004803603604081101561014e57600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561017957600080fd5b82018360208201111561018b57600080fd5b803590602001918460018302840111640100000000831117156101ad57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610371945050505050565b3480156101fa57600080fd5b5061011c610451565b61020b6104ab565b61021b6102166104b3565b6104d8565b565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561025c57610257816104fc565b610264565b610264610203565b50565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610317576102a1836104fc565b6000836001600160a01b031683836040518083838082843760405192019450600093509091505080830381855af49150503d80600081146102fe576040519150601f19603f3d011682016040523d82523d6000602084013e610303565b606091505b505090508061031157600080fd5b5061031f565b61031f610203565b505050565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156103665761035f6104b3565b905061036e565b61036e610203565b90565b600061037b6104b3565b6001600160a01b03161461038e57600080fd5b6103978261053c565b80511561044d576000826001600160a01b0316826040518082805190602001908083835b602083106103da5780518252601f1990920191602091820191016103bb565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d806000811461043a576040519150601f19603f3d011682016040523d82523d6000602084013e61043f565b606091505b505090508061031f57600080fd5b5050565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561036657507f000000000000000000000000000000000000000000000000000000000000000061036e565b61021b6105a4565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b3660008037600080366000845af43d6000803e8080156104f7573d6000f35b3d6000fd5b6105058161053c565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b61054581610614565b6105805760405162461bcd60e51b815260040180806020018281038252603b815260200180610683603b913960400191505060405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561060c5760405162461bcd60e51b81526004018080602001828103825260328152602001806106516032913960400191505060405180910390fd5b61021b61021b565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061064857508115155b94935050505056fe43616e6e6f742063616c6c2066616c6c6261636b2066756e6374696f6e2066726f6d207468652070726f78792061646d696e43616e6e6f742073657420612070726f787920696d706c656d656e746174696f6e20746f2061206e6f6e2d636f6e74726163742061646472657373a2646970667358221220c998aceaee89984e41376643cace9bef07887c2711cb0f7a736da40d75e0ac1164736f6c634300060c00334f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220b6d4ea26bd7977c1d547c5e9febafdd740fca986e947334574b428f9782d631464736f6c634300060c0033"

// DeployLendingPoolAddressesProvider deploys a new Ethereum contract, binding an instance of LendingPoolAddressesProvider to it.
func DeployLendingPoolAddressesProvider(auth *bind.TransactOpts, backend bind.ContractBackend, marketId string) (common.Address, *types.Transaction, *LendingPoolAddressesProvider, error) {
	parsed, err := abi.JSON(strings.NewReader(LendingPoolAddressesProviderABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(LendingPoolAddressesProviderBin), backend, marketId)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LendingPoolAddressesProvider{LendingPoolAddressesProviderCaller: LendingPoolAddressesProviderCaller{contract: contract}, LendingPoolAddressesProviderTransactor: LendingPoolAddressesProviderTransactor{contract: contract}, LendingPoolAddressesProviderFilterer: LendingPoolAddressesProviderFilterer{contract: contract}}, nil
}

// LendingPoolAddressesProvider is an auto generated Go binding around an Ethereum contract.
type LendingPoolAddressesProvider struct {
	LendingPoolAddressesProviderCaller     // Read-only binding to the contract
	LendingPoolAddressesProviderTransactor // Write-only binding to the contract
	LendingPoolAddressesProviderFilterer   // Log filterer for contract events
}

// LendingPoolAddressesProviderCaller is an auto generated read-only Go binding around an Ethereum contract.
type LendingPoolAddressesProviderCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LendingPoolAddressesProviderTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LendingPoolAddressesProviderTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LendingPoolAddressesProviderFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LendingPoolAddressesProviderFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LendingPoolAddressesProviderSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LendingPoolAddressesProviderSession struct {
	Contract     *LendingPoolAddressesProvider // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                 // Call options to use throughout this session
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// LendingPoolAddressesProviderCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LendingPoolAddressesProviderCallerSession struct {
	Contract *LendingPoolAddressesProviderCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                       // Call options to use throughout this session
}

// LendingPoolAddressesProviderTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LendingPoolAddressesProviderTransactorSession struct {
	Contract     *LendingPoolAddressesProviderTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                       // Transaction auth options to use throughout this session
}

// LendingPoolAddressesProviderRaw is an auto generated low-level Go binding around an Ethereum contract.
type LendingPoolAddressesProviderRaw struct {
	Contract *LendingPoolAddressesProvider // Generic contract binding to access the raw methods on
}

// LendingPoolAddressesProviderCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LendingPoolAddressesProviderCallerRaw struct {
	Contract *LendingPoolAddressesProviderCaller // Generic read-only contract binding to access the raw methods on
}

// LendingPoolAddressesProviderTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LendingPoolAddressesProviderTransactorRaw struct {
	Contract *LendingPoolAddressesProviderTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLendingPoolAddressesProvider creates a new instance of LendingPoolAddressesProvider, bound to a specific deployed contract.
func NewLendingPoolAddressesProvider(address common.Address, backend bind.ContractBackend) (*LendingPoolAddressesProvider, error) {
	contract, err := bindLendingPoolAddressesProvider(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LendingPoolAddressesProvider{LendingPoolAddressesProviderCaller: LendingPoolAddressesProviderCaller{contract: contract}, LendingPoolAddressesProviderTransactor: LendingPoolAddressesProviderTransactor{contract: contract}, LendingPoolAddressesProviderFilterer: LendingPoolAddressesProviderFilterer{contract: contract}}, nil
}

// NewLendingPoolAddressesProviderCaller creates a new read-only instance of LendingPoolAddressesProvider, bound to a specific deployed contract.
func NewLendingPoolAddressesProviderCaller(address common.Address, caller bind.ContractCaller) (*LendingPoolAddressesProviderCaller, error) {
	contract, err := bindLendingPoolAddressesProvider(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LendingPoolAddressesProviderCaller{contract: contract}, nil
}

// NewLendingPoolAddressesProviderTransactor creates a new write-only instance of LendingPoolAddressesProvider, bound to a specific deployed contract.
func NewLendingPoolAddressesProviderTransactor(address common.Address, transactor bind.ContractTransactor) (*LendingPoolAddressesProviderTransactor, error) {
	contract, err := bindLendingPoolAddressesProvider(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LendingPoolAddressesProviderTransactor{contract: contract}, nil
}

// NewLendingPoolAddressesProviderFilterer creates a new log filterer instance of LendingPoolAddressesProvider, bound to a specific deployed contract.
func NewLendingPoolAddressesProviderFilterer(address common.Address, filterer bind.ContractFilterer) (*LendingPoolAddressesProviderFilterer, error) {
	contract, err := bindLendingPoolAddressesProvider(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LendingPoolAddressesProviderFilterer{contract: contract}, nil
}

// bindLendingPoolAddressesProvider binds a generic wrapper to an already deployed contract.
func bindLendingPoolAddressesProvider(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(LendingPoolAddressesProviderABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LendingPoolAddressesProvider.Contract.LendingPoolAddressesProviderCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LendingPoolAddressesProvider.Contract.LendingPoolAddressesProviderTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LendingPoolAddressesProvider.Contract.LendingPoolAddressesProviderTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LendingPoolAddressesProvider.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LendingPoolAddressesProvider.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LendingPoolAddressesProvider.Contract.contract.Transact(opts, method, params...)
}

// GetAddress is a free data retrieval call binding the contract method 0x21f8a721.
//
// Solidity: function getAddress(bytes32 id) view returns(address)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderCaller) GetAddress(opts *bind.CallOpts, id [32]byte) (common.Address, error) {
	var out []interface{}
	err := _LendingPoolAddressesProvider.contract.Call(opts, &out, "getAddress", id)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAddress is a free data retrieval call binding the contract method 0x21f8a721.
//
// Solidity: function getAddress(bytes32 id) view returns(address)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderSession) GetAddress(id [32]byte) (common.Address, error) {
	return _LendingPoolAddressesProvider.Contract.GetAddress(&_LendingPoolAddressesProvider.CallOpts, id)
}

// GetAddress is a free data retrieval call binding the contract method 0x21f8a721.
//
// Solidity: function getAddress(bytes32 id) view returns(address)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderCallerSession) GetAddress(id [32]byte) (common.Address, error) {
	return _LendingPoolAddressesProvider.Contract.GetAddress(&_LendingPoolAddressesProvider.CallOpts, id)
}

// GetEmergencyAdmin is a free data retrieval call binding the contract method 0xddcaa9ea.
//
// Solidity: function getEmergencyAdmin() view returns(address)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderCaller) GetEmergencyAdmin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LendingPoolAddressesProvider.contract.Call(opts, &out, "getEmergencyAdmin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetEmergencyAdmin is a free data retrieval call binding the contract method 0xddcaa9ea.
//
// Solidity: function getEmergencyAdmin() view returns(address)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderSession) GetEmergencyAdmin() (common.Address, error) {
	return _LendingPoolAddressesProvider.Contract.GetEmergencyAdmin(&_LendingPoolAddressesProvider.CallOpts)
}

// GetEmergencyAdmin is a free data retrieval call binding the contract method 0xddcaa9ea.
//
// Solidity: function getEmergencyAdmin() view returns(address)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderCallerSession) GetEmergencyAdmin() (common.Address, error) {
	return _LendingPoolAddressesProvider.Contract.GetEmergencyAdmin(&_LendingPoolAddressesProvider.CallOpts)
}

// GetLendingPool is a free data retrieval call binding the contract method 0x0261bf8b.
//
// Solidity: function getLendingPool() view returns(address)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderCaller) GetLendingPool(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LendingPoolAddressesProvider.contract.Call(opts, &out, "getLendingPool")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetLendingPool is a free data retrieval call binding the contract method 0x0261bf8b.
//
// Solidity: function getLendingPool() view returns(address)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderSession) GetLendingPool() (common.Address, error) {
	return _LendingPoolAddressesProvider.Contract.GetLendingPool(&_LendingPoolAddressesProvider.CallOpts)
}

// GetLendingPool is a free data retrieval call binding the contract method 0x0261bf8b.
//
// Solidity: function getLendingPool() view returns(address)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderCallerSession) GetLendingPool() (common.Address, error) {
	return _LendingPoolAddressesProvider.Contract.GetLendingPool(&_LendingPoolAddressesProvider.CallOpts)
}

// GetLendingPoolCollateralManager is a free data retrieval call binding the contract method 0x712d9171.
//
// Solidity: function getLendingPoolCollateralManager() view returns(address)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderCaller) GetLendingPoolCollateralManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LendingPoolAddressesProvider.contract.Call(opts, &out, "getLendingPoolCollateralManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetLendingPoolCollateralManager is a free data retrieval call binding the contract method 0x712d9171.
//
// Solidity: function getLendingPoolCollateralManager() view returns(address)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderSession) GetLendingPoolCollateralManager() (common.Address, error) {
	return _LendingPoolAddressesProvider.Contract.GetLendingPoolCollateralManager(&_LendingPoolAddressesProvider.CallOpts)
}

// GetLendingPoolCollateralManager is a free data retrieval call binding the contract method 0x712d9171.
//
// Solidity: function getLendingPoolCollateralManager() view returns(address)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderCallerSession) GetLendingPoolCollateralManager() (common.Address, error) {
	return _LendingPoolAddressesProvider.Contract.GetLendingPoolCollateralManager(&_LendingPoolAddressesProvider.CallOpts)
}

// GetLendingPoolConfigurator is a free data retrieval call binding the contract method 0x85c858b1.
//
// Solidity: function getLendingPoolConfigurator() view returns(address)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderCaller) GetLendingPoolConfigurator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LendingPoolAddressesProvider.contract.Call(opts, &out, "getLendingPoolConfigurator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetLendingPoolConfigurator is a free data retrieval call binding the contract method 0x85c858b1.
//
// Solidity: function getLendingPoolConfigurator() view returns(address)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderSession) GetLendingPoolConfigurator() (common.Address, error) {
	return _LendingPoolAddressesProvider.Contract.GetLendingPoolConfigurator(&_LendingPoolAddressesProvider.CallOpts)
}

// GetLendingPoolConfigurator is a free data retrieval call binding the contract method 0x85c858b1.
//
// Solidity: function getLendingPoolConfigurator() view returns(address)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderCallerSession) GetLendingPoolConfigurator() (common.Address, error) {
	return _LendingPoolAddressesProvider.Contract.GetLendingPoolConfigurator(&_LendingPoolAddressesProvider.CallOpts)
}

// GetLendingRateOracle is a free data retrieval call binding the contract method 0x3618abba.
//
// Solidity: function getLendingRateOracle() view returns(address)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderCaller) GetLendingRateOracle(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LendingPoolAddressesProvider.contract.Call(opts, &out, "getLendingRateOracle")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetLendingRateOracle is a free data retrieval call binding the contract method 0x3618abba.
//
// Solidity: function getLendingRateOracle() view returns(address)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderSession) GetLendingRateOracle() (common.Address, error) {
	return _LendingPoolAddressesProvider.Contract.GetLendingRateOracle(&_LendingPoolAddressesProvider.CallOpts)
}

// GetLendingRateOracle is a free data retrieval call binding the contract method 0x3618abba.
//
// Solidity: function getLendingRateOracle() view returns(address)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderCallerSession) GetLendingRateOracle() (common.Address, error) {
	return _LendingPoolAddressesProvider.Contract.GetLendingRateOracle(&_LendingPoolAddressesProvider.CallOpts)
}

// GetMarketId is a free data retrieval call binding the contract method 0x568ef470.
//
// Solidity: function getMarketId() view returns(string)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderCaller) GetMarketId(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _LendingPoolAddressesProvider.contract.Call(opts, &out, "getMarketId")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetMarketId is a free data retrieval call binding the contract method 0x568ef470.
//
// Solidity: function getMarketId() view returns(string)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderSession) GetMarketId() (string, error) {
	return _LendingPoolAddressesProvider.Contract.GetMarketId(&_LendingPoolAddressesProvider.CallOpts)
}

// GetMarketId is a free data retrieval call binding the contract method 0x568ef470.
//
// Solidity: function getMarketId() view returns(string)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderCallerSession) GetMarketId() (string, error) {
	return _LendingPoolAddressesProvider.Contract.GetMarketId(&_LendingPoolAddressesProvider.CallOpts)
}

// GetPoolAdmin is a free data retrieval call binding the contract method 0xaecda378.
//
// Solidity: function getPoolAdmin() view returns(address)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderCaller) GetPoolAdmin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LendingPoolAddressesProvider.contract.Call(opts, &out, "getPoolAdmin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetPoolAdmin is a free data retrieval call binding the contract method 0xaecda378.
//
// Solidity: function getPoolAdmin() view returns(address)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderSession) GetPoolAdmin() (common.Address, error) {
	return _LendingPoolAddressesProvider.Contract.GetPoolAdmin(&_LendingPoolAddressesProvider.CallOpts)
}

// GetPoolAdmin is a free data retrieval call binding the contract method 0xaecda378.
//
// Solidity: function getPoolAdmin() view returns(address)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderCallerSession) GetPoolAdmin() (common.Address, error) {
	return _LendingPoolAddressesProvider.Contract.GetPoolAdmin(&_LendingPoolAddressesProvider.CallOpts)
}

// GetPriceOracle is a free data retrieval call binding the contract method 0xfca513a8.
//
// Solidity: function getPriceOracle() view returns(address)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderCaller) GetPriceOracle(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LendingPoolAddressesProvider.contract.Call(opts, &out, "getPriceOracle")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetPriceOracle is a free data retrieval call binding the contract method 0xfca513a8.
//
// Solidity: function getPriceOracle() view returns(address)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderSession) GetPriceOracle() (common.Address, error) {
	return _LendingPoolAddressesProvider.Contract.GetPriceOracle(&_LendingPoolAddressesProvider.CallOpts)
}

// GetPriceOracle is a free data retrieval call binding the contract method 0xfca513a8.
//
// Solidity: function getPriceOracle() view returns(address)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderCallerSession) GetPriceOracle() (common.Address, error) {
	return _LendingPoolAddressesProvider.Contract.GetPriceOracle(&_LendingPoolAddressesProvider.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LendingPoolAddressesProvider.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderSession) Owner() (common.Address, error) {
	return _LendingPoolAddressesProvider.Contract.Owner(&_LendingPoolAddressesProvider.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderCallerSession) Owner() (common.Address, error) {
	return _LendingPoolAddressesProvider.Contract.Owner(&_LendingPoolAddressesProvider.CallOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LendingPoolAddressesProvider.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderSession) RenounceOwnership() (*types.Transaction, error) {
	return _LendingPoolAddressesProvider.Contract.RenounceOwnership(&_LendingPoolAddressesProvider.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _LendingPoolAddressesProvider.Contract.RenounceOwnership(&_LendingPoolAddressesProvider.TransactOpts)
}

// SetAddress is a paid mutator transaction binding the contract method 0xca446dd9.
//
// Solidity: function setAddress(bytes32 id, address newAddress) returns()
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderTransactor) SetAddress(opts *bind.TransactOpts, id [32]byte, newAddress common.Address) (*types.Transaction, error) {
	return _LendingPoolAddressesProvider.contract.Transact(opts, "setAddress", id, newAddress)
}

// SetAddress is a paid mutator transaction binding the contract method 0xca446dd9.
//
// Solidity: function setAddress(bytes32 id, address newAddress) returns()
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderSession) SetAddress(id [32]byte, newAddress common.Address) (*types.Transaction, error) {
	return _LendingPoolAddressesProvider.Contract.SetAddress(&_LendingPoolAddressesProvider.TransactOpts, id, newAddress)
}

// SetAddress is a paid mutator transaction binding the contract method 0xca446dd9.
//
// Solidity: function setAddress(bytes32 id, address newAddress) returns()
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderTransactorSession) SetAddress(id [32]byte, newAddress common.Address) (*types.Transaction, error) {
	return _LendingPoolAddressesProvider.Contract.SetAddress(&_LendingPoolAddressesProvider.TransactOpts, id, newAddress)
}

// SetAddressAsProxy is a paid mutator transaction binding the contract method 0x5dcc528c.
//
// Solidity: function setAddressAsProxy(bytes32 id, address implementationAddress) returns()
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderTransactor) SetAddressAsProxy(opts *bind.TransactOpts, id [32]byte, implementationAddress common.Address) (*types.Transaction, error) {
	return _LendingPoolAddressesProvider.contract.Transact(opts, "setAddressAsProxy", id, implementationAddress)
}

// SetAddressAsProxy is a paid mutator transaction binding the contract method 0x5dcc528c.
//
// Solidity: function setAddressAsProxy(bytes32 id, address implementationAddress) returns()
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderSession) SetAddressAsProxy(id [32]byte, implementationAddress common.Address) (*types.Transaction, error) {
	return _LendingPoolAddressesProvider.Contract.SetAddressAsProxy(&_LendingPoolAddressesProvider.TransactOpts, id, implementationAddress)
}

// SetAddressAsProxy is a paid mutator transaction binding the contract method 0x5dcc528c.
//
// Solidity: function setAddressAsProxy(bytes32 id, address implementationAddress) returns()
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderTransactorSession) SetAddressAsProxy(id [32]byte, implementationAddress common.Address) (*types.Transaction, error) {
	return _LendingPoolAddressesProvider.Contract.SetAddressAsProxy(&_LendingPoolAddressesProvider.TransactOpts, id, implementationAddress)
}

// SetEmergencyAdmin is a paid mutator transaction binding the contract method 0x35da3394.
//
// Solidity: function setEmergencyAdmin(address emergencyAdmin) returns()
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderTransactor) SetEmergencyAdmin(opts *bind.TransactOpts, emergencyAdmin common.Address) (*types.Transaction, error) {
	return _LendingPoolAddressesProvider.contract.Transact(opts, "setEmergencyAdmin", emergencyAdmin)
}

// SetEmergencyAdmin is a paid mutator transaction binding the contract method 0x35da3394.
//
// Solidity: function setEmergencyAdmin(address emergencyAdmin) returns()
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderSession) SetEmergencyAdmin(emergencyAdmin common.Address) (*types.Transaction, error) {
	return _LendingPoolAddressesProvider.Contract.SetEmergencyAdmin(&_LendingPoolAddressesProvider.TransactOpts, emergencyAdmin)
}

// SetEmergencyAdmin is a paid mutator transaction binding the contract method 0x35da3394.
//
// Solidity: function setEmergencyAdmin(address emergencyAdmin) returns()
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderTransactorSession) SetEmergencyAdmin(emergencyAdmin common.Address) (*types.Transaction, error) {
	return _LendingPoolAddressesProvider.Contract.SetEmergencyAdmin(&_LendingPoolAddressesProvider.TransactOpts, emergencyAdmin)
}

// SetLendingPoolCollateralManager is a paid mutator transaction binding the contract method 0x398e5553.
//
// Solidity: function setLendingPoolCollateralManager(address manager) returns()
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderTransactor) SetLendingPoolCollateralManager(opts *bind.TransactOpts, manager common.Address) (*types.Transaction, error) {
	return _LendingPoolAddressesProvider.contract.Transact(opts, "setLendingPoolCollateralManager", manager)
}

// SetLendingPoolCollateralManager is a paid mutator transaction binding the contract method 0x398e5553.
//
// Solidity: function setLendingPoolCollateralManager(address manager) returns()
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderSession) SetLendingPoolCollateralManager(manager common.Address) (*types.Transaction, error) {
	return _LendingPoolAddressesProvider.Contract.SetLendingPoolCollateralManager(&_LendingPoolAddressesProvider.TransactOpts, manager)
}

// SetLendingPoolCollateralManager is a paid mutator transaction binding the contract method 0x398e5553.
//
// Solidity: function setLendingPoolCollateralManager(address manager) returns()
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderTransactorSession) SetLendingPoolCollateralManager(manager common.Address) (*types.Transaction, error) {
	return _LendingPoolAddressesProvider.Contract.SetLendingPoolCollateralManager(&_LendingPoolAddressesProvider.TransactOpts, manager)
}

// SetLendingPoolConfiguratorImpl is a paid mutator transaction binding the contract method 0xc12542df.
//
// Solidity: function setLendingPoolConfiguratorImpl(address configurator) returns()
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderTransactor) SetLendingPoolConfiguratorImpl(opts *bind.TransactOpts, configurator common.Address) (*types.Transaction, error) {
	return _LendingPoolAddressesProvider.contract.Transact(opts, "setLendingPoolConfiguratorImpl", configurator)
}

// SetLendingPoolConfiguratorImpl is a paid mutator transaction binding the contract method 0xc12542df.
//
// Solidity: function setLendingPoolConfiguratorImpl(address configurator) returns()
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderSession) SetLendingPoolConfiguratorImpl(configurator common.Address) (*types.Transaction, error) {
	return _LendingPoolAddressesProvider.Contract.SetLendingPoolConfiguratorImpl(&_LendingPoolAddressesProvider.TransactOpts, configurator)
}

// SetLendingPoolConfiguratorImpl is a paid mutator transaction binding the contract method 0xc12542df.
//
// Solidity: function setLendingPoolConfiguratorImpl(address configurator) returns()
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderTransactorSession) SetLendingPoolConfiguratorImpl(configurator common.Address) (*types.Transaction, error) {
	return _LendingPoolAddressesProvider.Contract.SetLendingPoolConfiguratorImpl(&_LendingPoolAddressesProvider.TransactOpts, configurator)
}

// SetLendingPoolImpl is a paid mutator transaction binding the contract method 0x5aef021f.
//
// Solidity: function setLendingPoolImpl(address pool) returns()
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderTransactor) SetLendingPoolImpl(opts *bind.TransactOpts, pool common.Address) (*types.Transaction, error) {
	return _LendingPoolAddressesProvider.contract.Transact(opts, "setLendingPoolImpl", pool)
}

// SetLendingPoolImpl is a paid mutator transaction binding the contract method 0x5aef021f.
//
// Solidity: function setLendingPoolImpl(address pool) returns()
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderSession) SetLendingPoolImpl(pool common.Address) (*types.Transaction, error) {
	return _LendingPoolAddressesProvider.Contract.SetLendingPoolImpl(&_LendingPoolAddressesProvider.TransactOpts, pool)
}

// SetLendingPoolImpl is a paid mutator transaction binding the contract method 0x5aef021f.
//
// Solidity: function setLendingPoolImpl(address pool) returns()
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderTransactorSession) SetLendingPoolImpl(pool common.Address) (*types.Transaction, error) {
	return _LendingPoolAddressesProvider.Contract.SetLendingPoolImpl(&_LendingPoolAddressesProvider.TransactOpts, pool)
}

// SetLendingRateOracle is a paid mutator transaction binding the contract method 0x820d1274.
//
// Solidity: function setLendingRateOracle(address lendingRateOracle) returns()
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderTransactor) SetLendingRateOracle(opts *bind.TransactOpts, lendingRateOracle common.Address) (*types.Transaction, error) {
	return _LendingPoolAddressesProvider.contract.Transact(opts, "setLendingRateOracle", lendingRateOracle)
}

// SetLendingRateOracle is a paid mutator transaction binding the contract method 0x820d1274.
//
// Solidity: function setLendingRateOracle(address lendingRateOracle) returns()
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderSession) SetLendingRateOracle(lendingRateOracle common.Address) (*types.Transaction, error) {
	return _LendingPoolAddressesProvider.Contract.SetLendingRateOracle(&_LendingPoolAddressesProvider.TransactOpts, lendingRateOracle)
}

// SetLendingRateOracle is a paid mutator transaction binding the contract method 0x820d1274.
//
// Solidity: function setLendingRateOracle(address lendingRateOracle) returns()
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderTransactorSession) SetLendingRateOracle(lendingRateOracle common.Address) (*types.Transaction, error) {
	return _LendingPoolAddressesProvider.Contract.SetLendingRateOracle(&_LendingPoolAddressesProvider.TransactOpts, lendingRateOracle)
}

// SetMarketId is a paid mutator transaction binding the contract method 0xf67b1847.
//
// Solidity: function setMarketId(string marketId) returns()
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderTransactor) SetMarketId(opts *bind.TransactOpts, marketId string) (*types.Transaction, error) {
	return _LendingPoolAddressesProvider.contract.Transact(opts, "setMarketId", marketId)
}

// SetMarketId is a paid mutator transaction binding the contract method 0xf67b1847.
//
// Solidity: function setMarketId(string marketId) returns()
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderSession) SetMarketId(marketId string) (*types.Transaction, error) {
	return _LendingPoolAddressesProvider.Contract.SetMarketId(&_LendingPoolAddressesProvider.TransactOpts, marketId)
}

// SetMarketId is a paid mutator transaction binding the contract method 0xf67b1847.
//
// Solidity: function setMarketId(string marketId) returns()
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderTransactorSession) SetMarketId(marketId string) (*types.Transaction, error) {
	return _LendingPoolAddressesProvider.Contract.SetMarketId(&_LendingPoolAddressesProvider.TransactOpts, marketId)
}

// SetPoolAdmin is a paid mutator transaction binding the contract method 0x283d62ad.
//
// Solidity: function setPoolAdmin(address admin) returns()
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderTransactor) SetPoolAdmin(opts *bind.TransactOpts, admin common.Address) (*types.Transaction, error) {
	return _LendingPoolAddressesProvider.contract.Transact(opts, "setPoolAdmin", admin)
}

// SetPoolAdmin is a paid mutator transaction binding the contract method 0x283d62ad.
//
// Solidity: function setPoolAdmin(address admin) returns()
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderSession) SetPoolAdmin(admin common.Address) (*types.Transaction, error) {
	return _LendingPoolAddressesProvider.Contract.SetPoolAdmin(&_LendingPoolAddressesProvider.TransactOpts, admin)
}

// SetPoolAdmin is a paid mutator transaction binding the contract method 0x283d62ad.
//
// Solidity: function setPoolAdmin(address admin) returns()
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderTransactorSession) SetPoolAdmin(admin common.Address) (*types.Transaction, error) {
	return _LendingPoolAddressesProvider.Contract.SetPoolAdmin(&_LendingPoolAddressesProvider.TransactOpts, admin)
}

// SetPriceOracle is a paid mutator transaction binding the contract method 0x530e784f.
//
// Solidity: function setPriceOracle(address priceOracle) returns()
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderTransactor) SetPriceOracle(opts *bind.TransactOpts, priceOracle common.Address) (*types.Transaction, error) {
	return _LendingPoolAddressesProvider.contract.Transact(opts, "setPriceOracle", priceOracle)
}

// SetPriceOracle is a paid mutator transaction binding the contract method 0x530e784f.
//
// Solidity: function setPriceOracle(address priceOracle) returns()
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderSession) SetPriceOracle(priceOracle common.Address) (*types.Transaction, error) {
	return _LendingPoolAddressesProvider.Contract.SetPriceOracle(&_LendingPoolAddressesProvider.TransactOpts, priceOracle)
}

// SetPriceOracle is a paid mutator transaction binding the contract method 0x530e784f.
//
// Solidity: function setPriceOracle(address priceOracle) returns()
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderTransactorSession) SetPriceOracle(priceOracle common.Address) (*types.Transaction, error) {
	return _LendingPoolAddressesProvider.Contract.SetPriceOracle(&_LendingPoolAddressesProvider.TransactOpts, priceOracle)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _LendingPoolAddressesProvider.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _LendingPoolAddressesProvider.Contract.TransferOwnership(&_LendingPoolAddressesProvider.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _LendingPoolAddressesProvider.Contract.TransferOwnership(&_LendingPoolAddressesProvider.TransactOpts, newOwner)
}

// LendingPoolAddressesProviderAddressSetIterator is returned from FilterAddressSet and is used to iterate over the raw logs and unpacked data for AddressSet events raised by the LendingPoolAddressesProvider contract.
type LendingPoolAddressesProviderAddressSetIterator struct {
	Event *LendingPoolAddressesProviderAddressSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolAddressesProviderAddressSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolAddressesProviderAddressSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolAddressesProviderAddressSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolAddressesProviderAddressSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolAddressesProviderAddressSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolAddressesProviderAddressSet represents a AddressSet event raised by the LendingPoolAddressesProvider contract.
type LendingPoolAddressesProviderAddressSet struct {
	Id         [32]byte
	NewAddress common.Address
	HasProxy   bool
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterAddressSet is a free log retrieval operation binding the contract event 0xf2689d5d5cd0c639e137642cae5d40afced201a1a0327e7ac9358461dc9fff31.
//
// Solidity: event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderFilterer) FilterAddressSet(opts *bind.FilterOpts, newAddress []common.Address) (*LendingPoolAddressesProviderAddressSetIterator, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _LendingPoolAddressesProvider.contract.FilterLogs(opts, "AddressSet", newAddressRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolAddressesProviderAddressSetIterator{contract: _LendingPoolAddressesProvider.contract, event: "AddressSet", logs: logs, sub: sub}, nil
}

// WatchAddressSet is a free log subscription operation binding the contract event 0xf2689d5d5cd0c639e137642cae5d40afced201a1a0327e7ac9358461dc9fff31.
//
// Solidity: event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderFilterer) WatchAddressSet(opts *bind.WatchOpts, sink chan<- *LendingPoolAddressesProviderAddressSet, newAddress []common.Address) (event.Subscription, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _LendingPoolAddressesProvider.contract.WatchLogs(opts, "AddressSet", newAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolAddressesProviderAddressSet)
				if err := _LendingPoolAddressesProvider.contract.UnpackLog(event, "AddressSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddressSet is a log parse operation binding the contract event 0xf2689d5d5cd0c639e137642cae5d40afced201a1a0327e7ac9358461dc9fff31.
//
// Solidity: event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderFilterer) ParseAddressSet(log types.Log) (*LendingPoolAddressesProviderAddressSet, error) {
	event := new(LendingPoolAddressesProviderAddressSet)
	if err := _LendingPoolAddressesProvider.contract.UnpackLog(event, "AddressSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolAddressesProviderConfigurationAdminUpdatedIterator is returned from FilterConfigurationAdminUpdated and is used to iterate over the raw logs and unpacked data for ConfigurationAdminUpdated events raised by the LendingPoolAddressesProvider contract.
type LendingPoolAddressesProviderConfigurationAdminUpdatedIterator struct {
	Event *LendingPoolAddressesProviderConfigurationAdminUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolAddressesProviderConfigurationAdminUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolAddressesProviderConfigurationAdminUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolAddressesProviderConfigurationAdminUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolAddressesProviderConfigurationAdminUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolAddressesProviderConfigurationAdminUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolAddressesProviderConfigurationAdminUpdated represents a ConfigurationAdminUpdated event raised by the LendingPoolAddressesProvider contract.
type LendingPoolAddressesProviderConfigurationAdminUpdated struct {
	NewAddress common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterConfigurationAdminUpdated is a free log retrieval operation binding the contract event 0xc20a317155a9e7d84e06b716b4b355d47742ab9f8c5d630e7f556553f582430d.
//
// Solidity: event ConfigurationAdminUpdated(address indexed newAddress)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderFilterer) FilterConfigurationAdminUpdated(opts *bind.FilterOpts, newAddress []common.Address) (*LendingPoolAddressesProviderConfigurationAdminUpdatedIterator, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _LendingPoolAddressesProvider.contract.FilterLogs(opts, "ConfigurationAdminUpdated", newAddressRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolAddressesProviderConfigurationAdminUpdatedIterator{contract: _LendingPoolAddressesProvider.contract, event: "ConfigurationAdminUpdated", logs: logs, sub: sub}, nil
}

// WatchConfigurationAdminUpdated is a free log subscription operation binding the contract event 0xc20a317155a9e7d84e06b716b4b355d47742ab9f8c5d630e7f556553f582430d.
//
// Solidity: event ConfigurationAdminUpdated(address indexed newAddress)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderFilterer) WatchConfigurationAdminUpdated(opts *bind.WatchOpts, sink chan<- *LendingPoolAddressesProviderConfigurationAdminUpdated, newAddress []common.Address) (event.Subscription, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _LendingPoolAddressesProvider.contract.WatchLogs(opts, "ConfigurationAdminUpdated", newAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolAddressesProviderConfigurationAdminUpdated)
				if err := _LendingPoolAddressesProvider.contract.UnpackLog(event, "ConfigurationAdminUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseConfigurationAdminUpdated is a log parse operation binding the contract event 0xc20a317155a9e7d84e06b716b4b355d47742ab9f8c5d630e7f556553f582430d.
//
// Solidity: event ConfigurationAdminUpdated(address indexed newAddress)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderFilterer) ParseConfigurationAdminUpdated(log types.Log) (*LendingPoolAddressesProviderConfigurationAdminUpdated, error) {
	event := new(LendingPoolAddressesProviderConfigurationAdminUpdated)
	if err := _LendingPoolAddressesProvider.contract.UnpackLog(event, "ConfigurationAdminUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolAddressesProviderEmergencyAdminUpdatedIterator is returned from FilterEmergencyAdminUpdated and is used to iterate over the raw logs and unpacked data for EmergencyAdminUpdated events raised by the LendingPoolAddressesProvider contract.
type LendingPoolAddressesProviderEmergencyAdminUpdatedIterator struct {
	Event *LendingPoolAddressesProviderEmergencyAdminUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolAddressesProviderEmergencyAdminUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolAddressesProviderEmergencyAdminUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolAddressesProviderEmergencyAdminUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolAddressesProviderEmergencyAdminUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolAddressesProviderEmergencyAdminUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolAddressesProviderEmergencyAdminUpdated represents a EmergencyAdminUpdated event raised by the LendingPoolAddressesProvider contract.
type LendingPoolAddressesProviderEmergencyAdminUpdated struct {
	NewAddress common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterEmergencyAdminUpdated is a free log retrieval operation binding the contract event 0xe19673fc861bfeb894cf2d6b7662505497ef31c0f489b742db24ee3310826916.
//
// Solidity: event EmergencyAdminUpdated(address indexed newAddress)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderFilterer) FilterEmergencyAdminUpdated(opts *bind.FilterOpts, newAddress []common.Address) (*LendingPoolAddressesProviderEmergencyAdminUpdatedIterator, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _LendingPoolAddressesProvider.contract.FilterLogs(opts, "EmergencyAdminUpdated", newAddressRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolAddressesProviderEmergencyAdminUpdatedIterator{contract: _LendingPoolAddressesProvider.contract, event: "EmergencyAdminUpdated", logs: logs, sub: sub}, nil
}

// WatchEmergencyAdminUpdated is a free log subscription operation binding the contract event 0xe19673fc861bfeb894cf2d6b7662505497ef31c0f489b742db24ee3310826916.
//
// Solidity: event EmergencyAdminUpdated(address indexed newAddress)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderFilterer) WatchEmergencyAdminUpdated(opts *bind.WatchOpts, sink chan<- *LendingPoolAddressesProviderEmergencyAdminUpdated, newAddress []common.Address) (event.Subscription, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _LendingPoolAddressesProvider.contract.WatchLogs(opts, "EmergencyAdminUpdated", newAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolAddressesProviderEmergencyAdminUpdated)
				if err := _LendingPoolAddressesProvider.contract.UnpackLog(event, "EmergencyAdminUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEmergencyAdminUpdated is a log parse operation binding the contract event 0xe19673fc861bfeb894cf2d6b7662505497ef31c0f489b742db24ee3310826916.
//
// Solidity: event EmergencyAdminUpdated(address indexed newAddress)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderFilterer) ParseEmergencyAdminUpdated(log types.Log) (*LendingPoolAddressesProviderEmergencyAdminUpdated, error) {
	event := new(LendingPoolAddressesProviderEmergencyAdminUpdated)
	if err := _LendingPoolAddressesProvider.contract.UnpackLog(event, "EmergencyAdminUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolAddressesProviderLendingPoolCollateralManagerUpdatedIterator is returned from FilterLendingPoolCollateralManagerUpdated and is used to iterate over the raw logs and unpacked data for LendingPoolCollateralManagerUpdated events raised by the LendingPoolAddressesProvider contract.
type LendingPoolAddressesProviderLendingPoolCollateralManagerUpdatedIterator struct {
	Event *LendingPoolAddressesProviderLendingPoolCollateralManagerUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolAddressesProviderLendingPoolCollateralManagerUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolAddressesProviderLendingPoolCollateralManagerUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolAddressesProviderLendingPoolCollateralManagerUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolAddressesProviderLendingPoolCollateralManagerUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolAddressesProviderLendingPoolCollateralManagerUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolAddressesProviderLendingPoolCollateralManagerUpdated represents a LendingPoolCollateralManagerUpdated event raised by the LendingPoolAddressesProvider contract.
type LendingPoolAddressesProviderLendingPoolCollateralManagerUpdated struct {
	NewAddress common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterLendingPoolCollateralManagerUpdated is a free log retrieval operation binding the contract event 0x991888326f0eab3df6084aadb82bee6781b5c9aa75379e8bc50ae86934541638.
//
// Solidity: event LendingPoolCollateralManagerUpdated(address indexed newAddress)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderFilterer) FilterLendingPoolCollateralManagerUpdated(opts *bind.FilterOpts, newAddress []common.Address) (*LendingPoolAddressesProviderLendingPoolCollateralManagerUpdatedIterator, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _LendingPoolAddressesProvider.contract.FilterLogs(opts, "LendingPoolCollateralManagerUpdated", newAddressRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolAddressesProviderLendingPoolCollateralManagerUpdatedIterator{contract: _LendingPoolAddressesProvider.contract, event: "LendingPoolCollateralManagerUpdated", logs: logs, sub: sub}, nil
}

// WatchLendingPoolCollateralManagerUpdated is a free log subscription operation binding the contract event 0x991888326f0eab3df6084aadb82bee6781b5c9aa75379e8bc50ae86934541638.
//
// Solidity: event LendingPoolCollateralManagerUpdated(address indexed newAddress)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderFilterer) WatchLendingPoolCollateralManagerUpdated(opts *bind.WatchOpts, sink chan<- *LendingPoolAddressesProviderLendingPoolCollateralManagerUpdated, newAddress []common.Address) (event.Subscription, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _LendingPoolAddressesProvider.contract.WatchLogs(opts, "LendingPoolCollateralManagerUpdated", newAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolAddressesProviderLendingPoolCollateralManagerUpdated)
				if err := _LendingPoolAddressesProvider.contract.UnpackLog(event, "LendingPoolCollateralManagerUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLendingPoolCollateralManagerUpdated is a log parse operation binding the contract event 0x991888326f0eab3df6084aadb82bee6781b5c9aa75379e8bc50ae86934541638.
//
// Solidity: event LendingPoolCollateralManagerUpdated(address indexed newAddress)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderFilterer) ParseLendingPoolCollateralManagerUpdated(log types.Log) (*LendingPoolAddressesProviderLendingPoolCollateralManagerUpdated, error) {
	event := new(LendingPoolAddressesProviderLendingPoolCollateralManagerUpdated)
	if err := _LendingPoolAddressesProvider.contract.UnpackLog(event, "LendingPoolCollateralManagerUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolAddressesProviderLendingPoolConfiguratorUpdatedIterator is returned from FilterLendingPoolConfiguratorUpdated and is used to iterate over the raw logs and unpacked data for LendingPoolConfiguratorUpdated events raised by the LendingPoolAddressesProvider contract.
type LendingPoolAddressesProviderLendingPoolConfiguratorUpdatedIterator struct {
	Event *LendingPoolAddressesProviderLendingPoolConfiguratorUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolAddressesProviderLendingPoolConfiguratorUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolAddressesProviderLendingPoolConfiguratorUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolAddressesProviderLendingPoolConfiguratorUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolAddressesProviderLendingPoolConfiguratorUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolAddressesProviderLendingPoolConfiguratorUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolAddressesProviderLendingPoolConfiguratorUpdated represents a LendingPoolConfiguratorUpdated event raised by the LendingPoolAddressesProvider contract.
type LendingPoolAddressesProviderLendingPoolConfiguratorUpdated struct {
	NewAddress common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterLendingPoolConfiguratorUpdated is a free log retrieval operation binding the contract event 0xdfabe479bad36782fb1e77fbfddd4e382671713527e4786cfc93a022ae763729.
//
// Solidity: event LendingPoolConfiguratorUpdated(address indexed newAddress)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderFilterer) FilterLendingPoolConfiguratorUpdated(opts *bind.FilterOpts, newAddress []common.Address) (*LendingPoolAddressesProviderLendingPoolConfiguratorUpdatedIterator, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _LendingPoolAddressesProvider.contract.FilterLogs(opts, "LendingPoolConfiguratorUpdated", newAddressRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolAddressesProviderLendingPoolConfiguratorUpdatedIterator{contract: _LendingPoolAddressesProvider.contract, event: "LendingPoolConfiguratorUpdated", logs: logs, sub: sub}, nil
}

// WatchLendingPoolConfiguratorUpdated is a free log subscription operation binding the contract event 0xdfabe479bad36782fb1e77fbfddd4e382671713527e4786cfc93a022ae763729.
//
// Solidity: event LendingPoolConfiguratorUpdated(address indexed newAddress)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderFilterer) WatchLendingPoolConfiguratorUpdated(opts *bind.WatchOpts, sink chan<- *LendingPoolAddressesProviderLendingPoolConfiguratorUpdated, newAddress []common.Address) (event.Subscription, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _LendingPoolAddressesProvider.contract.WatchLogs(opts, "LendingPoolConfiguratorUpdated", newAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolAddressesProviderLendingPoolConfiguratorUpdated)
				if err := _LendingPoolAddressesProvider.contract.UnpackLog(event, "LendingPoolConfiguratorUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLendingPoolConfiguratorUpdated is a log parse operation binding the contract event 0xdfabe479bad36782fb1e77fbfddd4e382671713527e4786cfc93a022ae763729.
//
// Solidity: event LendingPoolConfiguratorUpdated(address indexed newAddress)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderFilterer) ParseLendingPoolConfiguratorUpdated(log types.Log) (*LendingPoolAddressesProviderLendingPoolConfiguratorUpdated, error) {
	event := new(LendingPoolAddressesProviderLendingPoolConfiguratorUpdated)
	if err := _LendingPoolAddressesProvider.contract.UnpackLog(event, "LendingPoolConfiguratorUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolAddressesProviderLendingPoolUpdatedIterator is returned from FilterLendingPoolUpdated and is used to iterate over the raw logs and unpacked data for LendingPoolUpdated events raised by the LendingPoolAddressesProvider contract.
type LendingPoolAddressesProviderLendingPoolUpdatedIterator struct {
	Event *LendingPoolAddressesProviderLendingPoolUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolAddressesProviderLendingPoolUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolAddressesProviderLendingPoolUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolAddressesProviderLendingPoolUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolAddressesProviderLendingPoolUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolAddressesProviderLendingPoolUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolAddressesProviderLendingPoolUpdated represents a LendingPoolUpdated event raised by the LendingPoolAddressesProvider contract.
type LendingPoolAddressesProviderLendingPoolUpdated struct {
	NewAddress common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterLendingPoolUpdated is a free log retrieval operation binding the contract event 0xc4e6c6cdf28d0edbd8bcf071d724d33cc2e7a30be7d06443925656e9cb492aa4.
//
// Solidity: event LendingPoolUpdated(address indexed newAddress)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderFilterer) FilterLendingPoolUpdated(opts *bind.FilterOpts, newAddress []common.Address) (*LendingPoolAddressesProviderLendingPoolUpdatedIterator, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _LendingPoolAddressesProvider.contract.FilterLogs(opts, "LendingPoolUpdated", newAddressRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolAddressesProviderLendingPoolUpdatedIterator{contract: _LendingPoolAddressesProvider.contract, event: "LendingPoolUpdated", logs: logs, sub: sub}, nil
}

// WatchLendingPoolUpdated is a free log subscription operation binding the contract event 0xc4e6c6cdf28d0edbd8bcf071d724d33cc2e7a30be7d06443925656e9cb492aa4.
//
// Solidity: event LendingPoolUpdated(address indexed newAddress)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderFilterer) WatchLendingPoolUpdated(opts *bind.WatchOpts, sink chan<- *LendingPoolAddressesProviderLendingPoolUpdated, newAddress []common.Address) (event.Subscription, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _LendingPoolAddressesProvider.contract.WatchLogs(opts, "LendingPoolUpdated", newAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolAddressesProviderLendingPoolUpdated)
				if err := _LendingPoolAddressesProvider.contract.UnpackLog(event, "LendingPoolUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLendingPoolUpdated is a log parse operation binding the contract event 0xc4e6c6cdf28d0edbd8bcf071d724d33cc2e7a30be7d06443925656e9cb492aa4.
//
// Solidity: event LendingPoolUpdated(address indexed newAddress)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderFilterer) ParseLendingPoolUpdated(log types.Log) (*LendingPoolAddressesProviderLendingPoolUpdated, error) {
	event := new(LendingPoolAddressesProviderLendingPoolUpdated)
	if err := _LendingPoolAddressesProvider.contract.UnpackLog(event, "LendingPoolUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolAddressesProviderLendingRateOracleUpdatedIterator is returned from FilterLendingRateOracleUpdated and is used to iterate over the raw logs and unpacked data for LendingRateOracleUpdated events raised by the LendingPoolAddressesProvider contract.
type LendingPoolAddressesProviderLendingRateOracleUpdatedIterator struct {
	Event *LendingPoolAddressesProviderLendingRateOracleUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolAddressesProviderLendingRateOracleUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolAddressesProviderLendingRateOracleUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolAddressesProviderLendingRateOracleUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolAddressesProviderLendingRateOracleUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolAddressesProviderLendingRateOracleUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolAddressesProviderLendingRateOracleUpdated represents a LendingRateOracleUpdated event raised by the LendingPoolAddressesProvider contract.
type LendingPoolAddressesProviderLendingRateOracleUpdated struct {
	NewAddress common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterLendingRateOracleUpdated is a free log retrieval operation binding the contract event 0x5c29179aba6942020a8a2d38f65de02fb6b7f784e7f049ed3a3cab97621859b5.
//
// Solidity: event LendingRateOracleUpdated(address indexed newAddress)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderFilterer) FilterLendingRateOracleUpdated(opts *bind.FilterOpts, newAddress []common.Address) (*LendingPoolAddressesProviderLendingRateOracleUpdatedIterator, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _LendingPoolAddressesProvider.contract.FilterLogs(opts, "LendingRateOracleUpdated", newAddressRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolAddressesProviderLendingRateOracleUpdatedIterator{contract: _LendingPoolAddressesProvider.contract, event: "LendingRateOracleUpdated", logs: logs, sub: sub}, nil
}

// WatchLendingRateOracleUpdated is a free log subscription operation binding the contract event 0x5c29179aba6942020a8a2d38f65de02fb6b7f784e7f049ed3a3cab97621859b5.
//
// Solidity: event LendingRateOracleUpdated(address indexed newAddress)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderFilterer) WatchLendingRateOracleUpdated(opts *bind.WatchOpts, sink chan<- *LendingPoolAddressesProviderLendingRateOracleUpdated, newAddress []common.Address) (event.Subscription, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _LendingPoolAddressesProvider.contract.WatchLogs(opts, "LendingRateOracleUpdated", newAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolAddressesProviderLendingRateOracleUpdated)
				if err := _LendingPoolAddressesProvider.contract.UnpackLog(event, "LendingRateOracleUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLendingRateOracleUpdated is a log parse operation binding the contract event 0x5c29179aba6942020a8a2d38f65de02fb6b7f784e7f049ed3a3cab97621859b5.
//
// Solidity: event LendingRateOracleUpdated(address indexed newAddress)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderFilterer) ParseLendingRateOracleUpdated(log types.Log) (*LendingPoolAddressesProviderLendingRateOracleUpdated, error) {
	event := new(LendingPoolAddressesProviderLendingRateOracleUpdated)
	if err := _LendingPoolAddressesProvider.contract.UnpackLog(event, "LendingRateOracleUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolAddressesProviderMarketIdSetIterator is returned from FilterMarketIdSet and is used to iterate over the raw logs and unpacked data for MarketIdSet events raised by the LendingPoolAddressesProvider contract.
type LendingPoolAddressesProviderMarketIdSetIterator struct {
	Event *LendingPoolAddressesProviderMarketIdSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolAddressesProviderMarketIdSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolAddressesProviderMarketIdSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolAddressesProviderMarketIdSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolAddressesProviderMarketIdSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolAddressesProviderMarketIdSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolAddressesProviderMarketIdSet represents a MarketIdSet event raised by the LendingPoolAddressesProvider contract.
type LendingPoolAddressesProviderMarketIdSet struct {
	NewMarketId string
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterMarketIdSet is a free log retrieval operation binding the contract event 0x5e667c32fd847cf8bce48ab3400175cbf107bdc82b2dea62e3364909dfaee799.
//
// Solidity: event MarketIdSet(string newMarketId)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderFilterer) FilterMarketIdSet(opts *bind.FilterOpts) (*LendingPoolAddressesProviderMarketIdSetIterator, error) {

	logs, sub, err := _LendingPoolAddressesProvider.contract.FilterLogs(opts, "MarketIdSet")
	if err != nil {
		return nil, err
	}
	return &LendingPoolAddressesProviderMarketIdSetIterator{contract: _LendingPoolAddressesProvider.contract, event: "MarketIdSet", logs: logs, sub: sub}, nil
}

// WatchMarketIdSet is a free log subscription operation binding the contract event 0x5e667c32fd847cf8bce48ab3400175cbf107bdc82b2dea62e3364909dfaee799.
//
// Solidity: event MarketIdSet(string newMarketId)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderFilterer) WatchMarketIdSet(opts *bind.WatchOpts, sink chan<- *LendingPoolAddressesProviderMarketIdSet) (event.Subscription, error) {

	logs, sub, err := _LendingPoolAddressesProvider.contract.WatchLogs(opts, "MarketIdSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolAddressesProviderMarketIdSet)
				if err := _LendingPoolAddressesProvider.contract.UnpackLog(event, "MarketIdSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMarketIdSet is a log parse operation binding the contract event 0x5e667c32fd847cf8bce48ab3400175cbf107bdc82b2dea62e3364909dfaee799.
//
// Solidity: event MarketIdSet(string newMarketId)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderFilterer) ParseMarketIdSet(log types.Log) (*LendingPoolAddressesProviderMarketIdSet, error) {
	event := new(LendingPoolAddressesProviderMarketIdSet)
	if err := _LendingPoolAddressesProvider.contract.UnpackLog(event, "MarketIdSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolAddressesProviderOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the LendingPoolAddressesProvider contract.
type LendingPoolAddressesProviderOwnershipTransferredIterator struct {
	Event *LendingPoolAddressesProviderOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolAddressesProviderOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolAddressesProviderOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolAddressesProviderOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolAddressesProviderOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolAddressesProviderOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolAddressesProviderOwnershipTransferred represents a OwnershipTransferred event raised by the LendingPoolAddressesProvider contract.
type LendingPoolAddressesProviderOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*LendingPoolAddressesProviderOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _LendingPoolAddressesProvider.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolAddressesProviderOwnershipTransferredIterator{contract: _LendingPoolAddressesProvider.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *LendingPoolAddressesProviderOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _LendingPoolAddressesProvider.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolAddressesProviderOwnershipTransferred)
				if err := _LendingPoolAddressesProvider.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderFilterer) ParseOwnershipTransferred(log types.Log) (*LendingPoolAddressesProviderOwnershipTransferred, error) {
	event := new(LendingPoolAddressesProviderOwnershipTransferred)
	if err := _LendingPoolAddressesProvider.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolAddressesProviderPriceOracleUpdatedIterator is returned from FilterPriceOracleUpdated and is used to iterate over the raw logs and unpacked data for PriceOracleUpdated events raised by the LendingPoolAddressesProvider contract.
type LendingPoolAddressesProviderPriceOracleUpdatedIterator struct {
	Event *LendingPoolAddressesProviderPriceOracleUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolAddressesProviderPriceOracleUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolAddressesProviderPriceOracleUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolAddressesProviderPriceOracleUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolAddressesProviderPriceOracleUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolAddressesProviderPriceOracleUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolAddressesProviderPriceOracleUpdated represents a PriceOracleUpdated event raised by the LendingPoolAddressesProvider contract.
type LendingPoolAddressesProviderPriceOracleUpdated struct {
	NewAddress common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterPriceOracleUpdated is a free log retrieval operation binding the contract event 0xefe8ab924ca486283a79dc604baa67add51afb82af1db8ac386ebbba643cdffd.
//
// Solidity: event PriceOracleUpdated(address indexed newAddress)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderFilterer) FilterPriceOracleUpdated(opts *bind.FilterOpts, newAddress []common.Address) (*LendingPoolAddressesProviderPriceOracleUpdatedIterator, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _LendingPoolAddressesProvider.contract.FilterLogs(opts, "PriceOracleUpdated", newAddressRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolAddressesProviderPriceOracleUpdatedIterator{contract: _LendingPoolAddressesProvider.contract, event: "PriceOracleUpdated", logs: logs, sub: sub}, nil
}

// WatchPriceOracleUpdated is a free log subscription operation binding the contract event 0xefe8ab924ca486283a79dc604baa67add51afb82af1db8ac386ebbba643cdffd.
//
// Solidity: event PriceOracleUpdated(address indexed newAddress)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderFilterer) WatchPriceOracleUpdated(opts *bind.WatchOpts, sink chan<- *LendingPoolAddressesProviderPriceOracleUpdated, newAddress []common.Address) (event.Subscription, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _LendingPoolAddressesProvider.contract.WatchLogs(opts, "PriceOracleUpdated", newAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolAddressesProviderPriceOracleUpdated)
				if err := _LendingPoolAddressesProvider.contract.UnpackLog(event, "PriceOracleUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePriceOracleUpdated is a log parse operation binding the contract event 0xefe8ab924ca486283a79dc604baa67add51afb82af1db8ac386ebbba643cdffd.
//
// Solidity: event PriceOracleUpdated(address indexed newAddress)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderFilterer) ParsePriceOracleUpdated(log types.Log) (*LendingPoolAddressesProviderPriceOracleUpdated, error) {
	event := new(LendingPoolAddressesProviderPriceOracleUpdated)
	if err := _LendingPoolAddressesProvider.contract.UnpackLog(event, "PriceOracleUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolAddressesProviderProxyCreatedIterator is returned from FilterProxyCreated and is used to iterate over the raw logs and unpacked data for ProxyCreated events raised by the LendingPoolAddressesProvider contract.
type LendingPoolAddressesProviderProxyCreatedIterator struct {
	Event *LendingPoolAddressesProviderProxyCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolAddressesProviderProxyCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolAddressesProviderProxyCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolAddressesProviderProxyCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolAddressesProviderProxyCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolAddressesProviderProxyCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolAddressesProviderProxyCreated represents a ProxyCreated event raised by the LendingPoolAddressesProvider contract.
type LendingPoolAddressesProviderProxyCreated struct {
	Id         [32]byte
	NewAddress common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterProxyCreated is a free log retrieval operation binding the contract event 0x1eb35cb4b5bbb23d152f3b4016a5a46c37a07ae930ed0956aba951e231142438.
//
// Solidity: event ProxyCreated(bytes32 id, address indexed newAddress)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderFilterer) FilterProxyCreated(opts *bind.FilterOpts, newAddress []common.Address) (*LendingPoolAddressesProviderProxyCreatedIterator, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _LendingPoolAddressesProvider.contract.FilterLogs(opts, "ProxyCreated", newAddressRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolAddressesProviderProxyCreatedIterator{contract: _LendingPoolAddressesProvider.contract, event: "ProxyCreated", logs: logs, sub: sub}, nil
}

// WatchProxyCreated is a free log subscription operation binding the contract event 0x1eb35cb4b5bbb23d152f3b4016a5a46c37a07ae930ed0956aba951e231142438.
//
// Solidity: event ProxyCreated(bytes32 id, address indexed newAddress)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderFilterer) WatchProxyCreated(opts *bind.WatchOpts, sink chan<- *LendingPoolAddressesProviderProxyCreated, newAddress []common.Address) (event.Subscription, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _LendingPoolAddressesProvider.contract.WatchLogs(opts, "ProxyCreated", newAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolAddressesProviderProxyCreated)
				if err := _LendingPoolAddressesProvider.contract.UnpackLog(event, "ProxyCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProxyCreated is a log parse operation binding the contract event 0x1eb35cb4b5bbb23d152f3b4016a5a46c37a07ae930ed0956aba951e231142438.
//
// Solidity: event ProxyCreated(bytes32 id, address indexed newAddress)
func (_LendingPoolAddressesProvider *LendingPoolAddressesProviderFilterer) ParseProxyCreated(log types.Log) (*LendingPoolAddressesProviderProxyCreated, error) {
	event := new(LendingPoolAddressesProviderProxyCreated)
	if err := _LendingPoolAddressesProvider.contract.UnpackLog(event, "ProxyCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolAddressesProviderRegistryABI is the input ABI used to generate the binding from.
const LendingPoolAddressesProviderRegistryABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"AddressesProviderRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"AddressesProviderUnregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressesProvider\",\"type\":\"address\"}],\"name\":\"getAddressesProviderIdByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddressesProvidersList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"registerAddressesProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"unregisterAddressesProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// LendingPoolAddressesProviderRegistryBin is the compiled bytecode used for deploying new contracts.
var LendingPoolAddressesProviderRegistryBin = "0x608060405234801561001057600080fd5b50600061001b61006a565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35061006e565b3390565b6108698061007d6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b1461010a578063d0267be71461012e578063d258191e14610166578063f2fde38b146101925761007d565b80630de2670714610082578063365ccbbf146100aa578063715018a614610102575b600080fd5b6100a86004803603602081101561009857600080fd5b50356001600160a01b03166101b8565b005b6100b2610322565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156100ee5781810151838201526020016100d6565b505050509050019250505060405180910390f35b6100a861046b565b61011261050d565b604080516001600160a01b039092168252519081900360200190f35b6101546004803603602081101561014457600080fd5b50356001600160a01b031661051c565b60408051918252519081900360200190f35b6100a86004803603604081101561017c57600080fd5b506001600160a01b038135169060200135610537565b6100a8600480360360208110156101a857600080fd5b50356001600160a01b0316610651565b6101c0610749565b6000546001600160a01b03908116911614610210576040805162461bcd60e51b81526020600482018190526024820152600080516020610814833981519152604482015290519081900360640190fd5b600060016000836001600160a01b03166001600160a01b03168152602001908152602001600020541160405180604001604052806002815260200161343160f01b815250906102dd5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156102a257818101518382015260200161028a565b50505050905090810190601f1680156102cf5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506001600160a01b038116600081815260016020526040808220829055517f851e5971c053e6b76e3a1e0b8ffa81430df738007fad86e195c409a757faccd29190a250565b606080600280548060200260200160405190810160405280929190818152602001828054801561037b57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161035d575b5050505050905060008151905060608167ffffffffffffffff811180156103a157600080fd5b506040519080825280602002602001820160405280156103cb578160200160208202803683370190505b50905060005b82811015610463576000600160008684815181106103eb57fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054111561045b5783818151811061042657fe5b602002602001015182828151811061043a57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b6001016103d1565b509250505090565b610473610749565b6000546001600160a01b039081169116146104c3576040805162461bcd60e51b81526020600482018190526024820152600080516020610814833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b6001600160a01b031660009081526001602052604090205490565b61053f610749565b6000546001600160a01b0390811691161461058f576040805162461bcd60e51b81526020600482018190526024820152600080516020610814833981519152604482015290519081900360640190fd5b6040805180820190915260028152611b9960f11b6020820152816105f45760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102a257818101518382015260200161028a565b506001600160a01b03821660009081526001602052604090208190556106198261074d565b6040516001600160a01b038316907f2db38786c10176b033a1608361716b0ca992e3af55dc05b6dc710969790beeda90600090a25050565b610659610749565b6000546001600160a01b039081169116146106a9576040805162461bcd60e51b81526020600482018190526024820152600080516020610814833981519152604482015290519081900360640190fd5b6001600160a01b0381166106ee5760405162461bcd60e51b81526004018080602001828103825260268152602001806107ee6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b60025460005b8181101561079c57826001600160a01b03166002828154811061077257fe5b6000918252602090912001546001600160a01b031614156107945750506107ea565b600101610753565b5050600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b0383161790555b5056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220b2a1d7c1d193b33040bb6701d463da22885fb9ad4d6b6e4e11246b07a61d1f9364736f6c634300060c0033"

// DeployLendingPoolAddressesProviderRegistry deploys a new Ethereum contract, binding an instance of LendingPoolAddressesProviderRegistry to it.
func DeployLendingPoolAddressesProviderRegistry(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *LendingPoolAddressesProviderRegistry, error) {
	parsed, err := abi.JSON(strings.NewReader(LendingPoolAddressesProviderRegistryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(LendingPoolAddressesProviderRegistryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LendingPoolAddressesProviderRegistry{LendingPoolAddressesProviderRegistryCaller: LendingPoolAddressesProviderRegistryCaller{contract: contract}, LendingPoolAddressesProviderRegistryTransactor: LendingPoolAddressesProviderRegistryTransactor{contract: contract}, LendingPoolAddressesProviderRegistryFilterer: LendingPoolAddressesProviderRegistryFilterer{contract: contract}}, nil
}

// LendingPoolAddressesProviderRegistry is an auto generated Go binding around an Ethereum contract.
type LendingPoolAddressesProviderRegistry struct {
	LendingPoolAddressesProviderRegistryCaller     // Read-only binding to the contract
	LendingPoolAddressesProviderRegistryTransactor // Write-only binding to the contract
	LendingPoolAddressesProviderRegistryFilterer   // Log filterer for contract events
}

// LendingPoolAddressesProviderRegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type LendingPoolAddressesProviderRegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LendingPoolAddressesProviderRegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LendingPoolAddressesProviderRegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LendingPoolAddressesProviderRegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LendingPoolAddressesProviderRegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LendingPoolAddressesProviderRegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LendingPoolAddressesProviderRegistrySession struct {
	Contract     *LendingPoolAddressesProviderRegistry // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                         // Call options to use throughout this session
	TransactOpts bind.TransactOpts                     // Transaction auth options to use throughout this session
}

// LendingPoolAddressesProviderRegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LendingPoolAddressesProviderRegistryCallerSession struct {
	Contract *LendingPoolAddressesProviderRegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                               // Call options to use throughout this session
}

// LendingPoolAddressesProviderRegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LendingPoolAddressesProviderRegistryTransactorSession struct {
	Contract     *LendingPoolAddressesProviderRegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                               // Transaction auth options to use throughout this session
}

// LendingPoolAddressesProviderRegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type LendingPoolAddressesProviderRegistryRaw struct {
	Contract *LendingPoolAddressesProviderRegistry // Generic contract binding to access the raw methods on
}

// LendingPoolAddressesProviderRegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LendingPoolAddressesProviderRegistryCallerRaw struct {
	Contract *LendingPoolAddressesProviderRegistryCaller // Generic read-only contract binding to access the raw methods on
}

// LendingPoolAddressesProviderRegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LendingPoolAddressesProviderRegistryTransactorRaw struct {
	Contract *LendingPoolAddressesProviderRegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLendingPoolAddressesProviderRegistry creates a new instance of LendingPoolAddressesProviderRegistry, bound to a specific deployed contract.
func NewLendingPoolAddressesProviderRegistry(address common.Address, backend bind.ContractBackend) (*LendingPoolAddressesProviderRegistry, error) {
	contract, err := bindLendingPoolAddressesProviderRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LendingPoolAddressesProviderRegistry{LendingPoolAddressesProviderRegistryCaller: LendingPoolAddressesProviderRegistryCaller{contract: contract}, LendingPoolAddressesProviderRegistryTransactor: LendingPoolAddressesProviderRegistryTransactor{contract: contract}, LendingPoolAddressesProviderRegistryFilterer: LendingPoolAddressesProviderRegistryFilterer{contract: contract}}, nil
}

// NewLendingPoolAddressesProviderRegistryCaller creates a new read-only instance of LendingPoolAddressesProviderRegistry, bound to a specific deployed contract.
func NewLendingPoolAddressesProviderRegistryCaller(address common.Address, caller bind.ContractCaller) (*LendingPoolAddressesProviderRegistryCaller, error) {
	contract, err := bindLendingPoolAddressesProviderRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LendingPoolAddressesProviderRegistryCaller{contract: contract}, nil
}

// NewLendingPoolAddressesProviderRegistryTransactor creates a new write-only instance of LendingPoolAddressesProviderRegistry, bound to a specific deployed contract.
func NewLendingPoolAddressesProviderRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*LendingPoolAddressesProviderRegistryTransactor, error) {
	contract, err := bindLendingPoolAddressesProviderRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LendingPoolAddressesProviderRegistryTransactor{contract: contract}, nil
}

// NewLendingPoolAddressesProviderRegistryFilterer creates a new log filterer instance of LendingPoolAddressesProviderRegistry, bound to a specific deployed contract.
func NewLendingPoolAddressesProviderRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*LendingPoolAddressesProviderRegistryFilterer, error) {
	contract, err := bindLendingPoolAddressesProviderRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LendingPoolAddressesProviderRegistryFilterer{contract: contract}, nil
}

// bindLendingPoolAddressesProviderRegistry binds a generic wrapper to an already deployed contract.
func bindLendingPoolAddressesProviderRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(LendingPoolAddressesProviderRegistryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LendingPoolAddressesProviderRegistry *LendingPoolAddressesProviderRegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LendingPoolAddressesProviderRegistry.Contract.LendingPoolAddressesProviderRegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LendingPoolAddressesProviderRegistry *LendingPoolAddressesProviderRegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LendingPoolAddressesProviderRegistry.Contract.LendingPoolAddressesProviderRegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LendingPoolAddressesProviderRegistry *LendingPoolAddressesProviderRegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LendingPoolAddressesProviderRegistry.Contract.LendingPoolAddressesProviderRegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LendingPoolAddressesProviderRegistry *LendingPoolAddressesProviderRegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LendingPoolAddressesProviderRegistry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LendingPoolAddressesProviderRegistry *LendingPoolAddressesProviderRegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LendingPoolAddressesProviderRegistry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LendingPoolAddressesProviderRegistry *LendingPoolAddressesProviderRegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LendingPoolAddressesProviderRegistry.Contract.contract.Transact(opts, method, params...)
}

// GetAddressesProviderIdByAddress is a free data retrieval call binding the contract method 0xd0267be7.
//
// Solidity: function getAddressesProviderIdByAddress(address addressesProvider) view returns(uint256)
func (_LendingPoolAddressesProviderRegistry *LendingPoolAddressesProviderRegistryCaller) GetAddressesProviderIdByAddress(opts *bind.CallOpts, addressesProvider common.Address) (*big.Int, error) {
	var out []interface{}
	err := _LendingPoolAddressesProviderRegistry.contract.Call(opts, &out, "getAddressesProviderIdByAddress", addressesProvider)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAddressesProviderIdByAddress is a free data retrieval call binding the contract method 0xd0267be7.
//
// Solidity: function getAddressesProviderIdByAddress(address addressesProvider) view returns(uint256)
func (_LendingPoolAddressesProviderRegistry *LendingPoolAddressesProviderRegistrySession) GetAddressesProviderIdByAddress(addressesProvider common.Address) (*big.Int, error) {
	return _LendingPoolAddressesProviderRegistry.Contract.GetAddressesProviderIdByAddress(&_LendingPoolAddressesProviderRegistry.CallOpts, addressesProvider)
}

// GetAddressesProviderIdByAddress is a free data retrieval call binding the contract method 0xd0267be7.
//
// Solidity: function getAddressesProviderIdByAddress(address addressesProvider) view returns(uint256)
func (_LendingPoolAddressesProviderRegistry *LendingPoolAddressesProviderRegistryCallerSession) GetAddressesProviderIdByAddress(addressesProvider common.Address) (*big.Int, error) {
	return _LendingPoolAddressesProviderRegistry.Contract.GetAddressesProviderIdByAddress(&_LendingPoolAddressesProviderRegistry.CallOpts, addressesProvider)
}

// GetAddressesProvidersList is a free data retrieval call binding the contract method 0x365ccbbf.
//
// Solidity: function getAddressesProvidersList() view returns(address[])
func (_LendingPoolAddressesProviderRegistry *LendingPoolAddressesProviderRegistryCaller) GetAddressesProvidersList(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _LendingPoolAddressesProviderRegistry.contract.Call(opts, &out, "getAddressesProvidersList")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetAddressesProvidersList is a free data retrieval call binding the contract method 0x365ccbbf.
//
// Solidity: function getAddressesProvidersList() view returns(address[])
func (_LendingPoolAddressesProviderRegistry *LendingPoolAddressesProviderRegistrySession) GetAddressesProvidersList() ([]common.Address, error) {
	return _LendingPoolAddressesProviderRegistry.Contract.GetAddressesProvidersList(&_LendingPoolAddressesProviderRegistry.CallOpts)
}

// GetAddressesProvidersList is a free data retrieval call binding the contract method 0x365ccbbf.
//
// Solidity: function getAddressesProvidersList() view returns(address[])
func (_LendingPoolAddressesProviderRegistry *LendingPoolAddressesProviderRegistryCallerSession) GetAddressesProvidersList() ([]common.Address, error) {
	return _LendingPoolAddressesProviderRegistry.Contract.GetAddressesProvidersList(&_LendingPoolAddressesProviderRegistry.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_LendingPoolAddressesProviderRegistry *LendingPoolAddressesProviderRegistryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LendingPoolAddressesProviderRegistry.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_LendingPoolAddressesProviderRegistry *LendingPoolAddressesProviderRegistrySession) Owner() (common.Address, error) {
	return _LendingPoolAddressesProviderRegistry.Contract.Owner(&_LendingPoolAddressesProviderRegistry.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_LendingPoolAddressesProviderRegistry *LendingPoolAddressesProviderRegistryCallerSession) Owner() (common.Address, error) {
	return _LendingPoolAddressesProviderRegistry.Contract.Owner(&_LendingPoolAddressesProviderRegistry.CallOpts)
}

// RegisterAddressesProvider is a paid mutator transaction binding the contract method 0xd258191e.
//
// Solidity: function registerAddressesProvider(address provider, uint256 id) returns()
func (_LendingPoolAddressesProviderRegistry *LendingPoolAddressesProviderRegistryTransactor) RegisterAddressesProvider(opts *bind.TransactOpts, provider common.Address, id *big.Int) (*types.Transaction, error) {
	return _LendingPoolAddressesProviderRegistry.contract.Transact(opts, "registerAddressesProvider", provider, id)
}

// RegisterAddressesProvider is a paid mutator transaction binding the contract method 0xd258191e.
//
// Solidity: function registerAddressesProvider(address provider, uint256 id) returns()
func (_LendingPoolAddressesProviderRegistry *LendingPoolAddressesProviderRegistrySession) RegisterAddressesProvider(provider common.Address, id *big.Int) (*types.Transaction, error) {
	return _LendingPoolAddressesProviderRegistry.Contract.RegisterAddressesProvider(&_LendingPoolAddressesProviderRegistry.TransactOpts, provider, id)
}

// RegisterAddressesProvider is a paid mutator transaction binding the contract method 0xd258191e.
//
// Solidity: function registerAddressesProvider(address provider, uint256 id) returns()
func (_LendingPoolAddressesProviderRegistry *LendingPoolAddressesProviderRegistryTransactorSession) RegisterAddressesProvider(provider common.Address, id *big.Int) (*types.Transaction, error) {
	return _LendingPoolAddressesProviderRegistry.Contract.RegisterAddressesProvider(&_LendingPoolAddressesProviderRegistry.TransactOpts, provider, id)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_LendingPoolAddressesProviderRegistry *LendingPoolAddressesProviderRegistryTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LendingPoolAddressesProviderRegistry.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_LendingPoolAddressesProviderRegistry *LendingPoolAddressesProviderRegistrySession) RenounceOwnership() (*types.Transaction, error) {
	return _LendingPoolAddressesProviderRegistry.Contract.RenounceOwnership(&_LendingPoolAddressesProviderRegistry.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_LendingPoolAddressesProviderRegistry *LendingPoolAddressesProviderRegistryTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _LendingPoolAddressesProviderRegistry.Contract.RenounceOwnership(&_LendingPoolAddressesProviderRegistry.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LendingPoolAddressesProviderRegistry *LendingPoolAddressesProviderRegistryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _LendingPoolAddressesProviderRegistry.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LendingPoolAddressesProviderRegistry *LendingPoolAddressesProviderRegistrySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _LendingPoolAddressesProviderRegistry.Contract.TransferOwnership(&_LendingPoolAddressesProviderRegistry.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LendingPoolAddressesProviderRegistry *LendingPoolAddressesProviderRegistryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _LendingPoolAddressesProviderRegistry.Contract.TransferOwnership(&_LendingPoolAddressesProviderRegistry.TransactOpts, newOwner)
}

// UnregisterAddressesProvider is a paid mutator transaction binding the contract method 0x0de26707.
//
// Solidity: function unregisterAddressesProvider(address provider) returns()
func (_LendingPoolAddressesProviderRegistry *LendingPoolAddressesProviderRegistryTransactor) UnregisterAddressesProvider(opts *bind.TransactOpts, provider common.Address) (*types.Transaction, error) {
	return _LendingPoolAddressesProviderRegistry.contract.Transact(opts, "unregisterAddressesProvider", provider)
}

// UnregisterAddressesProvider is a paid mutator transaction binding the contract method 0x0de26707.
//
// Solidity: function unregisterAddressesProvider(address provider) returns()
func (_LendingPoolAddressesProviderRegistry *LendingPoolAddressesProviderRegistrySession) UnregisterAddressesProvider(provider common.Address) (*types.Transaction, error) {
	return _LendingPoolAddressesProviderRegistry.Contract.UnregisterAddressesProvider(&_LendingPoolAddressesProviderRegistry.TransactOpts, provider)
}

// UnregisterAddressesProvider is a paid mutator transaction binding the contract method 0x0de26707.
//
// Solidity: function unregisterAddressesProvider(address provider) returns()
func (_LendingPoolAddressesProviderRegistry *LendingPoolAddressesProviderRegistryTransactorSession) UnregisterAddressesProvider(provider common.Address) (*types.Transaction, error) {
	return _LendingPoolAddressesProviderRegistry.Contract.UnregisterAddressesProvider(&_LendingPoolAddressesProviderRegistry.TransactOpts, provider)
}

// LendingPoolAddressesProviderRegistryAddressesProviderRegisteredIterator is returned from FilterAddressesProviderRegistered and is used to iterate over the raw logs and unpacked data for AddressesProviderRegistered events raised by the LendingPoolAddressesProviderRegistry contract.
type LendingPoolAddressesProviderRegistryAddressesProviderRegisteredIterator struct {
	Event *LendingPoolAddressesProviderRegistryAddressesProviderRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolAddressesProviderRegistryAddressesProviderRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolAddressesProviderRegistryAddressesProviderRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolAddressesProviderRegistryAddressesProviderRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolAddressesProviderRegistryAddressesProviderRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolAddressesProviderRegistryAddressesProviderRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolAddressesProviderRegistryAddressesProviderRegistered represents a AddressesProviderRegistered event raised by the LendingPoolAddressesProviderRegistry contract.
type LendingPoolAddressesProviderRegistryAddressesProviderRegistered struct {
	NewAddress common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterAddressesProviderRegistered is a free log retrieval operation binding the contract event 0x2db38786c10176b033a1608361716b0ca992e3af55dc05b6dc710969790beeda.
//
// Solidity: event AddressesProviderRegistered(address indexed newAddress)
func (_LendingPoolAddressesProviderRegistry *LendingPoolAddressesProviderRegistryFilterer) FilterAddressesProviderRegistered(opts *bind.FilterOpts, newAddress []common.Address) (*LendingPoolAddressesProviderRegistryAddressesProviderRegisteredIterator, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _LendingPoolAddressesProviderRegistry.contract.FilterLogs(opts, "AddressesProviderRegistered", newAddressRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolAddressesProviderRegistryAddressesProviderRegisteredIterator{contract: _LendingPoolAddressesProviderRegistry.contract, event: "AddressesProviderRegistered", logs: logs, sub: sub}, nil
}

// WatchAddressesProviderRegistered is a free log subscription operation binding the contract event 0x2db38786c10176b033a1608361716b0ca992e3af55dc05b6dc710969790beeda.
//
// Solidity: event AddressesProviderRegistered(address indexed newAddress)
func (_LendingPoolAddressesProviderRegistry *LendingPoolAddressesProviderRegistryFilterer) WatchAddressesProviderRegistered(opts *bind.WatchOpts, sink chan<- *LendingPoolAddressesProviderRegistryAddressesProviderRegistered, newAddress []common.Address) (event.Subscription, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _LendingPoolAddressesProviderRegistry.contract.WatchLogs(opts, "AddressesProviderRegistered", newAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolAddressesProviderRegistryAddressesProviderRegistered)
				if err := _LendingPoolAddressesProviderRegistry.contract.UnpackLog(event, "AddressesProviderRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddressesProviderRegistered is a log parse operation binding the contract event 0x2db38786c10176b033a1608361716b0ca992e3af55dc05b6dc710969790beeda.
//
// Solidity: event AddressesProviderRegistered(address indexed newAddress)
func (_LendingPoolAddressesProviderRegistry *LendingPoolAddressesProviderRegistryFilterer) ParseAddressesProviderRegistered(log types.Log) (*LendingPoolAddressesProviderRegistryAddressesProviderRegistered, error) {
	event := new(LendingPoolAddressesProviderRegistryAddressesProviderRegistered)
	if err := _LendingPoolAddressesProviderRegistry.contract.UnpackLog(event, "AddressesProviderRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolAddressesProviderRegistryAddressesProviderUnregisteredIterator is returned from FilterAddressesProviderUnregistered and is used to iterate over the raw logs and unpacked data for AddressesProviderUnregistered events raised by the LendingPoolAddressesProviderRegistry contract.
type LendingPoolAddressesProviderRegistryAddressesProviderUnregisteredIterator struct {
	Event *LendingPoolAddressesProviderRegistryAddressesProviderUnregistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolAddressesProviderRegistryAddressesProviderUnregisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolAddressesProviderRegistryAddressesProviderUnregistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolAddressesProviderRegistryAddressesProviderUnregistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolAddressesProviderRegistryAddressesProviderUnregisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolAddressesProviderRegistryAddressesProviderUnregisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolAddressesProviderRegistryAddressesProviderUnregistered represents a AddressesProviderUnregistered event raised by the LendingPoolAddressesProviderRegistry contract.
type LendingPoolAddressesProviderRegistryAddressesProviderUnregistered struct {
	NewAddress common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterAddressesProviderUnregistered is a free log retrieval operation binding the contract event 0x851e5971c053e6b76e3a1e0b8ffa81430df738007fad86e195c409a757faccd2.
//
// Solidity: event AddressesProviderUnregistered(address indexed newAddress)
func (_LendingPoolAddressesProviderRegistry *LendingPoolAddressesProviderRegistryFilterer) FilterAddressesProviderUnregistered(opts *bind.FilterOpts, newAddress []common.Address) (*LendingPoolAddressesProviderRegistryAddressesProviderUnregisteredIterator, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _LendingPoolAddressesProviderRegistry.contract.FilterLogs(opts, "AddressesProviderUnregistered", newAddressRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolAddressesProviderRegistryAddressesProviderUnregisteredIterator{contract: _LendingPoolAddressesProviderRegistry.contract, event: "AddressesProviderUnregistered", logs: logs, sub: sub}, nil
}

// WatchAddressesProviderUnregistered is a free log subscription operation binding the contract event 0x851e5971c053e6b76e3a1e0b8ffa81430df738007fad86e195c409a757faccd2.
//
// Solidity: event AddressesProviderUnregistered(address indexed newAddress)
func (_LendingPoolAddressesProviderRegistry *LendingPoolAddressesProviderRegistryFilterer) WatchAddressesProviderUnregistered(opts *bind.WatchOpts, sink chan<- *LendingPoolAddressesProviderRegistryAddressesProviderUnregistered, newAddress []common.Address) (event.Subscription, error) {

	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _LendingPoolAddressesProviderRegistry.contract.WatchLogs(opts, "AddressesProviderUnregistered", newAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolAddressesProviderRegistryAddressesProviderUnregistered)
				if err := _LendingPoolAddressesProviderRegistry.contract.UnpackLog(event, "AddressesProviderUnregistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddressesProviderUnregistered is a log parse operation binding the contract event 0x851e5971c053e6b76e3a1e0b8ffa81430df738007fad86e195c409a757faccd2.
//
// Solidity: event AddressesProviderUnregistered(address indexed newAddress)
func (_LendingPoolAddressesProviderRegistry *LendingPoolAddressesProviderRegistryFilterer) ParseAddressesProviderUnregistered(log types.Log) (*LendingPoolAddressesProviderRegistryAddressesProviderUnregistered, error) {
	event := new(LendingPoolAddressesProviderRegistryAddressesProviderUnregistered)
	if err := _LendingPoolAddressesProviderRegistry.contract.UnpackLog(event, "AddressesProviderUnregistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolAddressesProviderRegistryOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the LendingPoolAddressesProviderRegistry contract.
type LendingPoolAddressesProviderRegistryOwnershipTransferredIterator struct {
	Event *LendingPoolAddressesProviderRegistryOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolAddressesProviderRegistryOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolAddressesProviderRegistryOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolAddressesProviderRegistryOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolAddressesProviderRegistryOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolAddressesProviderRegistryOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolAddressesProviderRegistryOwnershipTransferred represents a OwnershipTransferred event raised by the LendingPoolAddressesProviderRegistry contract.
type LendingPoolAddressesProviderRegistryOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_LendingPoolAddressesProviderRegistry *LendingPoolAddressesProviderRegistryFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*LendingPoolAddressesProviderRegistryOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _LendingPoolAddressesProviderRegistry.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolAddressesProviderRegistryOwnershipTransferredIterator{contract: _LendingPoolAddressesProviderRegistry.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_LendingPoolAddressesProviderRegistry *LendingPoolAddressesProviderRegistryFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *LendingPoolAddressesProviderRegistryOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _LendingPoolAddressesProviderRegistry.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolAddressesProviderRegistryOwnershipTransferred)
				if err := _LendingPoolAddressesProviderRegistry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_LendingPoolAddressesProviderRegistry *LendingPoolAddressesProviderRegistryFilterer) ParseOwnershipTransferred(log types.Log) (*LendingPoolAddressesProviderRegistryOwnershipTransferred, error) {
	event := new(LendingPoolAddressesProviderRegistryOwnershipTransferred)
	if err := _LendingPoolAddressesProviderRegistry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolCollateralManagerABI is the input ABI used to generate the binding from.
const LendingPoolCollateralManagerABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"principal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtToCover\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidatedCollateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"receiveAToken\",\"type\":\"bool\"}],\"name\":\"LiquidationCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ReserveUsedAsCollateralDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ReserveUsedAsCollateralEnabled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debtToCover\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"receiveAToken\",\"type\":\"bool\"}],\"name\":\"liquidationCall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// LendingPoolCollateralManagerBin is the compiled bytecode used for deploying new contracts.
var LendingPoolCollateralManagerBin = ""

// DeployLendingPoolCollateralManager deploys a new Ethereum contract, binding an instance of LendingPoolCollateralManager to it.
func DeployLendingPoolCollateralManager(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *LendingPoolCollateralManager, error) {
	parsed, err := abi.JSON(strings.NewReader(LendingPoolCollateralManagerABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(LendingPoolCollateralManagerBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LendingPoolCollateralManager{LendingPoolCollateralManagerCaller: LendingPoolCollateralManagerCaller{contract: contract}, LendingPoolCollateralManagerTransactor: LendingPoolCollateralManagerTransactor{contract: contract}, LendingPoolCollateralManagerFilterer: LendingPoolCollateralManagerFilterer{contract: contract}}, nil
}

// LendingPoolCollateralManager is an auto generated Go binding around an Ethereum contract.
type LendingPoolCollateralManager struct {
	LendingPoolCollateralManagerCaller     // Read-only binding to the contract
	LendingPoolCollateralManagerTransactor // Write-only binding to the contract
	LendingPoolCollateralManagerFilterer   // Log filterer for contract events
}

// LendingPoolCollateralManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type LendingPoolCollateralManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LendingPoolCollateralManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LendingPoolCollateralManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LendingPoolCollateralManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LendingPoolCollateralManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LendingPoolCollateralManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LendingPoolCollateralManagerSession struct {
	Contract     *LendingPoolCollateralManager // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                 // Call options to use throughout this session
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// LendingPoolCollateralManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LendingPoolCollateralManagerCallerSession struct {
	Contract *LendingPoolCollateralManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                       // Call options to use throughout this session
}

// LendingPoolCollateralManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LendingPoolCollateralManagerTransactorSession struct {
	Contract     *LendingPoolCollateralManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                       // Transaction auth options to use throughout this session
}

// LendingPoolCollateralManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type LendingPoolCollateralManagerRaw struct {
	Contract *LendingPoolCollateralManager // Generic contract binding to access the raw methods on
}

// LendingPoolCollateralManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LendingPoolCollateralManagerCallerRaw struct {
	Contract *LendingPoolCollateralManagerCaller // Generic read-only contract binding to access the raw methods on
}

// LendingPoolCollateralManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LendingPoolCollateralManagerTransactorRaw struct {
	Contract *LendingPoolCollateralManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLendingPoolCollateralManager creates a new instance of LendingPoolCollateralManager, bound to a specific deployed contract.
func NewLendingPoolCollateralManager(address common.Address, backend bind.ContractBackend) (*LendingPoolCollateralManager, error) {
	contract, err := bindLendingPoolCollateralManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LendingPoolCollateralManager{LendingPoolCollateralManagerCaller: LendingPoolCollateralManagerCaller{contract: contract}, LendingPoolCollateralManagerTransactor: LendingPoolCollateralManagerTransactor{contract: contract}, LendingPoolCollateralManagerFilterer: LendingPoolCollateralManagerFilterer{contract: contract}}, nil
}

// NewLendingPoolCollateralManagerCaller creates a new read-only instance of LendingPoolCollateralManager, bound to a specific deployed contract.
func NewLendingPoolCollateralManagerCaller(address common.Address, caller bind.ContractCaller) (*LendingPoolCollateralManagerCaller, error) {
	contract, err := bindLendingPoolCollateralManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LendingPoolCollateralManagerCaller{contract: contract}, nil
}

// NewLendingPoolCollateralManagerTransactor creates a new write-only instance of LendingPoolCollateralManager, bound to a specific deployed contract.
func NewLendingPoolCollateralManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*LendingPoolCollateralManagerTransactor, error) {
	contract, err := bindLendingPoolCollateralManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LendingPoolCollateralManagerTransactor{contract: contract}, nil
}

// NewLendingPoolCollateralManagerFilterer creates a new log filterer instance of LendingPoolCollateralManager, bound to a specific deployed contract.
func NewLendingPoolCollateralManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*LendingPoolCollateralManagerFilterer, error) {
	contract, err := bindLendingPoolCollateralManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LendingPoolCollateralManagerFilterer{contract: contract}, nil
}

// bindLendingPoolCollateralManager binds a generic wrapper to an already deployed contract.
func bindLendingPoolCollateralManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(LendingPoolCollateralManagerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LendingPoolCollateralManager *LendingPoolCollateralManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LendingPoolCollateralManager.Contract.LendingPoolCollateralManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LendingPoolCollateralManager *LendingPoolCollateralManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LendingPoolCollateralManager.Contract.LendingPoolCollateralManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LendingPoolCollateralManager *LendingPoolCollateralManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LendingPoolCollateralManager.Contract.LendingPoolCollateralManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LendingPoolCollateralManager *LendingPoolCollateralManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LendingPoolCollateralManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LendingPoolCollateralManager *LendingPoolCollateralManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LendingPoolCollateralManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LendingPoolCollateralManager *LendingPoolCollateralManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LendingPoolCollateralManager.Contract.contract.Transact(opts, method, params...)
}

// LiquidationCall is a paid mutator transaction binding the contract method 0x00a718a9.
//
// Solidity: function liquidationCall(address collateralAsset, address debtAsset, address user, uint256 debtToCover, bool receiveAToken) returns(uint256, string)
func (_LendingPoolCollateralManager *LendingPoolCollateralManagerTransactor) LiquidationCall(opts *bind.TransactOpts, collateralAsset common.Address, debtAsset common.Address, user common.Address, debtToCover *big.Int, receiveAToken bool) (*types.Transaction, error) {
	return _LendingPoolCollateralManager.contract.Transact(opts, "liquidationCall", collateralAsset, debtAsset, user, debtToCover, receiveAToken)
}

// LiquidationCall is a paid mutator transaction binding the contract method 0x00a718a9.
//
// Solidity: function liquidationCall(address collateralAsset, address debtAsset, address user, uint256 debtToCover, bool receiveAToken) returns(uint256, string)
func (_LendingPoolCollateralManager *LendingPoolCollateralManagerSession) LiquidationCall(collateralAsset common.Address, debtAsset common.Address, user common.Address, debtToCover *big.Int, receiveAToken bool) (*types.Transaction, error) {
	return _LendingPoolCollateralManager.Contract.LiquidationCall(&_LendingPoolCollateralManager.TransactOpts, collateralAsset, debtAsset, user, debtToCover, receiveAToken)
}

// LiquidationCall is a paid mutator transaction binding the contract method 0x00a718a9.
//
// Solidity: function liquidationCall(address collateralAsset, address debtAsset, address user, uint256 debtToCover, bool receiveAToken) returns(uint256, string)
func (_LendingPoolCollateralManager *LendingPoolCollateralManagerTransactorSession) LiquidationCall(collateralAsset common.Address, debtAsset common.Address, user common.Address, debtToCover *big.Int, receiveAToken bool) (*types.Transaction, error) {
	return _LendingPoolCollateralManager.Contract.LiquidationCall(&_LendingPoolCollateralManager.TransactOpts, collateralAsset, debtAsset, user, debtToCover, receiveAToken)
}

// LendingPoolCollateralManagerLiquidationCallIterator is returned from FilterLiquidationCall and is used to iterate over the raw logs and unpacked data for LiquidationCall events raised by the LendingPoolCollateralManager contract.
type LendingPoolCollateralManagerLiquidationCallIterator struct {
	Event *LendingPoolCollateralManagerLiquidationCall // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolCollateralManagerLiquidationCallIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolCollateralManagerLiquidationCall)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolCollateralManagerLiquidationCall)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolCollateralManagerLiquidationCallIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolCollateralManagerLiquidationCallIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolCollateralManagerLiquidationCall represents a LiquidationCall event raised by the LendingPoolCollateralManager contract.
type LendingPoolCollateralManagerLiquidationCall struct {
	Collateral                 common.Address
	Principal                  common.Address
	User                       common.Address
	DebtToCover                *big.Int
	LiquidatedCollateralAmount *big.Int
	Liquidator                 common.Address
	ReceiveAToken              bool
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterLiquidationCall is a free log retrieval operation binding the contract event 0xe413a321e8681d831f4dbccbca790d2952b56f977908e45be37335533e005286.
//
// Solidity: event LiquidationCall(address indexed collateral, address indexed principal, address indexed user, uint256 debtToCover, uint256 liquidatedCollateralAmount, address liquidator, bool receiveAToken)
func (_LendingPoolCollateralManager *LendingPoolCollateralManagerFilterer) FilterLiquidationCall(opts *bind.FilterOpts, collateral []common.Address, principal []common.Address, user []common.Address) (*LendingPoolCollateralManagerLiquidationCallIterator, error) {

	var collateralRule []interface{}
	for _, collateralItem := range collateral {
		collateralRule = append(collateralRule, collateralItem)
	}
	var principalRule []interface{}
	for _, principalItem := range principal {
		principalRule = append(principalRule, principalItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _LendingPoolCollateralManager.contract.FilterLogs(opts, "LiquidationCall", collateralRule, principalRule, userRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolCollateralManagerLiquidationCallIterator{contract: _LendingPoolCollateralManager.contract, event: "LiquidationCall", logs: logs, sub: sub}, nil
}

// WatchLiquidationCall is a free log subscription operation binding the contract event 0xe413a321e8681d831f4dbccbca790d2952b56f977908e45be37335533e005286.
//
// Solidity: event LiquidationCall(address indexed collateral, address indexed principal, address indexed user, uint256 debtToCover, uint256 liquidatedCollateralAmount, address liquidator, bool receiveAToken)
func (_LendingPoolCollateralManager *LendingPoolCollateralManagerFilterer) WatchLiquidationCall(opts *bind.WatchOpts, sink chan<- *LendingPoolCollateralManagerLiquidationCall, collateral []common.Address, principal []common.Address, user []common.Address) (event.Subscription, error) {

	var collateralRule []interface{}
	for _, collateralItem := range collateral {
		collateralRule = append(collateralRule, collateralItem)
	}
	var principalRule []interface{}
	for _, principalItem := range principal {
		principalRule = append(principalRule, principalItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _LendingPoolCollateralManager.contract.WatchLogs(opts, "LiquidationCall", collateralRule, principalRule, userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolCollateralManagerLiquidationCall)
				if err := _LendingPoolCollateralManager.contract.UnpackLog(event, "LiquidationCall", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLiquidationCall is a log parse operation binding the contract event 0xe413a321e8681d831f4dbccbca790d2952b56f977908e45be37335533e005286.
//
// Solidity: event LiquidationCall(address indexed collateral, address indexed principal, address indexed user, uint256 debtToCover, uint256 liquidatedCollateralAmount, address liquidator, bool receiveAToken)
func (_LendingPoolCollateralManager *LendingPoolCollateralManagerFilterer) ParseLiquidationCall(log types.Log) (*LendingPoolCollateralManagerLiquidationCall, error) {
	event := new(LendingPoolCollateralManagerLiquidationCall)
	if err := _LendingPoolCollateralManager.contract.UnpackLog(event, "LiquidationCall", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolCollateralManagerReserveUsedAsCollateralDisabledIterator is returned from FilterReserveUsedAsCollateralDisabled and is used to iterate over the raw logs and unpacked data for ReserveUsedAsCollateralDisabled events raised by the LendingPoolCollateralManager contract.
type LendingPoolCollateralManagerReserveUsedAsCollateralDisabledIterator struct {
	Event *LendingPoolCollateralManagerReserveUsedAsCollateralDisabled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolCollateralManagerReserveUsedAsCollateralDisabledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolCollateralManagerReserveUsedAsCollateralDisabled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolCollateralManagerReserveUsedAsCollateralDisabled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolCollateralManagerReserveUsedAsCollateralDisabledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolCollateralManagerReserveUsedAsCollateralDisabledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolCollateralManagerReserveUsedAsCollateralDisabled represents a ReserveUsedAsCollateralDisabled event raised by the LendingPoolCollateralManager contract.
type LendingPoolCollateralManagerReserveUsedAsCollateralDisabled struct {
	Reserve common.Address
	User    common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterReserveUsedAsCollateralDisabled is a free log retrieval operation binding the contract event 0x44c58d81365b66dd4b1a7f36c25aa97b8c71c361ee4937adc1a00000227db5dd.
//
// Solidity: event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user)
func (_LendingPoolCollateralManager *LendingPoolCollateralManagerFilterer) FilterReserveUsedAsCollateralDisabled(opts *bind.FilterOpts, reserve []common.Address, user []common.Address) (*LendingPoolCollateralManagerReserveUsedAsCollateralDisabledIterator, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _LendingPoolCollateralManager.contract.FilterLogs(opts, "ReserveUsedAsCollateralDisabled", reserveRule, userRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolCollateralManagerReserveUsedAsCollateralDisabledIterator{contract: _LendingPoolCollateralManager.contract, event: "ReserveUsedAsCollateralDisabled", logs: logs, sub: sub}, nil
}

// WatchReserveUsedAsCollateralDisabled is a free log subscription operation binding the contract event 0x44c58d81365b66dd4b1a7f36c25aa97b8c71c361ee4937adc1a00000227db5dd.
//
// Solidity: event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user)
func (_LendingPoolCollateralManager *LendingPoolCollateralManagerFilterer) WatchReserveUsedAsCollateralDisabled(opts *bind.WatchOpts, sink chan<- *LendingPoolCollateralManagerReserveUsedAsCollateralDisabled, reserve []common.Address, user []common.Address) (event.Subscription, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _LendingPoolCollateralManager.contract.WatchLogs(opts, "ReserveUsedAsCollateralDisabled", reserveRule, userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolCollateralManagerReserveUsedAsCollateralDisabled)
				if err := _LendingPoolCollateralManager.contract.UnpackLog(event, "ReserveUsedAsCollateralDisabled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReserveUsedAsCollateralDisabled is a log parse operation binding the contract event 0x44c58d81365b66dd4b1a7f36c25aa97b8c71c361ee4937adc1a00000227db5dd.
//
// Solidity: event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user)
func (_LendingPoolCollateralManager *LendingPoolCollateralManagerFilterer) ParseReserveUsedAsCollateralDisabled(log types.Log) (*LendingPoolCollateralManagerReserveUsedAsCollateralDisabled, error) {
	event := new(LendingPoolCollateralManagerReserveUsedAsCollateralDisabled)
	if err := _LendingPoolCollateralManager.contract.UnpackLog(event, "ReserveUsedAsCollateralDisabled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolCollateralManagerReserveUsedAsCollateralEnabledIterator is returned from FilterReserveUsedAsCollateralEnabled and is used to iterate over the raw logs and unpacked data for ReserveUsedAsCollateralEnabled events raised by the LendingPoolCollateralManager contract.
type LendingPoolCollateralManagerReserveUsedAsCollateralEnabledIterator struct {
	Event *LendingPoolCollateralManagerReserveUsedAsCollateralEnabled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolCollateralManagerReserveUsedAsCollateralEnabledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolCollateralManagerReserveUsedAsCollateralEnabled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolCollateralManagerReserveUsedAsCollateralEnabled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolCollateralManagerReserveUsedAsCollateralEnabledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolCollateralManagerReserveUsedAsCollateralEnabledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolCollateralManagerReserveUsedAsCollateralEnabled represents a ReserveUsedAsCollateralEnabled event raised by the LendingPoolCollateralManager contract.
type LendingPoolCollateralManagerReserveUsedAsCollateralEnabled struct {
	Reserve common.Address
	User    common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterReserveUsedAsCollateralEnabled is a free log retrieval operation binding the contract event 0x00058a56ea94653cdf4f152d227ace22d4c00ad99e2a43f58cb7d9e3feb295f2.
//
// Solidity: event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user)
func (_LendingPoolCollateralManager *LendingPoolCollateralManagerFilterer) FilterReserveUsedAsCollateralEnabled(opts *bind.FilterOpts, reserve []common.Address, user []common.Address) (*LendingPoolCollateralManagerReserveUsedAsCollateralEnabledIterator, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _LendingPoolCollateralManager.contract.FilterLogs(opts, "ReserveUsedAsCollateralEnabled", reserveRule, userRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolCollateralManagerReserveUsedAsCollateralEnabledIterator{contract: _LendingPoolCollateralManager.contract, event: "ReserveUsedAsCollateralEnabled", logs: logs, sub: sub}, nil
}

// WatchReserveUsedAsCollateralEnabled is a free log subscription operation binding the contract event 0x00058a56ea94653cdf4f152d227ace22d4c00ad99e2a43f58cb7d9e3feb295f2.
//
// Solidity: event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user)
func (_LendingPoolCollateralManager *LendingPoolCollateralManagerFilterer) WatchReserveUsedAsCollateralEnabled(opts *bind.WatchOpts, sink chan<- *LendingPoolCollateralManagerReserveUsedAsCollateralEnabled, reserve []common.Address, user []common.Address) (event.Subscription, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _LendingPoolCollateralManager.contract.WatchLogs(opts, "ReserveUsedAsCollateralEnabled", reserveRule, userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolCollateralManagerReserveUsedAsCollateralEnabled)
				if err := _LendingPoolCollateralManager.contract.UnpackLog(event, "ReserveUsedAsCollateralEnabled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReserveUsedAsCollateralEnabled is a log parse operation binding the contract event 0x00058a56ea94653cdf4f152d227ace22d4c00ad99e2a43f58cb7d9e3feb295f2.
//
// Solidity: event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user)
func (_LendingPoolCollateralManager *LendingPoolCollateralManagerFilterer) ParseReserveUsedAsCollateralEnabled(log types.Log) (*LendingPoolCollateralManagerReserveUsedAsCollateralEnabled, error) {
	event := new(LendingPoolCollateralManagerReserveUsedAsCollateralEnabled)
	if err := _LendingPoolCollateralManager.contract.UnpackLog(event, "ReserveUsedAsCollateralEnabled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolConfiguratorABI is the input ABI used to generate the binding from.
const LendingPoolConfiguratorABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ATokenUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"BorrowingDisabledOnReserve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"stableRateEnabled\",\"type\":\"bool\"}],\"name\":\"BorrowingEnabledOnReserve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationBonus\",\"type\":\"uint256\"}],\"name\":\"CollateralConfigurationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"ReserveActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"ReserveDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"ReserveDecimalsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"factor\",\"type\":\"uint256\"}],\"name\":\"ReserveFactorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"ReserveFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"aToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stableDebtToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"variableDebtToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"interestRateStrategyAddress\",\"type\":\"address\"}],\"name\":\"ReserveInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"ReserveInterestRateStrategyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"ReserveUnfrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"StableDebtTokenUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"StableRateDisabledOnReserve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"StableRateEnabledOnReserve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"VariableDebtTokenUpgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"activateReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationBonus\",\"type\":\"uint256\"}],\"name\":\"configureReserveAsCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"deactivateReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"disableBorrowingOnReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"disableReserveStableRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stableBorrowRateEnabled\",\"type\":\"bool\"}],\"name\":\"enableBorrowingOnReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"enableReserveStableRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"freezeReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aTokenImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableDebtTokenImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"variableDebtTokenImpl\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"underlyingAssetDecimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"interestRateStrategyAddress\",\"type\":\"address\"}],\"name\":\"initReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractILendingPoolAddressesProvider\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setPoolPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactor\",\"type\":\"uint256\"}],\"name\":\"setReserveFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rateStrategyAddress\",\"type\":\"address\"}],\"name\":\"setReserveInterestRateStrategyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"unfreezeReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"updateAToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"updateStableDebtToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"updateVariableDebtToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// LendingPoolConfiguratorBin is the compiled bytecode used for deploying new contracts.
var LendingPoolConfiguratorBin = ""

// DeployLendingPoolConfigurator deploys a new Ethereum contract, binding an instance of LendingPoolConfigurator to it.
func DeployLendingPoolConfigurator(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *LendingPoolConfigurator, error) {
	parsed, err := abi.JSON(strings.NewReader(LendingPoolConfiguratorABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(LendingPoolConfiguratorBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LendingPoolConfigurator{LendingPoolConfiguratorCaller: LendingPoolConfiguratorCaller{contract: contract}, LendingPoolConfiguratorTransactor: LendingPoolConfiguratorTransactor{contract: contract}, LendingPoolConfiguratorFilterer: LendingPoolConfiguratorFilterer{contract: contract}}, nil
}

// LendingPoolConfigurator is an auto generated Go binding around an Ethereum contract.
type LendingPoolConfigurator struct {
	LendingPoolConfiguratorCaller     // Read-only binding to the contract
	LendingPoolConfiguratorTransactor // Write-only binding to the contract
	LendingPoolConfiguratorFilterer   // Log filterer for contract events
}

// LendingPoolConfiguratorCaller is an auto generated read-only Go binding around an Ethereum contract.
type LendingPoolConfiguratorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LendingPoolConfiguratorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LendingPoolConfiguratorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LendingPoolConfiguratorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LendingPoolConfiguratorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LendingPoolConfiguratorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LendingPoolConfiguratorSession struct {
	Contract     *LendingPoolConfigurator // Generic contract binding to set the session for
	CallOpts     bind.CallOpts            // Call options to use throughout this session
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// LendingPoolConfiguratorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LendingPoolConfiguratorCallerSession struct {
	Contract *LendingPoolConfiguratorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                  // Call options to use throughout this session
}

// LendingPoolConfiguratorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LendingPoolConfiguratorTransactorSession struct {
	Contract     *LendingPoolConfiguratorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                  // Transaction auth options to use throughout this session
}

// LendingPoolConfiguratorRaw is an auto generated low-level Go binding around an Ethereum contract.
type LendingPoolConfiguratorRaw struct {
	Contract *LendingPoolConfigurator // Generic contract binding to access the raw methods on
}

// LendingPoolConfiguratorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LendingPoolConfiguratorCallerRaw struct {
	Contract *LendingPoolConfiguratorCaller // Generic read-only contract binding to access the raw methods on
}

// LendingPoolConfiguratorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LendingPoolConfiguratorTransactorRaw struct {
	Contract *LendingPoolConfiguratorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLendingPoolConfigurator creates a new instance of LendingPoolConfigurator, bound to a specific deployed contract.
func NewLendingPoolConfigurator(address common.Address, backend bind.ContractBackend) (*LendingPoolConfigurator, error) {
	contract, err := bindLendingPoolConfigurator(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LendingPoolConfigurator{LendingPoolConfiguratorCaller: LendingPoolConfiguratorCaller{contract: contract}, LendingPoolConfiguratorTransactor: LendingPoolConfiguratorTransactor{contract: contract}, LendingPoolConfiguratorFilterer: LendingPoolConfiguratorFilterer{contract: contract}}, nil
}

// NewLendingPoolConfiguratorCaller creates a new read-only instance of LendingPoolConfigurator, bound to a specific deployed contract.
func NewLendingPoolConfiguratorCaller(address common.Address, caller bind.ContractCaller) (*LendingPoolConfiguratorCaller, error) {
	contract, err := bindLendingPoolConfigurator(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LendingPoolConfiguratorCaller{contract: contract}, nil
}

// NewLendingPoolConfiguratorTransactor creates a new write-only instance of LendingPoolConfigurator, bound to a specific deployed contract.
func NewLendingPoolConfiguratorTransactor(address common.Address, transactor bind.ContractTransactor) (*LendingPoolConfiguratorTransactor, error) {
	contract, err := bindLendingPoolConfigurator(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LendingPoolConfiguratorTransactor{contract: contract}, nil
}

// NewLendingPoolConfiguratorFilterer creates a new log filterer instance of LendingPoolConfigurator, bound to a specific deployed contract.
func NewLendingPoolConfiguratorFilterer(address common.Address, filterer bind.ContractFilterer) (*LendingPoolConfiguratorFilterer, error) {
	contract, err := bindLendingPoolConfigurator(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LendingPoolConfiguratorFilterer{contract: contract}, nil
}

// bindLendingPoolConfigurator binds a generic wrapper to an already deployed contract.
func bindLendingPoolConfigurator(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(LendingPoolConfiguratorABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LendingPoolConfigurator *LendingPoolConfiguratorRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LendingPoolConfigurator.Contract.LendingPoolConfiguratorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LendingPoolConfigurator *LendingPoolConfiguratorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.LendingPoolConfiguratorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LendingPoolConfigurator *LendingPoolConfiguratorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.LendingPoolConfiguratorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LendingPoolConfigurator *LendingPoolConfiguratorCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LendingPoolConfigurator.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.contract.Transact(opts, method, params...)
}

// ActivateReserve is a paid mutator transaction binding the contract method 0xb75d6f34.
//
// Solidity: function activateReserve(address asset) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactor) ActivateReserve(opts *bind.TransactOpts, asset common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.contract.Transact(opts, "activateReserve", asset)
}

// ActivateReserve is a paid mutator transaction binding the contract method 0xb75d6f34.
//
// Solidity: function activateReserve(address asset) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorSession) ActivateReserve(asset common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.ActivateReserve(&_LendingPoolConfigurator.TransactOpts, asset)
}

// ActivateReserve is a paid mutator transaction binding the contract method 0xb75d6f34.
//
// Solidity: function activateReserve(address asset) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactorSession) ActivateReserve(asset common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.ActivateReserve(&_LendingPoolConfigurator.TransactOpts, asset)
}

// ConfigureReserveAsCollateral is a paid mutator transaction binding the contract method 0x7c4e560b.
//
// Solidity: function configureReserveAsCollateral(address asset, uint256 ltv, uint256 liquidationThreshold, uint256 liquidationBonus) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactor) ConfigureReserveAsCollateral(opts *bind.TransactOpts, asset common.Address, ltv *big.Int, liquidationThreshold *big.Int, liquidationBonus *big.Int) (*types.Transaction, error) {
	return _LendingPoolConfigurator.contract.Transact(opts, "configureReserveAsCollateral", asset, ltv, liquidationThreshold, liquidationBonus)
}

// ConfigureReserveAsCollateral is a paid mutator transaction binding the contract method 0x7c4e560b.
//
// Solidity: function configureReserveAsCollateral(address asset, uint256 ltv, uint256 liquidationThreshold, uint256 liquidationBonus) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorSession) ConfigureReserveAsCollateral(asset common.Address, ltv *big.Int, liquidationThreshold *big.Int, liquidationBonus *big.Int) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.ConfigureReserveAsCollateral(&_LendingPoolConfigurator.TransactOpts, asset, ltv, liquidationThreshold, liquidationBonus)
}

// ConfigureReserveAsCollateral is a paid mutator transaction binding the contract method 0x7c4e560b.
//
// Solidity: function configureReserveAsCollateral(address asset, uint256 ltv, uint256 liquidationThreshold, uint256 liquidationBonus) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactorSession) ConfigureReserveAsCollateral(asset common.Address, ltv *big.Int, liquidationThreshold *big.Int, liquidationBonus *big.Int) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.ConfigureReserveAsCollateral(&_LendingPoolConfigurator.TransactOpts, asset, ltv, liquidationThreshold, liquidationBonus)
}

// DeactivateReserve is a paid mutator transaction binding the contract method 0x3e72a454.
//
// Solidity: function deactivateReserve(address asset) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactor) DeactivateReserve(opts *bind.TransactOpts, asset common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.contract.Transact(opts, "deactivateReserve", asset)
}

// DeactivateReserve is a paid mutator transaction binding the contract method 0x3e72a454.
//
// Solidity: function deactivateReserve(address asset) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorSession) DeactivateReserve(asset common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.DeactivateReserve(&_LendingPoolConfigurator.TransactOpts, asset)
}

// DeactivateReserve is a paid mutator transaction binding the contract method 0x3e72a454.
//
// Solidity: function deactivateReserve(address asset) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactorSession) DeactivateReserve(asset common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.DeactivateReserve(&_LendingPoolConfigurator.TransactOpts, asset)
}

// DisableBorrowingOnReserve is a paid mutator transaction binding the contract method 0xa8dc0f45.
//
// Solidity: function disableBorrowingOnReserve(address asset) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactor) DisableBorrowingOnReserve(opts *bind.TransactOpts, asset common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.contract.Transact(opts, "disableBorrowingOnReserve", asset)
}

// DisableBorrowingOnReserve is a paid mutator transaction binding the contract method 0xa8dc0f45.
//
// Solidity: function disableBorrowingOnReserve(address asset) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorSession) DisableBorrowingOnReserve(asset common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.DisableBorrowingOnReserve(&_LendingPoolConfigurator.TransactOpts, asset)
}

// DisableBorrowingOnReserve is a paid mutator transaction binding the contract method 0xa8dc0f45.
//
// Solidity: function disableBorrowingOnReserve(address asset) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactorSession) DisableBorrowingOnReserve(asset common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.DisableBorrowingOnReserve(&_LendingPoolConfigurator.TransactOpts, asset)
}

// DisableReserveStableRate is a paid mutator transaction binding the contract method 0xf53a2515.
//
// Solidity: function disableReserveStableRate(address asset) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactor) DisableReserveStableRate(opts *bind.TransactOpts, asset common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.contract.Transact(opts, "disableReserveStableRate", asset)
}

// DisableReserveStableRate is a paid mutator transaction binding the contract method 0xf53a2515.
//
// Solidity: function disableReserveStableRate(address asset) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorSession) DisableReserveStableRate(asset common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.DisableReserveStableRate(&_LendingPoolConfigurator.TransactOpts, asset)
}

// DisableReserveStableRate is a paid mutator transaction binding the contract method 0xf53a2515.
//
// Solidity: function disableReserveStableRate(address asset) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactorSession) DisableReserveStableRate(asset common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.DisableReserveStableRate(&_LendingPoolConfigurator.TransactOpts, asset)
}

// EnableBorrowingOnReserve is a paid mutator transaction binding the contract method 0xeede87c1.
//
// Solidity: function enableBorrowingOnReserve(address asset, bool stableBorrowRateEnabled) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactor) EnableBorrowingOnReserve(opts *bind.TransactOpts, asset common.Address, stableBorrowRateEnabled bool) (*types.Transaction, error) {
	return _LendingPoolConfigurator.contract.Transact(opts, "enableBorrowingOnReserve", asset, stableBorrowRateEnabled)
}

// EnableBorrowingOnReserve is a paid mutator transaction binding the contract method 0xeede87c1.
//
// Solidity: function enableBorrowingOnReserve(address asset, bool stableBorrowRateEnabled) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorSession) EnableBorrowingOnReserve(asset common.Address, stableBorrowRateEnabled bool) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.EnableBorrowingOnReserve(&_LendingPoolConfigurator.TransactOpts, asset, stableBorrowRateEnabled)
}

// EnableBorrowingOnReserve is a paid mutator transaction binding the contract method 0xeede87c1.
//
// Solidity: function enableBorrowingOnReserve(address asset, bool stableBorrowRateEnabled) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactorSession) EnableBorrowingOnReserve(asset common.Address, stableBorrowRateEnabled bool) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.EnableBorrowingOnReserve(&_LendingPoolConfigurator.TransactOpts, asset, stableBorrowRateEnabled)
}

// EnableReserveStableRate is a paid mutator transaction binding the contract method 0xbf344183.
//
// Solidity: function enableReserveStableRate(address asset) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactor) EnableReserveStableRate(opts *bind.TransactOpts, asset common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.contract.Transact(opts, "enableReserveStableRate", asset)
}

// EnableReserveStableRate is a paid mutator transaction binding the contract method 0xbf344183.
//
// Solidity: function enableReserveStableRate(address asset) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorSession) EnableReserveStableRate(asset common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.EnableReserveStableRate(&_LendingPoolConfigurator.TransactOpts, asset)
}

// EnableReserveStableRate is a paid mutator transaction binding the contract method 0xbf344183.
//
// Solidity: function enableReserveStableRate(address asset) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactorSession) EnableReserveStableRate(asset common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.EnableReserveStableRate(&_LendingPoolConfigurator.TransactOpts, asset)
}

// FreezeReserve is a paid mutator transaction binding the contract method 0x7aca76eb.
//
// Solidity: function freezeReserve(address asset) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactor) FreezeReserve(opts *bind.TransactOpts, asset common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.contract.Transact(opts, "freezeReserve", asset)
}

// FreezeReserve is a paid mutator transaction binding the contract method 0x7aca76eb.
//
// Solidity: function freezeReserve(address asset) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorSession) FreezeReserve(asset common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.FreezeReserve(&_LendingPoolConfigurator.TransactOpts, asset)
}

// FreezeReserve is a paid mutator transaction binding the contract method 0x7aca76eb.
//
// Solidity: function freezeReserve(address asset) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactorSession) FreezeReserve(asset common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.FreezeReserve(&_LendingPoolConfigurator.TransactOpts, asset)
}

// InitReserve is a paid mutator transaction binding the contract method 0x6e801a71.
//
// Solidity: function initReserve(address aTokenImpl, address stableDebtTokenImpl, address variableDebtTokenImpl, uint8 underlyingAssetDecimals, address interestRateStrategyAddress) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactor) InitReserve(opts *bind.TransactOpts, aTokenImpl common.Address, stableDebtTokenImpl common.Address, variableDebtTokenImpl common.Address, underlyingAssetDecimals uint8, interestRateStrategyAddress common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.contract.Transact(opts, "initReserve", aTokenImpl, stableDebtTokenImpl, variableDebtTokenImpl, underlyingAssetDecimals, interestRateStrategyAddress)
}

// InitReserve is a paid mutator transaction binding the contract method 0x6e801a71.
//
// Solidity: function initReserve(address aTokenImpl, address stableDebtTokenImpl, address variableDebtTokenImpl, uint8 underlyingAssetDecimals, address interestRateStrategyAddress) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorSession) InitReserve(aTokenImpl common.Address, stableDebtTokenImpl common.Address, variableDebtTokenImpl common.Address, underlyingAssetDecimals uint8, interestRateStrategyAddress common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.InitReserve(&_LendingPoolConfigurator.TransactOpts, aTokenImpl, stableDebtTokenImpl, variableDebtTokenImpl, underlyingAssetDecimals, interestRateStrategyAddress)
}

// InitReserve is a paid mutator transaction binding the contract method 0x6e801a71.
//
// Solidity: function initReserve(address aTokenImpl, address stableDebtTokenImpl, address variableDebtTokenImpl, uint8 underlyingAssetDecimals, address interestRateStrategyAddress) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactorSession) InitReserve(aTokenImpl common.Address, stableDebtTokenImpl common.Address, variableDebtTokenImpl common.Address, underlyingAssetDecimals uint8, interestRateStrategyAddress common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.InitReserve(&_LendingPoolConfigurator.TransactOpts, aTokenImpl, stableDebtTokenImpl, variableDebtTokenImpl, underlyingAssetDecimals, interestRateStrategyAddress)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address provider) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactor) Initialize(opts *bind.TransactOpts, provider common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.contract.Transact(opts, "initialize", provider)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address provider) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorSession) Initialize(provider common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.Initialize(&_LendingPoolConfigurator.TransactOpts, provider)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address provider) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactorSession) Initialize(provider common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.Initialize(&_LendingPoolConfigurator.TransactOpts, provider)
}

// SetPoolPause is a paid mutator transaction binding the contract method 0x7641f3d9.
//
// Solidity: function setPoolPause(bool val) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactor) SetPoolPause(opts *bind.TransactOpts, val bool) (*types.Transaction, error) {
	return _LendingPoolConfigurator.contract.Transact(opts, "setPoolPause", val)
}

// SetPoolPause is a paid mutator transaction binding the contract method 0x7641f3d9.
//
// Solidity: function setPoolPause(bool val) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorSession) SetPoolPause(val bool) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.SetPoolPause(&_LendingPoolConfigurator.TransactOpts, val)
}

// SetPoolPause is a paid mutator transaction binding the contract method 0x7641f3d9.
//
// Solidity: function setPoolPause(bool val) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactorSession) SetPoolPause(val bool) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.SetPoolPause(&_LendingPoolConfigurator.TransactOpts, val)
}

// SetReserveFactor is a paid mutator transaction binding the contract method 0x4b4e6753.
//
// Solidity: function setReserveFactor(address asset, uint256 reserveFactor) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactor) SetReserveFactor(opts *bind.TransactOpts, asset common.Address, reserveFactor *big.Int) (*types.Transaction, error) {
	return _LendingPoolConfigurator.contract.Transact(opts, "setReserveFactor", asset, reserveFactor)
}

// SetReserveFactor is a paid mutator transaction binding the contract method 0x4b4e6753.
//
// Solidity: function setReserveFactor(address asset, uint256 reserveFactor) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorSession) SetReserveFactor(asset common.Address, reserveFactor *big.Int) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.SetReserveFactor(&_LendingPoolConfigurator.TransactOpts, asset, reserveFactor)
}

// SetReserveFactor is a paid mutator transaction binding the contract method 0x4b4e6753.
//
// Solidity: function setReserveFactor(address asset, uint256 reserveFactor) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactorSession) SetReserveFactor(asset common.Address, reserveFactor *big.Int) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.SetReserveFactor(&_LendingPoolConfigurator.TransactOpts, asset, reserveFactor)
}

// SetReserveInterestRateStrategyAddress is a paid mutator transaction binding the contract method 0x1d2118f9.
//
// Solidity: function setReserveInterestRateStrategyAddress(address asset, address rateStrategyAddress) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactor) SetReserveInterestRateStrategyAddress(opts *bind.TransactOpts, asset common.Address, rateStrategyAddress common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.contract.Transact(opts, "setReserveInterestRateStrategyAddress", asset, rateStrategyAddress)
}

// SetReserveInterestRateStrategyAddress is a paid mutator transaction binding the contract method 0x1d2118f9.
//
// Solidity: function setReserveInterestRateStrategyAddress(address asset, address rateStrategyAddress) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorSession) SetReserveInterestRateStrategyAddress(asset common.Address, rateStrategyAddress common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.SetReserveInterestRateStrategyAddress(&_LendingPoolConfigurator.TransactOpts, asset, rateStrategyAddress)
}

// SetReserveInterestRateStrategyAddress is a paid mutator transaction binding the contract method 0x1d2118f9.
//
// Solidity: function setReserveInterestRateStrategyAddress(address asset, address rateStrategyAddress) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactorSession) SetReserveInterestRateStrategyAddress(asset common.Address, rateStrategyAddress common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.SetReserveInterestRateStrategyAddress(&_LendingPoolConfigurator.TransactOpts, asset, rateStrategyAddress)
}

// UnfreezeReserve is a paid mutator transaction binding the contract method 0xef1f9373.
//
// Solidity: function unfreezeReserve(address asset) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactor) UnfreezeReserve(opts *bind.TransactOpts, asset common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.contract.Transact(opts, "unfreezeReserve", asset)
}

// UnfreezeReserve is a paid mutator transaction binding the contract method 0xef1f9373.
//
// Solidity: function unfreezeReserve(address asset) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorSession) UnfreezeReserve(asset common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.UnfreezeReserve(&_LendingPoolConfigurator.TransactOpts, asset)
}

// UnfreezeReserve is a paid mutator transaction binding the contract method 0xef1f9373.
//
// Solidity: function unfreezeReserve(address asset) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactorSession) UnfreezeReserve(asset common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.UnfreezeReserve(&_LendingPoolConfigurator.TransactOpts, asset)
}

// UpdateAToken is a paid mutator transaction binding the contract method 0x45fe7946.
//
// Solidity: function updateAToken(address asset, address implementation) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactor) UpdateAToken(opts *bind.TransactOpts, asset common.Address, implementation common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.contract.Transact(opts, "updateAToken", asset, implementation)
}

// UpdateAToken is a paid mutator transaction binding the contract method 0x45fe7946.
//
// Solidity: function updateAToken(address asset, address implementation) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorSession) UpdateAToken(asset common.Address, implementation common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.UpdateAToken(&_LendingPoolConfigurator.TransactOpts, asset, implementation)
}

// UpdateAToken is a paid mutator transaction binding the contract method 0x45fe7946.
//
// Solidity: function updateAToken(address asset, address implementation) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactorSession) UpdateAToken(asset common.Address, implementation common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.UpdateAToken(&_LendingPoolConfigurator.TransactOpts, asset, implementation)
}

// UpdateStableDebtToken is a paid mutator transaction binding the contract method 0xaa65b66e.
//
// Solidity: function updateStableDebtToken(address asset, address implementation) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactor) UpdateStableDebtToken(opts *bind.TransactOpts, asset common.Address, implementation common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.contract.Transact(opts, "updateStableDebtToken", asset, implementation)
}

// UpdateStableDebtToken is a paid mutator transaction binding the contract method 0xaa65b66e.
//
// Solidity: function updateStableDebtToken(address asset, address implementation) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorSession) UpdateStableDebtToken(asset common.Address, implementation common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.UpdateStableDebtToken(&_LendingPoolConfigurator.TransactOpts, asset, implementation)
}

// UpdateStableDebtToken is a paid mutator transaction binding the contract method 0xaa65b66e.
//
// Solidity: function updateStableDebtToken(address asset, address implementation) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactorSession) UpdateStableDebtToken(asset common.Address, implementation common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.UpdateStableDebtToken(&_LendingPoolConfigurator.TransactOpts, asset, implementation)
}

// UpdateVariableDebtToken is a paid mutator transaction binding the contract method 0x4d978258.
//
// Solidity: function updateVariableDebtToken(address asset, address implementation) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactor) UpdateVariableDebtToken(opts *bind.TransactOpts, asset common.Address, implementation common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.contract.Transact(opts, "updateVariableDebtToken", asset, implementation)
}

// UpdateVariableDebtToken is a paid mutator transaction binding the contract method 0x4d978258.
//
// Solidity: function updateVariableDebtToken(address asset, address implementation) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorSession) UpdateVariableDebtToken(asset common.Address, implementation common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.UpdateVariableDebtToken(&_LendingPoolConfigurator.TransactOpts, asset, implementation)
}

// UpdateVariableDebtToken is a paid mutator transaction binding the contract method 0x4d978258.
//
// Solidity: function updateVariableDebtToken(address asset, address implementation) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactorSession) UpdateVariableDebtToken(asset common.Address, implementation common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.UpdateVariableDebtToken(&_LendingPoolConfigurator.TransactOpts, asset, implementation)
}

// LendingPoolConfiguratorATokenUpgradedIterator is returned from FilterATokenUpgraded and is used to iterate over the raw logs and unpacked data for ATokenUpgraded events raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorATokenUpgradedIterator struct {
	Event *LendingPoolConfiguratorATokenUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolConfiguratorATokenUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolConfiguratorATokenUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolConfiguratorATokenUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolConfiguratorATokenUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolConfiguratorATokenUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolConfiguratorATokenUpgraded represents a ATokenUpgraded event raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorATokenUpgraded struct {
	Asset          common.Address
	Proxy          common.Address
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterATokenUpgraded is a free log retrieval operation binding the contract event 0xa76f65411ec66a7fb6bc467432eb14767900449ae4469fa295e4441fe5e1cb73.
//
// Solidity: event ATokenUpgraded(address indexed asset, address indexed proxy, address indexed implementation)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) FilterATokenUpgraded(opts *bind.FilterOpts, asset []common.Address, proxy []common.Address, implementation []common.Address) (*LendingPoolConfiguratorATokenUpgradedIterator, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}
	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.FilterLogs(opts, "ATokenUpgraded", assetRule, proxyRule, implementationRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolConfiguratorATokenUpgradedIterator{contract: _LendingPoolConfigurator.contract, event: "ATokenUpgraded", logs: logs, sub: sub}, nil
}

// WatchATokenUpgraded is a free log subscription operation binding the contract event 0xa76f65411ec66a7fb6bc467432eb14767900449ae4469fa295e4441fe5e1cb73.
//
// Solidity: event ATokenUpgraded(address indexed asset, address indexed proxy, address indexed implementation)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) WatchATokenUpgraded(opts *bind.WatchOpts, sink chan<- *LendingPoolConfiguratorATokenUpgraded, asset []common.Address, proxy []common.Address, implementation []common.Address) (event.Subscription, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}
	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.WatchLogs(opts, "ATokenUpgraded", assetRule, proxyRule, implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolConfiguratorATokenUpgraded)
				if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ATokenUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseATokenUpgraded is a log parse operation binding the contract event 0xa76f65411ec66a7fb6bc467432eb14767900449ae4469fa295e4441fe5e1cb73.
//
// Solidity: event ATokenUpgraded(address indexed asset, address indexed proxy, address indexed implementation)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) ParseATokenUpgraded(log types.Log) (*LendingPoolConfiguratorATokenUpgraded, error) {
	event := new(LendingPoolConfiguratorATokenUpgraded)
	if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ATokenUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolConfiguratorBorrowingDisabledOnReserveIterator is returned from FilterBorrowingDisabledOnReserve and is used to iterate over the raw logs and unpacked data for BorrowingDisabledOnReserve events raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorBorrowingDisabledOnReserveIterator struct {
	Event *LendingPoolConfiguratorBorrowingDisabledOnReserve // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolConfiguratorBorrowingDisabledOnReserveIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolConfiguratorBorrowingDisabledOnReserve)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolConfiguratorBorrowingDisabledOnReserve)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolConfiguratorBorrowingDisabledOnReserveIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolConfiguratorBorrowingDisabledOnReserveIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolConfiguratorBorrowingDisabledOnReserve represents a BorrowingDisabledOnReserve event raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorBorrowingDisabledOnReserve struct {
	Asset common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterBorrowingDisabledOnReserve is a free log retrieval operation binding the contract event 0xe9a7e5fd4fc8ea18e602350324bf48e8f05d12434af0ce0be05743e6a5fdcb9e.
//
// Solidity: event BorrowingDisabledOnReserve(address indexed asset)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) FilterBorrowingDisabledOnReserve(opts *bind.FilterOpts, asset []common.Address) (*LendingPoolConfiguratorBorrowingDisabledOnReserveIterator, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.FilterLogs(opts, "BorrowingDisabledOnReserve", assetRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolConfiguratorBorrowingDisabledOnReserveIterator{contract: _LendingPoolConfigurator.contract, event: "BorrowingDisabledOnReserve", logs: logs, sub: sub}, nil
}

// WatchBorrowingDisabledOnReserve is a free log subscription operation binding the contract event 0xe9a7e5fd4fc8ea18e602350324bf48e8f05d12434af0ce0be05743e6a5fdcb9e.
//
// Solidity: event BorrowingDisabledOnReserve(address indexed asset)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) WatchBorrowingDisabledOnReserve(opts *bind.WatchOpts, sink chan<- *LendingPoolConfiguratorBorrowingDisabledOnReserve, asset []common.Address) (event.Subscription, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.WatchLogs(opts, "BorrowingDisabledOnReserve", assetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolConfiguratorBorrowingDisabledOnReserve)
				if err := _LendingPoolConfigurator.contract.UnpackLog(event, "BorrowingDisabledOnReserve", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBorrowingDisabledOnReserve is a log parse operation binding the contract event 0xe9a7e5fd4fc8ea18e602350324bf48e8f05d12434af0ce0be05743e6a5fdcb9e.
//
// Solidity: event BorrowingDisabledOnReserve(address indexed asset)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) ParseBorrowingDisabledOnReserve(log types.Log) (*LendingPoolConfiguratorBorrowingDisabledOnReserve, error) {
	event := new(LendingPoolConfiguratorBorrowingDisabledOnReserve)
	if err := _LendingPoolConfigurator.contract.UnpackLog(event, "BorrowingDisabledOnReserve", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolConfiguratorBorrowingEnabledOnReserveIterator is returned from FilterBorrowingEnabledOnReserve and is used to iterate over the raw logs and unpacked data for BorrowingEnabledOnReserve events raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorBorrowingEnabledOnReserveIterator struct {
	Event *LendingPoolConfiguratorBorrowingEnabledOnReserve // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolConfiguratorBorrowingEnabledOnReserveIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolConfiguratorBorrowingEnabledOnReserve)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolConfiguratorBorrowingEnabledOnReserve)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolConfiguratorBorrowingEnabledOnReserveIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolConfiguratorBorrowingEnabledOnReserveIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolConfiguratorBorrowingEnabledOnReserve represents a BorrowingEnabledOnReserve event raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorBorrowingEnabledOnReserve struct {
	Asset             common.Address
	StableRateEnabled bool
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterBorrowingEnabledOnReserve is a free log retrieval operation binding the contract event 0xab2f7f9e5ca2772fafa94f355c1842a80ae6b9e41f83083098d81f67d7a0b508.
//
// Solidity: event BorrowingEnabledOnReserve(address indexed asset, bool stableRateEnabled)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) FilterBorrowingEnabledOnReserve(opts *bind.FilterOpts, asset []common.Address) (*LendingPoolConfiguratorBorrowingEnabledOnReserveIterator, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.FilterLogs(opts, "BorrowingEnabledOnReserve", assetRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolConfiguratorBorrowingEnabledOnReserveIterator{contract: _LendingPoolConfigurator.contract, event: "BorrowingEnabledOnReserve", logs: logs, sub: sub}, nil
}

// WatchBorrowingEnabledOnReserve is a free log subscription operation binding the contract event 0xab2f7f9e5ca2772fafa94f355c1842a80ae6b9e41f83083098d81f67d7a0b508.
//
// Solidity: event BorrowingEnabledOnReserve(address indexed asset, bool stableRateEnabled)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) WatchBorrowingEnabledOnReserve(opts *bind.WatchOpts, sink chan<- *LendingPoolConfiguratorBorrowingEnabledOnReserve, asset []common.Address) (event.Subscription, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.WatchLogs(opts, "BorrowingEnabledOnReserve", assetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolConfiguratorBorrowingEnabledOnReserve)
				if err := _LendingPoolConfigurator.contract.UnpackLog(event, "BorrowingEnabledOnReserve", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBorrowingEnabledOnReserve is a log parse operation binding the contract event 0xab2f7f9e5ca2772fafa94f355c1842a80ae6b9e41f83083098d81f67d7a0b508.
//
// Solidity: event BorrowingEnabledOnReserve(address indexed asset, bool stableRateEnabled)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) ParseBorrowingEnabledOnReserve(log types.Log) (*LendingPoolConfiguratorBorrowingEnabledOnReserve, error) {
	event := new(LendingPoolConfiguratorBorrowingEnabledOnReserve)
	if err := _LendingPoolConfigurator.contract.UnpackLog(event, "BorrowingEnabledOnReserve", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolConfiguratorCollateralConfigurationChangedIterator is returned from FilterCollateralConfigurationChanged and is used to iterate over the raw logs and unpacked data for CollateralConfigurationChanged events raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorCollateralConfigurationChangedIterator struct {
	Event *LendingPoolConfiguratorCollateralConfigurationChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolConfiguratorCollateralConfigurationChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolConfiguratorCollateralConfigurationChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolConfiguratorCollateralConfigurationChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolConfiguratorCollateralConfigurationChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolConfiguratorCollateralConfigurationChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolConfiguratorCollateralConfigurationChanged represents a CollateralConfigurationChanged event raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorCollateralConfigurationChanged struct {
	Asset                common.Address
	Ltv                  *big.Int
	LiquidationThreshold *big.Int
	LiquidationBonus     *big.Int
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterCollateralConfigurationChanged is a free log retrieval operation binding the contract event 0x637febbda9275aea2e85c0ff690444c8d87eb2e8339bbede9715abcc89cb0995.
//
// Solidity: event CollateralConfigurationChanged(address indexed asset, uint256 ltv, uint256 liquidationThreshold, uint256 liquidationBonus)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) FilterCollateralConfigurationChanged(opts *bind.FilterOpts, asset []common.Address) (*LendingPoolConfiguratorCollateralConfigurationChangedIterator, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.FilterLogs(opts, "CollateralConfigurationChanged", assetRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolConfiguratorCollateralConfigurationChangedIterator{contract: _LendingPoolConfigurator.contract, event: "CollateralConfigurationChanged", logs: logs, sub: sub}, nil
}

// WatchCollateralConfigurationChanged is a free log subscription operation binding the contract event 0x637febbda9275aea2e85c0ff690444c8d87eb2e8339bbede9715abcc89cb0995.
//
// Solidity: event CollateralConfigurationChanged(address indexed asset, uint256 ltv, uint256 liquidationThreshold, uint256 liquidationBonus)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) WatchCollateralConfigurationChanged(opts *bind.WatchOpts, sink chan<- *LendingPoolConfiguratorCollateralConfigurationChanged, asset []common.Address) (event.Subscription, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.WatchLogs(opts, "CollateralConfigurationChanged", assetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolConfiguratorCollateralConfigurationChanged)
				if err := _LendingPoolConfigurator.contract.UnpackLog(event, "CollateralConfigurationChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCollateralConfigurationChanged is a log parse operation binding the contract event 0x637febbda9275aea2e85c0ff690444c8d87eb2e8339bbede9715abcc89cb0995.
//
// Solidity: event CollateralConfigurationChanged(address indexed asset, uint256 ltv, uint256 liquidationThreshold, uint256 liquidationBonus)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) ParseCollateralConfigurationChanged(log types.Log) (*LendingPoolConfiguratorCollateralConfigurationChanged, error) {
	event := new(LendingPoolConfiguratorCollateralConfigurationChanged)
	if err := _LendingPoolConfigurator.contract.UnpackLog(event, "CollateralConfigurationChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolConfiguratorReserveActivatedIterator is returned from FilterReserveActivated and is used to iterate over the raw logs and unpacked data for ReserveActivated events raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorReserveActivatedIterator struct {
	Event *LendingPoolConfiguratorReserveActivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolConfiguratorReserveActivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolConfiguratorReserveActivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolConfiguratorReserveActivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolConfiguratorReserveActivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolConfiguratorReserveActivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolConfiguratorReserveActivated represents a ReserveActivated event raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorReserveActivated struct {
	Asset common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterReserveActivated is a free log retrieval operation binding the contract event 0x35b80cd8ea3440e9a8454f116fa658b858da1b64c86c48451f4559cefcdfb56c.
//
// Solidity: event ReserveActivated(address indexed asset)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) FilterReserveActivated(opts *bind.FilterOpts, asset []common.Address) (*LendingPoolConfiguratorReserveActivatedIterator, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.FilterLogs(opts, "ReserveActivated", assetRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolConfiguratorReserveActivatedIterator{contract: _LendingPoolConfigurator.contract, event: "ReserveActivated", logs: logs, sub: sub}, nil
}

// WatchReserveActivated is a free log subscription operation binding the contract event 0x35b80cd8ea3440e9a8454f116fa658b858da1b64c86c48451f4559cefcdfb56c.
//
// Solidity: event ReserveActivated(address indexed asset)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) WatchReserveActivated(opts *bind.WatchOpts, sink chan<- *LendingPoolConfiguratorReserveActivated, asset []common.Address) (event.Subscription, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.WatchLogs(opts, "ReserveActivated", assetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolConfiguratorReserveActivated)
				if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ReserveActivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReserveActivated is a log parse operation binding the contract event 0x35b80cd8ea3440e9a8454f116fa658b858da1b64c86c48451f4559cefcdfb56c.
//
// Solidity: event ReserveActivated(address indexed asset)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) ParseReserveActivated(log types.Log) (*LendingPoolConfiguratorReserveActivated, error) {
	event := new(LendingPoolConfiguratorReserveActivated)
	if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ReserveActivated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolConfiguratorReserveDeactivatedIterator is returned from FilterReserveDeactivated and is used to iterate over the raw logs and unpacked data for ReserveDeactivated events raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorReserveDeactivatedIterator struct {
	Event *LendingPoolConfiguratorReserveDeactivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolConfiguratorReserveDeactivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolConfiguratorReserveDeactivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolConfiguratorReserveDeactivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolConfiguratorReserveDeactivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolConfiguratorReserveDeactivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolConfiguratorReserveDeactivated represents a ReserveDeactivated event raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorReserveDeactivated struct {
	Asset common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterReserveDeactivated is a free log retrieval operation binding the contract event 0x6f60cf8bd0f218cabe1ea3150bd07b0b758c35c4cfdf7138017a283e65564d5e.
//
// Solidity: event ReserveDeactivated(address indexed asset)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) FilterReserveDeactivated(opts *bind.FilterOpts, asset []common.Address) (*LendingPoolConfiguratorReserveDeactivatedIterator, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.FilterLogs(opts, "ReserveDeactivated", assetRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolConfiguratorReserveDeactivatedIterator{contract: _LendingPoolConfigurator.contract, event: "ReserveDeactivated", logs: logs, sub: sub}, nil
}

// WatchReserveDeactivated is a free log subscription operation binding the contract event 0x6f60cf8bd0f218cabe1ea3150bd07b0b758c35c4cfdf7138017a283e65564d5e.
//
// Solidity: event ReserveDeactivated(address indexed asset)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) WatchReserveDeactivated(opts *bind.WatchOpts, sink chan<- *LendingPoolConfiguratorReserveDeactivated, asset []common.Address) (event.Subscription, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.WatchLogs(opts, "ReserveDeactivated", assetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolConfiguratorReserveDeactivated)
				if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ReserveDeactivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReserveDeactivated is a log parse operation binding the contract event 0x6f60cf8bd0f218cabe1ea3150bd07b0b758c35c4cfdf7138017a283e65564d5e.
//
// Solidity: event ReserveDeactivated(address indexed asset)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) ParseReserveDeactivated(log types.Log) (*LendingPoolConfiguratorReserveDeactivated, error) {
	event := new(LendingPoolConfiguratorReserveDeactivated)
	if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ReserveDeactivated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolConfiguratorReserveDecimalsChangedIterator is returned from FilterReserveDecimalsChanged and is used to iterate over the raw logs and unpacked data for ReserveDecimalsChanged events raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorReserveDecimalsChangedIterator struct {
	Event *LendingPoolConfiguratorReserveDecimalsChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolConfiguratorReserveDecimalsChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolConfiguratorReserveDecimalsChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolConfiguratorReserveDecimalsChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolConfiguratorReserveDecimalsChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolConfiguratorReserveDecimalsChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolConfiguratorReserveDecimalsChanged represents a ReserveDecimalsChanged event raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorReserveDecimalsChanged struct {
	Asset    common.Address
	Decimals *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterReserveDecimalsChanged is a free log retrieval operation binding the contract event 0x2e73b7f1df792712003e6859f940c1e8711c3f1329474771fee71d2ec1163129.
//
// Solidity: event ReserveDecimalsChanged(address indexed asset, uint256 decimals)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) FilterReserveDecimalsChanged(opts *bind.FilterOpts, asset []common.Address) (*LendingPoolConfiguratorReserveDecimalsChangedIterator, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.FilterLogs(opts, "ReserveDecimalsChanged", assetRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolConfiguratorReserveDecimalsChangedIterator{contract: _LendingPoolConfigurator.contract, event: "ReserveDecimalsChanged", logs: logs, sub: sub}, nil
}

// WatchReserveDecimalsChanged is a free log subscription operation binding the contract event 0x2e73b7f1df792712003e6859f940c1e8711c3f1329474771fee71d2ec1163129.
//
// Solidity: event ReserveDecimalsChanged(address indexed asset, uint256 decimals)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) WatchReserveDecimalsChanged(opts *bind.WatchOpts, sink chan<- *LendingPoolConfiguratorReserveDecimalsChanged, asset []common.Address) (event.Subscription, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.WatchLogs(opts, "ReserveDecimalsChanged", assetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolConfiguratorReserveDecimalsChanged)
				if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ReserveDecimalsChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReserveDecimalsChanged is a log parse operation binding the contract event 0x2e73b7f1df792712003e6859f940c1e8711c3f1329474771fee71d2ec1163129.
//
// Solidity: event ReserveDecimalsChanged(address indexed asset, uint256 decimals)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) ParseReserveDecimalsChanged(log types.Log) (*LendingPoolConfiguratorReserveDecimalsChanged, error) {
	event := new(LendingPoolConfiguratorReserveDecimalsChanged)
	if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ReserveDecimalsChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolConfiguratorReserveFactorChangedIterator is returned from FilterReserveFactorChanged and is used to iterate over the raw logs and unpacked data for ReserveFactorChanged events raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorReserveFactorChangedIterator struct {
	Event *LendingPoolConfiguratorReserveFactorChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolConfiguratorReserveFactorChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolConfiguratorReserveFactorChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolConfiguratorReserveFactorChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolConfiguratorReserveFactorChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolConfiguratorReserveFactorChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolConfiguratorReserveFactorChanged represents a ReserveFactorChanged event raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorReserveFactorChanged struct {
	Asset  common.Address
	Factor *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterReserveFactorChanged is a free log retrieval operation binding the contract event 0x2694ccb0b585b6a54b8d8b4a47aa874b05c257b43d34e98aee50838be00d3405.
//
// Solidity: event ReserveFactorChanged(address indexed asset, uint256 factor)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) FilterReserveFactorChanged(opts *bind.FilterOpts, asset []common.Address) (*LendingPoolConfiguratorReserveFactorChangedIterator, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.FilterLogs(opts, "ReserveFactorChanged", assetRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolConfiguratorReserveFactorChangedIterator{contract: _LendingPoolConfigurator.contract, event: "ReserveFactorChanged", logs: logs, sub: sub}, nil
}

// WatchReserveFactorChanged is a free log subscription operation binding the contract event 0x2694ccb0b585b6a54b8d8b4a47aa874b05c257b43d34e98aee50838be00d3405.
//
// Solidity: event ReserveFactorChanged(address indexed asset, uint256 factor)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) WatchReserveFactorChanged(opts *bind.WatchOpts, sink chan<- *LendingPoolConfiguratorReserveFactorChanged, asset []common.Address) (event.Subscription, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.WatchLogs(opts, "ReserveFactorChanged", assetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolConfiguratorReserveFactorChanged)
				if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ReserveFactorChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReserveFactorChanged is a log parse operation binding the contract event 0x2694ccb0b585b6a54b8d8b4a47aa874b05c257b43d34e98aee50838be00d3405.
//
// Solidity: event ReserveFactorChanged(address indexed asset, uint256 factor)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) ParseReserveFactorChanged(log types.Log) (*LendingPoolConfiguratorReserveFactorChanged, error) {
	event := new(LendingPoolConfiguratorReserveFactorChanged)
	if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ReserveFactorChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolConfiguratorReserveFrozenIterator is returned from FilterReserveFrozen and is used to iterate over the raw logs and unpacked data for ReserveFrozen events raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorReserveFrozenIterator struct {
	Event *LendingPoolConfiguratorReserveFrozen // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolConfiguratorReserveFrozenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolConfiguratorReserveFrozen)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolConfiguratorReserveFrozen)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolConfiguratorReserveFrozenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolConfiguratorReserveFrozenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolConfiguratorReserveFrozen represents a ReserveFrozen event raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorReserveFrozen struct {
	Asset common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterReserveFrozen is a free log retrieval operation binding the contract event 0x85dc710add8a0914461a7dc5a63f6fc529a7700f8c6089a3faf5e93256ccf12a.
//
// Solidity: event ReserveFrozen(address indexed asset)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) FilterReserveFrozen(opts *bind.FilterOpts, asset []common.Address) (*LendingPoolConfiguratorReserveFrozenIterator, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.FilterLogs(opts, "ReserveFrozen", assetRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolConfiguratorReserveFrozenIterator{contract: _LendingPoolConfigurator.contract, event: "ReserveFrozen", logs: logs, sub: sub}, nil
}

// WatchReserveFrozen is a free log subscription operation binding the contract event 0x85dc710add8a0914461a7dc5a63f6fc529a7700f8c6089a3faf5e93256ccf12a.
//
// Solidity: event ReserveFrozen(address indexed asset)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) WatchReserveFrozen(opts *bind.WatchOpts, sink chan<- *LendingPoolConfiguratorReserveFrozen, asset []common.Address) (event.Subscription, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.WatchLogs(opts, "ReserveFrozen", assetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolConfiguratorReserveFrozen)
				if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ReserveFrozen", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReserveFrozen is a log parse operation binding the contract event 0x85dc710add8a0914461a7dc5a63f6fc529a7700f8c6089a3faf5e93256ccf12a.
//
// Solidity: event ReserveFrozen(address indexed asset)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) ParseReserveFrozen(log types.Log) (*LendingPoolConfiguratorReserveFrozen, error) {
	event := new(LendingPoolConfiguratorReserveFrozen)
	if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ReserveFrozen", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolConfiguratorReserveInitializedIterator is returned from FilterReserveInitialized and is used to iterate over the raw logs and unpacked data for ReserveInitialized events raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorReserveInitializedIterator struct {
	Event *LendingPoolConfiguratorReserveInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolConfiguratorReserveInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolConfiguratorReserveInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolConfiguratorReserveInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolConfiguratorReserveInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolConfiguratorReserveInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolConfiguratorReserveInitialized represents a ReserveInitialized event raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorReserveInitialized struct {
	Asset                       common.Address
	AToken                      common.Address
	StableDebtToken             common.Address
	VariableDebtToken           common.Address
	InterestRateStrategyAddress common.Address
	Raw                         types.Log // Blockchain specific contextual infos
}

// FilterReserveInitialized is a free log retrieval operation binding the contract event 0x3a0ca721fc364424566385a1aa271ed508cc2c0949c2272575fb3013a163a45f.
//
// Solidity: event ReserveInitialized(address indexed asset, address indexed aToken, address stableDebtToken, address variableDebtToken, address interestRateStrategyAddress)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) FilterReserveInitialized(opts *bind.FilterOpts, asset []common.Address, aToken []common.Address) (*LendingPoolConfiguratorReserveInitializedIterator, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}
	var aTokenRule []interface{}
	for _, aTokenItem := range aToken {
		aTokenRule = append(aTokenRule, aTokenItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.FilterLogs(opts, "ReserveInitialized", assetRule, aTokenRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolConfiguratorReserveInitializedIterator{contract: _LendingPoolConfigurator.contract, event: "ReserveInitialized", logs: logs, sub: sub}, nil
}

// WatchReserveInitialized is a free log subscription operation binding the contract event 0x3a0ca721fc364424566385a1aa271ed508cc2c0949c2272575fb3013a163a45f.
//
// Solidity: event ReserveInitialized(address indexed asset, address indexed aToken, address stableDebtToken, address variableDebtToken, address interestRateStrategyAddress)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) WatchReserveInitialized(opts *bind.WatchOpts, sink chan<- *LendingPoolConfiguratorReserveInitialized, asset []common.Address, aToken []common.Address) (event.Subscription, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}
	var aTokenRule []interface{}
	for _, aTokenItem := range aToken {
		aTokenRule = append(aTokenRule, aTokenItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.WatchLogs(opts, "ReserveInitialized", assetRule, aTokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolConfiguratorReserveInitialized)
				if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ReserveInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReserveInitialized is a log parse operation binding the contract event 0x3a0ca721fc364424566385a1aa271ed508cc2c0949c2272575fb3013a163a45f.
//
// Solidity: event ReserveInitialized(address indexed asset, address indexed aToken, address stableDebtToken, address variableDebtToken, address interestRateStrategyAddress)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) ParseReserveInitialized(log types.Log) (*LendingPoolConfiguratorReserveInitialized, error) {
	event := new(LendingPoolConfiguratorReserveInitialized)
	if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ReserveInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolConfiguratorReserveInterestRateStrategyChangedIterator is returned from FilterReserveInterestRateStrategyChanged and is used to iterate over the raw logs and unpacked data for ReserveInterestRateStrategyChanged events raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorReserveInterestRateStrategyChangedIterator struct {
	Event *LendingPoolConfiguratorReserveInterestRateStrategyChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolConfiguratorReserveInterestRateStrategyChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolConfiguratorReserveInterestRateStrategyChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolConfiguratorReserveInterestRateStrategyChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolConfiguratorReserveInterestRateStrategyChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolConfiguratorReserveInterestRateStrategyChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolConfiguratorReserveInterestRateStrategyChanged represents a ReserveInterestRateStrategyChanged event raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorReserveInterestRateStrategyChanged struct {
	Asset    common.Address
	Strategy common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterReserveInterestRateStrategyChanged is a free log retrieval operation binding the contract event 0x5644b64ebb0ce18c4032248ca52f58355469092ff072866c3dcd8640e817d6a5.
//
// Solidity: event ReserveInterestRateStrategyChanged(address indexed asset, address strategy)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) FilterReserveInterestRateStrategyChanged(opts *bind.FilterOpts, asset []common.Address) (*LendingPoolConfiguratorReserveInterestRateStrategyChangedIterator, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.FilterLogs(opts, "ReserveInterestRateStrategyChanged", assetRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolConfiguratorReserveInterestRateStrategyChangedIterator{contract: _LendingPoolConfigurator.contract, event: "ReserveInterestRateStrategyChanged", logs: logs, sub: sub}, nil
}

// WatchReserveInterestRateStrategyChanged is a free log subscription operation binding the contract event 0x5644b64ebb0ce18c4032248ca52f58355469092ff072866c3dcd8640e817d6a5.
//
// Solidity: event ReserveInterestRateStrategyChanged(address indexed asset, address strategy)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) WatchReserveInterestRateStrategyChanged(opts *bind.WatchOpts, sink chan<- *LendingPoolConfiguratorReserveInterestRateStrategyChanged, asset []common.Address) (event.Subscription, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.WatchLogs(opts, "ReserveInterestRateStrategyChanged", assetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolConfiguratorReserveInterestRateStrategyChanged)
				if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ReserveInterestRateStrategyChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReserveInterestRateStrategyChanged is a log parse operation binding the contract event 0x5644b64ebb0ce18c4032248ca52f58355469092ff072866c3dcd8640e817d6a5.
//
// Solidity: event ReserveInterestRateStrategyChanged(address indexed asset, address strategy)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) ParseReserveInterestRateStrategyChanged(log types.Log) (*LendingPoolConfiguratorReserveInterestRateStrategyChanged, error) {
	event := new(LendingPoolConfiguratorReserveInterestRateStrategyChanged)
	if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ReserveInterestRateStrategyChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolConfiguratorReserveUnfrozenIterator is returned from FilterReserveUnfrozen and is used to iterate over the raw logs and unpacked data for ReserveUnfrozen events raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorReserveUnfrozenIterator struct {
	Event *LendingPoolConfiguratorReserveUnfrozen // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolConfiguratorReserveUnfrozenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolConfiguratorReserveUnfrozen)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolConfiguratorReserveUnfrozen)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolConfiguratorReserveUnfrozenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolConfiguratorReserveUnfrozenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolConfiguratorReserveUnfrozen represents a ReserveUnfrozen event raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorReserveUnfrozen struct {
	Asset common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterReserveUnfrozen is a free log retrieval operation binding the contract event 0x838ecdc4709a31a26db48b0c853212cedde3f725f07030079d793fb071964760.
//
// Solidity: event ReserveUnfrozen(address indexed asset)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) FilterReserveUnfrozen(opts *bind.FilterOpts, asset []common.Address) (*LendingPoolConfiguratorReserveUnfrozenIterator, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.FilterLogs(opts, "ReserveUnfrozen", assetRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolConfiguratorReserveUnfrozenIterator{contract: _LendingPoolConfigurator.contract, event: "ReserveUnfrozen", logs: logs, sub: sub}, nil
}

// WatchReserveUnfrozen is a free log subscription operation binding the contract event 0x838ecdc4709a31a26db48b0c853212cedde3f725f07030079d793fb071964760.
//
// Solidity: event ReserveUnfrozen(address indexed asset)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) WatchReserveUnfrozen(opts *bind.WatchOpts, sink chan<- *LendingPoolConfiguratorReserveUnfrozen, asset []common.Address) (event.Subscription, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.WatchLogs(opts, "ReserveUnfrozen", assetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolConfiguratorReserveUnfrozen)
				if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ReserveUnfrozen", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReserveUnfrozen is a log parse operation binding the contract event 0x838ecdc4709a31a26db48b0c853212cedde3f725f07030079d793fb071964760.
//
// Solidity: event ReserveUnfrozen(address indexed asset)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) ParseReserveUnfrozen(log types.Log) (*LendingPoolConfiguratorReserveUnfrozen, error) {
	event := new(LendingPoolConfiguratorReserveUnfrozen)
	if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ReserveUnfrozen", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolConfiguratorStableDebtTokenUpgradedIterator is returned from FilterStableDebtTokenUpgraded and is used to iterate over the raw logs and unpacked data for StableDebtTokenUpgraded events raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorStableDebtTokenUpgradedIterator struct {
	Event *LendingPoolConfiguratorStableDebtTokenUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolConfiguratorStableDebtTokenUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolConfiguratorStableDebtTokenUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolConfiguratorStableDebtTokenUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolConfiguratorStableDebtTokenUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolConfiguratorStableDebtTokenUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolConfiguratorStableDebtTokenUpgraded represents a StableDebtTokenUpgraded event raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorStableDebtTokenUpgraded struct {
	Asset          common.Address
	Proxy          common.Address
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterStableDebtTokenUpgraded is a free log retrieval operation binding the contract event 0x7a943a5b6c214bf7726c069a878b1e2a8e7371981d516048b84e03743e67bc28.
//
// Solidity: event StableDebtTokenUpgraded(address indexed asset, address indexed proxy, address indexed implementation)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) FilterStableDebtTokenUpgraded(opts *bind.FilterOpts, asset []common.Address, proxy []common.Address, implementation []common.Address) (*LendingPoolConfiguratorStableDebtTokenUpgradedIterator, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}
	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.FilterLogs(opts, "StableDebtTokenUpgraded", assetRule, proxyRule, implementationRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolConfiguratorStableDebtTokenUpgradedIterator{contract: _LendingPoolConfigurator.contract, event: "StableDebtTokenUpgraded", logs: logs, sub: sub}, nil
}

// WatchStableDebtTokenUpgraded is a free log subscription operation binding the contract event 0x7a943a5b6c214bf7726c069a878b1e2a8e7371981d516048b84e03743e67bc28.
//
// Solidity: event StableDebtTokenUpgraded(address indexed asset, address indexed proxy, address indexed implementation)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) WatchStableDebtTokenUpgraded(opts *bind.WatchOpts, sink chan<- *LendingPoolConfiguratorStableDebtTokenUpgraded, asset []common.Address, proxy []common.Address, implementation []common.Address) (event.Subscription, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}
	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.WatchLogs(opts, "StableDebtTokenUpgraded", assetRule, proxyRule, implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolConfiguratorStableDebtTokenUpgraded)
				if err := _LendingPoolConfigurator.contract.UnpackLog(event, "StableDebtTokenUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStableDebtTokenUpgraded is a log parse operation binding the contract event 0x7a943a5b6c214bf7726c069a878b1e2a8e7371981d516048b84e03743e67bc28.
//
// Solidity: event StableDebtTokenUpgraded(address indexed asset, address indexed proxy, address indexed implementation)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) ParseStableDebtTokenUpgraded(log types.Log) (*LendingPoolConfiguratorStableDebtTokenUpgraded, error) {
	event := new(LendingPoolConfiguratorStableDebtTokenUpgraded)
	if err := _LendingPoolConfigurator.contract.UnpackLog(event, "StableDebtTokenUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolConfiguratorStableRateDisabledOnReserveIterator is returned from FilterStableRateDisabledOnReserve and is used to iterate over the raw logs and unpacked data for StableRateDisabledOnReserve events raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorStableRateDisabledOnReserveIterator struct {
	Event *LendingPoolConfiguratorStableRateDisabledOnReserve // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolConfiguratorStableRateDisabledOnReserveIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolConfiguratorStableRateDisabledOnReserve)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolConfiguratorStableRateDisabledOnReserve)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolConfiguratorStableRateDisabledOnReserveIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolConfiguratorStableRateDisabledOnReserveIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolConfiguratorStableRateDisabledOnReserve represents a StableRateDisabledOnReserve event raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorStableRateDisabledOnReserve struct {
	Asset common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterStableRateDisabledOnReserve is a free log retrieval operation binding the contract event 0x8bbf35441ac2c607ddecadd3d8ee58636d32f217fad201fb2655581502dd84e3.
//
// Solidity: event StableRateDisabledOnReserve(address indexed asset)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) FilterStableRateDisabledOnReserve(opts *bind.FilterOpts, asset []common.Address) (*LendingPoolConfiguratorStableRateDisabledOnReserveIterator, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.FilterLogs(opts, "StableRateDisabledOnReserve", assetRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolConfiguratorStableRateDisabledOnReserveIterator{contract: _LendingPoolConfigurator.contract, event: "StableRateDisabledOnReserve", logs: logs, sub: sub}, nil
}

// WatchStableRateDisabledOnReserve is a free log subscription operation binding the contract event 0x8bbf35441ac2c607ddecadd3d8ee58636d32f217fad201fb2655581502dd84e3.
//
// Solidity: event StableRateDisabledOnReserve(address indexed asset)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) WatchStableRateDisabledOnReserve(opts *bind.WatchOpts, sink chan<- *LendingPoolConfiguratorStableRateDisabledOnReserve, asset []common.Address) (event.Subscription, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.WatchLogs(opts, "StableRateDisabledOnReserve", assetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolConfiguratorStableRateDisabledOnReserve)
				if err := _LendingPoolConfigurator.contract.UnpackLog(event, "StableRateDisabledOnReserve", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStableRateDisabledOnReserve is a log parse operation binding the contract event 0x8bbf35441ac2c607ddecadd3d8ee58636d32f217fad201fb2655581502dd84e3.
//
// Solidity: event StableRateDisabledOnReserve(address indexed asset)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) ParseStableRateDisabledOnReserve(log types.Log) (*LendingPoolConfiguratorStableRateDisabledOnReserve, error) {
	event := new(LendingPoolConfiguratorStableRateDisabledOnReserve)
	if err := _LendingPoolConfigurator.contract.UnpackLog(event, "StableRateDisabledOnReserve", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolConfiguratorStableRateEnabledOnReserveIterator is returned from FilterStableRateEnabledOnReserve and is used to iterate over the raw logs and unpacked data for StableRateEnabledOnReserve events raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorStableRateEnabledOnReserveIterator struct {
	Event *LendingPoolConfiguratorStableRateEnabledOnReserve // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolConfiguratorStableRateEnabledOnReserveIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolConfiguratorStableRateEnabledOnReserve)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolConfiguratorStableRateEnabledOnReserve)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolConfiguratorStableRateEnabledOnReserveIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolConfiguratorStableRateEnabledOnReserveIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolConfiguratorStableRateEnabledOnReserve represents a StableRateEnabledOnReserve event raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorStableRateEnabledOnReserve struct {
	Asset common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterStableRateEnabledOnReserve is a free log retrieval operation binding the contract event 0x8dee2b2f3e98319ae6347eda521788f73f4086c9be9a594942b370b137fb8cb1.
//
// Solidity: event StableRateEnabledOnReserve(address indexed asset)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) FilterStableRateEnabledOnReserve(opts *bind.FilterOpts, asset []common.Address) (*LendingPoolConfiguratorStableRateEnabledOnReserveIterator, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.FilterLogs(opts, "StableRateEnabledOnReserve", assetRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolConfiguratorStableRateEnabledOnReserveIterator{contract: _LendingPoolConfigurator.contract, event: "StableRateEnabledOnReserve", logs: logs, sub: sub}, nil
}

// WatchStableRateEnabledOnReserve is a free log subscription operation binding the contract event 0x8dee2b2f3e98319ae6347eda521788f73f4086c9be9a594942b370b137fb8cb1.
//
// Solidity: event StableRateEnabledOnReserve(address indexed asset)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) WatchStableRateEnabledOnReserve(opts *bind.WatchOpts, sink chan<- *LendingPoolConfiguratorStableRateEnabledOnReserve, asset []common.Address) (event.Subscription, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.WatchLogs(opts, "StableRateEnabledOnReserve", assetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolConfiguratorStableRateEnabledOnReserve)
				if err := _LendingPoolConfigurator.contract.UnpackLog(event, "StableRateEnabledOnReserve", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStableRateEnabledOnReserve is a log parse operation binding the contract event 0x8dee2b2f3e98319ae6347eda521788f73f4086c9be9a594942b370b137fb8cb1.
//
// Solidity: event StableRateEnabledOnReserve(address indexed asset)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) ParseStableRateEnabledOnReserve(log types.Log) (*LendingPoolConfiguratorStableRateEnabledOnReserve, error) {
	event := new(LendingPoolConfiguratorStableRateEnabledOnReserve)
	if err := _LendingPoolConfigurator.contract.UnpackLog(event, "StableRateEnabledOnReserve", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolConfiguratorVariableDebtTokenUpgradedIterator is returned from FilterVariableDebtTokenUpgraded and is used to iterate over the raw logs and unpacked data for VariableDebtTokenUpgraded events raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorVariableDebtTokenUpgradedIterator struct {
	Event *LendingPoolConfiguratorVariableDebtTokenUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolConfiguratorVariableDebtTokenUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolConfiguratorVariableDebtTokenUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolConfiguratorVariableDebtTokenUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolConfiguratorVariableDebtTokenUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolConfiguratorVariableDebtTokenUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolConfiguratorVariableDebtTokenUpgraded represents a VariableDebtTokenUpgraded event raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorVariableDebtTokenUpgraded struct {
	Asset          common.Address
	Proxy          common.Address
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterVariableDebtTokenUpgraded is a free log retrieval operation binding the contract event 0x9439658a562a5c46b1173589df89cf001483d685bad28aedaff4a88656292d81.
//
// Solidity: event VariableDebtTokenUpgraded(address indexed asset, address indexed proxy, address indexed implementation)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) FilterVariableDebtTokenUpgraded(opts *bind.FilterOpts, asset []common.Address, proxy []common.Address, implementation []common.Address) (*LendingPoolConfiguratorVariableDebtTokenUpgradedIterator, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}
	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.FilterLogs(opts, "VariableDebtTokenUpgraded", assetRule, proxyRule, implementationRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolConfiguratorVariableDebtTokenUpgradedIterator{contract: _LendingPoolConfigurator.contract, event: "VariableDebtTokenUpgraded", logs: logs, sub: sub}, nil
}

// WatchVariableDebtTokenUpgraded is a free log subscription operation binding the contract event 0x9439658a562a5c46b1173589df89cf001483d685bad28aedaff4a88656292d81.
//
// Solidity: event VariableDebtTokenUpgraded(address indexed asset, address indexed proxy, address indexed implementation)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) WatchVariableDebtTokenUpgraded(opts *bind.WatchOpts, sink chan<- *LendingPoolConfiguratorVariableDebtTokenUpgraded, asset []common.Address, proxy []common.Address, implementation []common.Address) (event.Subscription, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}
	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.WatchLogs(opts, "VariableDebtTokenUpgraded", assetRule, proxyRule, implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolConfiguratorVariableDebtTokenUpgraded)
				if err := _LendingPoolConfigurator.contract.UnpackLog(event, "VariableDebtTokenUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVariableDebtTokenUpgraded is a log parse operation binding the contract event 0x9439658a562a5c46b1173589df89cf001483d685bad28aedaff4a88656292d81.
//
// Solidity: event VariableDebtTokenUpgraded(address indexed asset, address indexed proxy, address indexed implementation)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) ParseVariableDebtTokenUpgraded(log types.Log) (*LendingPoolConfiguratorVariableDebtTokenUpgraded, error) {
	event := new(LendingPoolConfiguratorVariableDebtTokenUpgraded)
	if err := _LendingPoolConfigurator.contract.UnpackLog(event, "VariableDebtTokenUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LendingPoolStorageABI is the input ABI used to generate the binding from.
const LendingPoolStorageABI = "[]"

// LendingPoolStorageBin is the compiled bytecode used for deploying new contracts.
var LendingPoolStorageBin = "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212207492d6a44b1a17e6ced091dbeba8cd0a97340af19f521ac94fe758beefa0f4fe64736f6c634300060c0033"

// DeployLendingPoolStorage deploys a new Ethereum contract, binding an instance of LendingPoolStorage to it.
func DeployLendingPoolStorage(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *LendingPoolStorage, error) {
	parsed, err := abi.JSON(strings.NewReader(LendingPoolStorageABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(LendingPoolStorageBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LendingPoolStorage{LendingPoolStorageCaller: LendingPoolStorageCaller{contract: contract}, LendingPoolStorageTransactor: LendingPoolStorageTransactor{contract: contract}, LendingPoolStorageFilterer: LendingPoolStorageFilterer{contract: contract}}, nil
}

// LendingPoolStorage is an auto generated Go binding around an Ethereum contract.
type LendingPoolStorage struct {
	LendingPoolStorageCaller     // Read-only binding to the contract
	LendingPoolStorageTransactor // Write-only binding to the contract
	LendingPoolStorageFilterer   // Log filterer for contract events
}

// LendingPoolStorageCaller is an auto generated read-only Go binding around an Ethereum contract.
type LendingPoolStorageCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LendingPoolStorageTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LendingPoolStorageTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LendingPoolStorageFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LendingPoolStorageFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LendingPoolStorageSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LendingPoolStorageSession struct {
	Contract     *LendingPoolStorage // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// LendingPoolStorageCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LendingPoolStorageCallerSession struct {
	Contract *LendingPoolStorageCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// LendingPoolStorageTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LendingPoolStorageTransactorSession struct {
	Contract     *LendingPoolStorageTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// LendingPoolStorageRaw is an auto generated low-level Go binding around an Ethereum contract.
type LendingPoolStorageRaw struct {
	Contract *LendingPoolStorage // Generic contract binding to access the raw methods on
}

// LendingPoolStorageCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LendingPoolStorageCallerRaw struct {
	Contract *LendingPoolStorageCaller // Generic read-only contract binding to access the raw methods on
}

// LendingPoolStorageTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LendingPoolStorageTransactorRaw struct {
	Contract *LendingPoolStorageTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLendingPoolStorage creates a new instance of LendingPoolStorage, bound to a specific deployed contract.
func NewLendingPoolStorage(address common.Address, backend bind.ContractBackend) (*LendingPoolStorage, error) {
	contract, err := bindLendingPoolStorage(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LendingPoolStorage{LendingPoolStorageCaller: LendingPoolStorageCaller{contract: contract}, LendingPoolStorageTransactor: LendingPoolStorageTransactor{contract: contract}, LendingPoolStorageFilterer: LendingPoolStorageFilterer{contract: contract}}, nil
}

// NewLendingPoolStorageCaller creates a new read-only instance of LendingPoolStorage, bound to a specific deployed contract.
func NewLendingPoolStorageCaller(address common.Address, caller bind.ContractCaller) (*LendingPoolStorageCaller, error) {
	contract, err := bindLendingPoolStorage(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LendingPoolStorageCaller{contract: contract}, nil
}

// NewLendingPoolStorageTransactor creates a new write-only instance of LendingPoolStorage, bound to a specific deployed contract.
func NewLendingPoolStorageTransactor(address common.Address, transactor bind.ContractTransactor) (*LendingPoolStorageTransactor, error) {
	contract, err := bindLendingPoolStorage(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LendingPoolStorageTransactor{contract: contract}, nil
}

// NewLendingPoolStorageFilterer creates a new log filterer instance of LendingPoolStorage, bound to a specific deployed contract.
func NewLendingPoolStorageFilterer(address common.Address, filterer bind.ContractFilterer) (*LendingPoolStorageFilterer, error) {
	contract, err := bindLendingPoolStorage(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LendingPoolStorageFilterer{contract: contract}, nil
}

// bindLendingPoolStorage binds a generic wrapper to an already deployed contract.
func bindLendingPoolStorage(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(LendingPoolStorageABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LendingPoolStorage *LendingPoolStorageRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LendingPoolStorage.Contract.LendingPoolStorageCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LendingPoolStorage *LendingPoolStorageRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LendingPoolStorage.Contract.LendingPoolStorageTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LendingPoolStorage *LendingPoolStorageRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LendingPoolStorage.Contract.LendingPoolStorageTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LendingPoolStorage *LendingPoolStorageCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LendingPoolStorage.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LendingPoolStorage *LendingPoolStorageTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LendingPoolStorage.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LendingPoolStorage *LendingPoolStorageTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LendingPoolStorage.Contract.contract.Transact(opts, method, params...)
}

// LendingRateOracleABI is the input ABI used to generate the binding from.
const LendingRateOracleABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getMarketBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getMarketLiquidityRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setMarketBorrowRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setMarketLiquidityRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// LendingRateOracleBin is the compiled bytecode used for deploying new contracts.
var LendingRateOracleBin = "0x608060405234801561001057600080fd5b50600061001b61006a565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35061006e565b3390565b6104d38061007d6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80639f86a0ee1161005b5780639f86a0ee146100dc578063bb85c0bb14610108578063f2fde38b14610140578063fbe5ba1e146101665761007d565b8063715018a61461008257806372eb293d1461008c5780638da5cb5b146100b8575b600080fd5b61008a61018c565b005b61008a600480360360408110156100a257600080fd5b506001600160a01b03813516906020013561022e565b6100c06102a2565b604080516001600160a01b039092168252519081900360200190f35b61008a600480360360408110156100f257600080fd5b506001600160a01b0381351690602001356102b1565b61012e6004803603602081101561011e57600080fd5b50356001600160a01b0316610325565b60408051918252519081900360200190f35b61008a6004803603602081101561015657600080fd5b50356001600160a01b0316610340565b61012e6004803603602081101561017c57600080fd5b50356001600160a01b0316610438565b610194610453565b6000546001600160a01b039081169116146101e4576040805162461bcd60e51b8152602060048201819052602482015260008051602061047e833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b610236610453565b6000546001600160a01b03908116911614610286576040805162461bcd60e51b8152602060048201819052602482015260008051602061047e833981519152604482015290519081900360640190fd5b6001600160a01b03909116600090815260016020526040902055565b6000546001600160a01b031690565b6102b9610453565b6000546001600160a01b03908116911614610309576040805162461bcd60e51b8152602060048201819052602482015260008051602061047e833981519152604482015290519081900360640190fd5b6001600160a01b03909116600090815260026020526040902055565b6001600160a01b031660009081526001602052604090205490565b610348610453565b6000546001600160a01b03908116911614610398576040805162461bcd60e51b8152602060048201819052602482015260008051602061047e833981519152604482015290519081900360640190fd5b6001600160a01b0381166103dd5760405162461bcd60e51b81526004018080602001828103825260268152602001806104586026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b031660009081526002602052604090205490565b339056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220fe56fb2f470dffb51d3c6f5b86807d4a9e6317550228207d6008e596ca44d06964736f6c634300060c0033"

// DeployLendingRateOracle deploys a new Ethereum contract, binding an instance of LendingRateOracle to it.
func DeployLendingRateOracle(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *LendingRateOracle, error) {
	parsed, err := abi.JSON(strings.NewReader(LendingRateOracleABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(LendingRateOracleBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LendingRateOracle{LendingRateOracleCaller: LendingRateOracleCaller{contract: contract}, LendingRateOracleTransactor: LendingRateOracleTransactor{contract: contract}, LendingRateOracleFilterer: LendingRateOracleFilterer{contract: contract}}, nil
}

// LendingRateOracle is an auto generated Go binding around an Ethereum contract.
type LendingRateOracle struct {
	LendingRateOracleCaller     // Read-only binding to the contract
	LendingRateOracleTransactor // Write-only binding to the contract
	LendingRateOracleFilterer   // Log filterer for contract events
}

// LendingRateOracleCaller is an auto generated read-only Go binding around an Ethereum contract.
type LendingRateOracleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LendingRateOracleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LendingRateOracleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LendingRateOracleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LendingRateOracleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LendingRateOracleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LendingRateOracleSession struct {
	Contract     *LendingRateOracle // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// LendingRateOracleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LendingRateOracleCallerSession struct {
	Contract *LendingRateOracleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// LendingRateOracleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LendingRateOracleTransactorSession struct {
	Contract     *LendingRateOracleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// LendingRateOracleRaw is an auto generated low-level Go binding around an Ethereum contract.
type LendingRateOracleRaw struct {
	Contract *LendingRateOracle // Generic contract binding to access the raw methods on
}

// LendingRateOracleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LendingRateOracleCallerRaw struct {
	Contract *LendingRateOracleCaller // Generic read-only contract binding to access the raw methods on
}

// LendingRateOracleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LendingRateOracleTransactorRaw struct {
	Contract *LendingRateOracleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLendingRateOracle creates a new instance of LendingRateOracle, bound to a specific deployed contract.
func NewLendingRateOracle(address common.Address, backend bind.ContractBackend) (*LendingRateOracle, error) {
	contract, err := bindLendingRateOracle(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LendingRateOracle{LendingRateOracleCaller: LendingRateOracleCaller{contract: contract}, LendingRateOracleTransactor: LendingRateOracleTransactor{contract: contract}, LendingRateOracleFilterer: LendingRateOracleFilterer{contract: contract}}, nil
}

// NewLendingRateOracleCaller creates a new read-only instance of LendingRateOracle, bound to a specific deployed contract.
func NewLendingRateOracleCaller(address common.Address, caller bind.ContractCaller) (*LendingRateOracleCaller, error) {
	contract, err := bindLendingRateOracle(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LendingRateOracleCaller{contract: contract}, nil
}

// NewLendingRateOracleTransactor creates a new write-only instance of LendingRateOracle, bound to a specific deployed contract.
func NewLendingRateOracleTransactor(address common.Address, transactor bind.ContractTransactor) (*LendingRateOracleTransactor, error) {
	contract, err := bindLendingRateOracle(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LendingRateOracleTransactor{contract: contract}, nil
}

// NewLendingRateOracleFilterer creates a new log filterer instance of LendingRateOracle, bound to a specific deployed contract.
func NewLendingRateOracleFilterer(address common.Address, filterer bind.ContractFilterer) (*LendingRateOracleFilterer, error) {
	contract, err := bindLendingRateOracle(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LendingRateOracleFilterer{contract: contract}, nil
}

// bindLendingRateOracle binds a generic wrapper to an already deployed contract.
func bindLendingRateOracle(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(LendingRateOracleABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LendingRateOracle *LendingRateOracleRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LendingRateOracle.Contract.LendingRateOracleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LendingRateOracle *LendingRateOracleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LendingRateOracle.Contract.LendingRateOracleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LendingRateOracle *LendingRateOracleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LendingRateOracle.Contract.LendingRateOracleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LendingRateOracle *LendingRateOracleCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LendingRateOracle.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LendingRateOracle *LendingRateOracleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LendingRateOracle.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LendingRateOracle *LendingRateOracleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LendingRateOracle.Contract.contract.Transact(opts, method, params...)
}

// GetMarketBorrowRate is a free data retrieval call binding the contract method 0xbb85c0bb.
//
// Solidity: function getMarketBorrowRate(address _asset) view returns(uint256)
func (_LendingRateOracle *LendingRateOracleCaller) GetMarketBorrowRate(opts *bind.CallOpts, _asset common.Address) (*big.Int, error) {
	var out []interface{}
	err := _LendingRateOracle.contract.Call(opts, &out, "getMarketBorrowRate", _asset)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMarketBorrowRate is a free data retrieval call binding the contract method 0xbb85c0bb.
//
// Solidity: function getMarketBorrowRate(address _asset) view returns(uint256)
func (_LendingRateOracle *LendingRateOracleSession) GetMarketBorrowRate(_asset common.Address) (*big.Int, error) {
	return _LendingRateOracle.Contract.GetMarketBorrowRate(&_LendingRateOracle.CallOpts, _asset)
}

// GetMarketBorrowRate is a free data retrieval call binding the contract method 0xbb85c0bb.
//
// Solidity: function getMarketBorrowRate(address _asset) view returns(uint256)
func (_LendingRateOracle *LendingRateOracleCallerSession) GetMarketBorrowRate(_asset common.Address) (*big.Int, error) {
	return _LendingRateOracle.Contract.GetMarketBorrowRate(&_LendingRateOracle.CallOpts, _asset)
}

// GetMarketLiquidityRate is a free data retrieval call binding the contract method 0xfbe5ba1e.
//
// Solidity: function getMarketLiquidityRate(address _asset) view returns(uint256)
func (_LendingRateOracle *LendingRateOracleCaller) GetMarketLiquidityRate(opts *bind.CallOpts, _asset common.Address) (*big.Int, error) {
	var out []interface{}
	err := _LendingRateOracle.contract.Call(opts, &out, "getMarketLiquidityRate", _asset)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMarketLiquidityRate is a free data retrieval call binding the contract method 0xfbe5ba1e.
//
// Solidity: function getMarketLiquidityRate(address _asset) view returns(uint256)
func (_LendingRateOracle *LendingRateOracleSession) GetMarketLiquidityRate(_asset common.Address) (*big.Int, error) {
	return _LendingRateOracle.Contract.GetMarketLiquidityRate(&_LendingRateOracle.CallOpts, _asset)
}

// GetMarketLiquidityRate is a free data retrieval call binding the contract method 0xfbe5ba1e.
//
// Solidity: function getMarketLiquidityRate(address _asset) view returns(uint256)
func (_LendingRateOracle *LendingRateOracleCallerSession) GetMarketLiquidityRate(_asset common.Address) (*big.Int, error) {
	return _LendingRateOracle.Contract.GetMarketLiquidityRate(&_LendingRateOracle.CallOpts, _asset)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_LendingRateOracle *LendingRateOracleCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LendingRateOracle.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_LendingRateOracle *LendingRateOracleSession) Owner() (common.Address, error) {
	return _LendingRateOracle.Contract.Owner(&_LendingRateOracle.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_LendingRateOracle *LendingRateOracleCallerSession) Owner() (common.Address, error) {
	return _LendingRateOracle.Contract.Owner(&_LendingRateOracle.CallOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_LendingRateOracle *LendingRateOracleTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LendingRateOracle.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_LendingRateOracle *LendingRateOracleSession) RenounceOwnership() (*types.Transaction, error) {
	return _LendingRateOracle.Contract.RenounceOwnership(&_LendingRateOracle.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_LendingRateOracle *LendingRateOracleTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _LendingRateOracle.Contract.RenounceOwnership(&_LendingRateOracle.TransactOpts)
}

// SetMarketBorrowRate is a paid mutator transaction binding the contract method 0x72eb293d.
//
// Solidity: function setMarketBorrowRate(address _asset, uint256 _rate) returns()
func (_LendingRateOracle *LendingRateOracleTransactor) SetMarketBorrowRate(opts *bind.TransactOpts, _asset common.Address, _rate *big.Int) (*types.Transaction, error) {
	return _LendingRateOracle.contract.Transact(opts, "setMarketBorrowRate", _asset, _rate)
}

// SetMarketBorrowRate is a paid mutator transaction binding the contract method 0x72eb293d.
//
// Solidity: function setMarketBorrowRate(address _asset, uint256 _rate) returns()
func (_LendingRateOracle *LendingRateOracleSession) SetMarketBorrowRate(_asset common.Address, _rate *big.Int) (*types.Transaction, error) {
	return _LendingRateOracle.Contract.SetMarketBorrowRate(&_LendingRateOracle.TransactOpts, _asset, _rate)
}

// SetMarketBorrowRate is a paid mutator transaction binding the contract method 0x72eb293d.
//
// Solidity: function setMarketBorrowRate(address _asset, uint256 _rate) returns()
func (_LendingRateOracle *LendingRateOracleTransactorSession) SetMarketBorrowRate(_asset common.Address, _rate *big.Int) (*types.Transaction, error) {
	return _LendingRateOracle.Contract.SetMarketBorrowRate(&_LendingRateOracle.TransactOpts, _asset, _rate)
}

// SetMarketLiquidityRate is a paid mutator transaction binding the contract method 0x9f86a0ee.
//
// Solidity: function setMarketLiquidityRate(address _asset, uint256 _rate) returns()
func (_LendingRateOracle *LendingRateOracleTransactor) SetMarketLiquidityRate(opts *bind.TransactOpts, _asset common.Address, _rate *big.Int) (*types.Transaction, error) {
	return _LendingRateOracle.contract.Transact(opts, "setMarketLiquidityRate", _asset, _rate)
}

// SetMarketLiquidityRate is a paid mutator transaction binding the contract method 0x9f86a0ee.
//
// Solidity: function setMarketLiquidityRate(address _asset, uint256 _rate) returns()
func (_LendingRateOracle *LendingRateOracleSession) SetMarketLiquidityRate(_asset common.Address, _rate *big.Int) (*types.Transaction, error) {
	return _LendingRateOracle.Contract.SetMarketLiquidityRate(&_LendingRateOracle.TransactOpts, _asset, _rate)
}

// SetMarketLiquidityRate is a paid mutator transaction binding the contract method 0x9f86a0ee.
//
// Solidity: function setMarketLiquidityRate(address _asset, uint256 _rate) returns()
func (_LendingRateOracle *LendingRateOracleTransactorSession) SetMarketLiquidityRate(_asset common.Address, _rate *big.Int) (*types.Transaction, error) {
	return _LendingRateOracle.Contract.SetMarketLiquidityRate(&_LendingRateOracle.TransactOpts, _asset, _rate)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LendingRateOracle *LendingRateOracleTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _LendingRateOracle.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LendingRateOracle *LendingRateOracleSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _LendingRateOracle.Contract.TransferOwnership(&_LendingRateOracle.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LendingRateOracle *LendingRateOracleTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _LendingRateOracle.Contract.TransferOwnership(&_LendingRateOracle.TransactOpts, newOwner)
}

// LendingRateOracleOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the LendingRateOracle contract.
type LendingRateOracleOwnershipTransferredIterator struct {
	Event *LendingRateOracleOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingRateOracleOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingRateOracleOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingRateOracleOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingRateOracleOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingRateOracleOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingRateOracleOwnershipTransferred represents a OwnershipTransferred event raised by the LendingRateOracle contract.
type LendingRateOracleOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_LendingRateOracle *LendingRateOracleFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*LendingRateOracleOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _LendingRateOracle.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &LendingRateOracleOwnershipTransferredIterator{contract: _LendingRateOracle.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_LendingRateOracle *LendingRateOracleFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *LendingRateOracleOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _LendingRateOracle.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingRateOracleOwnershipTransferred)
				if err := _LendingRateOracle.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_LendingRateOracle *LendingRateOracleFilterer) ParseOwnershipTransferred(log types.Log) (*LendingRateOracleOwnershipTransferred, error) {
	event := new(LendingRateOracleOwnershipTransferred)
	if err := _LendingRateOracle.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MathUtilsABI is the input ABI used to generate the binding from.
const MathUtilsABI = "[]"

// MathUtilsBin is the compiled bytecode used for deploying new contracts.
var MathUtilsBin = "0x60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209ffe27d3cefdd65a8cedb977bfdbc3ee8f1a142dfcf9a13506fb0dfd37678fce64736f6c634300060c0033"

// DeployMathUtils deploys a new Ethereum contract, binding an instance of MathUtils to it.
func DeployMathUtils(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MathUtils, error) {
	parsed, err := abi.JSON(strings.NewReader(MathUtilsABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(MathUtilsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MathUtils{MathUtilsCaller: MathUtilsCaller{contract: contract}, MathUtilsTransactor: MathUtilsTransactor{contract: contract}, MathUtilsFilterer: MathUtilsFilterer{contract: contract}}, nil
}

// MathUtils is an auto generated Go binding around an Ethereum contract.
type MathUtils struct {
	MathUtilsCaller     // Read-only binding to the contract
	MathUtilsTransactor // Write-only binding to the contract
	MathUtilsFilterer   // Log filterer for contract events
}

// MathUtilsCaller is an auto generated read-only Go binding around an Ethereum contract.
type MathUtilsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MathUtilsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MathUtilsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MathUtilsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MathUtilsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MathUtilsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MathUtilsSession struct {
	Contract     *MathUtils        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MathUtilsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MathUtilsCallerSession struct {
	Contract *MathUtilsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// MathUtilsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MathUtilsTransactorSession struct {
	Contract     *MathUtilsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// MathUtilsRaw is an auto generated low-level Go binding around an Ethereum contract.
type MathUtilsRaw struct {
	Contract *MathUtils // Generic contract binding to access the raw methods on
}

// MathUtilsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MathUtilsCallerRaw struct {
	Contract *MathUtilsCaller // Generic read-only contract binding to access the raw methods on
}

// MathUtilsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MathUtilsTransactorRaw struct {
	Contract *MathUtilsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMathUtils creates a new instance of MathUtils, bound to a specific deployed contract.
func NewMathUtils(address common.Address, backend bind.ContractBackend) (*MathUtils, error) {
	contract, err := bindMathUtils(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MathUtils{MathUtilsCaller: MathUtilsCaller{contract: contract}, MathUtilsTransactor: MathUtilsTransactor{contract: contract}, MathUtilsFilterer: MathUtilsFilterer{contract: contract}}, nil
}

// NewMathUtilsCaller creates a new read-only instance of MathUtils, bound to a specific deployed contract.
func NewMathUtilsCaller(address common.Address, caller bind.ContractCaller) (*MathUtilsCaller, error) {
	contract, err := bindMathUtils(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MathUtilsCaller{contract: contract}, nil
}

// NewMathUtilsTransactor creates a new write-only instance of MathUtils, bound to a specific deployed contract.
func NewMathUtilsTransactor(address common.Address, transactor bind.ContractTransactor) (*MathUtilsTransactor, error) {
	contract, err := bindMathUtils(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MathUtilsTransactor{contract: contract}, nil
}

// NewMathUtilsFilterer creates a new log filterer instance of MathUtils, bound to a specific deployed contract.
func NewMathUtilsFilterer(address common.Address, filterer bind.ContractFilterer) (*MathUtilsFilterer, error) {
	contract, err := bindMathUtils(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MathUtilsFilterer{contract: contract}, nil
}

// bindMathUtils binds a generic wrapper to an already deployed contract.
func bindMathUtils(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MathUtilsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MathUtils *MathUtilsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MathUtils.Contract.MathUtilsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MathUtils *MathUtilsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MathUtils.Contract.MathUtilsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MathUtils *MathUtilsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MathUtils.Contract.MathUtilsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MathUtils *MathUtilsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MathUtils.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MathUtils *MathUtilsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MathUtils.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MathUtils *MathUtilsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MathUtils.Contract.contract.Transact(opts, method, params...)
}

// MintableDelegationERC20ABI is the input ABI used to generate the binding from.
const MintableDelegationERC20ABI = "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegateeAddress\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegatee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// MintableDelegationERC20Bin is the compiled bytecode used for deploying new contracts.
var MintableDelegationERC20Bin = "0x60806040523480156200001157600080fd5b5060405162000e9538038062000e95833981810160405260608110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82516401000000008111828201881017156200008957600080fd5b82525081516020918201929091019080838360005b83811015620000b85781810151838201526020016200009e565b50505050905090810190601f168015620000e65780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200010a57600080fd5b9083019060208201858111156200012057600080fd5b82516401000000008111828201881017156200013b57600080fd5b82525081516020918201929091019080838360005b838110156200016a57818101518382015260200162000150565b50505050905090810190601f168015620001985780820380516001836020036101000a031916815260200191505b5060405260209081015185519093508592508491620001bd916003918501906200020d565b508051620001d39060049060208401906200020d565b50506005805460ff1916601217905550620001ee81620001f7565b505050620002a9565b6005805460ff191660ff92909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200025057805160ff191683800117855562000280565b8280016001018555821562000280579182015b828111156200028057825182559160200191906001019062000263565b506200028e92915062000292565b5090565b5b808211156200028e576000815560010162000293565b610bdc80620002b96000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80635c19a95c1161008c578063a0712d6811610066578063a0712d68146102c0578063a457c2d7146102dd578063a9059cbb14610309578063dd62ed3e14610335576100ea565b80635c19a95c1461026a57806370a082311461029257806395d89b41146102b8576100ea565b80631e31d053116100c85780631e31d053146101c657806323b872dd146101ea578063313ce56714610220578063395093511461023e576100ea565b806306fdde03146100ef578063095ea7b31461016c57806318160ddd146101ac575b600080fd5b6100f7610363565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610131578181015183820152602001610119565b50505050905090810190601f16801561015e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101986004803603604081101561018257600080fd5b506001600160a01b0381351690602001356103f9565b604080519115158252519081900360200190f35b6101b4610416565b60408051918252519081900360200190f35b6101ce61041c565b604080516001600160a01b039092168252519081900360200190f35b6101986004803603606081101561020057600080fd5b506001600160a01b03813581169160208101359091169060400135610430565b6102286104b7565b6040805160ff9092168252519081900360200190f35b6101986004803603604081101561025457600080fd5b506001600160a01b0381351690602001356104c0565b6102906004803603602081101561028057600080fd5b50356001600160a01b031661050e565b005b6101b4600480360360208110156102a857600080fd5b50356001600160a01b0316610536565b6100f7610551565b610198600480360360208110156102d657600080fd5b50356105b2565b610198600480360360408110156102f357600080fd5b506001600160a01b0381351690602001356105c6565b6101986004803603604081101561031f57600080fd5b506001600160a01b03813516906020013561062e565b6101b46004803603604081101561034b57600080fd5b506001600160a01b0381358116916020013516610642565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103ef5780601f106103c4576101008083540402835291602001916103ef565b820191906000526020600020905b8154815290600101906020018083116103d257829003601f168201915b5050505050905090565b600061040d61040661066d565b8484610671565b50600192915050565b60025490565b60055461010090046001600160a01b031681565b600061043d84848461075d565b6104ad8461044961066d565b6104a885604051806060016040528060288152602001610b11602891396001600160a01b038a1660009081526001602052604081209061048761066d565b6001600160a01b0316815260208101919091526040016000205491906108b8565b610671565b5060019392505050565b60055460ff1690565b600061040d6104cd61066d565b846104a885600160006104de61066d565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549061094f565b600580546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b6001600160a01b031660009081526020819052604090205490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103ef5780601f106103c4576101008083540402835291602001916103ef565b60006105be33836109b0565b506001919050565b600061040d6105d361066d565b846104a885604051806060016040528060258152602001610b8260259139600160006105fd61066d565b6001600160a01b03908116825260208083019390935260409182016000908120918d168152925290205491906108b8565b600061040d61063b61066d565b848461075d565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3390565b6001600160a01b0383166106b65760405162461bcd60e51b8152600401808060200182810382526024815260200180610b5e6024913960400191505060405180910390fd5b6001600160a01b0382166106fb5760405162461bcd60e51b8152600401808060200182810382526022815260200180610ac96022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166107a25760405162461bcd60e51b8152600401808060200182810382526025815260200180610b396025913960400191505060405180910390fd5b6001600160a01b0382166107e75760405162461bcd60e51b8152600401808060200182810382526023815260200180610aa66023913960400191505060405180910390fd5b6107f2838383610aa0565b61082f81604051806060016040528060268152602001610aeb602691396001600160a01b03861660009081526020819052604090205491906108b8565b6001600160a01b03808516600090815260208190526040808220939093559084168152205461085e908261094f565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600081848411156109475760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561090c5781810151838201526020016108f4565b50505050905090810190601f1680156109395780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000828201838110156109a9576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6001600160a01b038216610a0b576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b610a1760008383610aa0565b600254610a24908261094f565b6002556001600160a01b038216600090815260208190526040902054610a4a908261094f565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b50505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220aee9d544e963992fe3a26d79f6779fdb685fe83c2e3e078a30c8fd0bfea21f6d64736f6c634300060c0033"

// DeployMintableDelegationERC20 deploys a new Ethereum contract, binding an instance of MintableDelegationERC20 to it.
func DeployMintableDelegationERC20(auth *bind.TransactOpts, backend bind.ContractBackend, name string, symbol string, decimals uint8) (common.Address, *types.Transaction, *MintableDelegationERC20, error) {
	parsed, err := abi.JSON(strings.NewReader(MintableDelegationERC20ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(MintableDelegationERC20Bin), backend, name, symbol, decimals)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MintableDelegationERC20{MintableDelegationERC20Caller: MintableDelegationERC20Caller{contract: contract}, MintableDelegationERC20Transactor: MintableDelegationERC20Transactor{contract: contract}, MintableDelegationERC20Filterer: MintableDelegationERC20Filterer{contract: contract}}, nil
}

// MintableDelegationERC20 is an auto generated Go binding around an Ethereum contract.
type MintableDelegationERC20 struct {
	MintableDelegationERC20Caller     // Read-only binding to the contract
	MintableDelegationERC20Transactor // Write-only binding to the contract
	MintableDelegationERC20Filterer   // Log filterer for contract events
}

// MintableDelegationERC20Caller is an auto generated read-only Go binding around an Ethereum contract.
type MintableDelegationERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MintableDelegationERC20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type MintableDelegationERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MintableDelegationERC20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MintableDelegationERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MintableDelegationERC20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MintableDelegationERC20Session struct {
	Contract     *MintableDelegationERC20 // Generic contract binding to set the session for
	CallOpts     bind.CallOpts            // Call options to use throughout this session
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// MintableDelegationERC20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MintableDelegationERC20CallerSession struct {
	Contract *MintableDelegationERC20Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                  // Call options to use throughout this session
}

// MintableDelegationERC20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MintableDelegationERC20TransactorSession struct {
	Contract     *MintableDelegationERC20Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                  // Transaction auth options to use throughout this session
}

// MintableDelegationERC20Raw is an auto generated low-level Go binding around an Ethereum contract.
type MintableDelegationERC20Raw struct {
	Contract *MintableDelegationERC20 // Generic contract binding to access the raw methods on
}

// MintableDelegationERC20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MintableDelegationERC20CallerRaw struct {
	Contract *MintableDelegationERC20Caller // Generic read-only contract binding to access the raw methods on
}

// MintableDelegationERC20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MintableDelegationERC20TransactorRaw struct {
	Contract *MintableDelegationERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewMintableDelegationERC20 creates a new instance of MintableDelegationERC20, bound to a specific deployed contract.
func NewMintableDelegationERC20(address common.Address, backend bind.ContractBackend) (*MintableDelegationERC20, error) {
	contract, err := bindMintableDelegationERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MintableDelegationERC20{MintableDelegationERC20Caller: MintableDelegationERC20Caller{contract: contract}, MintableDelegationERC20Transactor: MintableDelegationERC20Transactor{contract: contract}, MintableDelegationERC20Filterer: MintableDelegationERC20Filterer{contract: contract}}, nil
}

// NewMintableDelegationERC20Caller creates a new read-only instance of MintableDelegationERC20, bound to a specific deployed contract.
func NewMintableDelegationERC20Caller(address common.Address, caller bind.ContractCaller) (*MintableDelegationERC20Caller, error) {
	contract, err := bindMintableDelegationERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MintableDelegationERC20Caller{contract: contract}, nil
}

// NewMintableDelegationERC20Transactor creates a new write-only instance of MintableDelegationERC20, bound to a specific deployed contract.
func NewMintableDelegationERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*MintableDelegationERC20Transactor, error) {
	contract, err := bindMintableDelegationERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MintableDelegationERC20Transactor{contract: contract}, nil
}

// NewMintableDelegationERC20Filterer creates a new log filterer instance of MintableDelegationERC20, bound to a specific deployed contract.
func NewMintableDelegationERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*MintableDelegationERC20Filterer, error) {
	contract, err := bindMintableDelegationERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MintableDelegationERC20Filterer{contract: contract}, nil
}

// bindMintableDelegationERC20 binds a generic wrapper to an already deployed contract.
func bindMintableDelegationERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MintableDelegationERC20ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MintableDelegationERC20 *MintableDelegationERC20Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MintableDelegationERC20.Contract.MintableDelegationERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MintableDelegationERC20 *MintableDelegationERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MintableDelegationERC20.Contract.MintableDelegationERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MintableDelegationERC20 *MintableDelegationERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MintableDelegationERC20.Contract.MintableDelegationERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MintableDelegationERC20 *MintableDelegationERC20CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MintableDelegationERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MintableDelegationERC20 *MintableDelegationERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MintableDelegationERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MintableDelegationERC20 *MintableDelegationERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MintableDelegationERC20.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_MintableDelegationERC20 *MintableDelegationERC20Caller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MintableDelegationERC20.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_MintableDelegationERC20 *MintableDelegationERC20Session) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _MintableDelegationERC20.Contract.Allowance(&_MintableDelegationERC20.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_MintableDelegationERC20 *MintableDelegationERC20CallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _MintableDelegationERC20.Contract.Allowance(&_MintableDelegationERC20.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_MintableDelegationERC20 *MintableDelegationERC20Caller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MintableDelegationERC20.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_MintableDelegationERC20 *MintableDelegationERC20Session) BalanceOf(account common.Address) (*big.Int, error) {
	return _MintableDelegationERC20.Contract.BalanceOf(&_MintableDelegationERC20.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_MintableDelegationERC20 *MintableDelegationERC20CallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _MintableDelegationERC20.Contract.BalanceOf(&_MintableDelegationERC20.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_MintableDelegationERC20 *MintableDelegationERC20Caller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _MintableDelegationERC20.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_MintableDelegationERC20 *MintableDelegationERC20Session) Decimals() (uint8, error) {
	return _MintableDelegationERC20.Contract.Decimals(&_MintableDelegationERC20.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_MintableDelegationERC20 *MintableDelegationERC20CallerSession) Decimals() (uint8, error) {
	return _MintableDelegationERC20.Contract.Decimals(&_MintableDelegationERC20.CallOpts)
}

// Delegatee is a free data retrieval call binding the contract method 0x1e31d053.
//
// Solidity: function delegatee() view returns(address)
func (_MintableDelegationERC20 *MintableDelegationERC20Caller) Delegatee(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MintableDelegationERC20.contract.Call(opts, &out, "delegatee")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Delegatee is a free data retrieval call binding the contract method 0x1e31d053.
//
// Solidity: function delegatee() view returns(address)
func (_MintableDelegationERC20 *MintableDelegationERC20Session) Delegatee() (common.Address, error) {
	return _MintableDelegationERC20.Contract.Delegatee(&_MintableDelegationERC20.CallOpts)
}

// Delegatee is a free data retrieval call binding the contract method 0x1e31d053.
//
// Solidity: function delegatee() view returns(address)
func (_MintableDelegationERC20 *MintableDelegationERC20CallerSession) Delegatee() (common.Address, error) {
	return _MintableDelegationERC20.Contract.Delegatee(&_MintableDelegationERC20.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MintableDelegationERC20 *MintableDelegationERC20Caller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _MintableDelegationERC20.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MintableDelegationERC20 *MintableDelegationERC20Session) Name() (string, error) {
	return _MintableDelegationERC20.Contract.Name(&_MintableDelegationERC20.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MintableDelegationERC20 *MintableDelegationERC20CallerSession) Name() (string, error) {
	return _MintableDelegationERC20.Contract.Name(&_MintableDelegationERC20.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MintableDelegationERC20 *MintableDelegationERC20Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _MintableDelegationERC20.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MintableDelegationERC20 *MintableDelegationERC20Session) Symbol() (string, error) {
	return _MintableDelegationERC20.Contract.Symbol(&_MintableDelegationERC20.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MintableDelegationERC20 *MintableDelegationERC20CallerSession) Symbol() (string, error) {
	return _MintableDelegationERC20.Contract.Symbol(&_MintableDelegationERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MintableDelegationERC20 *MintableDelegationERC20Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MintableDelegationERC20.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MintableDelegationERC20 *MintableDelegationERC20Session) TotalSupply() (*big.Int, error) {
	return _MintableDelegationERC20.Contract.TotalSupply(&_MintableDelegationERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MintableDelegationERC20 *MintableDelegationERC20CallerSession) TotalSupply() (*big.Int, error) {
	return _MintableDelegationERC20.Contract.TotalSupply(&_MintableDelegationERC20.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_MintableDelegationERC20 *MintableDelegationERC20Transactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MintableDelegationERC20.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_MintableDelegationERC20 *MintableDelegationERC20Session) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MintableDelegationERC20.Contract.Approve(&_MintableDelegationERC20.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_MintableDelegationERC20 *MintableDelegationERC20TransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MintableDelegationERC20.Contract.Approve(&_MintableDelegationERC20.TransactOpts, spender, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_MintableDelegationERC20 *MintableDelegationERC20Transactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _MintableDelegationERC20.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_MintableDelegationERC20 *MintableDelegationERC20Session) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _MintableDelegationERC20.Contract.DecreaseAllowance(&_MintableDelegationERC20.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_MintableDelegationERC20 *MintableDelegationERC20TransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _MintableDelegationERC20.Contract.DecreaseAllowance(&_MintableDelegationERC20.TransactOpts, spender, subtractedValue)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegateeAddress) returns()
func (_MintableDelegationERC20 *MintableDelegationERC20Transactor) Delegate(opts *bind.TransactOpts, delegateeAddress common.Address) (*types.Transaction, error) {
	return _MintableDelegationERC20.contract.Transact(opts, "delegate", delegateeAddress)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegateeAddress) returns()
func (_MintableDelegationERC20 *MintableDelegationERC20Session) Delegate(delegateeAddress common.Address) (*types.Transaction, error) {
	return _MintableDelegationERC20.Contract.Delegate(&_MintableDelegationERC20.TransactOpts, delegateeAddress)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegateeAddress) returns()
func (_MintableDelegationERC20 *MintableDelegationERC20TransactorSession) Delegate(delegateeAddress common.Address) (*types.Transaction, error) {
	return _MintableDelegationERC20.Contract.Delegate(&_MintableDelegationERC20.TransactOpts, delegateeAddress)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_MintableDelegationERC20 *MintableDelegationERC20Transactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _MintableDelegationERC20.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_MintableDelegationERC20 *MintableDelegationERC20Session) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _MintableDelegationERC20.Contract.IncreaseAllowance(&_MintableDelegationERC20.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_MintableDelegationERC20 *MintableDelegationERC20TransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _MintableDelegationERC20.Contract.IncreaseAllowance(&_MintableDelegationERC20.TransactOpts, spender, addedValue)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 value) returns(bool)
func (_MintableDelegationERC20 *MintableDelegationERC20Transactor) Mint(opts *bind.TransactOpts, value *big.Int) (*types.Transaction, error) {
	return _MintableDelegationERC20.contract.Transact(opts, "mint", value)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 value) returns(bool)
func (_MintableDelegationERC20 *MintableDelegationERC20Session) Mint(value *big.Int) (*types.Transaction, error) {
	return _MintableDelegationERC20.Contract.Mint(&_MintableDelegationERC20.TransactOpts, value)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 value) returns(bool)
func (_MintableDelegationERC20 *MintableDelegationERC20TransactorSession) Mint(value *big.Int) (*types.Transaction, error) {
	return _MintableDelegationERC20.Contract.Mint(&_MintableDelegationERC20.TransactOpts, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_MintableDelegationERC20 *MintableDelegationERC20Transactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MintableDelegationERC20.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_MintableDelegationERC20 *MintableDelegationERC20Session) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MintableDelegationERC20.Contract.Transfer(&_MintableDelegationERC20.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_MintableDelegationERC20 *MintableDelegationERC20TransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MintableDelegationERC20.Contract.Transfer(&_MintableDelegationERC20.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_MintableDelegationERC20 *MintableDelegationERC20Transactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MintableDelegationERC20.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_MintableDelegationERC20 *MintableDelegationERC20Session) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MintableDelegationERC20.Contract.TransferFrom(&_MintableDelegationERC20.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_MintableDelegationERC20 *MintableDelegationERC20TransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MintableDelegationERC20.Contract.TransferFrom(&_MintableDelegationERC20.TransactOpts, sender, recipient, amount)
}

// MintableDelegationERC20ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the MintableDelegationERC20 contract.
type MintableDelegationERC20ApprovalIterator struct {
	Event *MintableDelegationERC20Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MintableDelegationERC20ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MintableDelegationERC20Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MintableDelegationERC20Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MintableDelegationERC20ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MintableDelegationERC20ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MintableDelegationERC20Approval represents a Approval event raised by the MintableDelegationERC20 contract.
type MintableDelegationERC20Approval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_MintableDelegationERC20 *MintableDelegationERC20Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*MintableDelegationERC20ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _MintableDelegationERC20.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &MintableDelegationERC20ApprovalIterator{contract: _MintableDelegationERC20.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_MintableDelegationERC20 *MintableDelegationERC20Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *MintableDelegationERC20Approval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _MintableDelegationERC20.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MintableDelegationERC20Approval)
				if err := _MintableDelegationERC20.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_MintableDelegationERC20 *MintableDelegationERC20Filterer) ParseApproval(log types.Log) (*MintableDelegationERC20Approval, error) {
	event := new(MintableDelegationERC20Approval)
	if err := _MintableDelegationERC20.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MintableDelegationERC20TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the MintableDelegationERC20 contract.
type MintableDelegationERC20TransferIterator struct {
	Event *MintableDelegationERC20Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MintableDelegationERC20TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MintableDelegationERC20Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MintableDelegationERC20Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MintableDelegationERC20TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MintableDelegationERC20TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MintableDelegationERC20Transfer represents a Transfer event raised by the MintableDelegationERC20 contract.
type MintableDelegationERC20Transfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_MintableDelegationERC20 *MintableDelegationERC20Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MintableDelegationERC20TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MintableDelegationERC20.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &MintableDelegationERC20TransferIterator{contract: _MintableDelegationERC20.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_MintableDelegationERC20 *MintableDelegationERC20Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *MintableDelegationERC20Transfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MintableDelegationERC20.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MintableDelegationERC20Transfer)
				if err := _MintableDelegationERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_MintableDelegationERC20 *MintableDelegationERC20Filterer) ParseTransfer(log types.Log) (*MintableDelegationERC20Transfer, error) {
	event := new(MintableDelegationERC20Transfer)
	if err := _MintableDelegationERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MintableERC20ABI is the input ABI used to generate the binding from.
const MintableERC20ABI = "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// MintableERC20Bin is the compiled bytecode used for deploying new contracts.
var MintableERC20Bin = "0x60806040523480156200001157600080fd5b5060405162000dde38038062000dde833981810160405260608110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82516401000000008111828201881017156200008957600080fd5b82525081516020918201929091019080838360005b83811015620000b85781810151838201526020016200009e565b50505050905090810190601f168015620000e65780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200010a57600080fd5b9083019060208201858111156200012057600080fd5b82516401000000008111828201881017156200013b57600080fd5b82525081516020918201929091019080838360005b838110156200016a57818101518382015260200162000150565b50505050905090810190601f168015620001985780820380516001836020036101000a031916815260200191505b5060405260209081015185519093508592508491620001bd916003918501906200020d565b508051620001d39060049060208401906200020d565b50506005805460ff1916601217905550620001ee81620001f7565b505050620002a9565b6005805460ff191660ff92909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200025057805160ff191683800117855562000280565b8280016001018555821562000280579182015b828111156200028057825182559160200191906001019062000263565b506200028e92915062000292565b5090565b5b808211156200028e576000815560010162000293565b610b2580620002b96000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806370a082311161007157806370a082311461021057806395d89b4114610236578063a0712d681461023e578063a457c2d71461025b578063a9059cbb14610287578063dd62ed3e146102b3576100b4565b806306fdde03146100b9578063095ea7b31461013657806318160ddd1461017657806323b872dd14610190578063313ce567146101c657806339509351146101e4575b600080fd5b6100c16102e1565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100fb5781810151838201526020016100e3565b50505050905090810190601f1680156101285780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101626004803603604081101561014c57600080fd5b506001600160a01b038135169060200135610377565b604080519115158252519081900360200190f35b61017e610394565b60408051918252519081900360200190f35b610162600480360360608110156101a657600080fd5b506001600160a01b0381358116916020810135909116906040013561039a565b6101ce610421565b6040805160ff9092168252519081900360200190f35b610162600480360360408110156101fa57600080fd5b506001600160a01b03813516906020013561042a565b61017e6004803603602081101561022657600080fd5b50356001600160a01b0316610478565b6100c1610493565b6101626004803603602081101561025457600080fd5b50356104f4565b6101626004803603604081101561027157600080fd5b506001600160a01b03813516906020013561050f565b6101626004803603604081101561029d57600080fd5b506001600160a01b038135169060200135610577565b61017e600480360360408110156102c957600080fd5b506001600160a01b038135811691602001351661058b565b60038054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561036d5780601f106103425761010080835404028352916020019161036d565b820191906000526020600020905b81548152906001019060200180831161035057829003601f168201915b5050505050905090565b600061038b6103846105b6565b84846105ba565b50600192915050565b60025490565b60006103a78484846106a6565b610417846103b36105b6565b61041285604051806060016040528060288152602001610a5a602891396001600160a01b038a166000908152600160205260408120906103f16105b6565b6001600160a01b031681526020810191909152604001600020549190610801565b6105ba565b5060019392505050565b60055460ff1690565b600061038b6104376105b6565b8461041285600160006104486105b6565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490610898565b6001600160a01b031660009081526020819052604090205490565b60048054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561036d5780601f106103425761010080835404028352916020019161036d565b60006105076105016105b6565b836108f9565b506001919050565b600061038b61051c6105b6565b8461041285604051806060016040528060258152602001610acb60259139600160006105466105b6565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190610801565b600061038b6105846105b6565b84846106a6565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3390565b6001600160a01b0383166105ff5760405162461bcd60e51b8152600401808060200182810382526024815260200180610aa76024913960400191505060405180910390fd5b6001600160a01b0382166106445760405162461bcd60e51b8152600401808060200182810382526022815260200180610a126022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166106eb5760405162461bcd60e51b8152600401808060200182810382526025815260200180610a826025913960400191505060405180910390fd5b6001600160a01b0382166107305760405162461bcd60e51b81526004018080602001828103825260238152602001806109ef6023913960400191505060405180910390fd5b61073b8383836109e9565b61077881604051806060016040528060268152602001610a34602691396001600160a01b0386166000908152602081905260409020549190610801565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546107a79082610898565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600081848411156108905760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561085557818101518382015260200161083d565b50505050905090810190601f1680156108825780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000828201838110156108f2576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6001600160a01b038216610954576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b610960600083836109e9565b60025461096d9082610898565b6002556001600160a01b0382166000908152602081905260409020546109939082610898565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b50505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212200623e745a56420dbcda84dfdffec6b8889bc6596de0b6a1408c1e315f561c75d64736f6c634300060c0033"

// DeployMintableERC20 deploys a new Ethereum contract, binding an instance of MintableERC20 to it.
func DeployMintableERC20(auth *bind.TransactOpts, backend bind.ContractBackend, name string, symbol string, decimals uint8) (common.Address, *types.Transaction, *MintableERC20, error) {
	parsed, err := abi.JSON(strings.NewReader(MintableERC20ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(MintableERC20Bin), backend, name, symbol, decimals)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MintableERC20{MintableERC20Caller: MintableERC20Caller{contract: contract}, MintableERC20Transactor: MintableERC20Transactor{contract: contract}, MintableERC20Filterer: MintableERC20Filterer{contract: contract}}, nil
}

// MintableERC20 is an auto generated Go binding around an Ethereum contract.
type MintableERC20 struct {
	MintableERC20Caller     // Read-only binding to the contract
	MintableERC20Transactor // Write-only binding to the contract
	MintableERC20Filterer   // Log filterer for contract events
}

// MintableERC20Caller is an auto generated read-only Go binding around an Ethereum contract.
type MintableERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MintableERC20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type MintableERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MintableERC20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MintableERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MintableERC20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MintableERC20Session struct {
	Contract     *MintableERC20    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MintableERC20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MintableERC20CallerSession struct {
	Contract *MintableERC20Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// MintableERC20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MintableERC20TransactorSession struct {
	Contract     *MintableERC20Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// MintableERC20Raw is an auto generated low-level Go binding around an Ethereum contract.
type MintableERC20Raw struct {
	Contract *MintableERC20 // Generic contract binding to access the raw methods on
}

// MintableERC20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MintableERC20CallerRaw struct {
	Contract *MintableERC20Caller // Generic read-only contract binding to access the raw methods on
}

// MintableERC20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MintableERC20TransactorRaw struct {
	Contract *MintableERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewMintableERC20 creates a new instance of MintableERC20, bound to a specific deployed contract.
func NewMintableERC20(address common.Address, backend bind.ContractBackend) (*MintableERC20, error) {
	contract, err := bindMintableERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MintableERC20{MintableERC20Caller: MintableERC20Caller{contract: contract}, MintableERC20Transactor: MintableERC20Transactor{contract: contract}, MintableERC20Filterer: MintableERC20Filterer{contract: contract}}, nil
}

// NewMintableERC20Caller creates a new read-only instance of MintableERC20, bound to a specific deployed contract.
func NewMintableERC20Caller(address common.Address, caller bind.ContractCaller) (*MintableERC20Caller, error) {
	contract, err := bindMintableERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MintableERC20Caller{contract: contract}, nil
}

// NewMintableERC20Transactor creates a new write-only instance of MintableERC20, bound to a specific deployed contract.
func NewMintableERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*MintableERC20Transactor, error) {
	contract, err := bindMintableERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MintableERC20Transactor{contract: contract}, nil
}

// NewMintableERC20Filterer creates a new log filterer instance of MintableERC20, bound to a specific deployed contract.
func NewMintableERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*MintableERC20Filterer, error) {
	contract, err := bindMintableERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MintableERC20Filterer{contract: contract}, nil
}

// bindMintableERC20 binds a generic wrapper to an already deployed contract.
func bindMintableERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MintableERC20ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MintableERC20 *MintableERC20Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MintableERC20.Contract.MintableERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MintableERC20 *MintableERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MintableERC20.Contract.MintableERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MintableERC20 *MintableERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MintableERC20.Contract.MintableERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MintableERC20 *MintableERC20CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MintableERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MintableERC20 *MintableERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MintableERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MintableERC20 *MintableERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MintableERC20.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_MintableERC20 *MintableERC20Caller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MintableERC20.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_MintableERC20 *MintableERC20Session) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _MintableERC20.Contract.Allowance(&_MintableERC20.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_MintableERC20 *MintableERC20CallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _MintableERC20.Contract.Allowance(&_MintableERC20.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_MintableERC20 *MintableERC20Caller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MintableERC20.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_MintableERC20 *MintableERC20Session) BalanceOf(account common.Address) (*big.Int, error) {
	return _MintableERC20.Contract.BalanceOf(&_MintableERC20.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_MintableERC20 *MintableERC20CallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _MintableERC20.Contract.BalanceOf(&_MintableERC20.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_MintableERC20 *MintableERC20Caller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _MintableERC20.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_MintableERC20 *MintableERC20Session) Decimals() (uint8, error) {
	return _MintableERC20.Contract.Decimals(&_MintableERC20.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_MintableERC20 *MintableERC20CallerSession) Decimals() (uint8, error) {
	return _MintableERC20.Contract.Decimals(&_MintableERC20.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MintableERC20 *MintableERC20Caller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _MintableERC20.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MintableERC20 *MintableERC20Session) Name() (string, error) {
	return _MintableERC20.Contract.Name(&_MintableERC20.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MintableERC20 *MintableERC20CallerSession) Name() (string, error) {
	return _MintableERC20.Contract.Name(&_MintableERC20.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MintableERC20 *MintableERC20Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _MintableERC20.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MintableERC20 *MintableERC20Session) Symbol() (string, error) {
	return _MintableERC20.Contract.Symbol(&_MintableERC20.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MintableERC20 *MintableERC20CallerSession) Symbol() (string, error) {
	return _MintableERC20.Contract.Symbol(&_MintableERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MintableERC20 *MintableERC20Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MintableERC20.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MintableERC20 *MintableERC20Session) TotalSupply() (*big.Int, error) {
	return _MintableERC20.Contract.TotalSupply(&_MintableERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MintableERC20 *MintableERC20CallerSession) TotalSupply() (*big.Int, error) {
	return _MintableERC20.Contract.TotalSupply(&_MintableERC20.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_MintableERC20 *MintableERC20Transactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MintableERC20.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_MintableERC20 *MintableERC20Session) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.Approve(&_MintableERC20.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_MintableERC20 *MintableERC20TransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.Approve(&_MintableERC20.TransactOpts, spender, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_MintableERC20 *MintableERC20Transactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _MintableERC20.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_MintableERC20 *MintableERC20Session) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.DecreaseAllowance(&_MintableERC20.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_MintableERC20 *MintableERC20TransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.DecreaseAllowance(&_MintableERC20.TransactOpts, spender, subtractedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_MintableERC20 *MintableERC20Transactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _MintableERC20.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_MintableERC20 *MintableERC20Session) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.IncreaseAllowance(&_MintableERC20.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_MintableERC20 *MintableERC20TransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.IncreaseAllowance(&_MintableERC20.TransactOpts, spender, addedValue)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 value) returns(bool)
func (_MintableERC20 *MintableERC20Transactor) Mint(opts *bind.TransactOpts, value *big.Int) (*types.Transaction, error) {
	return _MintableERC20.contract.Transact(opts, "mint", value)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 value) returns(bool)
func (_MintableERC20 *MintableERC20Session) Mint(value *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.Mint(&_MintableERC20.TransactOpts, value)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 value) returns(bool)
func (_MintableERC20 *MintableERC20TransactorSession) Mint(value *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.Mint(&_MintableERC20.TransactOpts, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_MintableERC20 *MintableERC20Transactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MintableERC20.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_MintableERC20 *MintableERC20Session) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.Transfer(&_MintableERC20.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_MintableERC20 *MintableERC20TransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.Transfer(&_MintableERC20.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_MintableERC20 *MintableERC20Transactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MintableERC20.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_MintableERC20 *MintableERC20Session) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.TransferFrom(&_MintableERC20.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_MintableERC20 *MintableERC20TransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.TransferFrom(&_MintableERC20.TransactOpts, sender, recipient, amount)
}

// MintableERC20ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the MintableERC20 contract.
type MintableERC20ApprovalIterator struct {
	Event *MintableERC20Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MintableERC20ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MintableERC20Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MintableERC20Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MintableERC20ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MintableERC20ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MintableERC20Approval represents a Approval event raised by the MintableERC20 contract.
type MintableERC20Approval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_MintableERC20 *MintableERC20Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*MintableERC20ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _MintableERC20.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &MintableERC20ApprovalIterator{contract: _MintableERC20.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_MintableERC20 *MintableERC20Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *MintableERC20Approval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _MintableERC20.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MintableERC20Approval)
				if err := _MintableERC20.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_MintableERC20 *MintableERC20Filterer) ParseApproval(log types.Log) (*MintableERC20Approval, error) {
	event := new(MintableERC20Approval)
	if err := _MintableERC20.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MintableERC20TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the MintableERC20 contract.
type MintableERC20TransferIterator struct {
	Event *MintableERC20Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MintableERC20TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MintableERC20Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MintableERC20Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MintableERC20TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MintableERC20TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MintableERC20Transfer represents a Transfer event raised by the MintableERC20 contract.
type MintableERC20Transfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_MintableERC20 *MintableERC20Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MintableERC20TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MintableERC20.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &MintableERC20TransferIterator{contract: _MintableERC20.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_MintableERC20 *MintableERC20Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *MintableERC20Transfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MintableERC20.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MintableERC20Transfer)
				if err := _MintableERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_MintableERC20 *MintableERC20Filterer) ParseTransfer(log types.Log) (*MintableERC20Transfer, error) {
	event := new(MintableERC20Transfer)
	if err := _MintableERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MockATokenABI is the input ABI used to generate the binding from.
const MockATokenABI = "[{\"inputs\":[{\"internalType\":\"contractLendingPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingAssetAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reserveTreasury\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"incentivesController\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"BalanceTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ATOKEN_REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712_REVISION\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL\",\"outputs\":[{\"internalType\":\"contractILendingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESERVE_TREASURY_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UINT_MAX_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNDERLYING_ASSET_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverOfUnderlying\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getScaledUserBalanceAndSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_underlyingAssetDecimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"mintToTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"scaledBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scaledTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferOnLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferUnderlyingTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// MockATokenBin is the compiled bytecode used for deploying new contracts.
var MockATokenBin = "0x610100604052600080553480156200001657600080fd5b5060405162002ae238038062002ae2833981810160405260c08110156200003c57600080fd5b8151602083015160408085015160608601805192519496939591949391820192846401000000008211156200007057600080fd5b9083019060208201858111156200008657600080fd5b8251640100000000811182820188101715620000a157600080fd5b82525081516020918201929091019080838360005b83811015620000d0578181015183820152602001620000b6565b50505050905090810190601f168015620000fe5780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200012257600080fd5b9083019060208201858111156200013857600080fd5b82516401000000008111828201881017156200015357600080fd5b82525081516020918201929091019080838360005b838110156200018257818101518382015260200162000168565b50505050905090810190601f168015620001b05780820380516001836020036101000a031916815260200191505b506040526020018051906020019092919050505085858585858582826012838360379080519060200190620001e79291906200024f565b508251620001fd9060389060208601906200024f565b506039805460ff90931660ff19909316929092179091556001600160601b0319606091821b811660805298811b891660e05296871b881660a0525050505050901b1660c05250620002eb945050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200029257805160ff1916838001178555620002c2565b82800160010185558215620002c2579182015b82811115620002c2578251825591602001919060010190620002a5565b50620002d0929150620002d4565b5090565b5b80821115620002d05760008155600101620002d5565b60805160601c60a05160601c60c05160601c60e05160601c6127476200039b600039806107c652806109ce5280610d0a5280610ded5280610eb55280610ef6528061146a52806116755280611dc25280611f1e525080610fa75280610fe8528061103e52806111b45250806109fd5280610db95280610e1c52806111d852806115985280611df15280611ecf525080611a335280611a5a5280612309528061233752806123e752506127476000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80637535d24611610104578063b16a19de116100a2578063d505accf11610071578063d505accf146105fa578063d7020d0a1461064b578063dd62ed3e14610687578063f866c319146106b5576101da565b8063b16a19de146105bc578063b1bf962d146105c4578063b9844d8d146105cc578063d0fc81d2146105f2576101da565b806395d89b41116100de57806395d89b4114610554578063a457c2d71461055c578063a9059cbb14610588578063ae167335146105b4576101da565b80637535d2461461050557806378160376146105295780637df5bd3b14610531576101da565b806323b872dd1161017c5780633644e5151161014b5780633644e5151461047f57806339509351146104875780634efecaa5146104b357806370a08231146104df576101da565b806323b872dd1461035557806330adf81f1461038b5780633118724e14610393578063313ce56714610461576101da565b80630bd7ad3b116101b85780630bd7ad3b146102db578063156e29f6146102f557806318160ddd146103275780631da24f3e1461032f576101da565b806306fdde03146101df578063095ea7b31461025c5780630afbcdc91461029c575b600080fd5b6101e76106eb565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610221578181015183820152602001610209565b50505050905090810190601f16801561024e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102886004803603604081101561027257600080fd5b506001600160a01b038135169060200135610782565b604080519115158252519081900360200190f35b6102c2600480360360208110156102b257600080fd5b50356001600160a01b03166107a0565b6040805192835260208301919091528051918290030190f35b6102e36107bd565b60408051918252519081900360200190f35b6102886004803603606081101561030b57600080fd5b506001600160a01b0381351690602081013590604001356107c2565b6102e36109ad565b6102e36004803603602081101561034557600080fd5b50356001600160a01b0316610a92565b6102886004803603606081101561036b57600080fd5b506001600160a01b03813581169160208101359091169060400135610a9d565b6102e3610b5d565b61045f600480360360608110156103a957600080fd5b60ff82351691908101906040810160208201356401000000008111156103ce57600080fd5b8201836020820111156103e057600080fd5b8035906020019184600183028401116401000000008311171561040257600080fd5b91939092909160208101903564010000000081111561042057600080fd5b82018360208201111561043257600080fd5b8035906020019184600183028401116401000000008311171561045457600080fd5b509092509050610b81565b005b610469610ca9565b6040805160ff9092168252519081900360200190f35b6102e3610cb2565b6102886004803603604081101561049d57600080fd5b506001600160a01b038135169060200135610cb8565b6102e3600480360360408110156104c957600080fd5b506001600160a01b038135169060200135610d06565b6102e3600480360360208110156104f557600080fd5b50356001600160a01b0316610de6565b61050d610eb3565b604080516001600160a01b039092168252519081900360200190f35b6101e7610ed7565b61045f6004803603604081101561054757600080fd5b5080359060200135610ef4565b6101e761108c565b6102886004803603604081101561057257600080fd5b506001600160a01b0381351690602001356110ed565b6102886004803603604081101561059e57600080fd5b506001600160a01b038135169060200135611155565b61050d6111b2565b61050d6111d6565b6102e36111fa565b6102e3600480360360208110156105e257600080fd5b50356001600160a01b0316611209565b6102e361121b565b61045f600480360360e081101561061057600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135611221565b61045f6004803603608081101561066157600080fd5b506001600160a01b03813581169160208101359091169060408101359060600135611468565b6102e36004803603604081101561069d57600080fd5b506001600160a01b0381358116916020013516611648565b61045f600480360360608110156106cb57600080fd5b506001600160a01b03813581169160208101359091169060400135611673565b60378054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156107775780601f1061074c57610100808354040283529160200191610777565b820191906000526020600020905b81548152906001019060200180831161075a57829003601f168201915b505050505090505b90565b600061079661078f611762565b8484611766565b5060015b92915050565b6000806107ac83611852565b6107b461186d565b91509150915091565b600181565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107f6611762565b6001600160a01b03161460405180604001604052806002815260200161323960f01b815250906108a45760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610869578181015183820152602001610851565b50505050905090810190601f1680156108965780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060006108b085611852565b905060006108be8585611873565b6040805180820190915260028152611a9b60f11b6020820152909150816109265760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610869578181015183820152602001610851565b50610931868261197a565b6040805186815290516001600160a01b038816916000916000805160206126398339815191529181900360200190a3604080518681526020810186905281516001600160a01b038916927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a25015949350505050565b6000806109b861186d565b9050806109c957600091505061077f565b610a8c7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d15e00537f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610a5957600080fd5b505afa158015610a6d573d6000803e3d6000fd5b505050506040513d6020811015610a8357600080fd5b50518290611af6565b91505090565b600061079a82611852565b6000610aaa848484611bb4565b610b1a84610ab6611762565b610b15856040518060600160405280602881526020016125e3602891396001600160a01b038a16600090815260356020526040812090610af4611762565b6001600160a01b031681526020810191909152604001600020549190611bc6565b611766565b826001600160a01b0316846001600160a01b0316600080516020612639833981519152846040518082815260200191505060405180910390a35060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6000610b8b611c20565b60015490915060ff1680610ba25750610ba2611c25565b80610bae575060005481115b610be95760405162461bcd60e51b815260040180806020018281038252602e81526020018061260b602e913960400191505060405180910390fd5b60015460ff16158015610c08576001805460ff19168117905560008290555b610c4786868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c2b92505050565b610c8684848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c3e92505050565b610c8f87611c51565b8015610ca0576001805460ff191690555b50505050505050565b60395460ff1690565b603b5481565b6000610796610cc5611762565b84610b158560356000610cd6611762565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490611c67565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610d3a611762565b6001600160a01b03161460405180604001604052806002815260200161323960f01b81525090610dab5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610869578181015183820152602001610851565b50610de06001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168484611cc8565b50919050565b600061079a7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d15e00537f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610e7857600080fd5b505afa158015610e8c573d6000803e3d6000fd5b505050506040513d6020811015610ea257600080fd5b5051610ead84611852565b90611af6565b7f000000000000000000000000000000000000000000000000000000000000000081565b604051806040016040528060018152602001603160f81b81525081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610f26611762565b6001600160a01b03161460405180604001604052806002815260200161323960f01b81525090610f975760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610869578181015183820152602001610851565b5081610fa257611088565b610fd57f0000000000000000000000000000000000000000000000000000000000000000610fd08484611873565b61197a565b6040805183815290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916000916000805160206126398339815191529181900360200190a3604080518381526020810183905281516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a25b5050565b60388054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156107775780601f1061074c57610100808354040283529160200191610777565b60006107966110fa611762565b84610b15856040518060600160405280602581526020016126ed6025913960356000611124611762565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190611bc6565b6000611169611162611762565b8484611bb4565b826001600160a01b031661117b611762565b6001600160a01b0316600080516020612639833981519152846040518082815260200191505060405180910390a350600192915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061120461186d565b905090565b603a6020526000908152604090205481565b60001981565b6001600160a01b03871661126c576040805162461bcd60e51b815260206004820152600d60248201526c24a72b20a624a22fa7aba722a960991b604482015290519081900360640190fd5b834211156112b6576040805162461bcd60e51b815260206004820152601260248201527124a72b20a624a22fa2ac2824a920aa24a7a760711b604482015290519081900360640190fd5b6001600160a01b038088166000818152603a6020908152604080832054603b5482517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958c166060860152608085018b905260a0850181905260c08086018b90528251808703909101815260e08601835280519084012061190160f01b6101008701526101028601969096526101228086019690965281518086039096018652610142850180835286519684019690962093909552610162840180825283905260ff88166101828501526101a284018790526101c284018690525191926001926101e28083019392601f198301929081900390910190855afa1580156113cb573d6000803e3d6000fd5b505050602060405103516001600160a01b0316896001600160a01b03161461142e576040805162461bcd60e51b8152602060048201526011602482015270494e56414c49445f5349474e415455524560781b604482015290519081900360640190fd5b611439826001611c67565b6001600160a01b038a166000908152603a602052604090205561145d898989611766565b505050505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661149a611762565b6001600160a01b03161460405180604001604052806002815260200161323960f01b8152509061150b5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610869578181015183820152602001610851565b5060006115188383611873565b60408051808201909152600281526106a760f31b6020820152909150816115805760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610869578181015183820152602001610851565b5061158b8582611d1a565b6115bf6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168585611cc8565b6040805184815290516000916001600160a01b038816916000805160206126398339815191529181900360200190a3836001600160a01b0316856001600160a01b03167f5d624aa9c148153ab3446c1b154f660ee7701e549fe9b62dab7171b1c80e6fa28585604051808381526020018281526020019250505060405180910390a35050505050565b6001600160a01b03918216600090815260356020908152604080832093909416825291909152205490565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166116a5611762565b6001600160a01b03161460405180604001604052806002815260200161323960f01b815250906117165760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610869578181015183820152602001610851565b506117248383836000611dbe565b816001600160a01b0316836001600160a01b0316600080516020612639833981519152836040518082815260200191505060405180910390a3505050565b3390565b6001600160a01b0383166117ab5760405162461bcd60e51b815260040180806020018281038252602481526020018061269f6024913960400191505060405180910390fd5b6001600160a01b0382166117f05760405162461bcd60e51b815260040180806020018281038252602281526020018061259b6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260356020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b031660009081526034602052604090205490565b60365490565b604080518082019091526002815261035360f41b6020820152600090826118db5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610869578181015183820152602001610851565b5060408051808201909152600280825261068760f31b60208301528304906b033b2e3c9fd0803ce80000008219048511156119575760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610869578181015183820152602001610851565b5082816b033b2e3c9fd0803ce80000008602018161197157fe5b04949350505050565b6001600160a01b0382166119d5576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6119e160008383611bc1565b6036546119ee8183611c67565b6036556001600160a01b038316600090815260346020526040902054611a148184611c67565b6001600160a01b038086166000908152603460205260409020919091557f00000000000000000000000000000000000000000000000000000000000000001615611af0577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166331873e2e8584846040518463ffffffff1660e01b815260040180846001600160a01b031681526020018381526020018281526020019350505050600060405180830381600087803b158015611ad757600080fd5b505af1158015611aeb573d6000803e3d6000fd5b505050505b50505050565b6000821580611b03575081155b15611b105750600061079a565b816b019d971e4fe8401e740000001981611b2657fe5b0483111560405180604001604052806002815260200161068760f31b81525090611b915760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610869578181015183820152602001610851565b50506b033b2e3c9fd0803ce800000091026b019d971e4fe8401e74000000010490565b611bc18383836001611dbe565b505050565b60008184841115611c185760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610869578181015183820152602001610851565b505050900390565b600290565b303b1590565b80516110889060379060208401906124c2565b80516110889060389060208401906124c2565b6039805460ff191660ff92909216919091179055565b600082820183811015611cc1576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611bc1908490611fdd565b6001600160a01b038216611d5f5760405162461bcd60e51b81526004018080602001828103825260218152602001806126596021913960400191505060405180910390fd5b611d6b82600083611bc1565b603654611d788183612195565b6036556001600160a01b0383166000908152603460209081526040918290205482516060810190935260228084529092611a149286929061257990830139839190611bc6565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d15e00537f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611e4d57600080fd5b505afa158015611e61573d6000803e3d6000fd5b505050506040513d6020811015611e7757600080fd5b505190506000611e8a82610ead88611852565b90506000611e9b83610ead88611852565b9050611eb18787611eac8887611873565b6121d7565b8315611f81576040805163d5ed393360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015289811660248301528881166044830152606482018890526084820185905260a4820184905291517f00000000000000000000000000000000000000000000000000000000000000009092169163d5ed39339160c48082019260009290919082900301818387803b158015611f6857600080fd5b505af1158015611f7c573d6000803e3d6000fd5b505050505b856001600160a01b0316876001600160a01b03167f4beccb90f994c31aced7a23b5611020728a23d8ec5cddd1a3e9d97b96fda86668786604051808381526020018281526020019250505060405180910390a350505050505050565b611fef826001600160a01b0316612486565b612040576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b6020831061207e5780518252601f19909201916020918201910161205f565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146120e0576040519150601f19603f3d011682016040523d82523d6000602084013e6120e5565b606091505b50915091508161213c576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b805115611af05780806020019051602081101561215857600080fd5b5051611af05760405162461bcd60e51b815260040180806020018281038252602a8152602001806126c3602a913960400191505060405180910390fd5b6000611cc183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611bc6565b6001600160a01b03831661221c5760405162461bcd60e51b815260040180806020018281038252602581526020018061267a6025913960400191505060405180910390fd5b6001600160a01b0382166122615760405162461bcd60e51b81526004018080602001828103825260238152602001806125566023913960400191505060405180910390fd5b61226c838383611bc1565b600060346000856001600160a01b03166001600160a01b031681526020019081526020016000205490506122bb826040518060600160405280602681526020016125bd60269139839190611bc6565b6001600160a01b0380861660009081526034602052604080822093909355908516815220546122ea8184611c67565b6001600160a01b038086166000908152603460205260409020919091557f0000000000000000000000000000000000000000000000000000000000000000161561247f57600060365490507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166331873e2e8783866040518463ffffffff1660e01b815260040180846001600160a01b031681526020018381526020018281526020019350505050600060405180830381600087803b1580156123b457600080fd5b505af11580156123c8573d6000803e3d6000fd5b50505050846001600160a01b0316866001600160a01b03161461247d577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166331873e2e8683856040518463ffffffff1660e01b815260040180846001600160a01b031681526020018381526020018281526020019350505050600060405180830381600087803b15801561246457600080fd5b505af1158015612478573d6000803e3d6000fd5b505050505b505b5050505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906124ba57508115155b949350505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061250357805160ff1916838001178555612530565b82800160010185558215612530579182015b82811115612530578251825591602001919060010190612515565b5061253c929150612540565b5090565b5b8082111561253c576000815560010161254156fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef45524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f74207375636365656445524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212202602201bafa47df31a8efc050a59778b58aa707dd09e364ec3a763a68530121a64736f6c634300060c0033"

// DeployMockAToken deploys a new Ethereum contract, binding an instance of MockAToken to it.
func DeployMockAToken(auth *bind.TransactOpts, backend bind.ContractBackend, pool common.Address, underlyingAssetAddress common.Address, reserveTreasury common.Address, tokenName string, tokenSymbol string, incentivesController common.Address) (common.Address, *types.Transaction, *MockAToken, error) {
	parsed, err := abi.JSON(strings.NewReader(MockATokenABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(MockATokenBin), backend, pool, underlyingAssetAddress, reserveTreasury, tokenName, tokenSymbol, incentivesController)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MockAToken{MockATokenCaller: MockATokenCaller{contract: contract}, MockATokenTransactor: MockATokenTransactor{contract: contract}, MockATokenFilterer: MockATokenFilterer{contract: contract}}, nil
}

// MockAToken is an auto generated Go binding around an Ethereum contract.
type MockAToken struct {
	MockATokenCaller     // Read-only binding to the contract
	MockATokenTransactor // Write-only binding to the contract
	MockATokenFilterer   // Log filterer for contract events
}

// MockATokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type MockATokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MockATokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MockATokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MockATokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MockATokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MockATokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MockATokenSession struct {
	Contract     *MockAToken       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MockATokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MockATokenCallerSession struct {
	Contract *MockATokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// MockATokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MockATokenTransactorSession struct {
	Contract     *MockATokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// MockATokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type MockATokenRaw struct {
	Contract *MockAToken // Generic contract binding to access the raw methods on
}

// MockATokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MockATokenCallerRaw struct {
	Contract *MockATokenCaller // Generic read-only contract binding to access the raw methods on
}

// MockATokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MockATokenTransactorRaw struct {
	Contract *MockATokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMockAToken creates a new instance of MockAToken, bound to a specific deployed contract.
func NewMockAToken(address common.Address, backend bind.ContractBackend) (*MockAToken, error) {
	contract, err := bindMockAToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MockAToken{MockATokenCaller: MockATokenCaller{contract: contract}, MockATokenTransactor: MockATokenTransactor{contract: contract}, MockATokenFilterer: MockATokenFilterer{contract: contract}}, nil
}

// NewMockATokenCaller creates a new read-only instance of MockAToken, bound to a specific deployed contract.
func NewMockATokenCaller(address common.Address, caller bind.ContractCaller) (*MockATokenCaller, error) {
	contract, err := bindMockAToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MockATokenCaller{contract: contract}, nil
}

// NewMockATokenTransactor creates a new write-only instance of MockAToken, bound to a specific deployed contract.
func NewMockATokenTransactor(address common.Address, transactor bind.ContractTransactor) (*MockATokenTransactor, error) {
	contract, err := bindMockAToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MockATokenTransactor{contract: contract}, nil
}

// NewMockATokenFilterer creates a new log filterer instance of MockAToken, bound to a specific deployed contract.
func NewMockATokenFilterer(address common.Address, filterer bind.ContractFilterer) (*MockATokenFilterer, error) {
	contract, err := bindMockAToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MockATokenFilterer{contract: contract}, nil
}

// bindMockAToken binds a generic wrapper to an already deployed contract.
func bindMockAToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MockATokenABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MockAToken *MockATokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MockAToken.Contract.MockATokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MockAToken *MockATokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MockAToken.Contract.MockATokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MockAToken *MockATokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MockAToken.Contract.MockATokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MockAToken *MockATokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MockAToken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MockAToken *MockATokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MockAToken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MockAToken *MockATokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MockAToken.Contract.contract.Transact(opts, method, params...)
}

// ATOKENREVISION is a free data retrieval call binding the contract method 0x0bd7ad3b.
//
// Solidity: function ATOKEN_REVISION() view returns(uint256)
func (_MockAToken *MockATokenCaller) ATOKENREVISION(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MockAToken.contract.Call(opts, &out, "ATOKEN_REVISION")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ATOKENREVISION is a free data retrieval call binding the contract method 0x0bd7ad3b.
//
// Solidity: function ATOKEN_REVISION() view returns(uint256)
func (_MockAToken *MockATokenSession) ATOKENREVISION() (*big.Int, error) {
	return _MockAToken.Contract.ATOKENREVISION(&_MockAToken.CallOpts)
}

// ATOKENREVISION is a free data retrieval call binding the contract method 0x0bd7ad3b.
//
// Solidity: function ATOKEN_REVISION() view returns(uint256)
func (_MockAToken *MockATokenCallerSession) ATOKENREVISION() (*big.Int, error) {
	return _MockAToken.Contract.ATOKENREVISION(&_MockAToken.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_MockAToken *MockATokenCaller) DOMAINSEPARATOR(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _MockAToken.contract.Call(opts, &out, "DOMAIN_SEPARATOR")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_MockAToken *MockATokenSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _MockAToken.Contract.DOMAINSEPARATOR(&_MockAToken.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_MockAToken *MockATokenCallerSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _MockAToken.Contract.DOMAINSEPARATOR(&_MockAToken.CallOpts)
}

// EIP712REVISION is a free data retrieval call binding the contract method 0x78160376.
//
// Solidity: function EIP712_REVISION() view returns(bytes)
func (_MockAToken *MockATokenCaller) EIP712REVISION(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _MockAToken.contract.Call(opts, &out, "EIP712_REVISION")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// EIP712REVISION is a free data retrieval call binding the contract method 0x78160376.
//
// Solidity: function EIP712_REVISION() view returns(bytes)
func (_MockAToken *MockATokenSession) EIP712REVISION() ([]byte, error) {
	return _MockAToken.Contract.EIP712REVISION(&_MockAToken.CallOpts)
}

// EIP712REVISION is a free data retrieval call binding the contract method 0x78160376.
//
// Solidity: function EIP712_REVISION() view returns(bytes)
func (_MockAToken *MockATokenCallerSession) EIP712REVISION() ([]byte, error) {
	return _MockAToken.Contract.EIP712REVISION(&_MockAToken.CallOpts)
}

// PERMITTYPEHASH is a free data retrieval call binding the contract method 0x30adf81f.
//
// Solidity: function PERMIT_TYPEHASH() view returns(bytes32)
func (_MockAToken *MockATokenCaller) PERMITTYPEHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _MockAToken.contract.Call(opts, &out, "PERMIT_TYPEHASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PERMITTYPEHASH is a free data retrieval call binding the contract method 0x30adf81f.
//
// Solidity: function PERMIT_TYPEHASH() view returns(bytes32)
func (_MockAToken *MockATokenSession) PERMITTYPEHASH() ([32]byte, error) {
	return _MockAToken.Contract.PERMITTYPEHASH(&_MockAToken.CallOpts)
}

// PERMITTYPEHASH is a free data retrieval call binding the contract method 0x30adf81f.
//
// Solidity: function PERMIT_TYPEHASH() view returns(bytes32)
func (_MockAToken *MockATokenCallerSession) PERMITTYPEHASH() ([32]byte, error) {
	return _MockAToken.Contract.PERMITTYPEHASH(&_MockAToken.CallOpts)
}

// POOL is a free data retrieval call binding the contract method 0x7535d246.
//
// Solidity: function POOL() view returns(address)
func (_MockAToken *MockATokenCaller) POOL(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MockAToken.contract.Call(opts, &out, "POOL")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// POOL is a free data retrieval call binding the contract method 0x7535d246.
//
// Solidity: function POOL() view returns(address)
func (_MockAToken *MockATokenSession) POOL() (common.Address, error) {
	return _MockAToken.Contract.POOL(&_MockAToken.CallOpts)
}

// POOL is a free data retrieval call binding the contract method 0x7535d246.
//
// Solidity: function POOL() view returns(address)
func (_MockAToken *MockATokenCallerSession) POOL() (common.Address, error) {
	return _MockAToken.Contract.POOL(&_MockAToken.CallOpts)
}

// RESERVETREASURYADDRESS is a free data retrieval call binding the contract method 0xae167335.
//
// Solidity: function RESERVE_TREASURY_ADDRESS() view returns(address)
func (_MockAToken *MockATokenCaller) RESERVETREASURYADDRESS(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MockAToken.contract.Call(opts, &out, "RESERVE_TREASURY_ADDRESS")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RESERVETREASURYADDRESS is a free data retrieval call binding the contract method 0xae167335.
//
// Solidity: function RESERVE_TREASURY_ADDRESS() view returns(address)
func (_MockAToken *MockATokenSession) RESERVETREASURYADDRESS() (common.Address, error) {
	return _MockAToken.Contract.RESERVETREASURYADDRESS(&_MockAToken.CallOpts)
}

// RESERVETREASURYADDRESS is a free data retrieval call binding the contract method 0xae167335.
//
// Solidity: function RESERVE_TREASURY_ADDRESS() view returns(address)
func (_MockAToken *MockATokenCallerSession) RESERVETREASURYADDRESS() (common.Address, error) {
	return _MockAToken.Contract.RESERVETREASURYADDRESS(&_MockAToken.CallOpts)
}

// UINTMAXVALUE is a free data retrieval call binding the contract method 0xd0fc81d2.
//
// Solidity: function UINT_MAX_VALUE() view returns(uint256)
func (_MockAToken *MockATokenCaller) UINTMAXVALUE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MockAToken.contract.Call(opts, &out, "UINT_MAX_VALUE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UINTMAXVALUE is a free data retrieval call binding the contract method 0xd0fc81d2.
//
// Solidity: function UINT_MAX_VALUE() view returns(uint256)
func (_MockAToken *MockATokenSession) UINTMAXVALUE() (*big.Int, error) {
	return _MockAToken.Contract.UINTMAXVALUE(&_MockAToken.CallOpts)
}

// UINTMAXVALUE is a free data retrieval call binding the contract method 0xd0fc81d2.
//
// Solidity: function UINT_MAX_VALUE() view returns(uint256)
func (_MockAToken *MockATokenCallerSession) UINTMAXVALUE() (*big.Int, error) {
	return _MockAToken.Contract.UINTMAXVALUE(&_MockAToken.CallOpts)
}

// UNDERLYINGASSETADDRESS is a free data retrieval call binding the contract method 0xb16a19de.
//
// Solidity: function UNDERLYING_ASSET_ADDRESS() view returns(address)
func (_MockAToken *MockATokenCaller) UNDERLYINGASSETADDRESS(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MockAToken.contract.Call(opts, &out, "UNDERLYING_ASSET_ADDRESS")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// UNDERLYINGASSETADDRESS is a free data retrieval call binding the contract method 0xb16a19de.
//
// Solidity: function UNDERLYING_ASSET_ADDRESS() view returns(address)
func (_MockAToken *MockATokenSession) UNDERLYINGASSETADDRESS() (common.Address, error) {
	return _MockAToken.Contract.UNDERLYINGASSETADDRESS(&_MockAToken.CallOpts)
}

// UNDERLYINGASSETADDRESS is a free data retrieval call binding the contract method 0xb16a19de.
//
// Solidity: function UNDERLYING_ASSET_ADDRESS() view returns(address)
func (_MockAToken *MockATokenCallerSession) UNDERLYINGASSETADDRESS() (common.Address, error) {
	return _MockAToken.Contract.UNDERLYINGASSETADDRESS(&_MockAToken.CallOpts)
}

// Nonces is a free data retrieval call binding the contract method 0xb9844d8d.
//
// Solidity: function _nonces(address ) view returns(uint256)
func (_MockAToken *MockATokenCaller) Nonces(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MockAToken.contract.Call(opts, &out, "_nonces", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonces is a free data retrieval call binding the contract method 0xb9844d8d.
//
// Solidity: function _nonces(address ) view returns(uint256)
func (_MockAToken *MockATokenSession) Nonces(arg0 common.Address) (*big.Int, error) {
	return _MockAToken.Contract.Nonces(&_MockAToken.CallOpts, arg0)
}

// Nonces is a free data retrieval call binding the contract method 0xb9844d8d.
//
// Solidity: function _nonces(address ) view returns(uint256)
func (_MockAToken *MockATokenCallerSession) Nonces(arg0 common.Address) (*big.Int, error) {
	return _MockAToken.Contract.Nonces(&_MockAToken.CallOpts, arg0)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_MockAToken *MockATokenCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MockAToken.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_MockAToken *MockATokenSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _MockAToken.Contract.Allowance(&_MockAToken.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_MockAToken *MockATokenCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _MockAToken.Contract.Allowance(&_MockAToken.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address user) view returns(uint256)
func (_MockAToken *MockATokenCaller) BalanceOf(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MockAToken.contract.Call(opts, &out, "balanceOf", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address user) view returns(uint256)
func (_MockAToken *MockATokenSession) BalanceOf(user common.Address) (*big.Int, error) {
	return _MockAToken.Contract.BalanceOf(&_MockAToken.CallOpts, user)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address user) view returns(uint256)
func (_MockAToken *MockATokenCallerSession) BalanceOf(user common.Address) (*big.Int, error) {
	return _MockAToken.Contract.BalanceOf(&_MockAToken.CallOpts, user)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_MockAToken *MockATokenCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _MockAToken.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_MockAToken *MockATokenSession) Decimals() (uint8, error) {
	return _MockAToken.Contract.Decimals(&_MockAToken.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_MockAToken *MockATokenCallerSession) Decimals() (uint8, error) {
	return _MockAToken.Contract.Decimals(&_MockAToken.CallOpts)
}

// GetScaledUserBalanceAndSupply is a free data retrieval call binding the contract method 0x0afbcdc9.
//
// Solidity: function getScaledUserBalanceAndSupply(address user) view returns(uint256, uint256)
func (_MockAToken *MockATokenCaller) GetScaledUserBalanceAndSupply(opts *bind.CallOpts, user common.Address) (*big.Int, *big.Int, error) {
	var out []interface{}
	err := _MockAToken.contract.Call(opts, &out, "getScaledUserBalanceAndSupply", user)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// GetScaledUserBalanceAndSupply is a free data retrieval call binding the contract method 0x0afbcdc9.
//
// Solidity: function getScaledUserBalanceAndSupply(address user) view returns(uint256, uint256)
func (_MockAToken *MockATokenSession) GetScaledUserBalanceAndSupply(user common.Address) (*big.Int, *big.Int, error) {
	return _MockAToken.Contract.GetScaledUserBalanceAndSupply(&_MockAToken.CallOpts, user)
}

// GetScaledUserBalanceAndSupply is a free data retrieval call binding the contract method 0x0afbcdc9.
//
// Solidity: function getScaledUserBalanceAndSupply(address user) view returns(uint256, uint256)
func (_MockAToken *MockATokenCallerSession) GetScaledUserBalanceAndSupply(user common.Address) (*big.Int, *big.Int, error) {
	return _MockAToken.Contract.GetScaledUserBalanceAndSupply(&_MockAToken.CallOpts, user)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MockAToken *MockATokenCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _MockAToken.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MockAToken *MockATokenSession) Name() (string, error) {
	return _MockAToken.Contract.Name(&_MockAToken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MockAToken *MockATokenCallerSession) Name() (string, error) {
	return _MockAToken.Contract.Name(&_MockAToken.CallOpts)
}

// ScaledBalanceOf is a free data retrieval call binding the contract method 0x1da24f3e.
//
// Solidity: function scaledBalanceOf(address user) view returns(uint256)
func (_MockAToken *MockATokenCaller) ScaledBalanceOf(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MockAToken.contract.Call(opts, &out, "scaledBalanceOf", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ScaledBalanceOf is a free data retrieval call binding the contract method 0x1da24f3e.
//
// Solidity: function scaledBalanceOf(address user) view returns(uint256)
func (_MockAToken *MockATokenSession) ScaledBalanceOf(user common.Address) (*big.Int, error) {
	return _MockAToken.Contract.ScaledBalanceOf(&_MockAToken.CallOpts, user)
}

// ScaledBalanceOf is a free data retrieval call binding the contract method 0x1da24f3e.
//
// Solidity: function scaledBalanceOf(address user) view returns(uint256)
func (_MockAToken *MockATokenCallerSession) ScaledBalanceOf(user common.Address) (*big.Int, error) {
	return _MockAToken.Contract.ScaledBalanceOf(&_MockAToken.CallOpts, user)
}

// ScaledTotalSupply is a free data retrieval call binding the contract method 0xb1bf962d.
//
// Solidity: function scaledTotalSupply() view returns(uint256)
func (_MockAToken *MockATokenCaller) ScaledTotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MockAToken.contract.Call(opts, &out, "scaledTotalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ScaledTotalSupply is a free data retrieval call binding the contract method 0xb1bf962d.
//
// Solidity: function scaledTotalSupply() view returns(uint256)
func (_MockAToken *MockATokenSession) ScaledTotalSupply() (*big.Int, error) {
	return _MockAToken.Contract.ScaledTotalSupply(&_MockAToken.CallOpts)
}

// ScaledTotalSupply is a free data retrieval call binding the contract method 0xb1bf962d.
//
// Solidity: function scaledTotalSupply() view returns(uint256)
func (_MockAToken *MockATokenCallerSession) ScaledTotalSupply() (*big.Int, error) {
	return _MockAToken.Contract.ScaledTotalSupply(&_MockAToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MockAToken *MockATokenCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _MockAToken.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MockAToken *MockATokenSession) Symbol() (string, error) {
	return _MockAToken.Contract.Symbol(&_MockAToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MockAToken *MockATokenCallerSession) Symbol() (string, error) {
	return _MockAToken.Contract.Symbol(&_MockAToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MockAToken *MockATokenCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MockAToken.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MockAToken *MockATokenSession) TotalSupply() (*big.Int, error) {
	return _MockAToken.Contract.TotalSupply(&_MockAToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MockAToken *MockATokenCallerSession) TotalSupply() (*big.Int, error) {
	return _MockAToken.Contract.TotalSupply(&_MockAToken.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_MockAToken *MockATokenTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockAToken.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_MockAToken *MockATokenSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockAToken.Contract.Approve(&_MockAToken.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_MockAToken *MockATokenTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockAToken.Contract.Approve(&_MockAToken.TransactOpts, spender, amount)
}

// Burn is a paid mutator transaction binding the contract method 0xd7020d0a.
//
// Solidity: function burn(address user, address receiverOfUnderlying, uint256 amount, uint256 index) returns()
func (_MockAToken *MockATokenTransactor) Burn(opts *bind.TransactOpts, user common.Address, receiverOfUnderlying common.Address, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _MockAToken.contract.Transact(opts, "burn", user, receiverOfUnderlying, amount, index)
}

// Burn is a paid mutator transaction binding the contract method 0xd7020d0a.
//
// Solidity: function burn(address user, address receiverOfUnderlying, uint256 amount, uint256 index) returns()
func (_MockAToken *MockATokenSession) Burn(user common.Address, receiverOfUnderlying common.Address, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _MockAToken.Contract.Burn(&_MockAToken.TransactOpts, user, receiverOfUnderlying, amount, index)
}

// Burn is a paid mutator transaction binding the contract method 0xd7020d0a.
//
// Solidity: function burn(address user, address receiverOfUnderlying, uint256 amount, uint256 index) returns()
func (_MockAToken *MockATokenTransactorSession) Burn(user common.Address, receiverOfUnderlying common.Address, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _MockAToken.Contract.Burn(&_MockAToken.TransactOpts, user, receiverOfUnderlying, amount, index)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_MockAToken *MockATokenTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _MockAToken.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_MockAToken *MockATokenSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _MockAToken.Contract.DecreaseAllowance(&_MockAToken.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_MockAToken *MockATokenTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _MockAToken.Contract.DecreaseAllowance(&_MockAToken.TransactOpts, spender, subtractedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_MockAToken *MockATokenTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _MockAToken.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_MockAToken *MockATokenSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _MockAToken.Contract.IncreaseAllowance(&_MockAToken.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_MockAToken *MockATokenTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _MockAToken.Contract.IncreaseAllowance(&_MockAToken.TransactOpts, spender, addedValue)
}

// Initialize is a paid mutator transaction binding the contract method 0x3118724e.
//
// Solidity: function initialize(uint8 _underlyingAssetDecimals, string _tokenName, string _tokenSymbol) returns()
func (_MockAToken *MockATokenTransactor) Initialize(opts *bind.TransactOpts, _underlyingAssetDecimals uint8, _tokenName string, _tokenSymbol string) (*types.Transaction, error) {
	return _MockAToken.contract.Transact(opts, "initialize", _underlyingAssetDecimals, _tokenName, _tokenSymbol)
}

// Initialize is a paid mutator transaction binding the contract method 0x3118724e.
//
// Solidity: function initialize(uint8 _underlyingAssetDecimals, string _tokenName, string _tokenSymbol) returns()
func (_MockAToken *MockATokenSession) Initialize(_underlyingAssetDecimals uint8, _tokenName string, _tokenSymbol string) (*types.Transaction, error) {
	return _MockAToken.Contract.Initialize(&_MockAToken.TransactOpts, _underlyingAssetDecimals, _tokenName, _tokenSymbol)
}

// Initialize is a paid mutator transaction binding the contract method 0x3118724e.
//
// Solidity: function initialize(uint8 _underlyingAssetDecimals, string _tokenName, string _tokenSymbol) returns()
func (_MockAToken *MockATokenTransactorSession) Initialize(_underlyingAssetDecimals uint8, _tokenName string, _tokenSymbol string) (*types.Transaction, error) {
	return _MockAToken.Contract.Initialize(&_MockAToken.TransactOpts, _underlyingAssetDecimals, _tokenName, _tokenSymbol)
}

// Mint is a paid mutator transaction binding the contract method 0x156e29f6.
//
// Solidity: function mint(address user, uint256 amount, uint256 index) returns(bool)
func (_MockAToken *MockATokenTransactor) Mint(opts *bind.TransactOpts, user common.Address, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _MockAToken.contract.Transact(opts, "mint", user, amount, index)
}

// Mint is a paid mutator transaction binding the contract method 0x156e29f6.
//
// Solidity: function mint(address user, uint256 amount, uint256 index) returns(bool)
func (_MockAToken *MockATokenSession) Mint(user common.Address, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _MockAToken.Contract.Mint(&_MockAToken.TransactOpts, user, amount, index)
}

// Mint is a paid mutator transaction binding the contract method 0x156e29f6.
//
// Solidity: function mint(address user, uint256 amount, uint256 index) returns(bool)
func (_MockAToken *MockATokenTransactorSession) Mint(user common.Address, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _MockAToken.Contract.Mint(&_MockAToken.TransactOpts, user, amount, index)
}

// MintToTreasury is a paid mutator transaction binding the contract method 0x7df5bd3b.
//
// Solidity: function mintToTreasury(uint256 amount, uint256 index) returns()
func (_MockAToken *MockATokenTransactor) MintToTreasury(opts *bind.TransactOpts, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _MockAToken.contract.Transact(opts, "mintToTreasury", amount, index)
}

// MintToTreasury is a paid mutator transaction binding the contract method 0x7df5bd3b.
//
// Solidity: function mintToTreasury(uint256 amount, uint256 index) returns()
func (_MockAToken *MockATokenSession) MintToTreasury(amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _MockAToken.Contract.MintToTreasury(&_MockAToken.TransactOpts, amount, index)
}

// MintToTreasury is a paid mutator transaction binding the contract method 0x7df5bd3b.
//
// Solidity: function mintToTreasury(uint256 amount, uint256 index) returns()
func (_MockAToken *MockATokenTransactorSession) MintToTreasury(amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _MockAToken.Contract.MintToTreasury(&_MockAToken.TransactOpts, amount, index)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_MockAToken *MockATokenTransactor) Permit(opts *bind.TransactOpts, owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _MockAToken.contract.Transact(opts, "permit", owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_MockAToken *MockATokenSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _MockAToken.Contract.Permit(&_MockAToken.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_MockAToken *MockATokenTransactorSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _MockAToken.Contract.Permit(&_MockAToken.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_MockAToken *MockATokenTransactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockAToken.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_MockAToken *MockATokenSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockAToken.Contract.Transfer(&_MockAToken.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_MockAToken *MockATokenTransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockAToken.Contract.Transfer(&_MockAToken.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_MockAToken *MockATokenTransactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockAToken.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_MockAToken *MockATokenSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockAToken.Contract.TransferFrom(&_MockAToken.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_MockAToken *MockATokenTransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockAToken.Contract.TransferFrom(&_MockAToken.TransactOpts, sender, recipient, amount)
}

// TransferOnLiquidation is a paid mutator transaction binding the contract method 0xf866c319.
//
// Solidity: function transferOnLiquidation(address from, address to, uint256 value) returns()
func (_MockAToken *MockATokenTransactor) TransferOnLiquidation(opts *bind.TransactOpts, from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _MockAToken.contract.Transact(opts, "transferOnLiquidation", from, to, value)
}

// TransferOnLiquidation is a paid mutator transaction binding the contract method 0xf866c319.
//
// Solidity: function transferOnLiquidation(address from, address to, uint256 value) returns()
func (_MockAToken *MockATokenSession) TransferOnLiquidation(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _MockAToken.Contract.TransferOnLiquidation(&_MockAToken.TransactOpts, from, to, value)
}

// TransferOnLiquidation is a paid mutator transaction binding the contract method 0xf866c319.
//
// Solidity: function transferOnLiquidation(address from, address to, uint256 value) returns()
func (_MockAToken *MockATokenTransactorSession) TransferOnLiquidation(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _MockAToken.Contract.TransferOnLiquidation(&_MockAToken.TransactOpts, from, to, value)
}

// TransferUnderlyingTo is a paid mutator transaction binding the contract method 0x4efecaa5.
//
// Solidity: function transferUnderlyingTo(address target, uint256 amount) returns(uint256)
func (_MockAToken *MockATokenTransactor) TransferUnderlyingTo(opts *bind.TransactOpts, target common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockAToken.contract.Transact(opts, "transferUnderlyingTo", target, amount)
}

// TransferUnderlyingTo is a paid mutator transaction binding the contract method 0x4efecaa5.
//
// Solidity: function transferUnderlyingTo(address target, uint256 amount) returns(uint256)
func (_MockAToken *MockATokenSession) TransferUnderlyingTo(target common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockAToken.Contract.TransferUnderlyingTo(&_MockAToken.TransactOpts, target, amount)
}

// TransferUnderlyingTo is a paid mutator transaction binding the contract method 0x4efecaa5.
//
// Solidity: function transferUnderlyingTo(address target, uint256 amount) returns(uint256)
func (_MockAToken *MockATokenTransactorSession) TransferUnderlyingTo(target common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockAToken.Contract.TransferUnderlyingTo(&_MockAToken.TransactOpts, target, amount)
}

// MockATokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the MockAToken contract.
type MockATokenApprovalIterator struct {
	Event *MockATokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MockATokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MockATokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MockATokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MockATokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MockATokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MockATokenApproval represents a Approval event raised by the MockAToken contract.
type MockATokenApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_MockAToken *MockATokenFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*MockATokenApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _MockAToken.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &MockATokenApprovalIterator{contract: _MockAToken.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_MockAToken *MockATokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *MockATokenApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _MockAToken.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MockATokenApproval)
				if err := _MockAToken.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_MockAToken *MockATokenFilterer) ParseApproval(log types.Log) (*MockATokenApproval, error) {
	event := new(MockATokenApproval)
	if err := _MockAToken.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MockATokenBalanceTransferIterator is returned from FilterBalanceTransfer and is used to iterate over the raw logs and unpacked data for BalanceTransfer events raised by the MockAToken contract.
type MockATokenBalanceTransferIterator struct {
	Event *MockATokenBalanceTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MockATokenBalanceTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MockATokenBalanceTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MockATokenBalanceTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MockATokenBalanceTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MockATokenBalanceTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MockATokenBalanceTransfer represents a BalanceTransfer event raised by the MockAToken contract.
type MockATokenBalanceTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Index *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterBalanceTransfer is a free log retrieval operation binding the contract event 0x4beccb90f994c31aced7a23b5611020728a23d8ec5cddd1a3e9d97b96fda8666.
//
// Solidity: event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index)
func (_MockAToken *MockATokenFilterer) FilterBalanceTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MockATokenBalanceTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MockAToken.contract.FilterLogs(opts, "BalanceTransfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &MockATokenBalanceTransferIterator{contract: _MockAToken.contract, event: "BalanceTransfer", logs: logs, sub: sub}, nil
}

// WatchBalanceTransfer is a free log subscription operation binding the contract event 0x4beccb90f994c31aced7a23b5611020728a23d8ec5cddd1a3e9d97b96fda8666.
//
// Solidity: event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index)
func (_MockAToken *MockATokenFilterer) WatchBalanceTransfer(opts *bind.WatchOpts, sink chan<- *MockATokenBalanceTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MockAToken.contract.WatchLogs(opts, "BalanceTransfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MockATokenBalanceTransfer)
				if err := _MockAToken.contract.UnpackLog(event, "BalanceTransfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBalanceTransfer is a log parse operation binding the contract event 0x4beccb90f994c31aced7a23b5611020728a23d8ec5cddd1a3e9d97b96fda8666.
//
// Solidity: event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index)
func (_MockAToken *MockATokenFilterer) ParseBalanceTransfer(log types.Log) (*MockATokenBalanceTransfer, error) {
	event := new(MockATokenBalanceTransfer)
	if err := _MockAToken.contract.UnpackLog(event, "BalanceTransfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MockATokenBurnIterator is returned from FilterBurn and is used to iterate over the raw logs and unpacked data for Burn events raised by the MockAToken contract.
type MockATokenBurnIterator struct {
	Event *MockATokenBurn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MockATokenBurnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MockATokenBurn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MockATokenBurn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MockATokenBurnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MockATokenBurnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MockATokenBurn represents a Burn event raised by the MockAToken contract.
type MockATokenBurn struct {
	From   common.Address
	Target common.Address
	Value  *big.Int
	Index  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBurn is a free log retrieval operation binding the contract event 0x5d624aa9c148153ab3446c1b154f660ee7701e549fe9b62dab7171b1c80e6fa2.
//
// Solidity: event Burn(address indexed from, address indexed target, uint256 value, uint256 index)
func (_MockAToken *MockATokenFilterer) FilterBurn(opts *bind.FilterOpts, from []common.Address, target []common.Address) (*MockATokenBurnIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}

	logs, sub, err := _MockAToken.contract.FilterLogs(opts, "Burn", fromRule, targetRule)
	if err != nil {
		return nil, err
	}
	return &MockATokenBurnIterator{contract: _MockAToken.contract, event: "Burn", logs: logs, sub: sub}, nil
}

// WatchBurn is a free log subscription operation binding the contract event 0x5d624aa9c148153ab3446c1b154f660ee7701e549fe9b62dab7171b1c80e6fa2.
//
// Solidity: event Burn(address indexed from, address indexed target, uint256 value, uint256 index)
func (_MockAToken *MockATokenFilterer) WatchBurn(opts *bind.WatchOpts, sink chan<- *MockATokenBurn, from []common.Address, target []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}

	logs, sub, err := _MockAToken.contract.WatchLogs(opts, "Burn", fromRule, targetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MockATokenBurn)
				if err := _MockAToken.contract.UnpackLog(event, "Burn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurn is a log parse operation binding the contract event 0x5d624aa9c148153ab3446c1b154f660ee7701e549fe9b62dab7171b1c80e6fa2.
//
// Solidity: event Burn(address indexed from, address indexed target, uint256 value, uint256 index)
func (_MockAToken *MockATokenFilterer) ParseBurn(log types.Log) (*MockATokenBurn, error) {
	event := new(MockATokenBurn)
	if err := _MockAToken.contract.UnpackLog(event, "Burn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MockATokenMintIterator is returned from FilterMint and is used to iterate over the raw logs and unpacked data for Mint events raised by the MockAToken contract.
type MockATokenMintIterator struct {
	Event *MockATokenMint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MockATokenMintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MockATokenMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MockATokenMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MockATokenMintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MockATokenMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MockATokenMint represents a Mint event raised by the MockAToken contract.
type MockATokenMint struct {
	From  common.Address
	Value *big.Int
	Index *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterMint is a free log retrieval operation binding the contract event 0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f.
//
// Solidity: event Mint(address indexed from, uint256 value, uint256 index)
func (_MockAToken *MockATokenFilterer) FilterMint(opts *bind.FilterOpts, from []common.Address) (*MockATokenMintIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _MockAToken.contract.FilterLogs(opts, "Mint", fromRule)
	if err != nil {
		return nil, err
	}
	return &MockATokenMintIterator{contract: _MockAToken.contract, event: "Mint", logs: logs, sub: sub}, nil
}

// WatchMint is a free log subscription operation binding the contract event 0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f.
//
// Solidity: event Mint(address indexed from, uint256 value, uint256 index)
func (_MockAToken *MockATokenFilterer) WatchMint(opts *bind.WatchOpts, sink chan<- *MockATokenMint, from []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _MockAToken.contract.WatchLogs(opts, "Mint", fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MockATokenMint)
				if err := _MockAToken.contract.UnpackLog(event, "Mint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMint is a log parse operation binding the contract event 0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f.
//
// Solidity: event Mint(address indexed from, uint256 value, uint256 index)
func (_MockAToken *MockATokenFilterer) ParseMint(log types.Log) (*MockATokenMint, error) {
	event := new(MockATokenMint)
	if err := _MockAToken.contract.UnpackLog(event, "Mint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MockATokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the MockAToken contract.
type MockATokenTransferIterator struct {
	Event *MockATokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MockATokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MockATokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MockATokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MockATokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MockATokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MockATokenTransfer represents a Transfer event raised by the MockAToken contract.
type MockATokenTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_MockAToken *MockATokenFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MockATokenTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MockAToken.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &MockATokenTransferIterator{contract: _MockAToken.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_MockAToken *MockATokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *MockATokenTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MockAToken.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MockATokenTransfer)
				if err := _MockAToken.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_MockAToken *MockATokenFilterer) ParseTransfer(log types.Log) (*MockATokenTransfer, error) {
	event := new(MockATokenTransfer)
	if err := _MockAToken.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MockAggregatorABI is the input ABI used to generate the binding from.
const MockAggregatorABI = "[{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_initialAnswer\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"current\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AnswerUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getTokenType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// MockAggregatorBin is the compiled bytecode used for deploying new contracts.
var MockAggregatorBin = "0x608060405234801561001057600080fd5b506040516101153803806101158339818101604052602081101561003357600080fd5b5051600081815560408051428152905183917f0559884fd3a460db3073b7fc896cc77986f16e378210ded43186175bf646fc5f919081900360200190a35060968061007f6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c806350d25bcd146037578063fcab181914604f575b600080fd5b603d6055565b60408051918252519081900360200190f35b603d605b565b60005490565b60019056fea2646970667358221220d7e0a0fa481d3a9ece32261e8f86d4bc969e5355a2dc46481339389993b9903564736f6c634300060c0033"

// DeployMockAggregator deploys a new Ethereum contract, binding an instance of MockAggregator to it.
func DeployMockAggregator(auth *bind.TransactOpts, backend bind.ContractBackend, _initialAnswer *big.Int) (common.Address, *types.Transaction, *MockAggregator, error) {
	parsed, err := abi.JSON(strings.NewReader(MockAggregatorABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(MockAggregatorBin), backend, _initialAnswer)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MockAggregator{MockAggregatorCaller: MockAggregatorCaller{contract: contract}, MockAggregatorTransactor: MockAggregatorTransactor{contract: contract}, MockAggregatorFilterer: MockAggregatorFilterer{contract: contract}}, nil
}

// MockAggregator is an auto generated Go binding around an Ethereum contract.
type MockAggregator struct {
	MockAggregatorCaller     // Read-only binding to the contract
	MockAggregatorTransactor // Write-only binding to the contract
	MockAggregatorFilterer   // Log filterer for contract events
}

// MockAggregatorCaller is an auto generated read-only Go binding around an Ethereum contract.
type MockAggregatorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MockAggregatorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MockAggregatorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MockAggregatorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MockAggregatorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MockAggregatorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MockAggregatorSession struct {
	Contract     *MockAggregator   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MockAggregatorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MockAggregatorCallerSession struct {
	Contract *MockAggregatorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// MockAggregatorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MockAggregatorTransactorSession struct {
	Contract     *MockAggregatorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// MockAggregatorRaw is an auto generated low-level Go binding around an Ethereum contract.
type MockAggregatorRaw struct {
	Contract *MockAggregator // Generic contract binding to access the raw methods on
}

// MockAggregatorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MockAggregatorCallerRaw struct {
	Contract *MockAggregatorCaller // Generic read-only contract binding to access the raw methods on
}

// MockAggregatorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MockAggregatorTransactorRaw struct {
	Contract *MockAggregatorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMockAggregator creates a new instance of MockAggregator, bound to a specific deployed contract.
func NewMockAggregator(address common.Address, backend bind.ContractBackend) (*MockAggregator, error) {
	contract, err := bindMockAggregator(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MockAggregator{MockAggregatorCaller: MockAggregatorCaller{contract: contract}, MockAggregatorTransactor: MockAggregatorTransactor{contract: contract}, MockAggregatorFilterer: MockAggregatorFilterer{contract: contract}}, nil
}

// NewMockAggregatorCaller creates a new read-only instance of MockAggregator, bound to a specific deployed contract.
func NewMockAggregatorCaller(address common.Address, caller bind.ContractCaller) (*MockAggregatorCaller, error) {
	contract, err := bindMockAggregator(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MockAggregatorCaller{contract: contract}, nil
}

// NewMockAggregatorTransactor creates a new write-only instance of MockAggregator, bound to a specific deployed contract.
func NewMockAggregatorTransactor(address common.Address, transactor bind.ContractTransactor) (*MockAggregatorTransactor, error) {
	contract, err := bindMockAggregator(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MockAggregatorTransactor{contract: contract}, nil
}

// NewMockAggregatorFilterer creates a new log filterer instance of MockAggregator, bound to a specific deployed contract.
func NewMockAggregatorFilterer(address common.Address, filterer bind.ContractFilterer) (*MockAggregatorFilterer, error) {
	contract, err := bindMockAggregator(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MockAggregatorFilterer{contract: contract}, nil
}

// bindMockAggregator binds a generic wrapper to an already deployed contract.
func bindMockAggregator(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MockAggregatorABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MockAggregator *MockAggregatorRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MockAggregator.Contract.MockAggregatorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MockAggregator *MockAggregatorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MockAggregator.Contract.MockAggregatorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MockAggregator *MockAggregatorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MockAggregator.Contract.MockAggregatorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MockAggregator *MockAggregatorCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MockAggregator.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MockAggregator *MockAggregatorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MockAggregator.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MockAggregator *MockAggregatorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MockAggregator.Contract.contract.Transact(opts, method, params...)
}

// GetTokenType is a free data retrieval call binding the contract method 0xfcab1819.
//
// Solidity: function getTokenType() view returns(uint256)
func (_MockAggregator *MockAggregatorCaller) GetTokenType(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MockAggregator.contract.Call(opts, &out, "getTokenType")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTokenType is a free data retrieval call binding the contract method 0xfcab1819.
//
// Solidity: function getTokenType() view returns(uint256)
func (_MockAggregator *MockAggregatorSession) GetTokenType() (*big.Int, error) {
	return _MockAggregator.Contract.GetTokenType(&_MockAggregator.CallOpts)
}

// GetTokenType is a free data retrieval call binding the contract method 0xfcab1819.
//
// Solidity: function getTokenType() view returns(uint256)
func (_MockAggregator *MockAggregatorCallerSession) GetTokenType() (*big.Int, error) {
	return _MockAggregator.Contract.GetTokenType(&_MockAggregator.CallOpts)
}

// LatestAnswer is a free data retrieval call binding the contract method 0x50d25bcd.
//
// Solidity: function latestAnswer() view returns(int256)
func (_MockAggregator *MockAggregatorCaller) LatestAnswer(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MockAggregator.contract.Call(opts, &out, "latestAnswer")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LatestAnswer is a free data retrieval call binding the contract method 0x50d25bcd.
//
// Solidity: function latestAnswer() view returns(int256)
func (_MockAggregator *MockAggregatorSession) LatestAnswer() (*big.Int, error) {
	return _MockAggregator.Contract.LatestAnswer(&_MockAggregator.CallOpts)
}

// LatestAnswer is a free data retrieval call binding the contract method 0x50d25bcd.
//
// Solidity: function latestAnswer() view returns(int256)
func (_MockAggregator *MockAggregatorCallerSession) LatestAnswer() (*big.Int, error) {
	return _MockAggregator.Contract.LatestAnswer(&_MockAggregator.CallOpts)
}

// MockAggregatorAnswerUpdatedIterator is returned from FilterAnswerUpdated and is used to iterate over the raw logs and unpacked data for AnswerUpdated events raised by the MockAggregator contract.
type MockAggregatorAnswerUpdatedIterator struct {
	Event *MockAggregatorAnswerUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MockAggregatorAnswerUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MockAggregatorAnswerUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MockAggregatorAnswerUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MockAggregatorAnswerUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MockAggregatorAnswerUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MockAggregatorAnswerUpdated represents a AnswerUpdated event raised by the MockAggregator contract.
type MockAggregatorAnswerUpdated struct {
	Current   *big.Int
	RoundId   *big.Int
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAnswerUpdated is a free log retrieval operation binding the contract event 0x0559884fd3a460db3073b7fc896cc77986f16e378210ded43186175bf646fc5f.
//
// Solidity: event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp)
func (_MockAggregator *MockAggregatorFilterer) FilterAnswerUpdated(opts *bind.FilterOpts, current []*big.Int, roundId []*big.Int) (*MockAggregatorAnswerUpdatedIterator, error) {

	var currentRule []interface{}
	for _, currentItem := range current {
		currentRule = append(currentRule, currentItem)
	}
	var roundIdRule []interface{}
	for _, roundIdItem := range roundId {
		roundIdRule = append(roundIdRule, roundIdItem)
	}

	logs, sub, err := _MockAggregator.contract.FilterLogs(opts, "AnswerUpdated", currentRule, roundIdRule)
	if err != nil {
		return nil, err
	}
	return &MockAggregatorAnswerUpdatedIterator{contract: _MockAggregator.contract, event: "AnswerUpdated", logs: logs, sub: sub}, nil
}

// WatchAnswerUpdated is a free log subscription operation binding the contract event 0x0559884fd3a460db3073b7fc896cc77986f16e378210ded43186175bf646fc5f.
//
// Solidity: event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp)
func (_MockAggregator *MockAggregatorFilterer) WatchAnswerUpdated(opts *bind.WatchOpts, sink chan<- *MockAggregatorAnswerUpdated, current []*big.Int, roundId []*big.Int) (event.Subscription, error) {

	var currentRule []interface{}
	for _, currentItem := range current {
		currentRule = append(currentRule, currentItem)
	}
	var roundIdRule []interface{}
	for _, roundIdItem := range roundId {
		roundIdRule = append(roundIdRule, roundIdItem)
	}

	logs, sub, err := _MockAggregator.contract.WatchLogs(opts, "AnswerUpdated", currentRule, roundIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MockAggregatorAnswerUpdated)
				if err := _MockAggregator.contract.UnpackLog(event, "AnswerUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAnswerUpdated is a log parse operation binding the contract event 0x0559884fd3a460db3073b7fc896cc77986f16e378210ded43186175bf646fc5f.
//
// Solidity: event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp)
func (_MockAggregator *MockAggregatorFilterer) ParseAnswerUpdated(log types.Log) (*MockAggregatorAnswerUpdated, error) {
	event := new(MockAggregatorAnswerUpdated)
	if err := _MockAggregator.contract.UnpackLog(event, "AnswerUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MockFlashLoanReceiverABI is the input ABI used to generate the binding from.
const MockFlashLoanReceiverABI = "[{\"inputs\":[{\"internalType\":\"contractILendingPoolAddressesProvider\",\"name\":\"provider\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_premiums\",\"type\":\"uint256[]\"}],\"name\":\"ExecutedWithFail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_premiums\",\"type\":\"uint256[]\"}],\"name\":\"ExecutedWithSuccess\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESSES_PROVIDER\",\"outputs\":[{\"internalType\":\"contractILendingPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LENDING_POOL\",\"outputs\":[{\"internalType\":\"contractILendingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountToApprove\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"premiums\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToApprove\",\"type\":\"uint256\"}],\"name\":\"setAmountToApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"fail\",\"type\":\"bool\"}],\"name\":\"setFailExecutionTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setSimulateEOA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"simulateEOA\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// MockFlashLoanReceiverBin is the compiled bytecode used for deploying new contracts.
var MockFlashLoanReceiverBin = "0x60c060405234801561001057600080fd5b50604051610a8c380380610a8c8339818101604052602081101561003357600080fd5b50516001600160601b0319606082901b1660805260408051630261bf8b60e01b8152905182916001600160a01b03831691630261bf8b91600480820192602092909190829003018186803b15801561008a57600080fd5b505afa15801561009e573d6000803e3d6000fd5b505050506040513d60208110156100b457600080fd5b5051606081811b6001600160601b03191660a052608051901c92506001600160a01b031690506109906100fc6000398061070852806108b952508061038952506109906000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063b4dcfc771161005b578063b4dcfc7714610329578063bb271c4d14610331578063bf443f851461034b578063e9a6a25b1461036857610088565b80630542975c1461008d578063388f70f1146100b15780634444f331146100d2578063920f5c84146100ee575b600080fd5b610095610387565b604080516001600160a01b039092168252519081900360200190f35b6100d0600480360360208110156100c757600080fd5b503515156103ab565b005b6100da6103c9565b604080519115158252519081900360200190f35b6100da600480360360a081101561010457600080fd5b810190602081018135600160201b81111561011e57600080fd5b82018360208201111561013057600080fd5b803590602001918460208302840111600160201b8311171561015157600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156101a057600080fd5b8201836020820111156101b257600080fd5b803590602001918460208302840111600160201b831117156101d357600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561022257600080fd5b82018360208201111561023457600080fd5b803590602001918460208302840111600160201b8311171561025557600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092956001600160a01b03853516959094909350604081019250602001359050600160201b8111156102b557600080fd5b8201836020820111156102c757600080fd5b803590602001918460018302840111600160201b831117156102e857600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506103d2945050505050565b6100956108b7565b6103396108db565b60408051918252519081900360200190f35b6100d06004803603602081101561036157600080fd5b50356108e1565b6100d06004803603602081101561037e57600080fd5b503515156108e6565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054911515600160a01b0260ff60a01b19909216919091179055565b60025460ff1690565b60008054600160a01b900460ff16156104f3577f9972b212e52913783072b960dd41527ae8b6e609d017b64039758dda0ce4127886868660405180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b83811015610451578181015183820152602001610439565b50505050905001848103835286818151815260200191508051906020019060200280838360005b83811015610490578181015183820152602001610478565b50505050905001848103825285818151815260200191508051906020019060200280838360005b838110156104cf5781810151838201526020016104b7565b50505050905001965050505050505060405180910390a15060025460ff16156108ae565b60005b86518110156107a857600087828151811061050d57fe5b6020026020010151905087828151811061052357fe5b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561057757600080fd5b505afa15801561058b573d6000803e3d6000fd5b505050506040513d60208110156105a157600080fd5b505187518890849081106105b157fe5b6020026020010151111561060c576040805162461bcd60e51b815260206004820181905260248201527f496e76616c69642062616c616e636520666f722074686520636f6e7472616374604482015290519081900360640190fd5b6000600154600014156106575761065287848151811061062857fe5b602002602001015189858151811061063c57fe5b60200260200101516108f990919063ffffffff16565b61065b565b6001545b9050816001600160a01b031663a0712d6888858151811061067857fe5b60200260200101516040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b1580156106b657600080fd5b505af11580156106ca573d6000803e3d6000fd5b505050506040513d60208110156106e057600080fd5b505088518990849081106106f057fe5b60200260200101516001600160a01b031663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561076e57600080fd5b505af1158015610782573d6000803e3d6000fd5b505050506040513d602081101561079857600080fd5b5050600190920191506104f69050565b507fbd6b6bfac59612765a81cc4fdee74ab4859671fa14a562056f9eea438735a78a86868660405180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b838110156108155781810151838201526020016107fd565b50505050905001848103835286818151815260200191508051906020019060200280838360005b8381101561085457818101518382015260200161083c565b50505050905001848103825285818151815260200191508051906020019060200280838360005b8381101561089357818101518382015260200161087b565b50505050905001965050505050505060405180910390a15060015b95945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60015490565b600155565b6002805460ff1916911515919091179055565b600082820183811015610953576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b939250505056fea2646970667358221220f0e76318bbf5c372589ec6ecd80a57c74b1d06e057846ec7901a25590f1b76c964736f6c634300060c0033"

// DeployMockFlashLoanReceiver deploys a new Ethereum contract, binding an instance of MockFlashLoanReceiver to it.
func DeployMockFlashLoanReceiver(auth *bind.TransactOpts, backend bind.ContractBackend, provider common.Address) (common.Address, *types.Transaction, *MockFlashLoanReceiver, error) {
	parsed, err := abi.JSON(strings.NewReader(MockFlashLoanReceiverABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(MockFlashLoanReceiverBin), backend, provider)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MockFlashLoanReceiver{MockFlashLoanReceiverCaller: MockFlashLoanReceiverCaller{contract: contract}, MockFlashLoanReceiverTransactor: MockFlashLoanReceiverTransactor{contract: contract}, MockFlashLoanReceiverFilterer: MockFlashLoanReceiverFilterer{contract: contract}}, nil
}

// MockFlashLoanReceiver is an auto generated Go binding around an Ethereum contract.
type MockFlashLoanReceiver struct {
	MockFlashLoanReceiverCaller     // Read-only binding to the contract
	MockFlashLoanReceiverTransactor // Write-only binding to the contract
	MockFlashLoanReceiverFilterer   // Log filterer for contract events
}

// MockFlashLoanReceiverCaller is an auto generated read-only Go binding around an Ethereum contract.
type MockFlashLoanReceiverCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MockFlashLoanReceiverTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MockFlashLoanReceiverTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MockFlashLoanReceiverFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MockFlashLoanReceiverFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MockFlashLoanReceiverSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MockFlashLoanReceiverSession struct {
	Contract     *MockFlashLoanReceiver // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// MockFlashLoanReceiverCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MockFlashLoanReceiverCallerSession struct {
	Contract *MockFlashLoanReceiverCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// MockFlashLoanReceiverTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MockFlashLoanReceiverTransactorSession struct {
	Contract     *MockFlashLoanReceiverTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// MockFlashLoanReceiverRaw is an auto generated low-level Go binding around an Ethereum contract.
type MockFlashLoanReceiverRaw struct {
	Contract *MockFlashLoanReceiver // Generic contract binding to access the raw methods on
}

// MockFlashLoanReceiverCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MockFlashLoanReceiverCallerRaw struct {
	Contract *MockFlashLoanReceiverCaller // Generic read-only contract binding to access the raw methods on
}

// MockFlashLoanReceiverTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MockFlashLoanReceiverTransactorRaw struct {
	Contract *MockFlashLoanReceiverTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMockFlashLoanReceiver creates a new instance of MockFlashLoanReceiver, bound to a specific deployed contract.
func NewMockFlashLoanReceiver(address common.Address, backend bind.ContractBackend) (*MockFlashLoanReceiver, error) {
	contract, err := bindMockFlashLoanReceiver(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MockFlashLoanReceiver{MockFlashLoanReceiverCaller: MockFlashLoanReceiverCaller{contract: contract}, MockFlashLoanReceiverTransactor: MockFlashLoanReceiverTransactor{contract: contract}, MockFlashLoanReceiverFilterer: MockFlashLoanReceiverFilterer{contract: contract}}, nil
}

// NewMockFlashLoanReceiverCaller creates a new read-only instance of MockFlashLoanReceiver, bound to a specific deployed contract.
func NewMockFlashLoanReceiverCaller(address common.Address, caller bind.ContractCaller) (*MockFlashLoanReceiverCaller, error) {
	contract, err := bindMockFlashLoanReceiver(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MockFlashLoanReceiverCaller{contract: contract}, nil
}

// NewMockFlashLoanReceiverTransactor creates a new write-only instance of MockFlashLoanReceiver, bound to a specific deployed contract.
func NewMockFlashLoanReceiverTransactor(address common.Address, transactor bind.ContractTransactor) (*MockFlashLoanReceiverTransactor, error) {
	contract, err := bindMockFlashLoanReceiver(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MockFlashLoanReceiverTransactor{contract: contract}, nil
}

// NewMockFlashLoanReceiverFilterer creates a new log filterer instance of MockFlashLoanReceiver, bound to a specific deployed contract.
func NewMockFlashLoanReceiverFilterer(address common.Address, filterer bind.ContractFilterer) (*MockFlashLoanReceiverFilterer, error) {
	contract, err := bindMockFlashLoanReceiver(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MockFlashLoanReceiverFilterer{contract: contract}, nil
}

// bindMockFlashLoanReceiver binds a generic wrapper to an already deployed contract.
func bindMockFlashLoanReceiver(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MockFlashLoanReceiverABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MockFlashLoanReceiver *MockFlashLoanReceiverRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MockFlashLoanReceiver.Contract.MockFlashLoanReceiverCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MockFlashLoanReceiver *MockFlashLoanReceiverRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MockFlashLoanReceiver.Contract.MockFlashLoanReceiverTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MockFlashLoanReceiver *MockFlashLoanReceiverRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MockFlashLoanReceiver.Contract.MockFlashLoanReceiverTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MockFlashLoanReceiver *MockFlashLoanReceiverCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MockFlashLoanReceiver.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MockFlashLoanReceiver *MockFlashLoanReceiverTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MockFlashLoanReceiver.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MockFlashLoanReceiver *MockFlashLoanReceiverTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MockFlashLoanReceiver.Contract.contract.Transact(opts, method, params...)
}

// ADDRESSESPROVIDER is a free data retrieval call binding the contract method 0x0542975c.
//
// Solidity: function ADDRESSES_PROVIDER() view returns(address)
func (_MockFlashLoanReceiver *MockFlashLoanReceiverCaller) ADDRESSESPROVIDER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MockFlashLoanReceiver.contract.Call(opts, &out, "ADDRESSES_PROVIDER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ADDRESSESPROVIDER is a free data retrieval call binding the contract method 0x0542975c.
//
// Solidity: function ADDRESSES_PROVIDER() view returns(address)
func (_MockFlashLoanReceiver *MockFlashLoanReceiverSession) ADDRESSESPROVIDER() (common.Address, error) {
	return _MockFlashLoanReceiver.Contract.ADDRESSESPROVIDER(&_MockFlashLoanReceiver.CallOpts)
}

// ADDRESSESPROVIDER is a free data retrieval call binding the contract method 0x0542975c.
//
// Solidity: function ADDRESSES_PROVIDER() view returns(address)
func (_MockFlashLoanReceiver *MockFlashLoanReceiverCallerSession) ADDRESSESPROVIDER() (common.Address, error) {
	return _MockFlashLoanReceiver.Contract.ADDRESSESPROVIDER(&_MockFlashLoanReceiver.CallOpts)
}

// LENDINGPOOL is a free data retrieval call binding the contract method 0xb4dcfc77.
//
// Solidity: function LENDING_POOL() view returns(address)
func (_MockFlashLoanReceiver *MockFlashLoanReceiverCaller) LENDINGPOOL(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MockFlashLoanReceiver.contract.Call(opts, &out, "LENDING_POOL")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LENDINGPOOL is a free data retrieval call binding the contract method 0xb4dcfc77.
//
// Solidity: function LENDING_POOL() view returns(address)
func (_MockFlashLoanReceiver *MockFlashLoanReceiverSession) LENDINGPOOL() (common.Address, error) {
	return _MockFlashLoanReceiver.Contract.LENDINGPOOL(&_MockFlashLoanReceiver.CallOpts)
}

// LENDINGPOOL is a free data retrieval call binding the contract method 0xb4dcfc77.
//
// Solidity: function LENDING_POOL() view returns(address)
func (_MockFlashLoanReceiver *MockFlashLoanReceiverCallerSession) LENDINGPOOL() (common.Address, error) {
	return _MockFlashLoanReceiver.Contract.LENDINGPOOL(&_MockFlashLoanReceiver.CallOpts)
}

// AmountToApprove is a free data retrieval call binding the contract method 0xbb271c4d.
//
// Solidity: function amountToApprove() view returns(uint256)
func (_MockFlashLoanReceiver *MockFlashLoanReceiverCaller) AmountToApprove(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MockFlashLoanReceiver.contract.Call(opts, &out, "amountToApprove")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AmountToApprove is a free data retrieval call binding the contract method 0xbb271c4d.
//
// Solidity: function amountToApprove() view returns(uint256)
func (_MockFlashLoanReceiver *MockFlashLoanReceiverSession) AmountToApprove() (*big.Int, error) {
	return _MockFlashLoanReceiver.Contract.AmountToApprove(&_MockFlashLoanReceiver.CallOpts)
}

// AmountToApprove is a free data retrieval call binding the contract method 0xbb271c4d.
//
// Solidity: function amountToApprove() view returns(uint256)
func (_MockFlashLoanReceiver *MockFlashLoanReceiverCallerSession) AmountToApprove() (*big.Int, error) {
	return _MockFlashLoanReceiver.Contract.AmountToApprove(&_MockFlashLoanReceiver.CallOpts)
}

// SimulateEOA is a free data retrieval call binding the contract method 0x4444f331.
//
// Solidity: function simulateEOA() view returns(bool)
func (_MockFlashLoanReceiver *MockFlashLoanReceiverCaller) SimulateEOA(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _MockFlashLoanReceiver.contract.Call(opts, &out, "simulateEOA")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SimulateEOA is a free data retrieval call binding the contract method 0x4444f331.
//
// Solidity: function simulateEOA() view returns(bool)
func (_MockFlashLoanReceiver *MockFlashLoanReceiverSession) SimulateEOA() (bool, error) {
	return _MockFlashLoanReceiver.Contract.SimulateEOA(&_MockFlashLoanReceiver.CallOpts)
}

// SimulateEOA is a free data retrieval call binding the contract method 0x4444f331.
//
// Solidity: function simulateEOA() view returns(bool)
func (_MockFlashLoanReceiver *MockFlashLoanReceiverCallerSession) SimulateEOA() (bool, error) {
	return _MockFlashLoanReceiver.Contract.SimulateEOA(&_MockFlashLoanReceiver.CallOpts)
}

// ExecuteOperation is a paid mutator transaction binding the contract method 0x920f5c84.
//
// Solidity: function executeOperation(address[] assets, uint256[] amounts, uint256[] premiums, address initiator, bytes params) returns(bool)
func (_MockFlashLoanReceiver *MockFlashLoanReceiverTransactor) ExecuteOperation(opts *bind.TransactOpts, assets []common.Address, amounts []*big.Int, premiums []*big.Int, initiator common.Address, params []byte) (*types.Transaction, error) {
	return _MockFlashLoanReceiver.contract.Transact(opts, "executeOperation", assets, amounts, premiums, initiator, params)
}

// ExecuteOperation is a paid mutator transaction binding the contract method 0x920f5c84.
//
// Solidity: function executeOperation(address[] assets, uint256[] amounts, uint256[] premiums, address initiator, bytes params) returns(bool)
func (_MockFlashLoanReceiver *MockFlashLoanReceiverSession) ExecuteOperation(assets []common.Address, amounts []*big.Int, premiums []*big.Int, initiator common.Address, params []byte) (*types.Transaction, error) {
	return _MockFlashLoanReceiver.Contract.ExecuteOperation(&_MockFlashLoanReceiver.TransactOpts, assets, amounts, premiums, initiator, params)
}

// ExecuteOperation is a paid mutator transaction binding the contract method 0x920f5c84.
//
// Solidity: function executeOperation(address[] assets, uint256[] amounts, uint256[] premiums, address initiator, bytes params) returns(bool)
func (_MockFlashLoanReceiver *MockFlashLoanReceiverTransactorSession) ExecuteOperation(assets []common.Address, amounts []*big.Int, premiums []*big.Int, initiator common.Address, params []byte) (*types.Transaction, error) {
	return _MockFlashLoanReceiver.Contract.ExecuteOperation(&_MockFlashLoanReceiver.TransactOpts, assets, amounts, premiums, initiator, params)
}

// SetAmountToApprove is a paid mutator transaction binding the contract method 0xbf443f85.
//
// Solidity: function setAmountToApprove(uint256 amountToApprove) returns()
func (_MockFlashLoanReceiver *MockFlashLoanReceiverTransactor) SetAmountToApprove(opts *bind.TransactOpts, amountToApprove *big.Int) (*types.Transaction, error) {
	return _MockFlashLoanReceiver.contract.Transact(opts, "setAmountToApprove", amountToApprove)
}

// SetAmountToApprove is a paid mutator transaction binding the contract method 0xbf443f85.
//
// Solidity: function setAmountToApprove(uint256 amountToApprove) returns()
func (_MockFlashLoanReceiver *MockFlashLoanReceiverSession) SetAmountToApprove(amountToApprove *big.Int) (*types.Transaction, error) {
	return _MockFlashLoanReceiver.Contract.SetAmountToApprove(&_MockFlashLoanReceiver.TransactOpts, amountToApprove)
}

// SetAmountToApprove is a paid mutator transaction binding the contract method 0xbf443f85.
//
// Solidity: function setAmountToApprove(uint256 amountToApprove) returns()
func (_MockFlashLoanReceiver *MockFlashLoanReceiverTransactorSession) SetAmountToApprove(amountToApprove *big.Int) (*types.Transaction, error) {
	return _MockFlashLoanReceiver.Contract.SetAmountToApprove(&_MockFlashLoanReceiver.TransactOpts, amountToApprove)
}

// SetFailExecutionTransfer is a paid mutator transaction binding the contract method 0x388f70f1.
//
// Solidity: function setFailExecutionTransfer(bool fail) returns()
func (_MockFlashLoanReceiver *MockFlashLoanReceiverTransactor) SetFailExecutionTransfer(opts *bind.TransactOpts, fail bool) (*types.Transaction, error) {
	return _MockFlashLoanReceiver.contract.Transact(opts, "setFailExecutionTransfer", fail)
}

// SetFailExecutionTransfer is a paid mutator transaction binding the contract method 0x388f70f1.
//
// Solidity: function setFailExecutionTransfer(bool fail) returns()
func (_MockFlashLoanReceiver *MockFlashLoanReceiverSession) SetFailExecutionTransfer(fail bool) (*types.Transaction, error) {
	return _MockFlashLoanReceiver.Contract.SetFailExecutionTransfer(&_MockFlashLoanReceiver.TransactOpts, fail)
}

// SetFailExecutionTransfer is a paid mutator transaction binding the contract method 0x388f70f1.
//
// Solidity: function setFailExecutionTransfer(bool fail) returns()
func (_MockFlashLoanReceiver *MockFlashLoanReceiverTransactorSession) SetFailExecutionTransfer(fail bool) (*types.Transaction, error) {
	return _MockFlashLoanReceiver.Contract.SetFailExecutionTransfer(&_MockFlashLoanReceiver.TransactOpts, fail)
}

// SetSimulateEOA is a paid mutator transaction binding the contract method 0xe9a6a25b.
//
// Solidity: function setSimulateEOA(bool flag) returns()
func (_MockFlashLoanReceiver *MockFlashLoanReceiverTransactor) SetSimulateEOA(opts *bind.TransactOpts, flag bool) (*types.Transaction, error) {
	return _MockFlashLoanReceiver.contract.Transact(opts, "setSimulateEOA", flag)
}

// SetSimulateEOA is a paid mutator transaction binding the contract method 0xe9a6a25b.
//
// Solidity: function setSimulateEOA(bool flag) returns()
func (_MockFlashLoanReceiver *MockFlashLoanReceiverSession) SetSimulateEOA(flag bool) (*types.Transaction, error) {
	return _MockFlashLoanReceiver.Contract.SetSimulateEOA(&_MockFlashLoanReceiver.TransactOpts, flag)
}

// SetSimulateEOA is a paid mutator transaction binding the contract method 0xe9a6a25b.
//
// Solidity: function setSimulateEOA(bool flag) returns()
func (_MockFlashLoanReceiver *MockFlashLoanReceiverTransactorSession) SetSimulateEOA(flag bool) (*types.Transaction, error) {
	return _MockFlashLoanReceiver.Contract.SetSimulateEOA(&_MockFlashLoanReceiver.TransactOpts, flag)
}

// MockFlashLoanReceiverExecutedWithFailIterator is returned from FilterExecutedWithFail and is used to iterate over the raw logs and unpacked data for ExecutedWithFail events raised by the MockFlashLoanReceiver contract.
type MockFlashLoanReceiverExecutedWithFailIterator struct {
	Event *MockFlashLoanReceiverExecutedWithFail // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MockFlashLoanReceiverExecutedWithFailIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MockFlashLoanReceiverExecutedWithFail)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MockFlashLoanReceiverExecutedWithFail)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MockFlashLoanReceiverExecutedWithFailIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MockFlashLoanReceiverExecutedWithFailIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MockFlashLoanReceiverExecutedWithFail represents a ExecutedWithFail event raised by the MockFlashLoanReceiver contract.
type MockFlashLoanReceiverExecutedWithFail struct {
	Assets   []common.Address
	Amounts  []*big.Int
	Premiums []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterExecutedWithFail is a free log retrieval operation binding the contract event 0x9972b212e52913783072b960dd41527ae8b6e609d017b64039758dda0ce41278.
//
// Solidity: event ExecutedWithFail(address[] _assets, uint256[] _amounts, uint256[] _premiums)
func (_MockFlashLoanReceiver *MockFlashLoanReceiverFilterer) FilterExecutedWithFail(opts *bind.FilterOpts) (*MockFlashLoanReceiverExecutedWithFailIterator, error) {

	logs, sub, err := _MockFlashLoanReceiver.contract.FilterLogs(opts, "ExecutedWithFail")
	if err != nil {
		return nil, err
	}
	return &MockFlashLoanReceiverExecutedWithFailIterator{contract: _MockFlashLoanReceiver.contract, event: "ExecutedWithFail", logs: logs, sub: sub}, nil
}

// WatchExecutedWithFail is a free log subscription operation binding the contract event 0x9972b212e52913783072b960dd41527ae8b6e609d017b64039758dda0ce41278.
//
// Solidity: event ExecutedWithFail(address[] _assets, uint256[] _amounts, uint256[] _premiums)
func (_MockFlashLoanReceiver *MockFlashLoanReceiverFilterer) WatchExecutedWithFail(opts *bind.WatchOpts, sink chan<- *MockFlashLoanReceiverExecutedWithFail) (event.Subscription, error) {

	logs, sub, err := _MockFlashLoanReceiver.contract.WatchLogs(opts, "ExecutedWithFail")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MockFlashLoanReceiverExecutedWithFail)
				if err := _MockFlashLoanReceiver.contract.UnpackLog(event, "ExecutedWithFail", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExecutedWithFail is a log parse operation binding the contract event 0x9972b212e52913783072b960dd41527ae8b6e609d017b64039758dda0ce41278.
//
// Solidity: event ExecutedWithFail(address[] _assets, uint256[] _amounts, uint256[] _premiums)
func (_MockFlashLoanReceiver *MockFlashLoanReceiverFilterer) ParseExecutedWithFail(log types.Log) (*MockFlashLoanReceiverExecutedWithFail, error) {
	event := new(MockFlashLoanReceiverExecutedWithFail)
	if err := _MockFlashLoanReceiver.contract.UnpackLog(event, "ExecutedWithFail", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MockFlashLoanReceiverExecutedWithSuccessIterator is returned from FilterExecutedWithSuccess and is used to iterate over the raw logs and unpacked data for ExecutedWithSuccess events raised by the MockFlashLoanReceiver contract.
type MockFlashLoanReceiverExecutedWithSuccessIterator struct {
	Event *MockFlashLoanReceiverExecutedWithSuccess // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MockFlashLoanReceiverExecutedWithSuccessIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MockFlashLoanReceiverExecutedWithSuccess)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MockFlashLoanReceiverExecutedWithSuccess)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MockFlashLoanReceiverExecutedWithSuccessIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MockFlashLoanReceiverExecutedWithSuccessIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MockFlashLoanReceiverExecutedWithSuccess represents a ExecutedWithSuccess event raised by the MockFlashLoanReceiver contract.
type MockFlashLoanReceiverExecutedWithSuccess struct {
	Assets   []common.Address
	Amounts  []*big.Int
	Premiums []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterExecutedWithSuccess is a free log retrieval operation binding the contract event 0xbd6b6bfac59612765a81cc4fdee74ab4859671fa14a562056f9eea438735a78a.
//
// Solidity: event ExecutedWithSuccess(address[] _assets, uint256[] _amounts, uint256[] _premiums)
func (_MockFlashLoanReceiver *MockFlashLoanReceiverFilterer) FilterExecutedWithSuccess(opts *bind.FilterOpts) (*MockFlashLoanReceiverExecutedWithSuccessIterator, error) {

	logs, sub, err := _MockFlashLoanReceiver.contract.FilterLogs(opts, "ExecutedWithSuccess")
	if err != nil {
		return nil, err
	}
	return &MockFlashLoanReceiverExecutedWithSuccessIterator{contract: _MockFlashLoanReceiver.contract, event: "ExecutedWithSuccess", logs: logs, sub: sub}, nil
}

// WatchExecutedWithSuccess is a free log subscription operation binding the contract event 0xbd6b6bfac59612765a81cc4fdee74ab4859671fa14a562056f9eea438735a78a.
//
// Solidity: event ExecutedWithSuccess(address[] _assets, uint256[] _amounts, uint256[] _premiums)
func (_MockFlashLoanReceiver *MockFlashLoanReceiverFilterer) WatchExecutedWithSuccess(opts *bind.WatchOpts, sink chan<- *MockFlashLoanReceiverExecutedWithSuccess) (event.Subscription, error) {

	logs, sub, err := _MockFlashLoanReceiver.contract.WatchLogs(opts, "ExecutedWithSuccess")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MockFlashLoanReceiverExecutedWithSuccess)
				if err := _MockFlashLoanReceiver.contract.UnpackLog(event, "ExecutedWithSuccess", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExecutedWithSuccess is a log parse operation binding the contract event 0xbd6b6bfac59612765a81cc4fdee74ab4859671fa14a562056f9eea438735a78a.
//
// Solidity: event ExecutedWithSuccess(address[] _assets, uint256[] _amounts, uint256[] _premiums)
func (_MockFlashLoanReceiver *MockFlashLoanReceiverFilterer) ParseExecutedWithSuccess(log types.Log) (*MockFlashLoanReceiverExecutedWithSuccess, error) {
	event := new(MockFlashLoanReceiverExecutedWithSuccess)
	if err := _MockFlashLoanReceiver.contract.UnpackLog(event, "ExecutedWithSuccess", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MockStableDebtTokenABI is the input ABI used to generate the binding from.
const MockStableDebtTokenABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlyingAssetAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"incentivesController\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromUser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BorrowAllowanceDelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceIncrease\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"avgStableRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceIncrease\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"avgStableRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEBT_TOKEN_REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL\",\"outputs\":[{\"internalType\":\"contractILendingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNDERLYING_ASSET_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveDelegation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromUser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toUser\",\"type\":\"address\"}],\"name\":\"borrowAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAverageStableRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupplyData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalSupplyAndAvgRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalSupplyLastUpdated\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserLastUpdated\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserStableRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"principalBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// MockStableDebtTokenBin is the compiled bytecode used for deploying new contracts.
var MockStableDebtTokenBin = ""

// DeployMockStableDebtToken deploys a new Ethereum contract, binding an instance of MockStableDebtToken to it.
func DeployMockStableDebtToken(auth *bind.TransactOpts, backend bind.ContractBackend, _pool common.Address, _underlyingAssetAddress common.Address, _tokenName string, _tokenSymbol string, incentivesController common.Address) (common.Address, *types.Transaction, *MockStableDebtToken, error) {
	parsed, err := abi.JSON(strings.NewReader(MockStableDebtTokenABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(MockStableDebtTokenBin), backend, _pool, _underlyingAssetAddress, _tokenName, _tokenSymbol, incentivesController)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MockStableDebtToken{MockStableDebtTokenCaller: MockStableDebtTokenCaller{contract: contract}, MockStableDebtTokenTransactor: MockStableDebtTokenTransactor{contract: contract}, MockStableDebtTokenFilterer: MockStableDebtTokenFilterer{contract: contract}}, nil
}

// MockStableDebtToken is an auto generated Go binding around an Ethereum contract.
type MockStableDebtToken struct {
	MockStableDebtTokenCaller     // Read-only binding to the contract
	MockStableDebtTokenTransactor // Write-only binding to the contract
	MockStableDebtTokenFilterer   // Log filterer for contract events
}

// MockStableDebtTokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type MockStableDebtTokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MockStableDebtTokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MockStableDebtTokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MockStableDebtTokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MockStableDebtTokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MockStableDebtTokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MockStableDebtTokenSession struct {
	Contract     *MockStableDebtToken // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// MockStableDebtTokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MockStableDebtTokenCallerSession struct {
	Contract *MockStableDebtTokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// MockStableDebtTokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MockStableDebtTokenTransactorSession struct {
	Contract     *MockStableDebtTokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// MockStableDebtTokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type MockStableDebtTokenRaw struct {
	Contract *MockStableDebtToken // Generic contract binding to access the raw methods on
}

// MockStableDebtTokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MockStableDebtTokenCallerRaw struct {
	Contract *MockStableDebtTokenCaller // Generic read-only contract binding to access the raw methods on
}

// MockStableDebtTokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MockStableDebtTokenTransactorRaw struct {
	Contract *MockStableDebtTokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMockStableDebtToken creates a new instance of MockStableDebtToken, bound to a specific deployed contract.
func NewMockStableDebtToken(address common.Address, backend bind.ContractBackend) (*MockStableDebtToken, error) {
	contract, err := bindMockStableDebtToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MockStableDebtToken{MockStableDebtTokenCaller: MockStableDebtTokenCaller{contract: contract}, MockStableDebtTokenTransactor: MockStableDebtTokenTransactor{contract: contract}, MockStableDebtTokenFilterer: MockStableDebtTokenFilterer{contract: contract}}, nil
}

// NewMockStableDebtTokenCaller creates a new read-only instance of MockStableDebtToken, bound to a specific deployed contract.
func NewMockStableDebtTokenCaller(address common.Address, caller bind.ContractCaller) (*MockStableDebtTokenCaller, error) {
	contract, err := bindMockStableDebtToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MockStableDebtTokenCaller{contract: contract}, nil
}

// NewMockStableDebtTokenTransactor creates a new write-only instance of MockStableDebtToken, bound to a specific deployed contract.
func NewMockStableDebtTokenTransactor(address common.Address, transactor bind.ContractTransactor) (*MockStableDebtTokenTransactor, error) {
	contract, err := bindMockStableDebtToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MockStableDebtTokenTransactor{contract: contract}, nil
}

// NewMockStableDebtTokenFilterer creates a new log filterer instance of MockStableDebtToken, bound to a specific deployed contract.
func NewMockStableDebtTokenFilterer(address common.Address, filterer bind.ContractFilterer) (*MockStableDebtTokenFilterer, error) {
	contract, err := bindMockStableDebtToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MockStableDebtTokenFilterer{contract: contract}, nil
}

// bindMockStableDebtToken binds a generic wrapper to an already deployed contract.
func bindMockStableDebtToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MockStableDebtTokenABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MockStableDebtToken *MockStableDebtTokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MockStableDebtToken.Contract.MockStableDebtTokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MockStableDebtToken *MockStableDebtTokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MockStableDebtToken.Contract.MockStableDebtTokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MockStableDebtToken *MockStableDebtTokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MockStableDebtToken.Contract.MockStableDebtTokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MockStableDebtToken *MockStableDebtTokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MockStableDebtToken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MockStableDebtToken *MockStableDebtTokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MockStableDebtToken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MockStableDebtToken *MockStableDebtTokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MockStableDebtToken.Contract.contract.Transact(opts, method, params...)
}

// DEBTTOKENREVISION is a free data retrieval call binding the contract method 0xb9a7b622.
//
// Solidity: function DEBT_TOKEN_REVISION() view returns(uint256)
func (_MockStableDebtToken *MockStableDebtTokenCaller) DEBTTOKENREVISION(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MockStableDebtToken.contract.Call(opts, &out, "DEBT_TOKEN_REVISION")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DEBTTOKENREVISION is a free data retrieval call binding the contract method 0xb9a7b622.
//
// Solidity: function DEBT_TOKEN_REVISION() view returns(uint256)
func (_MockStableDebtToken *MockStableDebtTokenSession) DEBTTOKENREVISION() (*big.Int, error) {
	return _MockStableDebtToken.Contract.DEBTTOKENREVISION(&_MockStableDebtToken.CallOpts)
}

// DEBTTOKENREVISION is a free data retrieval call binding the contract method 0xb9a7b622.
//
// Solidity: function DEBT_TOKEN_REVISION() view returns(uint256)
func (_MockStableDebtToken *MockStableDebtTokenCallerSession) DEBTTOKENREVISION() (*big.Int, error) {
	return _MockStableDebtToken.Contract.DEBTTOKENREVISION(&_MockStableDebtToken.CallOpts)
}

// POOL is a free data retrieval call binding the contract method 0x7535d246.
//
// Solidity: function POOL() view returns(address)
func (_MockStableDebtToken *MockStableDebtTokenCaller) POOL(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MockStableDebtToken.contract.Call(opts, &out, "POOL")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// POOL is a free data retrieval call binding the contract method 0x7535d246.
//
// Solidity: function POOL() view returns(address)
func (_MockStableDebtToken *MockStableDebtTokenSession) POOL() (common.Address, error) {
	return _MockStableDebtToken.Contract.POOL(&_MockStableDebtToken.CallOpts)
}

// POOL is a free data retrieval call binding the contract method 0x7535d246.
//
// Solidity: function POOL() view returns(address)
func (_MockStableDebtToken *MockStableDebtTokenCallerSession) POOL() (common.Address, error) {
	return _MockStableDebtToken.Contract.POOL(&_MockStableDebtToken.CallOpts)
}

// UNDERLYINGASSETADDRESS is a free data retrieval call binding the contract method 0xb16a19de.
//
// Solidity: function UNDERLYING_ASSET_ADDRESS() view returns(address)
func (_MockStableDebtToken *MockStableDebtTokenCaller) UNDERLYINGASSETADDRESS(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MockStableDebtToken.contract.Call(opts, &out, "UNDERLYING_ASSET_ADDRESS")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// UNDERLYINGASSETADDRESS is a free data retrieval call binding the contract method 0xb16a19de.
//
// Solidity: function UNDERLYING_ASSET_ADDRESS() view returns(address)
func (_MockStableDebtToken *MockStableDebtTokenSession) UNDERLYINGASSETADDRESS() (common.Address, error) {
	return _MockStableDebtToken.Contract.UNDERLYINGASSETADDRESS(&_MockStableDebtToken.CallOpts)
}

// UNDERLYINGASSETADDRESS is a free data retrieval call binding the contract method 0xb16a19de.
//
// Solidity: function UNDERLYING_ASSET_ADDRESS() view returns(address)
func (_MockStableDebtToken *MockStableDebtTokenCallerSession) UNDERLYINGASSETADDRESS() (common.Address, error) {
	return _MockStableDebtToken.Contract.UNDERLYINGASSETADDRESS(&_MockStableDebtToken.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_MockStableDebtToken *MockStableDebtTokenCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MockStableDebtToken.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_MockStableDebtToken *MockStableDebtTokenSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _MockStableDebtToken.Contract.Allowance(&_MockStableDebtToken.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_MockStableDebtToken *MockStableDebtTokenCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _MockStableDebtToken.Contract.Allowance(&_MockStableDebtToken.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_MockStableDebtToken *MockStableDebtTokenCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MockStableDebtToken.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_MockStableDebtToken *MockStableDebtTokenSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _MockStableDebtToken.Contract.BalanceOf(&_MockStableDebtToken.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_MockStableDebtToken *MockStableDebtTokenCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _MockStableDebtToken.Contract.BalanceOf(&_MockStableDebtToken.CallOpts, account)
}

// BorrowAllowance is a free data retrieval call binding the contract method 0x6bd76d24.
//
// Solidity: function borrowAllowance(address fromUser, address toUser) view returns(uint256)
func (_MockStableDebtToken *MockStableDebtTokenCaller) BorrowAllowance(opts *bind.CallOpts, fromUser common.Address, toUser common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MockStableDebtToken.contract.Call(opts, &out, "borrowAllowance", fromUser, toUser)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BorrowAllowance is a free data retrieval call binding the contract method 0x6bd76d24.
//
// Solidity: function borrowAllowance(address fromUser, address toUser) view returns(uint256)
func (_MockStableDebtToken *MockStableDebtTokenSession) BorrowAllowance(fromUser common.Address, toUser common.Address) (*big.Int, error) {
	return _MockStableDebtToken.Contract.BorrowAllowance(&_MockStableDebtToken.CallOpts, fromUser, toUser)
}

// BorrowAllowance is a free data retrieval call binding the contract method 0x6bd76d24.
//
// Solidity: function borrowAllowance(address fromUser, address toUser) view returns(uint256)
func (_MockStableDebtToken *MockStableDebtTokenCallerSession) BorrowAllowance(fromUser common.Address, toUser common.Address) (*big.Int, error) {
	return _MockStableDebtToken.Contract.BorrowAllowance(&_MockStableDebtToken.CallOpts, fromUser, toUser)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_MockStableDebtToken *MockStableDebtTokenCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _MockStableDebtToken.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_MockStableDebtToken *MockStableDebtTokenSession) Decimals() (uint8, error) {
	return _MockStableDebtToken.Contract.Decimals(&_MockStableDebtToken.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_MockStableDebtToken *MockStableDebtTokenCallerSession) Decimals() (uint8, error) {
	return _MockStableDebtToken.Contract.Decimals(&_MockStableDebtToken.CallOpts)
}

// GetAverageStableRate is a free data retrieval call binding the contract method 0x90f6fcf2.
//
// Solidity: function getAverageStableRate() view returns(uint256)
func (_MockStableDebtToken *MockStableDebtTokenCaller) GetAverageStableRate(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MockStableDebtToken.contract.Call(opts, &out, "getAverageStableRate")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAverageStableRate is a free data retrieval call binding the contract method 0x90f6fcf2.
//
// Solidity: function getAverageStableRate() view returns(uint256)
func (_MockStableDebtToken *MockStableDebtTokenSession) GetAverageStableRate() (*big.Int, error) {
	return _MockStableDebtToken.Contract.GetAverageStableRate(&_MockStableDebtToken.CallOpts)
}

// GetAverageStableRate is a free data retrieval call binding the contract method 0x90f6fcf2.
//
// Solidity: function getAverageStableRate() view returns(uint256)
func (_MockStableDebtToken *MockStableDebtTokenCallerSession) GetAverageStableRate() (*big.Int, error) {
	return _MockStableDebtToken.Contract.GetAverageStableRate(&_MockStableDebtToken.CallOpts)
}

// GetSupplyData is a free data retrieval call binding the contract method 0x79774338.
//
// Solidity: function getSupplyData() view returns(uint256, uint256, uint256, uint40)
func (_MockStableDebtToken *MockStableDebtTokenCaller) GetSupplyData(opts *bind.CallOpts) (*big.Int, *big.Int, *big.Int, *big.Int, error) {
	var out []interface{}
	err := _MockStableDebtToken.contract.Call(opts, &out, "getSupplyData")

	if err != nil {
		return *new(*big.Int), *new(*big.Int), *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	out3 := *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return out0, out1, out2, out3, err

}

// GetSupplyData is a free data retrieval call binding the contract method 0x79774338.
//
// Solidity: function getSupplyData() view returns(uint256, uint256, uint256, uint40)
func (_MockStableDebtToken *MockStableDebtTokenSession) GetSupplyData() (*big.Int, *big.Int, *big.Int, *big.Int, error) {
	return _MockStableDebtToken.Contract.GetSupplyData(&_MockStableDebtToken.CallOpts)
}

// GetSupplyData is a free data retrieval call binding the contract method 0x79774338.
//
// Solidity: function getSupplyData() view returns(uint256, uint256, uint256, uint40)
func (_MockStableDebtToken *MockStableDebtTokenCallerSession) GetSupplyData() (*big.Int, *big.Int, *big.Int, *big.Int, error) {
	return _MockStableDebtToken.Contract.GetSupplyData(&_MockStableDebtToken.CallOpts)
}

// GetTotalSupplyAndAvgRate is a free data retrieval call binding the contract method 0xf731e9be.
//
// Solidity: function getTotalSupplyAndAvgRate() view returns(uint256, uint256)
func (_MockStableDebtToken *MockStableDebtTokenCaller) GetTotalSupplyAndAvgRate(opts *bind.CallOpts) (*big.Int, *big.Int, error) {
	var out []interface{}
	err := _MockStableDebtToken.contract.Call(opts, &out, "getTotalSupplyAndAvgRate")

	if err != nil {
		return *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// GetTotalSupplyAndAvgRate is a free data retrieval call binding the contract method 0xf731e9be.
//
// Solidity: function getTotalSupplyAndAvgRate() view returns(uint256, uint256)
func (_MockStableDebtToken *MockStableDebtTokenSession) GetTotalSupplyAndAvgRate() (*big.Int, *big.Int, error) {
	return _MockStableDebtToken.Contract.GetTotalSupplyAndAvgRate(&_MockStableDebtToken.CallOpts)
}

// GetTotalSupplyAndAvgRate is a free data retrieval call binding the contract method 0xf731e9be.
//
// Solidity: function getTotalSupplyAndAvgRate() view returns(uint256, uint256)
func (_MockStableDebtToken *MockStableDebtTokenCallerSession) GetTotalSupplyAndAvgRate() (*big.Int, *big.Int, error) {
	return _MockStableDebtToken.Contract.GetTotalSupplyAndAvgRate(&_MockStableDebtToken.CallOpts)
}

// GetTotalSupplyLastUpdated is a free data retrieval call binding the contract method 0xe7484890.
//
// Solidity: function getTotalSupplyLastUpdated() view returns(uint40)
func (_MockStableDebtToken *MockStableDebtTokenCaller) GetTotalSupplyLastUpdated(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MockStableDebtToken.contract.Call(opts, &out, "getTotalSupplyLastUpdated")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalSupplyLastUpdated is a free data retrieval call binding the contract method 0xe7484890.
//
// Solidity: function getTotalSupplyLastUpdated() view returns(uint40)
func (_MockStableDebtToken *MockStableDebtTokenSession) GetTotalSupplyLastUpdated() (*big.Int, error) {
	return _MockStableDebtToken.Contract.GetTotalSupplyLastUpdated(&_MockStableDebtToken.CallOpts)
}

// GetTotalSupplyLastUpdated is a free data retrieval call binding the contract method 0xe7484890.
//
// Solidity: function getTotalSupplyLastUpdated() view returns(uint40)
func (_MockStableDebtToken *MockStableDebtTokenCallerSession) GetTotalSupplyLastUpdated() (*big.Int, error) {
	return _MockStableDebtToken.Contract.GetTotalSupplyLastUpdated(&_MockStableDebtToken.CallOpts)
}

// GetUserLastUpdated is a free data retrieval call binding the contract method 0x79ce6b8c.
//
// Solidity: function getUserLastUpdated(address user) view returns(uint40)
func (_MockStableDebtToken *MockStableDebtTokenCaller) GetUserLastUpdated(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MockStableDebtToken.contract.Call(opts, &out, "getUserLastUpdated", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetUserLastUpdated is a free data retrieval call binding the contract method 0x79ce6b8c.
//
// Solidity: function getUserLastUpdated(address user) view returns(uint40)
func (_MockStableDebtToken *MockStableDebtTokenSession) GetUserLastUpdated(user common.Address) (*big.Int, error) {
	return _MockStableDebtToken.Contract.GetUserLastUpdated(&_MockStableDebtToken.CallOpts, user)
}

// GetUserLastUpdated is a free data retrieval call binding the contract method 0x79ce6b8c.
//
// Solidity: function getUserLastUpdated(address user) view returns(uint40)
func (_MockStableDebtToken *MockStableDebtTokenCallerSession) GetUserLastUpdated(user common.Address) (*big.Int, error) {
	return _MockStableDebtToken.Contract.GetUserLastUpdated(&_MockStableDebtToken.CallOpts, user)
}

// GetUserStableRate is a free data retrieval call binding the contract method 0xe78c9b3b.
//
// Solidity: function getUserStableRate(address user) view returns(uint256)
func (_MockStableDebtToken *MockStableDebtTokenCaller) GetUserStableRate(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MockStableDebtToken.contract.Call(opts, &out, "getUserStableRate", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetUserStableRate is a free data retrieval call binding the contract method 0xe78c9b3b.
//
// Solidity: function getUserStableRate(address user) view returns(uint256)
func (_MockStableDebtToken *MockStableDebtTokenSession) GetUserStableRate(user common.Address) (*big.Int, error) {
	return _MockStableDebtToken.Contract.GetUserStableRate(&_MockStableDebtToken.CallOpts, user)
}

// GetUserStableRate is a free data retrieval call binding the contract method 0xe78c9b3b.
//
// Solidity: function getUserStableRate(address user) view returns(uint256)
func (_MockStableDebtToken *MockStableDebtTokenCallerSession) GetUserStableRate(user common.Address) (*big.Int, error) {
	return _MockStableDebtToken.Contract.GetUserStableRate(&_MockStableDebtToken.CallOpts, user)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MockStableDebtToken *MockStableDebtTokenCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _MockStableDebtToken.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MockStableDebtToken *MockStableDebtTokenSession) Name() (string, error) {
	return _MockStableDebtToken.Contract.Name(&_MockStableDebtToken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MockStableDebtToken *MockStableDebtTokenCallerSession) Name() (string, error) {
	return _MockStableDebtToken.Contract.Name(&_MockStableDebtToken.CallOpts)
}

// PrincipalBalanceOf is a free data retrieval call binding the contract method 0xc634dfaa.
//
// Solidity: function principalBalanceOf(address user) view returns(uint256)
func (_MockStableDebtToken *MockStableDebtTokenCaller) PrincipalBalanceOf(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MockStableDebtToken.contract.Call(opts, &out, "principalBalanceOf", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PrincipalBalanceOf is a free data retrieval call binding the contract method 0xc634dfaa.
//
// Solidity: function principalBalanceOf(address user) view returns(uint256)
func (_MockStableDebtToken *MockStableDebtTokenSession) PrincipalBalanceOf(user common.Address) (*big.Int, error) {
	return _MockStableDebtToken.Contract.PrincipalBalanceOf(&_MockStableDebtToken.CallOpts, user)
}

// PrincipalBalanceOf is a free data retrieval call binding the contract method 0xc634dfaa.
//
// Solidity: function principalBalanceOf(address user) view returns(uint256)
func (_MockStableDebtToken *MockStableDebtTokenCallerSession) PrincipalBalanceOf(user common.Address) (*big.Int, error) {
	return _MockStableDebtToken.Contract.PrincipalBalanceOf(&_MockStableDebtToken.CallOpts, user)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MockStableDebtToken *MockStableDebtTokenCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _MockStableDebtToken.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MockStableDebtToken *MockStableDebtTokenSession) Symbol() (string, error) {
	return _MockStableDebtToken.Contract.Symbol(&_MockStableDebtToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MockStableDebtToken *MockStableDebtTokenCallerSession) Symbol() (string, error) {
	return _MockStableDebtToken.Contract.Symbol(&_MockStableDebtToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MockStableDebtToken *MockStableDebtTokenCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MockStableDebtToken.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MockStableDebtToken *MockStableDebtTokenSession) TotalSupply() (*big.Int, error) {
	return _MockStableDebtToken.Contract.TotalSupply(&_MockStableDebtToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MockStableDebtToken *MockStableDebtTokenCallerSession) TotalSupply() (*big.Int, error) {
	return _MockStableDebtToken.Contract.TotalSupply(&_MockStableDebtToken.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_MockStableDebtToken *MockStableDebtTokenTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockStableDebtToken.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_MockStableDebtToken *MockStableDebtTokenSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockStableDebtToken.Contract.Approve(&_MockStableDebtToken.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_MockStableDebtToken *MockStableDebtTokenTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockStableDebtToken.Contract.Approve(&_MockStableDebtToken.TransactOpts, spender, amount)
}

// ApproveDelegation is a paid mutator transaction binding the contract method 0xc04a8a10.
//
// Solidity: function approveDelegation(address delegatee, uint256 amount) returns()
func (_MockStableDebtToken *MockStableDebtTokenTransactor) ApproveDelegation(opts *bind.TransactOpts, delegatee common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockStableDebtToken.contract.Transact(opts, "approveDelegation", delegatee, amount)
}

// ApproveDelegation is a paid mutator transaction binding the contract method 0xc04a8a10.
//
// Solidity: function approveDelegation(address delegatee, uint256 amount) returns()
func (_MockStableDebtToken *MockStableDebtTokenSession) ApproveDelegation(delegatee common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockStableDebtToken.Contract.ApproveDelegation(&_MockStableDebtToken.TransactOpts, delegatee, amount)
}

// ApproveDelegation is a paid mutator transaction binding the contract method 0xc04a8a10.
//
// Solidity: function approveDelegation(address delegatee, uint256 amount) returns()
func (_MockStableDebtToken *MockStableDebtTokenTransactorSession) ApproveDelegation(delegatee common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockStableDebtToken.Contract.ApproveDelegation(&_MockStableDebtToken.TransactOpts, delegatee, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address user, uint256 amount) returns()
func (_MockStableDebtToken *MockStableDebtTokenTransactor) Burn(opts *bind.TransactOpts, user common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockStableDebtToken.contract.Transact(opts, "burn", user, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address user, uint256 amount) returns()
func (_MockStableDebtToken *MockStableDebtTokenSession) Burn(user common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockStableDebtToken.Contract.Burn(&_MockStableDebtToken.TransactOpts, user, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address user, uint256 amount) returns()
func (_MockStableDebtToken *MockStableDebtTokenTransactorSession) Burn(user common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockStableDebtToken.Contract.Burn(&_MockStableDebtToken.TransactOpts, user, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_MockStableDebtToken *MockStableDebtTokenTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _MockStableDebtToken.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_MockStableDebtToken *MockStableDebtTokenSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _MockStableDebtToken.Contract.DecreaseAllowance(&_MockStableDebtToken.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_MockStableDebtToken *MockStableDebtTokenTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _MockStableDebtToken.Contract.DecreaseAllowance(&_MockStableDebtToken.TransactOpts, spender, subtractedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_MockStableDebtToken *MockStableDebtTokenTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _MockStableDebtToken.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_MockStableDebtToken *MockStableDebtTokenSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _MockStableDebtToken.Contract.IncreaseAllowance(&_MockStableDebtToken.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_MockStableDebtToken *MockStableDebtTokenTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _MockStableDebtToken.Contract.IncreaseAllowance(&_MockStableDebtToken.TransactOpts, spender, addedValue)
}

// Initialize is a paid mutator transaction binding the contract method 0x3118724e.
//
// Solidity: function initialize(uint8 decimals, string name, string symbol) returns()
func (_MockStableDebtToken *MockStableDebtTokenTransactor) Initialize(opts *bind.TransactOpts, decimals uint8, name string, symbol string) (*types.Transaction, error) {
	return _MockStableDebtToken.contract.Transact(opts, "initialize", decimals, name, symbol)
}

// Initialize is a paid mutator transaction binding the contract method 0x3118724e.
//
// Solidity: function initialize(uint8 decimals, string name, string symbol) returns()
func (_MockStableDebtToken *MockStableDebtTokenSession) Initialize(decimals uint8, name string, symbol string) (*types.Transaction, error) {
	return _MockStableDebtToken.Contract.Initialize(&_MockStableDebtToken.TransactOpts, decimals, name, symbol)
}

// Initialize is a paid mutator transaction binding the contract method 0x3118724e.
//
// Solidity: function initialize(uint8 decimals, string name, string symbol) returns()
func (_MockStableDebtToken *MockStableDebtTokenTransactorSession) Initialize(decimals uint8, name string, symbol string) (*types.Transaction, error) {
	return _MockStableDebtToken.Contract.Initialize(&_MockStableDebtToken.TransactOpts, decimals, name, symbol)
}

// Mint is a paid mutator transaction binding the contract method 0xb3f1c93d.
//
// Solidity: function mint(address user, address onBehalfOf, uint256 amount, uint256 rate) returns(bool)
func (_MockStableDebtToken *MockStableDebtTokenTransactor) Mint(opts *bind.TransactOpts, user common.Address, onBehalfOf common.Address, amount *big.Int, rate *big.Int) (*types.Transaction, error) {
	return _MockStableDebtToken.contract.Transact(opts, "mint", user, onBehalfOf, amount, rate)
}

// Mint is a paid mutator transaction binding the contract method 0xb3f1c93d.
//
// Solidity: function mint(address user, address onBehalfOf, uint256 amount, uint256 rate) returns(bool)
func (_MockStableDebtToken *MockStableDebtTokenSession) Mint(user common.Address, onBehalfOf common.Address, amount *big.Int, rate *big.Int) (*types.Transaction, error) {
	return _MockStableDebtToken.Contract.Mint(&_MockStableDebtToken.TransactOpts, user, onBehalfOf, amount, rate)
}

// Mint is a paid mutator transaction binding the contract method 0xb3f1c93d.
//
// Solidity: function mint(address user, address onBehalfOf, uint256 amount, uint256 rate) returns(bool)
func (_MockStableDebtToken *MockStableDebtTokenTransactorSession) Mint(user common.Address, onBehalfOf common.Address, amount *big.Int, rate *big.Int) (*types.Transaction, error) {
	return _MockStableDebtToken.Contract.Mint(&_MockStableDebtToken.TransactOpts, user, onBehalfOf, amount, rate)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_MockStableDebtToken *MockStableDebtTokenTransactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockStableDebtToken.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_MockStableDebtToken *MockStableDebtTokenSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockStableDebtToken.Contract.Transfer(&_MockStableDebtToken.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_MockStableDebtToken *MockStableDebtTokenTransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockStableDebtToken.Contract.Transfer(&_MockStableDebtToken.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_MockStableDebtToken *MockStableDebtTokenTransactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockStableDebtToken.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_MockStableDebtToken *MockStableDebtTokenSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockStableDebtToken.Contract.TransferFrom(&_MockStableDebtToken.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_MockStableDebtToken *MockStableDebtTokenTransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockStableDebtToken.Contract.TransferFrom(&_MockStableDebtToken.TransactOpts, sender, recipient, amount)
}

// MockStableDebtTokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the MockStableDebtToken contract.
type MockStableDebtTokenApprovalIterator struct {
	Event *MockStableDebtTokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MockStableDebtTokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MockStableDebtTokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MockStableDebtTokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MockStableDebtTokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MockStableDebtTokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MockStableDebtTokenApproval represents a Approval event raised by the MockStableDebtToken contract.
type MockStableDebtTokenApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_MockStableDebtToken *MockStableDebtTokenFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*MockStableDebtTokenApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _MockStableDebtToken.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &MockStableDebtTokenApprovalIterator{contract: _MockStableDebtToken.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_MockStableDebtToken *MockStableDebtTokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *MockStableDebtTokenApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _MockStableDebtToken.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MockStableDebtTokenApproval)
				if err := _MockStableDebtToken.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_MockStableDebtToken *MockStableDebtTokenFilterer) ParseApproval(log types.Log) (*MockStableDebtTokenApproval, error) {
	event := new(MockStableDebtTokenApproval)
	if err := _MockStableDebtToken.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MockStableDebtTokenBorrowAllowanceDelegatedIterator is returned from FilterBorrowAllowanceDelegated and is used to iterate over the raw logs and unpacked data for BorrowAllowanceDelegated events raised by the MockStableDebtToken contract.
type MockStableDebtTokenBorrowAllowanceDelegatedIterator struct {
	Event *MockStableDebtTokenBorrowAllowanceDelegated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MockStableDebtTokenBorrowAllowanceDelegatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MockStableDebtTokenBorrowAllowanceDelegated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MockStableDebtTokenBorrowAllowanceDelegated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MockStableDebtTokenBorrowAllowanceDelegatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MockStableDebtTokenBorrowAllowanceDelegatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MockStableDebtTokenBorrowAllowanceDelegated represents a BorrowAllowanceDelegated event raised by the MockStableDebtToken contract.
type MockStableDebtTokenBorrowAllowanceDelegated struct {
	FromUser common.Address
	ToUser   common.Address
	Asset    common.Address
	Amount   *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterBorrowAllowanceDelegated is a free log retrieval operation binding the contract event 0xda919360433220e13b51e8c211e490d148e61a3bd53de8c097194e458b97f3e1.
//
// Solidity: event BorrowAllowanceDelegated(address indexed fromUser, address indexed toUser, address asset, uint256 amount)
func (_MockStableDebtToken *MockStableDebtTokenFilterer) FilterBorrowAllowanceDelegated(opts *bind.FilterOpts, fromUser []common.Address, toUser []common.Address) (*MockStableDebtTokenBorrowAllowanceDelegatedIterator, error) {

	var fromUserRule []interface{}
	for _, fromUserItem := range fromUser {
		fromUserRule = append(fromUserRule, fromUserItem)
	}
	var toUserRule []interface{}
	for _, toUserItem := range toUser {
		toUserRule = append(toUserRule, toUserItem)
	}

	logs, sub, err := _MockStableDebtToken.contract.FilterLogs(opts, "BorrowAllowanceDelegated", fromUserRule, toUserRule)
	if err != nil {
		return nil, err
	}
	return &MockStableDebtTokenBorrowAllowanceDelegatedIterator{contract: _MockStableDebtToken.contract, event: "BorrowAllowanceDelegated", logs: logs, sub: sub}, nil
}

// WatchBorrowAllowanceDelegated is a free log subscription operation binding the contract event 0xda919360433220e13b51e8c211e490d148e61a3bd53de8c097194e458b97f3e1.
//
// Solidity: event BorrowAllowanceDelegated(address indexed fromUser, address indexed toUser, address asset, uint256 amount)
func (_MockStableDebtToken *MockStableDebtTokenFilterer) WatchBorrowAllowanceDelegated(opts *bind.WatchOpts, sink chan<- *MockStableDebtTokenBorrowAllowanceDelegated, fromUser []common.Address, toUser []common.Address) (event.Subscription, error) {

	var fromUserRule []interface{}
	for _, fromUserItem := range fromUser {
		fromUserRule = append(fromUserRule, fromUserItem)
	}
	var toUserRule []interface{}
	for _, toUserItem := range toUser {
		toUserRule = append(toUserRule, toUserItem)
	}

	logs, sub, err := _MockStableDebtToken.contract.WatchLogs(opts, "BorrowAllowanceDelegated", fromUserRule, toUserRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MockStableDebtTokenBorrowAllowanceDelegated)
				if err := _MockStableDebtToken.contract.UnpackLog(event, "BorrowAllowanceDelegated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBorrowAllowanceDelegated is a log parse operation binding the contract event 0xda919360433220e13b51e8c211e490d148e61a3bd53de8c097194e458b97f3e1.
//
// Solidity: event BorrowAllowanceDelegated(address indexed fromUser, address indexed toUser, address asset, uint256 amount)
func (_MockStableDebtToken *MockStableDebtTokenFilterer) ParseBorrowAllowanceDelegated(log types.Log) (*MockStableDebtTokenBorrowAllowanceDelegated, error) {
	event := new(MockStableDebtTokenBorrowAllowanceDelegated)
	if err := _MockStableDebtToken.contract.UnpackLog(event, "BorrowAllowanceDelegated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MockStableDebtTokenBurnIterator is returned from FilterBurn and is used to iterate over the raw logs and unpacked data for Burn events raised by the MockStableDebtToken contract.
type MockStableDebtTokenBurnIterator struct {
	Event *MockStableDebtTokenBurn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MockStableDebtTokenBurnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MockStableDebtTokenBurn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MockStableDebtTokenBurn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MockStableDebtTokenBurnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MockStableDebtTokenBurnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MockStableDebtTokenBurn represents a Burn event raised by the MockStableDebtToken contract.
type MockStableDebtTokenBurn struct {
	User            common.Address
	Amount          *big.Int
	CurrentBalance  *big.Int
	BalanceIncrease *big.Int
	AvgStableRate   *big.Int
	NewTotalSupply  *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterBurn is a free log retrieval operation binding the contract event 0x44bd20a79e993bdcc7cbedf54a3b4d19fb78490124b6b90d04fe3242eea579e8.
//
// Solidity: event Burn(address indexed user, uint256 amount, uint256 currentBalance, uint256 balanceIncrease, uint256 avgStableRate, uint256 newTotalSupply)
func (_MockStableDebtToken *MockStableDebtTokenFilterer) FilterBurn(opts *bind.FilterOpts, user []common.Address) (*MockStableDebtTokenBurnIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _MockStableDebtToken.contract.FilterLogs(opts, "Burn", userRule)
	if err != nil {
		return nil, err
	}
	return &MockStableDebtTokenBurnIterator{contract: _MockStableDebtToken.contract, event: "Burn", logs: logs, sub: sub}, nil
}

// WatchBurn is a free log subscription operation binding the contract event 0x44bd20a79e993bdcc7cbedf54a3b4d19fb78490124b6b90d04fe3242eea579e8.
//
// Solidity: event Burn(address indexed user, uint256 amount, uint256 currentBalance, uint256 balanceIncrease, uint256 avgStableRate, uint256 newTotalSupply)
func (_MockStableDebtToken *MockStableDebtTokenFilterer) WatchBurn(opts *bind.WatchOpts, sink chan<- *MockStableDebtTokenBurn, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _MockStableDebtToken.contract.WatchLogs(opts, "Burn", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MockStableDebtTokenBurn)
				if err := _MockStableDebtToken.contract.UnpackLog(event, "Burn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurn is a log parse operation binding the contract event 0x44bd20a79e993bdcc7cbedf54a3b4d19fb78490124b6b90d04fe3242eea579e8.
//
// Solidity: event Burn(address indexed user, uint256 amount, uint256 currentBalance, uint256 balanceIncrease, uint256 avgStableRate, uint256 newTotalSupply)
func (_MockStableDebtToken *MockStableDebtTokenFilterer) ParseBurn(log types.Log) (*MockStableDebtTokenBurn, error) {
	event := new(MockStableDebtTokenBurn)
	if err := _MockStableDebtToken.contract.UnpackLog(event, "Burn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MockStableDebtTokenMintIterator is returned from FilterMint and is used to iterate over the raw logs and unpacked data for Mint events raised by the MockStableDebtToken contract.
type MockStableDebtTokenMintIterator struct {
	Event *MockStableDebtTokenMint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MockStableDebtTokenMintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MockStableDebtTokenMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MockStableDebtTokenMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MockStableDebtTokenMintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MockStableDebtTokenMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MockStableDebtTokenMint represents a Mint event raised by the MockStableDebtToken contract.
type MockStableDebtTokenMint struct {
	User            common.Address
	OnBehalfOf      common.Address
	Amount          *big.Int
	CurrentBalance  *big.Int
	BalanceIncrease *big.Int
	NewRate         *big.Int
	AvgStableRate   *big.Int
	NewTotalSupply  *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterMint is a free log retrieval operation binding the contract event 0xc16f4e4ca34d790de4c656c72fd015c667d688f20be64eea360618545c4c530f.
//
// Solidity: event Mint(address indexed user, address indexed onBehalfOf, uint256 amount, uint256 currentBalance, uint256 balanceIncrease, uint256 newRate, uint256 avgStableRate, uint256 newTotalSupply)
func (_MockStableDebtToken *MockStableDebtTokenFilterer) FilterMint(opts *bind.FilterOpts, user []common.Address, onBehalfOf []common.Address) (*MockStableDebtTokenMintIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var onBehalfOfRule []interface{}
	for _, onBehalfOfItem := range onBehalfOf {
		onBehalfOfRule = append(onBehalfOfRule, onBehalfOfItem)
	}

	logs, sub, err := _MockStableDebtToken.contract.FilterLogs(opts, "Mint", userRule, onBehalfOfRule)
	if err != nil {
		return nil, err
	}
	return &MockStableDebtTokenMintIterator{contract: _MockStableDebtToken.contract, event: "Mint", logs: logs, sub: sub}, nil
}

// WatchMint is a free log subscription operation binding the contract event 0xc16f4e4ca34d790de4c656c72fd015c667d688f20be64eea360618545c4c530f.
//
// Solidity: event Mint(address indexed user, address indexed onBehalfOf, uint256 amount, uint256 currentBalance, uint256 balanceIncrease, uint256 newRate, uint256 avgStableRate, uint256 newTotalSupply)
func (_MockStableDebtToken *MockStableDebtTokenFilterer) WatchMint(opts *bind.WatchOpts, sink chan<- *MockStableDebtTokenMint, user []common.Address, onBehalfOf []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var onBehalfOfRule []interface{}
	for _, onBehalfOfItem := range onBehalfOf {
		onBehalfOfRule = append(onBehalfOfRule, onBehalfOfItem)
	}

	logs, sub, err := _MockStableDebtToken.contract.WatchLogs(opts, "Mint", userRule, onBehalfOfRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MockStableDebtTokenMint)
				if err := _MockStableDebtToken.contract.UnpackLog(event, "Mint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMint is a log parse operation binding the contract event 0xc16f4e4ca34d790de4c656c72fd015c667d688f20be64eea360618545c4c530f.
//
// Solidity: event Mint(address indexed user, address indexed onBehalfOf, uint256 amount, uint256 currentBalance, uint256 balanceIncrease, uint256 newRate, uint256 avgStableRate, uint256 newTotalSupply)
func (_MockStableDebtToken *MockStableDebtTokenFilterer) ParseMint(log types.Log) (*MockStableDebtTokenMint, error) {
	event := new(MockStableDebtTokenMint)
	if err := _MockStableDebtToken.contract.UnpackLog(event, "Mint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MockStableDebtTokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the MockStableDebtToken contract.
type MockStableDebtTokenTransferIterator struct {
	Event *MockStableDebtTokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MockStableDebtTokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MockStableDebtTokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MockStableDebtTokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MockStableDebtTokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MockStableDebtTokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MockStableDebtTokenTransfer represents a Transfer event raised by the MockStableDebtToken contract.
type MockStableDebtTokenTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_MockStableDebtToken *MockStableDebtTokenFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MockStableDebtTokenTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MockStableDebtToken.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &MockStableDebtTokenTransferIterator{contract: _MockStableDebtToken.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_MockStableDebtToken *MockStableDebtTokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *MockStableDebtTokenTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MockStableDebtToken.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MockStableDebtTokenTransfer)
				if err := _MockStableDebtToken.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_MockStableDebtToken *MockStableDebtTokenFilterer) ParseTransfer(log types.Log) (*MockStableDebtTokenTransfer, error) {
	event := new(MockStableDebtTokenTransfer)
	if err := _MockStableDebtToken.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MockVariableDebtTokenABI is the input ABI used to generate the binding from.
const MockVariableDebtTokenABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlyingAssetAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"incentivesController\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromUser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BorrowAllowanceDelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEBT_TOKEN_REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL\",\"outputs\":[{\"internalType\":\"contractILendingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNDERLYING_ASSET_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveDelegation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromUser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toUser\",\"type\":\"address\"}],\"name\":\"borrowAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getScaledUserBalanceAndSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"scaledBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scaledTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// MockVariableDebtTokenBin is the compiled bytecode used for deploying new contracts.
var MockVariableDebtTokenBin = "0x60e060405260006006553480156200001657600080fd5b5060405162001a1238038062001a12833981810160405260a08110156200003c57600080fd5b815160208301516040808501805191519395929483019291846401000000008211156200006857600080fd5b9083019060208201858111156200007e57600080fd5b82516401000000008111828201881017156200009957600080fd5b82525081516020918201929091019080838360005b83811015620000c8578181015183820152602001620000ae565b50505050905090810190601f168015620000f65780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200011a57600080fd5b9083019060208201858111156200013057600080fd5b82516401000000008111828201881017156200014b57600080fd5b82525081516020918201929091019080838360005b838110156200017a57818101518382015260200162000160565b50505050905090810190601f168015620001a85780820380516001836020036101000a031916815260200191505b50604052602001805190602001909291905050508484848484848484848482826012838360039080519060200190620001e39291906200024b565b508251620001f99060049060208601906200024b565b506005805460ff90931660ff19909316929092179091556001600160601b0319606091821b811660805297811b881660c0529590951b90951660a05250620002e79d5050505050505050505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200028e57805160ff1916838001178555620002be565b82800160010185558215620002be579182015b82811115620002be578251825591602001919060010190620002a1565b50620002cc929150620002d0565b5090565b5b80821115620002cc5760008155600101620002d1565b60805160601c60a05160601c60c05160601c6116c86200034a600039806106ca52806109515280610a185280610acd5280610dbc5250806106f952806109805280610a9d5280610d71528061110e525080611332528061135952506116c86000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80637535d246116100b8578063b1bf962d1161007c578063b1bf962d146104f0578063b3f1c93d146104f8578063b9a7b62214610534578063c04a8a101461053c578063dd62ed3e14610568578063f5298aca1461059657610142565b80637535d2461461049057806395d89b41146104b4578063a457c2d714610410578063a9059cbb146104bc578063b16a19de146104e857610142565b806323b872dd1161010a57806323b872dd146102835780633118724e146102b9578063313ce567146103f257806339509351146104105780636bd76d241461043c57806370a082311461046a57610142565b806306fdde0314610147578063095ea7b3146101c45780630afbcdc91461020457806318160ddd146102435780631da24f3e1461025d575b600080fd5b61014f6105c8565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610189578181015183820152602001610171565b50505050905090810190601f1680156101b65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101f0600480360360408110156101da57600080fd5b506001600160a01b03813516906020013561065e565b604080519115158252519081900360200190f35b61022a6004803603602081101561021a57600080fd5b50356001600160a01b03166106a6565b6040805192835260208301919091528051918290030190f35b61024b6106c3565b60408051918252519081900360200190f35b61024b6004803603602081101561027357600080fd5b50356001600160a01b0316610794565b6101f06004803603606081101561029957600080fd5b506001600160a01b038135811691602081013590911690604001356107a7565b6103f0600480360360608110156102cf57600080fd5b60ff82351691908101906040810160208201356401000000008111156102f457600080fd5b82018360208201111561030657600080fd5b8035906020019184600183028401116401000000008311171561032857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561037b57600080fd5b82018360208201111561038d57600080fd5b803590602001918460018302840111640100000000831117156103af57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506107ef945050505050565b005b6103fa6108aa565b6040805160ff9092168252519081900360200190f35b6101f06004803603604081101561042657600080fd5b506001600160a01b0381351690602001356108b3565b61024b6004803603604081101561045257600080fd5b506001600160a01b0381358116916020013516610902565b61024b6004803603602081101561048057600080fd5b50356001600160a01b031661092f565b610498610a16565b604080516001600160a01b039092168252519081900360200190f35b61014f610a3a565b6101f0600480360360408110156104d257600080fd5b506001600160a01b0381351690602001356107a7565b610498610a9b565b61024b610abf565b6101f06004803603608081101561050e57600080fd5b506001600160a01b03813581169160208101359091169060408101359060600135610ac9565b61024b610cfb565b6103f06004803603604081101561055257600080fd5b506001600160a01b038135169060200135610d00565b61024b6004803603604081101561057e57600080fd5b506001600160a01b03813581169160200135166108b3565b6103f0600480360360608110156105ac57600080fd5b506001600160a01b038135169060208101359060400135610dba565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106545780601f1061062957610100808354040283529160200191610654565b820191906000526020600020905b81548152906001019060200180831161063757829003601f168201915b5050505050905090565b6040805162461bcd60e51b81526020600482015260166024820152751054141493d5905317d393d517d4d5541413d495115160521b6044820152905160009181900360640190fd5b6000806106b283610f67565b6106ba610f82565b91509150915091565b600061078f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663386497fd7f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561075557600080fd5b505afa158015610769573d6000803e3d6000fd5b505050506040513d602081101561077f57600080fd5b5051610789610f82565b90610f88565b905090565b600061079f82610f67565b90505b919050565b6040805162461bcd60e51b81526020600482015260166024820152751514905394d1915497d393d517d4d5541413d495115160521b6044820152905160009181900360640190fd5b60006107f9611046565b60075490915060ff1680610810575061081061104b565b8061081c575060065481115b6108575760405162461bcd60e51b815260040180806020018281038252602e815260200180611644602e913960400191505060405180910390fd5b60075460ff16158015610877576007805460ff1916600117905560068290555b61088084611051565b61088983611068565b6108928561107b565b80156108a3576007805460ff191690555b5050505050565b60055460ff1690565b6040805162461bcd60e51b815260206004820152601760248201527f414c4c4f57414e43455f4e4f545f535550504f525445440000000000000000006044820152905160009181900360640190fd5b6001600160a01b038083166000908152603a60209081526040808320938516835292905220545b92915050565b60008061093b83610f67565b90508061094c5760009150506107a2565b610a0f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663386497fd7f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156109dc57600080fd5b505afa1580156109f0573d6000803e3d6000fd5b505050506040513d6020811015610a0657600080fd5b50518290610f88565b9392505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106545780601f1061062957610100808354040283529160200191610654565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061078f610f82565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610afd611091565b6001600160a01b03161460405180604001604052806002815260200161323960f01b81525090610bab5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610b70578181015183820152602001610b58565b50505050905090810190601f168015610b9d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50836001600160a01b0316856001600160a01b031614610bd057610bd0848685611095565b6000610bdb85610f67565b90506000610be98585611172565b6040805180820190915260028152611a9b60f11b602082015290915081610c515760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b70578181015183820152602001610b58565b50610c5c8682611279565b6040805186815290516001600160a01b038816916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3856001600160a01b0316876001600160a01b03167f2f00e3cdd69a77be7ed215ec7b2a36784dd158f921fca79ac29deffa353fe6ee8787604051808381526020018281526020019250505060405180910390a3501595945050505050565b600181565b80603a6000610d0d611091565b6001600160a01b0390811682526020808301939093526040918201600090812091871680825291909352912091909155610d45611091565b6001600160a01b03167fda919360433220e13b51e8c211e490d148e61a3bd53de8c097194e458b97f3e17f00000000000000000000000000000000000000000000000000000000000000008460405180836001600160a01b031681526020018281526020019250505060405180910390a35050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610dec611091565b6001600160a01b03161460405180604001604052806002815260200161323960f01b81525090610e5d5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b70578181015183820152602001610b58565b506000610e6a8383611172565b60408051808201909152600281526106a760f31b602082015290915081610ed25760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b70578181015183820152602001610b58565b50610edd84826113f5565b6040805184815290516000916001600160a01b038716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3604080518481526020810184905281516001600160a01b038716927f49995e5dd6158cf69ad3e9777c46755a1a826a446c6416992167462dad033b2a928290030190a250505050565b6001600160a01b031660009081526020819052604090205490565b60025490565b6000821580610f95575081155b15610fa257506000610929565b816b019d971e4fe8401e740000001981610fb857fe5b0483111560405180604001604052806002815260200161068760f31b815250906110235760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b70578181015183820152602001610b58565b50506b033b2e3c9fd0803ce800000091026b019d971e4fe8401e74000000010490565b600290565b303b1590565b805161106490600390602084019061158e565b5050565b805161106490600490602084019061158e565b6005805460ff191660ff92909216919091179055565b3390565b6040805180820182526002815261353960f01b6020808301919091526001600160a01b038087166000908152603a835284812091871681529152918220546110de918490611493565b6001600160a01b038086166000818152603a602090815260408083208986168085529083529281902086905580517f000000000000000000000000000000000000000000000000000000000000000090951685529084018590528051949550909391927fda919360433220e13b51e8c211e490d148e61a3bd53de8c097194e458b97f3e1929081900390910190a350505050565b604080518082019091526002815261035360f41b6020820152600090826111da5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b70578181015183820152602001610b58565b5060408051808201909152600280825261068760f31b60208301528304906b033b2e3c9fd0803ce80000008219048511156112565760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b70578181015183820152602001610b58565b5082816b033b2e3c9fd0803ce80000008602018161127057fe5b04949350505050565b6001600160a01b0382166112d4576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6112e0600083836114ed565b6002546112ed81836114f2565b6002556001600160a01b03831660009081526020819052604090205461131381846114f2565b6001600160a01b038086166000908152602081905260409020919091557f000000000000000000000000000000000000000000000000000000000000000016156113ef577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166331873e2e8584846040518463ffffffff1660e01b815260040180846001600160a01b031681526020018381526020018281526020019350505050600060405180830381600087803b1580156113d657600080fd5b505af11580156113ea573d6000803e3d6000fd5b505050505b50505050565b6001600160a01b03821661143a5760405162461bcd60e51b81526004018080602001828103825260218152602001806116726021913960400191505060405180910390fd5b611446826000836114ed565b600254611453818361154c565b6002556001600160a01b03831660009081526020818152604091829020548251606081019093526022808452909261131392869290611622908301398391905b600081848411156114e55760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b70578181015183820152602001610b58565b505050900390565b505050565b600082820183811015610a0f576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000610a0f83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611493565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106115cf57805160ff19168380011785556115fc565b828001600101855582156115fc579182015b828111156115fc5782518255916020019190600101906115e1565b5061160892915061160c565b5090565b5b80821115611608576000815560010161160d56fe45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a656445524332303a206275726e2066726f6d20746865207a65726f2061646472657373a264697066735822122068a46a344b698ba47ee8119197546cf15d14bb7fd516bc3043e8d7cd912c1e4c64736f6c634300060c0033"

// DeployMockVariableDebtToken deploys a new Ethereum contract, binding an instance of MockVariableDebtToken to it.
func DeployMockVariableDebtToken(auth *bind.TransactOpts, backend bind.ContractBackend, _pool common.Address, _underlyingAssetAddress common.Address, _tokenName string, _tokenSymbol string, incentivesController common.Address) (common.Address, *types.Transaction, *MockVariableDebtToken, error) {
	parsed, err := abi.JSON(strings.NewReader(MockVariableDebtTokenABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(MockVariableDebtTokenBin), backend, _pool, _underlyingAssetAddress, _tokenName, _tokenSymbol, incentivesController)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MockVariableDebtToken{MockVariableDebtTokenCaller: MockVariableDebtTokenCaller{contract: contract}, MockVariableDebtTokenTransactor: MockVariableDebtTokenTransactor{contract: contract}, MockVariableDebtTokenFilterer: MockVariableDebtTokenFilterer{contract: contract}}, nil
}

// MockVariableDebtToken is an auto generated Go binding around an Ethereum contract.
type MockVariableDebtToken struct {
	MockVariableDebtTokenCaller     // Read-only binding to the contract
	MockVariableDebtTokenTransactor // Write-only binding to the contract
	MockVariableDebtTokenFilterer   // Log filterer for contract events
}

// MockVariableDebtTokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type MockVariableDebtTokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MockVariableDebtTokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MockVariableDebtTokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MockVariableDebtTokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MockVariableDebtTokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MockVariableDebtTokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MockVariableDebtTokenSession struct {
	Contract     *MockVariableDebtToken // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// MockVariableDebtTokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MockVariableDebtTokenCallerSession struct {
	Contract *MockVariableDebtTokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// MockVariableDebtTokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MockVariableDebtTokenTransactorSession struct {
	Contract     *MockVariableDebtTokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// MockVariableDebtTokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type MockVariableDebtTokenRaw struct {
	Contract *MockVariableDebtToken // Generic contract binding to access the raw methods on
}

// MockVariableDebtTokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MockVariableDebtTokenCallerRaw struct {
	Contract *MockVariableDebtTokenCaller // Generic read-only contract binding to access the raw methods on
}

// MockVariableDebtTokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MockVariableDebtTokenTransactorRaw struct {
	Contract *MockVariableDebtTokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMockVariableDebtToken creates a new instance of MockVariableDebtToken, bound to a specific deployed contract.
func NewMockVariableDebtToken(address common.Address, backend bind.ContractBackend) (*MockVariableDebtToken, error) {
	contract, err := bindMockVariableDebtToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MockVariableDebtToken{MockVariableDebtTokenCaller: MockVariableDebtTokenCaller{contract: contract}, MockVariableDebtTokenTransactor: MockVariableDebtTokenTransactor{contract: contract}, MockVariableDebtTokenFilterer: MockVariableDebtTokenFilterer{contract: contract}}, nil
}

// NewMockVariableDebtTokenCaller creates a new read-only instance of MockVariableDebtToken, bound to a specific deployed contract.
func NewMockVariableDebtTokenCaller(address common.Address, caller bind.ContractCaller) (*MockVariableDebtTokenCaller, error) {
	contract, err := bindMockVariableDebtToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MockVariableDebtTokenCaller{contract: contract}, nil
}

// NewMockVariableDebtTokenTransactor creates a new write-only instance of MockVariableDebtToken, bound to a specific deployed contract.
func NewMockVariableDebtTokenTransactor(address common.Address, transactor bind.ContractTransactor) (*MockVariableDebtTokenTransactor, error) {
	contract, err := bindMockVariableDebtToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MockVariableDebtTokenTransactor{contract: contract}, nil
}

// NewMockVariableDebtTokenFilterer creates a new log filterer instance of MockVariableDebtToken, bound to a specific deployed contract.
func NewMockVariableDebtTokenFilterer(address common.Address, filterer bind.ContractFilterer) (*MockVariableDebtTokenFilterer, error) {
	contract, err := bindMockVariableDebtToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MockVariableDebtTokenFilterer{contract: contract}, nil
}

// bindMockVariableDebtToken binds a generic wrapper to an already deployed contract.
func bindMockVariableDebtToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MockVariableDebtTokenABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MockVariableDebtToken *MockVariableDebtTokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MockVariableDebtToken.Contract.MockVariableDebtTokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MockVariableDebtToken *MockVariableDebtTokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MockVariableDebtToken.Contract.MockVariableDebtTokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MockVariableDebtToken *MockVariableDebtTokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MockVariableDebtToken.Contract.MockVariableDebtTokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MockVariableDebtToken *MockVariableDebtTokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MockVariableDebtToken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MockVariableDebtToken *MockVariableDebtTokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MockVariableDebtToken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MockVariableDebtToken *MockVariableDebtTokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MockVariableDebtToken.Contract.contract.Transact(opts, method, params...)
}

// DEBTTOKENREVISION is a free data retrieval call binding the contract method 0xb9a7b622.
//
// Solidity: function DEBT_TOKEN_REVISION() view returns(uint256)
func (_MockVariableDebtToken *MockVariableDebtTokenCaller) DEBTTOKENREVISION(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MockVariableDebtToken.contract.Call(opts, &out, "DEBT_TOKEN_REVISION")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DEBTTOKENREVISION is a free data retrieval call binding the contract method 0xb9a7b622.
//
// Solidity: function DEBT_TOKEN_REVISION() view returns(uint256)
func (_MockVariableDebtToken *MockVariableDebtTokenSession) DEBTTOKENREVISION() (*big.Int, error) {
	return _MockVariableDebtToken.Contract.DEBTTOKENREVISION(&_MockVariableDebtToken.CallOpts)
}

// DEBTTOKENREVISION is a free data retrieval call binding the contract method 0xb9a7b622.
//
// Solidity: function DEBT_TOKEN_REVISION() view returns(uint256)
func (_MockVariableDebtToken *MockVariableDebtTokenCallerSession) DEBTTOKENREVISION() (*big.Int, error) {
	return _MockVariableDebtToken.Contract.DEBTTOKENREVISION(&_MockVariableDebtToken.CallOpts)
}

// POOL is a free data retrieval call binding the contract method 0x7535d246.
//
// Solidity: function POOL() view returns(address)
func (_MockVariableDebtToken *MockVariableDebtTokenCaller) POOL(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MockVariableDebtToken.contract.Call(opts, &out, "POOL")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// POOL is a free data retrieval call binding the contract method 0x7535d246.
//
// Solidity: function POOL() view returns(address)
func (_MockVariableDebtToken *MockVariableDebtTokenSession) POOL() (common.Address, error) {
	return _MockVariableDebtToken.Contract.POOL(&_MockVariableDebtToken.CallOpts)
}

// POOL is a free data retrieval call binding the contract method 0x7535d246.
//
// Solidity: function POOL() view returns(address)
func (_MockVariableDebtToken *MockVariableDebtTokenCallerSession) POOL() (common.Address, error) {
	return _MockVariableDebtToken.Contract.POOL(&_MockVariableDebtToken.CallOpts)
}

// UNDERLYINGASSETADDRESS is a free data retrieval call binding the contract method 0xb16a19de.
//
// Solidity: function UNDERLYING_ASSET_ADDRESS() view returns(address)
func (_MockVariableDebtToken *MockVariableDebtTokenCaller) UNDERLYINGASSETADDRESS(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MockVariableDebtToken.contract.Call(opts, &out, "UNDERLYING_ASSET_ADDRESS")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// UNDERLYINGASSETADDRESS is a free data retrieval call binding the contract method 0xb16a19de.
//
// Solidity: function UNDERLYING_ASSET_ADDRESS() view returns(address)
func (_MockVariableDebtToken *MockVariableDebtTokenSession) UNDERLYINGASSETADDRESS() (common.Address, error) {
	return _MockVariableDebtToken.Contract.UNDERLYINGASSETADDRESS(&_MockVariableDebtToken.CallOpts)
}

// UNDERLYINGASSETADDRESS is a free data retrieval call binding the contract method 0xb16a19de.
//
// Solidity: function UNDERLYING_ASSET_ADDRESS() view returns(address)
func (_MockVariableDebtToken *MockVariableDebtTokenCallerSession) UNDERLYINGASSETADDRESS() (common.Address, error) {
	return _MockVariableDebtToken.Contract.UNDERLYINGASSETADDRESS(&_MockVariableDebtToken.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_MockVariableDebtToken *MockVariableDebtTokenCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MockVariableDebtToken.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_MockVariableDebtToken *MockVariableDebtTokenSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _MockVariableDebtToken.Contract.Allowance(&_MockVariableDebtToken.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_MockVariableDebtToken *MockVariableDebtTokenCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _MockVariableDebtToken.Contract.Allowance(&_MockVariableDebtToken.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address user) view returns(uint256)
func (_MockVariableDebtToken *MockVariableDebtTokenCaller) BalanceOf(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MockVariableDebtToken.contract.Call(opts, &out, "balanceOf", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address user) view returns(uint256)
func (_MockVariableDebtToken *MockVariableDebtTokenSession) BalanceOf(user common.Address) (*big.Int, error) {
	return _MockVariableDebtToken.Contract.BalanceOf(&_MockVariableDebtToken.CallOpts, user)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address user) view returns(uint256)
func (_MockVariableDebtToken *MockVariableDebtTokenCallerSession) BalanceOf(user common.Address) (*big.Int, error) {
	return _MockVariableDebtToken.Contract.BalanceOf(&_MockVariableDebtToken.CallOpts, user)
}

// BorrowAllowance is a free data retrieval call binding the contract method 0x6bd76d24.
//
// Solidity: function borrowAllowance(address fromUser, address toUser) view returns(uint256)
func (_MockVariableDebtToken *MockVariableDebtTokenCaller) BorrowAllowance(opts *bind.CallOpts, fromUser common.Address, toUser common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MockVariableDebtToken.contract.Call(opts, &out, "borrowAllowance", fromUser, toUser)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BorrowAllowance is a free data retrieval call binding the contract method 0x6bd76d24.
//
// Solidity: function borrowAllowance(address fromUser, address toUser) view returns(uint256)
func (_MockVariableDebtToken *MockVariableDebtTokenSession) BorrowAllowance(fromUser common.Address, toUser common.Address) (*big.Int, error) {
	return _MockVariableDebtToken.Contract.BorrowAllowance(&_MockVariableDebtToken.CallOpts, fromUser, toUser)
}

// BorrowAllowance is a free data retrieval call binding the contract method 0x6bd76d24.
//
// Solidity: function borrowAllowance(address fromUser, address toUser) view returns(uint256)
func (_MockVariableDebtToken *MockVariableDebtTokenCallerSession) BorrowAllowance(fromUser common.Address, toUser common.Address) (*big.Int, error) {
	return _MockVariableDebtToken.Contract.BorrowAllowance(&_MockVariableDebtToken.CallOpts, fromUser, toUser)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_MockVariableDebtToken *MockVariableDebtTokenCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _MockVariableDebtToken.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_MockVariableDebtToken *MockVariableDebtTokenSession) Decimals() (uint8, error) {
	return _MockVariableDebtToken.Contract.Decimals(&_MockVariableDebtToken.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_MockVariableDebtToken *MockVariableDebtTokenCallerSession) Decimals() (uint8, error) {
	return _MockVariableDebtToken.Contract.Decimals(&_MockVariableDebtToken.CallOpts)
}

// GetScaledUserBalanceAndSupply is a free data retrieval call binding the contract method 0x0afbcdc9.
//
// Solidity: function getScaledUserBalanceAndSupply(address user) view returns(uint256, uint256)
func (_MockVariableDebtToken *MockVariableDebtTokenCaller) GetScaledUserBalanceAndSupply(opts *bind.CallOpts, user common.Address) (*big.Int, *big.Int, error) {
	var out []interface{}
	err := _MockVariableDebtToken.contract.Call(opts, &out, "getScaledUserBalanceAndSupply", user)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// GetScaledUserBalanceAndSupply is a free data retrieval call binding the contract method 0x0afbcdc9.
//
// Solidity: function getScaledUserBalanceAndSupply(address user) view returns(uint256, uint256)
func (_MockVariableDebtToken *MockVariableDebtTokenSession) GetScaledUserBalanceAndSupply(user common.Address) (*big.Int, *big.Int, error) {
	return _MockVariableDebtToken.Contract.GetScaledUserBalanceAndSupply(&_MockVariableDebtToken.CallOpts, user)
}

// GetScaledUserBalanceAndSupply is a free data retrieval call binding the contract method 0x0afbcdc9.
//
// Solidity: function getScaledUserBalanceAndSupply(address user) view returns(uint256, uint256)
func (_MockVariableDebtToken *MockVariableDebtTokenCallerSession) GetScaledUserBalanceAndSupply(user common.Address) (*big.Int, *big.Int, error) {
	return _MockVariableDebtToken.Contract.GetScaledUserBalanceAndSupply(&_MockVariableDebtToken.CallOpts, user)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MockVariableDebtToken *MockVariableDebtTokenCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _MockVariableDebtToken.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MockVariableDebtToken *MockVariableDebtTokenSession) Name() (string, error) {
	return _MockVariableDebtToken.Contract.Name(&_MockVariableDebtToken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MockVariableDebtToken *MockVariableDebtTokenCallerSession) Name() (string, error) {
	return _MockVariableDebtToken.Contract.Name(&_MockVariableDebtToken.CallOpts)
}

// ScaledBalanceOf is a free data retrieval call binding the contract method 0x1da24f3e.
//
// Solidity: function scaledBalanceOf(address user) view returns(uint256)
func (_MockVariableDebtToken *MockVariableDebtTokenCaller) ScaledBalanceOf(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MockVariableDebtToken.contract.Call(opts, &out, "scaledBalanceOf", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ScaledBalanceOf is a free data retrieval call binding the contract method 0x1da24f3e.
//
// Solidity: function scaledBalanceOf(address user) view returns(uint256)
func (_MockVariableDebtToken *MockVariableDebtTokenSession) ScaledBalanceOf(user common.Address) (*big.Int, error) {
	return _MockVariableDebtToken.Contract.ScaledBalanceOf(&_MockVariableDebtToken.CallOpts, user)
}

// ScaledBalanceOf is a free data retrieval call binding the contract method 0x1da24f3e.
//
// Solidity: function scaledBalanceOf(address user) view returns(uint256)
func (_MockVariableDebtToken *MockVariableDebtTokenCallerSession) ScaledBalanceOf(user common.Address) (*big.Int, error) {
	return _MockVariableDebtToken.Contract.ScaledBalanceOf(&_MockVariableDebtToken.CallOpts, user)
}

// ScaledTotalSupply is a free data retrieval call binding the contract method 0xb1bf962d.
//
// Solidity: function scaledTotalSupply() view returns(uint256)
func (_MockVariableDebtToken *MockVariableDebtTokenCaller) ScaledTotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MockVariableDebtToken.contract.Call(opts, &out, "scaledTotalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ScaledTotalSupply is a free data retrieval call binding the contract method 0xb1bf962d.
//
// Solidity: function scaledTotalSupply() view returns(uint256)
func (_MockVariableDebtToken *MockVariableDebtTokenSession) ScaledTotalSupply() (*big.Int, error) {
	return _MockVariableDebtToken.Contract.ScaledTotalSupply(&_MockVariableDebtToken.CallOpts)
}

// ScaledTotalSupply is a free data retrieval call binding the contract method 0xb1bf962d.
//
// Solidity: function scaledTotalSupply() view returns(uint256)
func (_MockVariableDebtToken *MockVariableDebtTokenCallerSession) ScaledTotalSupply() (*big.Int, error) {
	return _MockVariableDebtToken.Contract.ScaledTotalSupply(&_MockVariableDebtToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MockVariableDebtToken *MockVariableDebtTokenCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _MockVariableDebtToken.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MockVariableDebtToken *MockVariableDebtTokenSession) Symbol() (string, error) {
	return _MockVariableDebtToken.Contract.Symbol(&_MockVariableDebtToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MockVariableDebtToken *MockVariableDebtTokenCallerSession) Symbol() (string, error) {
	return _MockVariableDebtToken.Contract.Symbol(&_MockVariableDebtToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MockVariableDebtToken *MockVariableDebtTokenCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MockVariableDebtToken.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MockVariableDebtToken *MockVariableDebtTokenSession) TotalSupply() (*big.Int, error) {
	return _MockVariableDebtToken.Contract.TotalSupply(&_MockVariableDebtToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MockVariableDebtToken *MockVariableDebtTokenCallerSession) TotalSupply() (*big.Int, error) {
	return _MockVariableDebtToken.Contract.TotalSupply(&_MockVariableDebtToken.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_MockVariableDebtToken *MockVariableDebtTokenTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockVariableDebtToken.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_MockVariableDebtToken *MockVariableDebtTokenSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockVariableDebtToken.Contract.Approve(&_MockVariableDebtToken.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_MockVariableDebtToken *MockVariableDebtTokenTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockVariableDebtToken.Contract.Approve(&_MockVariableDebtToken.TransactOpts, spender, amount)
}

// ApproveDelegation is a paid mutator transaction binding the contract method 0xc04a8a10.
//
// Solidity: function approveDelegation(address delegatee, uint256 amount) returns()
func (_MockVariableDebtToken *MockVariableDebtTokenTransactor) ApproveDelegation(opts *bind.TransactOpts, delegatee common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockVariableDebtToken.contract.Transact(opts, "approveDelegation", delegatee, amount)
}

// ApproveDelegation is a paid mutator transaction binding the contract method 0xc04a8a10.
//
// Solidity: function approveDelegation(address delegatee, uint256 amount) returns()
func (_MockVariableDebtToken *MockVariableDebtTokenSession) ApproveDelegation(delegatee common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockVariableDebtToken.Contract.ApproveDelegation(&_MockVariableDebtToken.TransactOpts, delegatee, amount)
}

// ApproveDelegation is a paid mutator transaction binding the contract method 0xc04a8a10.
//
// Solidity: function approveDelegation(address delegatee, uint256 amount) returns()
func (_MockVariableDebtToken *MockVariableDebtTokenTransactorSession) ApproveDelegation(delegatee common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockVariableDebtToken.Contract.ApproveDelegation(&_MockVariableDebtToken.TransactOpts, delegatee, amount)
}

// Burn is a paid mutator transaction binding the contract method 0xf5298aca.
//
// Solidity: function burn(address user, uint256 amount, uint256 index) returns()
func (_MockVariableDebtToken *MockVariableDebtTokenTransactor) Burn(opts *bind.TransactOpts, user common.Address, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _MockVariableDebtToken.contract.Transact(opts, "burn", user, amount, index)
}

// Burn is a paid mutator transaction binding the contract method 0xf5298aca.
//
// Solidity: function burn(address user, uint256 amount, uint256 index) returns()
func (_MockVariableDebtToken *MockVariableDebtTokenSession) Burn(user common.Address, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _MockVariableDebtToken.Contract.Burn(&_MockVariableDebtToken.TransactOpts, user, amount, index)
}

// Burn is a paid mutator transaction binding the contract method 0xf5298aca.
//
// Solidity: function burn(address user, uint256 amount, uint256 index) returns()
func (_MockVariableDebtToken *MockVariableDebtTokenTransactorSession) Burn(user common.Address, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _MockVariableDebtToken.Contract.Burn(&_MockVariableDebtToken.TransactOpts, user, amount, index)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_MockVariableDebtToken *MockVariableDebtTokenTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _MockVariableDebtToken.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_MockVariableDebtToken *MockVariableDebtTokenSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _MockVariableDebtToken.Contract.DecreaseAllowance(&_MockVariableDebtToken.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_MockVariableDebtToken *MockVariableDebtTokenTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _MockVariableDebtToken.Contract.DecreaseAllowance(&_MockVariableDebtToken.TransactOpts, spender, subtractedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_MockVariableDebtToken *MockVariableDebtTokenTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _MockVariableDebtToken.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_MockVariableDebtToken *MockVariableDebtTokenSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _MockVariableDebtToken.Contract.IncreaseAllowance(&_MockVariableDebtToken.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_MockVariableDebtToken *MockVariableDebtTokenTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _MockVariableDebtToken.Contract.IncreaseAllowance(&_MockVariableDebtToken.TransactOpts, spender, addedValue)
}

// Initialize is a paid mutator transaction binding the contract method 0x3118724e.
//
// Solidity: function initialize(uint8 decimals, string name, string symbol) returns()
func (_MockVariableDebtToken *MockVariableDebtTokenTransactor) Initialize(opts *bind.TransactOpts, decimals uint8, name string, symbol string) (*types.Transaction, error) {
	return _MockVariableDebtToken.contract.Transact(opts, "initialize", decimals, name, symbol)
}

// Initialize is a paid mutator transaction binding the contract method 0x3118724e.
//
// Solidity: function initialize(uint8 decimals, string name, string symbol) returns()
func (_MockVariableDebtToken *MockVariableDebtTokenSession) Initialize(decimals uint8, name string, symbol string) (*types.Transaction, error) {
	return _MockVariableDebtToken.Contract.Initialize(&_MockVariableDebtToken.TransactOpts, decimals, name, symbol)
}

// Initialize is a paid mutator transaction binding the contract method 0x3118724e.
//
// Solidity: function initialize(uint8 decimals, string name, string symbol) returns()
func (_MockVariableDebtToken *MockVariableDebtTokenTransactorSession) Initialize(decimals uint8, name string, symbol string) (*types.Transaction, error) {
	return _MockVariableDebtToken.Contract.Initialize(&_MockVariableDebtToken.TransactOpts, decimals, name, symbol)
}

// Mint is a paid mutator transaction binding the contract method 0xb3f1c93d.
//
// Solidity: function mint(address user, address onBehalfOf, uint256 amount, uint256 index) returns(bool)
func (_MockVariableDebtToken *MockVariableDebtTokenTransactor) Mint(opts *bind.TransactOpts, user common.Address, onBehalfOf common.Address, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _MockVariableDebtToken.contract.Transact(opts, "mint", user, onBehalfOf, amount, index)
}

// Mint is a paid mutator transaction binding the contract method 0xb3f1c93d.
//
// Solidity: function mint(address user, address onBehalfOf, uint256 amount, uint256 index) returns(bool)
func (_MockVariableDebtToken *MockVariableDebtTokenSession) Mint(user common.Address, onBehalfOf common.Address, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _MockVariableDebtToken.Contract.Mint(&_MockVariableDebtToken.TransactOpts, user, onBehalfOf, amount, index)
}

// Mint is a paid mutator transaction binding the contract method 0xb3f1c93d.
//
// Solidity: function mint(address user, address onBehalfOf, uint256 amount, uint256 index) returns(bool)
func (_MockVariableDebtToken *MockVariableDebtTokenTransactorSession) Mint(user common.Address, onBehalfOf common.Address, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _MockVariableDebtToken.Contract.Mint(&_MockVariableDebtToken.TransactOpts, user, onBehalfOf, amount, index)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_MockVariableDebtToken *MockVariableDebtTokenTransactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockVariableDebtToken.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_MockVariableDebtToken *MockVariableDebtTokenSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockVariableDebtToken.Contract.Transfer(&_MockVariableDebtToken.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_MockVariableDebtToken *MockVariableDebtTokenTransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockVariableDebtToken.Contract.Transfer(&_MockVariableDebtToken.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_MockVariableDebtToken *MockVariableDebtTokenTransactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockVariableDebtToken.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_MockVariableDebtToken *MockVariableDebtTokenSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockVariableDebtToken.Contract.TransferFrom(&_MockVariableDebtToken.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_MockVariableDebtToken *MockVariableDebtTokenTransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockVariableDebtToken.Contract.TransferFrom(&_MockVariableDebtToken.TransactOpts, sender, recipient, amount)
}

// MockVariableDebtTokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the MockVariableDebtToken contract.
type MockVariableDebtTokenApprovalIterator struct {
	Event *MockVariableDebtTokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MockVariableDebtTokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MockVariableDebtTokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MockVariableDebtTokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MockVariableDebtTokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MockVariableDebtTokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MockVariableDebtTokenApproval represents a Approval event raised by the MockVariableDebtToken contract.
type MockVariableDebtTokenApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_MockVariableDebtToken *MockVariableDebtTokenFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*MockVariableDebtTokenApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _MockVariableDebtToken.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &MockVariableDebtTokenApprovalIterator{contract: _MockVariableDebtToken.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_MockVariableDebtToken *MockVariableDebtTokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *MockVariableDebtTokenApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _MockVariableDebtToken.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MockVariableDebtTokenApproval)
				if err := _MockVariableDebtToken.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_MockVariableDebtToken *MockVariableDebtTokenFilterer) ParseApproval(log types.Log) (*MockVariableDebtTokenApproval, error) {
	event := new(MockVariableDebtTokenApproval)
	if err := _MockVariableDebtToken.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MockVariableDebtTokenBorrowAllowanceDelegatedIterator is returned from FilterBorrowAllowanceDelegated and is used to iterate over the raw logs and unpacked data for BorrowAllowanceDelegated events raised by the MockVariableDebtToken contract.
type MockVariableDebtTokenBorrowAllowanceDelegatedIterator struct {
	Event *MockVariableDebtTokenBorrowAllowanceDelegated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MockVariableDebtTokenBorrowAllowanceDelegatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MockVariableDebtTokenBorrowAllowanceDelegated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MockVariableDebtTokenBorrowAllowanceDelegated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MockVariableDebtTokenBorrowAllowanceDelegatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MockVariableDebtTokenBorrowAllowanceDelegatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MockVariableDebtTokenBorrowAllowanceDelegated represents a BorrowAllowanceDelegated event raised by the MockVariableDebtToken contract.
type MockVariableDebtTokenBorrowAllowanceDelegated struct {
	FromUser common.Address
	ToUser   common.Address
	Asset    common.Address
	Amount   *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterBorrowAllowanceDelegated is a free log retrieval operation binding the contract event 0xda919360433220e13b51e8c211e490d148e61a3bd53de8c097194e458b97f3e1.
//
// Solidity: event BorrowAllowanceDelegated(address indexed fromUser, address indexed toUser, address asset, uint256 amount)
func (_MockVariableDebtToken *MockVariableDebtTokenFilterer) FilterBorrowAllowanceDelegated(opts *bind.FilterOpts, fromUser []common.Address, toUser []common.Address) (*MockVariableDebtTokenBorrowAllowanceDelegatedIterator, error) {

	var fromUserRule []interface{}
	for _, fromUserItem := range fromUser {
		fromUserRule = append(fromUserRule, fromUserItem)
	}
	var toUserRule []interface{}
	for _, toUserItem := range toUser {
		toUserRule = append(toUserRule, toUserItem)
	}

	logs, sub, err := _MockVariableDebtToken.contract.FilterLogs(opts, "BorrowAllowanceDelegated", fromUserRule, toUserRule)
	if err != nil {
		return nil, err
	}
	return &MockVariableDebtTokenBorrowAllowanceDelegatedIterator{contract: _MockVariableDebtToken.contract, event: "BorrowAllowanceDelegated", logs: logs, sub: sub}, nil
}

// WatchBorrowAllowanceDelegated is a free log subscription operation binding the contract event 0xda919360433220e13b51e8c211e490d148e61a3bd53de8c097194e458b97f3e1.
//
// Solidity: event BorrowAllowanceDelegated(address indexed fromUser, address indexed toUser, address asset, uint256 amount)
func (_MockVariableDebtToken *MockVariableDebtTokenFilterer) WatchBorrowAllowanceDelegated(opts *bind.WatchOpts, sink chan<- *MockVariableDebtTokenBorrowAllowanceDelegated, fromUser []common.Address, toUser []common.Address) (event.Subscription, error) {

	var fromUserRule []interface{}
	for _, fromUserItem := range fromUser {
		fromUserRule = append(fromUserRule, fromUserItem)
	}
	var toUserRule []interface{}
	for _, toUserItem := range toUser {
		toUserRule = append(toUserRule, toUserItem)
	}

	logs, sub, err := _MockVariableDebtToken.contract.WatchLogs(opts, "BorrowAllowanceDelegated", fromUserRule, toUserRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MockVariableDebtTokenBorrowAllowanceDelegated)
				if err := _MockVariableDebtToken.contract.UnpackLog(event, "BorrowAllowanceDelegated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBorrowAllowanceDelegated is a log parse operation binding the contract event 0xda919360433220e13b51e8c211e490d148e61a3bd53de8c097194e458b97f3e1.
//
// Solidity: event BorrowAllowanceDelegated(address indexed fromUser, address indexed toUser, address asset, uint256 amount)
func (_MockVariableDebtToken *MockVariableDebtTokenFilterer) ParseBorrowAllowanceDelegated(log types.Log) (*MockVariableDebtTokenBorrowAllowanceDelegated, error) {
	event := new(MockVariableDebtTokenBorrowAllowanceDelegated)
	if err := _MockVariableDebtToken.contract.UnpackLog(event, "BorrowAllowanceDelegated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MockVariableDebtTokenBurnIterator is returned from FilterBurn and is used to iterate over the raw logs and unpacked data for Burn events raised by the MockVariableDebtToken contract.
type MockVariableDebtTokenBurnIterator struct {
	Event *MockVariableDebtTokenBurn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MockVariableDebtTokenBurnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MockVariableDebtTokenBurn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MockVariableDebtTokenBurn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MockVariableDebtTokenBurnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MockVariableDebtTokenBurnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MockVariableDebtTokenBurn represents a Burn event raised by the MockVariableDebtToken contract.
type MockVariableDebtTokenBurn struct {
	User   common.Address
	Amount *big.Int
	Index  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBurn is a free log retrieval operation binding the contract event 0x49995e5dd6158cf69ad3e9777c46755a1a826a446c6416992167462dad033b2a.
//
// Solidity: event Burn(address indexed user, uint256 amount, uint256 index)
func (_MockVariableDebtToken *MockVariableDebtTokenFilterer) FilterBurn(opts *bind.FilterOpts, user []common.Address) (*MockVariableDebtTokenBurnIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _MockVariableDebtToken.contract.FilterLogs(opts, "Burn", userRule)
	if err != nil {
		return nil, err
	}
	return &MockVariableDebtTokenBurnIterator{contract: _MockVariableDebtToken.contract, event: "Burn", logs: logs, sub: sub}, nil
}

// WatchBurn is a free log subscription operation binding the contract event 0x49995e5dd6158cf69ad3e9777c46755a1a826a446c6416992167462dad033b2a.
//
// Solidity: event Burn(address indexed user, uint256 amount, uint256 index)
func (_MockVariableDebtToken *MockVariableDebtTokenFilterer) WatchBurn(opts *bind.WatchOpts, sink chan<- *MockVariableDebtTokenBurn, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _MockVariableDebtToken.contract.WatchLogs(opts, "Burn", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MockVariableDebtTokenBurn)
				if err := _MockVariableDebtToken.contract.UnpackLog(event, "Burn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurn is a log parse operation binding the contract event 0x49995e5dd6158cf69ad3e9777c46755a1a826a446c6416992167462dad033b2a.
//
// Solidity: event Burn(address indexed user, uint256 amount, uint256 index)
func (_MockVariableDebtToken *MockVariableDebtTokenFilterer) ParseBurn(log types.Log) (*MockVariableDebtTokenBurn, error) {
	event := new(MockVariableDebtTokenBurn)
	if err := _MockVariableDebtToken.contract.UnpackLog(event, "Burn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MockVariableDebtTokenMintIterator is returned from FilterMint and is used to iterate over the raw logs and unpacked data for Mint events raised by the MockVariableDebtToken contract.
type MockVariableDebtTokenMintIterator struct {
	Event *MockVariableDebtTokenMint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MockVariableDebtTokenMintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MockVariableDebtTokenMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MockVariableDebtTokenMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MockVariableDebtTokenMintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MockVariableDebtTokenMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MockVariableDebtTokenMint represents a Mint event raised by the MockVariableDebtToken contract.
type MockVariableDebtTokenMint struct {
	From       common.Address
	OnBehalfOf common.Address
	Value      *big.Int
	Index      *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterMint is a free log retrieval operation binding the contract event 0x2f00e3cdd69a77be7ed215ec7b2a36784dd158f921fca79ac29deffa353fe6ee.
//
// Solidity: event Mint(address indexed from, address indexed onBehalfOf, uint256 value, uint256 index)
func (_MockVariableDebtToken *MockVariableDebtTokenFilterer) FilterMint(opts *bind.FilterOpts, from []common.Address, onBehalfOf []common.Address) (*MockVariableDebtTokenMintIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var onBehalfOfRule []interface{}
	for _, onBehalfOfItem := range onBehalfOf {
		onBehalfOfRule = append(onBehalfOfRule, onBehalfOfItem)
	}

	logs, sub, err := _MockVariableDebtToken.contract.FilterLogs(opts, "Mint", fromRule, onBehalfOfRule)
	if err != nil {
		return nil, err
	}
	return &MockVariableDebtTokenMintIterator{contract: _MockVariableDebtToken.contract, event: "Mint", logs: logs, sub: sub}, nil
}

// WatchMint is a free log subscription operation binding the contract event 0x2f00e3cdd69a77be7ed215ec7b2a36784dd158f921fca79ac29deffa353fe6ee.
//
// Solidity: event Mint(address indexed from, address indexed onBehalfOf, uint256 value, uint256 index)
func (_MockVariableDebtToken *MockVariableDebtTokenFilterer) WatchMint(opts *bind.WatchOpts, sink chan<- *MockVariableDebtTokenMint, from []common.Address, onBehalfOf []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var onBehalfOfRule []interface{}
	for _, onBehalfOfItem := range onBehalfOf {
		onBehalfOfRule = append(onBehalfOfRule, onBehalfOfItem)
	}

	logs, sub, err := _MockVariableDebtToken.contract.WatchLogs(opts, "Mint", fromRule, onBehalfOfRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MockVariableDebtTokenMint)
				if err := _MockVariableDebtToken.contract.UnpackLog(event, "Mint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMint is a log parse operation binding the contract event 0x2f00e3cdd69a77be7ed215ec7b2a36784dd158f921fca79ac29deffa353fe6ee.
//
// Solidity: event Mint(address indexed from, address indexed onBehalfOf, uint256 value, uint256 index)
func (_MockVariableDebtToken *MockVariableDebtTokenFilterer) ParseMint(log types.Log) (*MockVariableDebtTokenMint, error) {
	event := new(MockVariableDebtTokenMint)
	if err := _MockVariableDebtToken.contract.UnpackLog(event, "Mint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MockVariableDebtTokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the MockVariableDebtToken contract.
type MockVariableDebtTokenTransferIterator struct {
	Event *MockVariableDebtTokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MockVariableDebtTokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MockVariableDebtTokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MockVariableDebtTokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MockVariableDebtTokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MockVariableDebtTokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MockVariableDebtTokenTransfer represents a Transfer event raised by the MockVariableDebtToken contract.
type MockVariableDebtTokenTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_MockVariableDebtToken *MockVariableDebtTokenFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MockVariableDebtTokenTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MockVariableDebtToken.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &MockVariableDebtTokenTransferIterator{contract: _MockVariableDebtToken.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_MockVariableDebtToken *MockVariableDebtTokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *MockVariableDebtTokenTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MockVariableDebtToken.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MockVariableDebtTokenTransfer)
				if err := _MockVariableDebtToken.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_MockVariableDebtToken *MockVariableDebtTokenFilterer) ParseTransfer(log types.Log) (*MockVariableDebtTokenTransfer, error) {
	event := new(MockVariableDebtTokenTransfer)
	if err := _MockVariableDebtToken.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OwnableABI is the input ABI used to generate the binding from.
const OwnableABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// Ownable is an auto generated Go binding around an Ethereum contract.
type Ownable struct {
	OwnableCaller     // Read-only binding to the contract
	OwnableTransactor // Write-only binding to the contract
	OwnableFilterer   // Log filterer for contract events
}

// OwnableCaller is an auto generated read-only Go binding around an Ethereum contract.
type OwnableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OwnableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OwnableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OwnableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OwnableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OwnableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OwnableSession struct {
	Contract     *Ownable          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OwnableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OwnableCallerSession struct {
	Contract *OwnableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// OwnableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OwnableTransactorSession struct {
	Contract     *OwnableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// OwnableRaw is an auto generated low-level Go binding around an Ethereum contract.
type OwnableRaw struct {
	Contract *Ownable // Generic contract binding to access the raw methods on
}

// OwnableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OwnableCallerRaw struct {
	Contract *OwnableCaller // Generic read-only contract binding to access the raw methods on
}

// OwnableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OwnableTransactorRaw struct {
	Contract *OwnableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOwnable creates a new instance of Ownable, bound to a specific deployed contract.
func NewOwnable(address common.Address, backend bind.ContractBackend) (*Ownable, error) {
	contract, err := bindOwnable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Ownable{OwnableCaller: OwnableCaller{contract: contract}, OwnableTransactor: OwnableTransactor{contract: contract}, OwnableFilterer: OwnableFilterer{contract: contract}}, nil
}

// NewOwnableCaller creates a new read-only instance of Ownable, bound to a specific deployed contract.
func NewOwnableCaller(address common.Address, caller bind.ContractCaller) (*OwnableCaller, error) {
	contract, err := bindOwnable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OwnableCaller{contract: contract}, nil
}

// NewOwnableTransactor creates a new write-only instance of Ownable, bound to a specific deployed contract.
func NewOwnableTransactor(address common.Address, transactor bind.ContractTransactor) (*OwnableTransactor, error) {
	contract, err := bindOwnable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OwnableTransactor{contract: contract}, nil
}

// NewOwnableFilterer creates a new log filterer instance of Ownable, bound to a specific deployed contract.
func NewOwnableFilterer(address common.Address, filterer bind.ContractFilterer) (*OwnableFilterer, error) {
	contract, err := bindOwnable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OwnableFilterer{contract: contract}, nil
}

// bindOwnable binds a generic wrapper to an already deployed contract.
func bindOwnable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OwnableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Ownable *OwnableRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Ownable.Contract.OwnableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Ownable *OwnableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ownable.Contract.OwnableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Ownable *OwnableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Ownable.Contract.OwnableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Ownable *OwnableCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Ownable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Ownable *OwnableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ownable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Ownable *OwnableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Ownable.Contract.contract.Transact(opts, method, params...)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Ownable *OwnableCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Ownable.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Ownable *OwnableSession) Owner() (common.Address, error) {
	return _Ownable.Contract.Owner(&_Ownable.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Ownable *OwnableCallerSession) Owner() (common.Address, error) {
	return _Ownable.Contract.Owner(&_Ownable.CallOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Ownable *OwnableTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ownable.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Ownable *OwnableSession) RenounceOwnership() (*types.Transaction, error) {
	return _Ownable.Contract.RenounceOwnership(&_Ownable.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Ownable *OwnableTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Ownable.Contract.RenounceOwnership(&_Ownable.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Ownable *OwnableTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Ownable.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Ownable *OwnableSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Ownable.Contract.TransferOwnership(&_Ownable.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Ownable *OwnableTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Ownable.Contract.TransferOwnership(&_Ownable.TransactOpts, newOwner)
}

// OwnableOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Ownable contract.
type OwnableOwnershipTransferredIterator struct {
	Event *OwnableOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OwnableOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OwnableOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OwnableOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OwnableOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OwnableOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OwnableOwnershipTransferred represents a OwnershipTransferred event raised by the Ownable contract.
type OwnableOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Ownable *OwnableFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*OwnableOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Ownable.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &OwnableOwnershipTransferredIterator{contract: _Ownable.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Ownable *OwnableFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *OwnableOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Ownable.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OwnableOwnershipTransferred)
				if err := _Ownable.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Ownable *OwnableFilterer) ParseOwnershipTransferred(log types.Log) (*OwnableOwnershipTransferred, error) {
	event := new(OwnableOwnershipTransferred)
	if err := _Ownable.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PercentageMathABI is the input ABI used to generate the binding from.
const PercentageMathABI = "[]"

// PercentageMathBin is the compiled bytecode used for deploying new contracts.
var PercentageMathBin = "0x60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122053c8af04b501baa6be7b0288583a320b11c916c8dfe6de9d87dff6a06bf81c9664736f6c634300060c0033"

// DeployPercentageMath deploys a new Ethereum contract, binding an instance of PercentageMath to it.
func DeployPercentageMath(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *PercentageMath, error) {
	parsed, err := abi.JSON(strings.NewReader(PercentageMathABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(PercentageMathBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &PercentageMath{PercentageMathCaller: PercentageMathCaller{contract: contract}, PercentageMathTransactor: PercentageMathTransactor{contract: contract}, PercentageMathFilterer: PercentageMathFilterer{contract: contract}}, nil
}

// PercentageMath is an auto generated Go binding around an Ethereum contract.
type PercentageMath struct {
	PercentageMathCaller     // Read-only binding to the contract
	PercentageMathTransactor // Write-only binding to the contract
	PercentageMathFilterer   // Log filterer for contract events
}

// PercentageMathCaller is an auto generated read-only Go binding around an Ethereum contract.
type PercentageMathCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PercentageMathTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PercentageMathTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PercentageMathFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PercentageMathFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PercentageMathSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PercentageMathSession struct {
	Contract     *PercentageMath   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PercentageMathCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PercentageMathCallerSession struct {
	Contract *PercentageMathCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// PercentageMathTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PercentageMathTransactorSession struct {
	Contract     *PercentageMathTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// PercentageMathRaw is an auto generated low-level Go binding around an Ethereum contract.
type PercentageMathRaw struct {
	Contract *PercentageMath // Generic contract binding to access the raw methods on
}

// PercentageMathCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PercentageMathCallerRaw struct {
	Contract *PercentageMathCaller // Generic read-only contract binding to access the raw methods on
}

// PercentageMathTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PercentageMathTransactorRaw struct {
	Contract *PercentageMathTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPercentageMath creates a new instance of PercentageMath, bound to a specific deployed contract.
func NewPercentageMath(address common.Address, backend bind.ContractBackend) (*PercentageMath, error) {
	contract, err := bindPercentageMath(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PercentageMath{PercentageMathCaller: PercentageMathCaller{contract: contract}, PercentageMathTransactor: PercentageMathTransactor{contract: contract}, PercentageMathFilterer: PercentageMathFilterer{contract: contract}}, nil
}

// NewPercentageMathCaller creates a new read-only instance of PercentageMath, bound to a specific deployed contract.
func NewPercentageMathCaller(address common.Address, caller bind.ContractCaller) (*PercentageMathCaller, error) {
	contract, err := bindPercentageMath(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PercentageMathCaller{contract: contract}, nil
}

// NewPercentageMathTransactor creates a new write-only instance of PercentageMath, bound to a specific deployed contract.
func NewPercentageMathTransactor(address common.Address, transactor bind.ContractTransactor) (*PercentageMathTransactor, error) {
	contract, err := bindPercentageMath(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PercentageMathTransactor{contract: contract}, nil
}

// NewPercentageMathFilterer creates a new log filterer instance of PercentageMath, bound to a specific deployed contract.
func NewPercentageMathFilterer(address common.Address, filterer bind.ContractFilterer) (*PercentageMathFilterer, error) {
	contract, err := bindPercentageMath(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PercentageMathFilterer{contract: contract}, nil
}

// bindPercentageMath binds a generic wrapper to an already deployed contract.
func bindPercentageMath(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PercentageMathABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PercentageMath *PercentageMathRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PercentageMath.Contract.PercentageMathCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PercentageMath *PercentageMathRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PercentageMath.Contract.PercentageMathTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PercentageMath *PercentageMathRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PercentageMath.Contract.PercentageMathTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PercentageMath *PercentageMathCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PercentageMath.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PercentageMath *PercentageMathTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PercentageMath.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PercentageMath *PercentageMathTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PercentageMath.Contract.contract.Transact(opts, method, params...)
}

// PriceOracleABI is the input ABI used to generate the binding from.
const PriceOracleABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AssetPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"EthPriceUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getAssetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthUsdPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setAssetPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setEthUsdPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// PriceOracleBin is the compiled bytecode used for deploying new contracts.
var PriceOracleBin = "0x608060405234801561001057600080fd5b506101d0806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806351323f7214610051578063a0a8045e1461007f578063b3596f0714610099578063b951883a146100bf575b600080fd5b61007d6004803603604081101561006757600080fd5b506001600160a01b0381351690602001356100dc565b005b610087610137565b60408051918252519081900360200190f35b610087600480360360208110156100af57600080fd5b50356001600160a01b031661013d565b61007d600480360360208110156100d557600080fd5b5035610158565b6001600160a01b03821660008181526020818152604091829020849055815192835282018390524282820152517fce6e0b57367bae95ca7198e1172f653ea64a645c16ab586b4cefa9237bfc2d929181900360600190a15050565b60015490565b6001600160a01b031660009081526020819052604090205490565b60018190556040805182815242602082015281517fb4f35977939fa8b5ffe552d517a8ff5223046b1fdd3ee0068ae38d1e2b8d0016929181900390910190a15056fea264697066735822122008b2a3febc0cbffea7290aab15ec5b58b5239db77df7be201e7d915b9b2d76ec64736f6c634300060c0033"

// DeployPriceOracle deploys a new Ethereum contract, binding an instance of PriceOracle to it.
func DeployPriceOracle(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *PriceOracle, error) {
	parsed, err := abi.JSON(strings.NewReader(PriceOracleABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(PriceOracleBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &PriceOracle{PriceOracleCaller: PriceOracleCaller{contract: contract}, PriceOracleTransactor: PriceOracleTransactor{contract: contract}, PriceOracleFilterer: PriceOracleFilterer{contract: contract}}, nil
}

// PriceOracle is an auto generated Go binding around an Ethereum contract.
type PriceOracle struct {
	PriceOracleCaller     // Read-only binding to the contract
	PriceOracleTransactor // Write-only binding to the contract
	PriceOracleFilterer   // Log filterer for contract events
}

// PriceOracleCaller is an auto generated read-only Go binding around an Ethereum contract.
type PriceOracleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PriceOracleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PriceOracleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PriceOracleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PriceOracleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PriceOracleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PriceOracleSession struct {
	Contract     *PriceOracle      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PriceOracleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PriceOracleCallerSession struct {
	Contract *PriceOracleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// PriceOracleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PriceOracleTransactorSession struct {
	Contract     *PriceOracleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// PriceOracleRaw is an auto generated low-level Go binding around an Ethereum contract.
type PriceOracleRaw struct {
	Contract *PriceOracle // Generic contract binding to access the raw methods on
}

// PriceOracleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PriceOracleCallerRaw struct {
	Contract *PriceOracleCaller // Generic read-only contract binding to access the raw methods on
}

// PriceOracleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PriceOracleTransactorRaw struct {
	Contract *PriceOracleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPriceOracle creates a new instance of PriceOracle, bound to a specific deployed contract.
func NewPriceOracle(address common.Address, backend bind.ContractBackend) (*PriceOracle, error) {
	contract, err := bindPriceOracle(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PriceOracle{PriceOracleCaller: PriceOracleCaller{contract: contract}, PriceOracleTransactor: PriceOracleTransactor{contract: contract}, PriceOracleFilterer: PriceOracleFilterer{contract: contract}}, nil
}

// NewPriceOracleCaller creates a new read-only instance of PriceOracle, bound to a specific deployed contract.
func NewPriceOracleCaller(address common.Address, caller bind.ContractCaller) (*PriceOracleCaller, error) {
	contract, err := bindPriceOracle(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PriceOracleCaller{contract: contract}, nil
}

// NewPriceOracleTransactor creates a new write-only instance of PriceOracle, bound to a specific deployed contract.
func NewPriceOracleTransactor(address common.Address, transactor bind.ContractTransactor) (*PriceOracleTransactor, error) {
	contract, err := bindPriceOracle(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PriceOracleTransactor{contract: contract}, nil
}

// NewPriceOracleFilterer creates a new log filterer instance of PriceOracle, bound to a specific deployed contract.
func NewPriceOracleFilterer(address common.Address, filterer bind.ContractFilterer) (*PriceOracleFilterer, error) {
	contract, err := bindPriceOracle(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PriceOracleFilterer{contract: contract}, nil
}

// bindPriceOracle binds a generic wrapper to an already deployed contract.
func bindPriceOracle(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PriceOracleABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PriceOracle *PriceOracleRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PriceOracle.Contract.PriceOracleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PriceOracle *PriceOracleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PriceOracle.Contract.PriceOracleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PriceOracle *PriceOracleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PriceOracle.Contract.PriceOracleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PriceOracle *PriceOracleCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PriceOracle.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PriceOracle *PriceOracleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PriceOracle.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PriceOracle *PriceOracleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PriceOracle.Contract.contract.Transact(opts, method, params...)
}

// GetAssetPrice is a free data retrieval call binding the contract method 0xb3596f07.
//
// Solidity: function getAssetPrice(address _asset) view returns(uint256)
func (_PriceOracle *PriceOracleCaller) GetAssetPrice(opts *bind.CallOpts, _asset common.Address) (*big.Int, error) {
	var out []interface{}
	err := _PriceOracle.contract.Call(opts, &out, "getAssetPrice", _asset)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAssetPrice is a free data retrieval call binding the contract method 0xb3596f07.
//
// Solidity: function getAssetPrice(address _asset) view returns(uint256)
func (_PriceOracle *PriceOracleSession) GetAssetPrice(_asset common.Address) (*big.Int, error) {
	return _PriceOracle.Contract.GetAssetPrice(&_PriceOracle.CallOpts, _asset)
}

// GetAssetPrice is a free data retrieval call binding the contract method 0xb3596f07.
//
// Solidity: function getAssetPrice(address _asset) view returns(uint256)
func (_PriceOracle *PriceOracleCallerSession) GetAssetPrice(_asset common.Address) (*big.Int, error) {
	return _PriceOracle.Contract.GetAssetPrice(&_PriceOracle.CallOpts, _asset)
}

// GetEthUsdPrice is a free data retrieval call binding the contract method 0xa0a8045e.
//
// Solidity: function getEthUsdPrice() view returns(uint256)
func (_PriceOracle *PriceOracleCaller) GetEthUsdPrice(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _PriceOracle.contract.Call(opts, &out, "getEthUsdPrice")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetEthUsdPrice is a free data retrieval call binding the contract method 0xa0a8045e.
//
// Solidity: function getEthUsdPrice() view returns(uint256)
func (_PriceOracle *PriceOracleSession) GetEthUsdPrice() (*big.Int, error) {
	return _PriceOracle.Contract.GetEthUsdPrice(&_PriceOracle.CallOpts)
}

// GetEthUsdPrice is a free data retrieval call binding the contract method 0xa0a8045e.
//
// Solidity: function getEthUsdPrice() view returns(uint256)
func (_PriceOracle *PriceOracleCallerSession) GetEthUsdPrice() (*big.Int, error) {
	return _PriceOracle.Contract.GetEthUsdPrice(&_PriceOracle.CallOpts)
}

// SetAssetPrice is a paid mutator transaction binding the contract method 0x51323f72.
//
// Solidity: function setAssetPrice(address _asset, uint256 _price) returns()
func (_PriceOracle *PriceOracleTransactor) SetAssetPrice(opts *bind.TransactOpts, _asset common.Address, _price *big.Int) (*types.Transaction, error) {
	return _PriceOracle.contract.Transact(opts, "setAssetPrice", _asset, _price)
}

// SetAssetPrice is a paid mutator transaction binding the contract method 0x51323f72.
//
// Solidity: function setAssetPrice(address _asset, uint256 _price) returns()
func (_PriceOracle *PriceOracleSession) SetAssetPrice(_asset common.Address, _price *big.Int) (*types.Transaction, error) {
	return _PriceOracle.Contract.SetAssetPrice(&_PriceOracle.TransactOpts, _asset, _price)
}

// SetAssetPrice is a paid mutator transaction binding the contract method 0x51323f72.
//
// Solidity: function setAssetPrice(address _asset, uint256 _price) returns()
func (_PriceOracle *PriceOracleTransactorSession) SetAssetPrice(_asset common.Address, _price *big.Int) (*types.Transaction, error) {
	return _PriceOracle.Contract.SetAssetPrice(&_PriceOracle.TransactOpts, _asset, _price)
}

// SetEthUsdPrice is a paid mutator transaction binding the contract method 0xb951883a.
//
// Solidity: function setEthUsdPrice(uint256 _price) returns()
func (_PriceOracle *PriceOracleTransactor) SetEthUsdPrice(opts *bind.TransactOpts, _price *big.Int) (*types.Transaction, error) {
	return _PriceOracle.contract.Transact(opts, "setEthUsdPrice", _price)
}

// SetEthUsdPrice is a paid mutator transaction binding the contract method 0xb951883a.
//
// Solidity: function setEthUsdPrice(uint256 _price) returns()
func (_PriceOracle *PriceOracleSession) SetEthUsdPrice(_price *big.Int) (*types.Transaction, error) {
	return _PriceOracle.Contract.SetEthUsdPrice(&_PriceOracle.TransactOpts, _price)
}

// SetEthUsdPrice is a paid mutator transaction binding the contract method 0xb951883a.
//
// Solidity: function setEthUsdPrice(uint256 _price) returns()
func (_PriceOracle *PriceOracleTransactorSession) SetEthUsdPrice(_price *big.Int) (*types.Transaction, error) {
	return _PriceOracle.Contract.SetEthUsdPrice(&_PriceOracle.TransactOpts, _price)
}

// PriceOracleAssetPriceUpdatedIterator is returned from FilterAssetPriceUpdated and is used to iterate over the raw logs and unpacked data for AssetPriceUpdated events raised by the PriceOracle contract.
type PriceOracleAssetPriceUpdatedIterator struct {
	Event *PriceOracleAssetPriceUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PriceOracleAssetPriceUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PriceOracleAssetPriceUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PriceOracleAssetPriceUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PriceOracleAssetPriceUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PriceOracleAssetPriceUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PriceOracleAssetPriceUpdated represents a AssetPriceUpdated event raised by the PriceOracle contract.
type PriceOracleAssetPriceUpdated struct {
	Asset     common.Address
	Price     *big.Int
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAssetPriceUpdated is a free log retrieval operation binding the contract event 0xce6e0b57367bae95ca7198e1172f653ea64a645c16ab586b4cefa9237bfc2d92.
//
// Solidity: event AssetPriceUpdated(address _asset, uint256 _price, uint256 timestamp)
func (_PriceOracle *PriceOracleFilterer) FilterAssetPriceUpdated(opts *bind.FilterOpts) (*PriceOracleAssetPriceUpdatedIterator, error) {

	logs, sub, err := _PriceOracle.contract.FilterLogs(opts, "AssetPriceUpdated")
	if err != nil {
		return nil, err
	}
	return &PriceOracleAssetPriceUpdatedIterator{contract: _PriceOracle.contract, event: "AssetPriceUpdated", logs: logs, sub: sub}, nil
}

// WatchAssetPriceUpdated is a free log subscription operation binding the contract event 0xce6e0b57367bae95ca7198e1172f653ea64a645c16ab586b4cefa9237bfc2d92.
//
// Solidity: event AssetPriceUpdated(address _asset, uint256 _price, uint256 timestamp)
func (_PriceOracle *PriceOracleFilterer) WatchAssetPriceUpdated(opts *bind.WatchOpts, sink chan<- *PriceOracleAssetPriceUpdated) (event.Subscription, error) {

	logs, sub, err := _PriceOracle.contract.WatchLogs(opts, "AssetPriceUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PriceOracleAssetPriceUpdated)
				if err := _PriceOracle.contract.UnpackLog(event, "AssetPriceUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssetPriceUpdated is a log parse operation binding the contract event 0xce6e0b57367bae95ca7198e1172f653ea64a645c16ab586b4cefa9237bfc2d92.
//
// Solidity: event AssetPriceUpdated(address _asset, uint256 _price, uint256 timestamp)
func (_PriceOracle *PriceOracleFilterer) ParseAssetPriceUpdated(log types.Log) (*PriceOracleAssetPriceUpdated, error) {
	event := new(PriceOracleAssetPriceUpdated)
	if err := _PriceOracle.contract.UnpackLog(event, "AssetPriceUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PriceOracleEthPriceUpdatedIterator is returned from FilterEthPriceUpdated and is used to iterate over the raw logs and unpacked data for EthPriceUpdated events raised by the PriceOracle contract.
type PriceOracleEthPriceUpdatedIterator struct {
	Event *PriceOracleEthPriceUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PriceOracleEthPriceUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PriceOracleEthPriceUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PriceOracleEthPriceUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PriceOracleEthPriceUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PriceOracleEthPriceUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PriceOracleEthPriceUpdated represents a EthPriceUpdated event raised by the PriceOracle contract.
type PriceOracleEthPriceUpdated struct {
	Price     *big.Int
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterEthPriceUpdated is a free log retrieval operation binding the contract event 0xb4f35977939fa8b5ffe552d517a8ff5223046b1fdd3ee0068ae38d1e2b8d0016.
//
// Solidity: event EthPriceUpdated(uint256 _price, uint256 timestamp)
func (_PriceOracle *PriceOracleFilterer) FilterEthPriceUpdated(opts *bind.FilterOpts) (*PriceOracleEthPriceUpdatedIterator, error) {

	logs, sub, err := _PriceOracle.contract.FilterLogs(opts, "EthPriceUpdated")
	if err != nil {
		return nil, err
	}
	return &PriceOracleEthPriceUpdatedIterator{contract: _PriceOracle.contract, event: "EthPriceUpdated", logs: logs, sub: sub}, nil
}

// WatchEthPriceUpdated is a free log subscription operation binding the contract event 0xb4f35977939fa8b5ffe552d517a8ff5223046b1fdd3ee0068ae38d1e2b8d0016.
//
// Solidity: event EthPriceUpdated(uint256 _price, uint256 timestamp)
func (_PriceOracle *PriceOracleFilterer) WatchEthPriceUpdated(opts *bind.WatchOpts, sink chan<- *PriceOracleEthPriceUpdated) (event.Subscription, error) {

	logs, sub, err := _PriceOracle.contract.WatchLogs(opts, "EthPriceUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PriceOracleEthPriceUpdated)
				if err := _PriceOracle.contract.UnpackLog(event, "EthPriceUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEthPriceUpdated is a log parse operation binding the contract event 0xb4f35977939fa8b5ffe552d517a8ff5223046b1fdd3ee0068ae38d1e2b8d0016.
//
// Solidity: event EthPriceUpdated(uint256 _price, uint256 timestamp)
func (_PriceOracle *PriceOracleFilterer) ParseEthPriceUpdated(log types.Log) (*PriceOracleEthPriceUpdated, error) {
	event := new(PriceOracleEthPriceUpdated)
	if err := _PriceOracle.contract.UnpackLog(event, "EthPriceUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProxyABI is the input ABI used to generate the binding from.
const ProxyABI = "[{\"stateMutability\":\"payable\",\"type\":\"fallback\"}]"

// Proxy is an auto generated Go binding around an Ethereum contract.
type Proxy struct {
	ProxyCaller     // Read-only binding to the contract
	ProxyTransactor // Write-only binding to the contract
	ProxyFilterer   // Log filterer for contract events
}

// ProxyCaller is an auto generated read-only Go binding around an Ethereum contract.
type ProxyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProxyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ProxyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProxyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ProxyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProxySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ProxySession struct {
	Contract     *Proxy            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ProxyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ProxyCallerSession struct {
	Contract *ProxyCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ProxyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ProxyTransactorSession struct {
	Contract     *ProxyTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ProxyRaw is an auto generated low-level Go binding around an Ethereum contract.
type ProxyRaw struct {
	Contract *Proxy // Generic contract binding to access the raw methods on
}

// ProxyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ProxyCallerRaw struct {
	Contract *ProxyCaller // Generic read-only contract binding to access the raw methods on
}

// ProxyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ProxyTransactorRaw struct {
	Contract *ProxyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewProxy creates a new instance of Proxy, bound to a specific deployed contract.
func NewProxy(address common.Address, backend bind.ContractBackend) (*Proxy, error) {
	contract, err := bindProxy(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Proxy{ProxyCaller: ProxyCaller{contract: contract}, ProxyTransactor: ProxyTransactor{contract: contract}, ProxyFilterer: ProxyFilterer{contract: contract}}, nil
}

// NewProxyCaller creates a new read-only instance of Proxy, bound to a specific deployed contract.
func NewProxyCaller(address common.Address, caller bind.ContractCaller) (*ProxyCaller, error) {
	contract, err := bindProxy(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ProxyCaller{contract: contract}, nil
}

// NewProxyTransactor creates a new write-only instance of Proxy, bound to a specific deployed contract.
func NewProxyTransactor(address common.Address, transactor bind.ContractTransactor) (*ProxyTransactor, error) {
	contract, err := bindProxy(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ProxyTransactor{contract: contract}, nil
}

// NewProxyFilterer creates a new log filterer instance of Proxy, bound to a specific deployed contract.
func NewProxyFilterer(address common.Address, filterer bind.ContractFilterer) (*ProxyFilterer, error) {
	contract, err := bindProxy(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ProxyFilterer{contract: contract}, nil
}

// bindProxy binds a generic wrapper to an already deployed contract.
func bindProxy(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ProxyABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Proxy *ProxyRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Proxy.Contract.ProxyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Proxy *ProxyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Proxy.Contract.ProxyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Proxy *ProxyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Proxy.Contract.ProxyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Proxy *ProxyCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Proxy.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Proxy *ProxyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Proxy.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Proxy *ProxyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Proxy.Contract.contract.Transact(opts, method, params...)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Proxy *ProxyTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _Proxy.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Proxy *ProxySession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _Proxy.Contract.Fallback(&_Proxy.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Proxy *ProxyTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _Proxy.Contract.Fallback(&_Proxy.TransactOpts, calldata)
}

// ReserveConfigurationABI is the input ABI used to generate the binding from.
const ReserveConfigurationABI = "[]"

// ReserveConfigurationBin is the compiled bytecode used for deploying new contracts.
var ReserveConfigurationBin = "0x60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122099ff3ea38c08ef95c9e156f7ffa6f497519f07a3b4b63a499394e7b9c33faf2464736f6c634300060c0033"

// DeployReserveConfiguration deploys a new Ethereum contract, binding an instance of ReserveConfiguration to it.
func DeployReserveConfiguration(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ReserveConfiguration, error) {
	parsed, err := abi.JSON(strings.NewReader(ReserveConfigurationABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ReserveConfigurationBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ReserveConfiguration{ReserveConfigurationCaller: ReserveConfigurationCaller{contract: contract}, ReserveConfigurationTransactor: ReserveConfigurationTransactor{contract: contract}, ReserveConfigurationFilterer: ReserveConfigurationFilterer{contract: contract}}, nil
}

// ReserveConfiguration is an auto generated Go binding around an Ethereum contract.
type ReserveConfiguration struct {
	ReserveConfigurationCaller     // Read-only binding to the contract
	ReserveConfigurationTransactor // Write-only binding to the contract
	ReserveConfigurationFilterer   // Log filterer for contract events
}

// ReserveConfigurationCaller is an auto generated read-only Go binding around an Ethereum contract.
type ReserveConfigurationCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ReserveConfigurationTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ReserveConfigurationTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ReserveConfigurationFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ReserveConfigurationFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ReserveConfigurationSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ReserveConfigurationSession struct {
	Contract     *ReserveConfiguration // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// ReserveConfigurationCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ReserveConfigurationCallerSession struct {
	Contract *ReserveConfigurationCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// ReserveConfigurationTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ReserveConfigurationTransactorSession struct {
	Contract     *ReserveConfigurationTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// ReserveConfigurationRaw is an auto generated low-level Go binding around an Ethereum contract.
type ReserveConfigurationRaw struct {
	Contract *ReserveConfiguration // Generic contract binding to access the raw methods on
}

// ReserveConfigurationCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ReserveConfigurationCallerRaw struct {
	Contract *ReserveConfigurationCaller // Generic read-only contract binding to access the raw methods on
}

// ReserveConfigurationTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ReserveConfigurationTransactorRaw struct {
	Contract *ReserveConfigurationTransactor // Generic write-only contract binding to access the raw methods on
}

// NewReserveConfiguration creates a new instance of ReserveConfiguration, bound to a specific deployed contract.
func NewReserveConfiguration(address common.Address, backend bind.ContractBackend) (*ReserveConfiguration, error) {
	contract, err := bindReserveConfiguration(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ReserveConfiguration{ReserveConfigurationCaller: ReserveConfigurationCaller{contract: contract}, ReserveConfigurationTransactor: ReserveConfigurationTransactor{contract: contract}, ReserveConfigurationFilterer: ReserveConfigurationFilterer{contract: contract}}, nil
}

// NewReserveConfigurationCaller creates a new read-only instance of ReserveConfiguration, bound to a specific deployed contract.
func NewReserveConfigurationCaller(address common.Address, caller bind.ContractCaller) (*ReserveConfigurationCaller, error) {
	contract, err := bindReserveConfiguration(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ReserveConfigurationCaller{contract: contract}, nil
}

// NewReserveConfigurationTransactor creates a new write-only instance of ReserveConfiguration, bound to a specific deployed contract.
func NewReserveConfigurationTransactor(address common.Address, transactor bind.ContractTransactor) (*ReserveConfigurationTransactor, error) {
	contract, err := bindReserveConfiguration(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ReserveConfigurationTransactor{contract: contract}, nil
}

// NewReserveConfigurationFilterer creates a new log filterer instance of ReserveConfiguration, bound to a specific deployed contract.
func NewReserveConfigurationFilterer(address common.Address, filterer bind.ContractFilterer) (*ReserveConfigurationFilterer, error) {
	contract, err := bindReserveConfiguration(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ReserveConfigurationFilterer{contract: contract}, nil
}

// bindReserveConfiguration binds a generic wrapper to an already deployed contract.
func bindReserveConfiguration(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ReserveConfigurationABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ReserveConfiguration *ReserveConfigurationRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ReserveConfiguration.Contract.ReserveConfigurationCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ReserveConfiguration *ReserveConfigurationRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ReserveConfiguration.Contract.ReserveConfigurationTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ReserveConfiguration *ReserveConfigurationRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ReserveConfiguration.Contract.ReserveConfigurationTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ReserveConfiguration *ReserveConfigurationCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ReserveConfiguration.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ReserveConfiguration *ReserveConfigurationTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ReserveConfiguration.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ReserveConfiguration *ReserveConfigurationTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ReserveConfiguration.Contract.contract.Transact(opts, method, params...)
}

// ReserveLogicABI is the input ABI used to generate the binding from.
const ReserveLogicABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableBorrowRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"variableBorrowRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"variableBorrowIndex\",\"type\":\"uint256\"}],\"name\":\"ReserveDataUpdated\",\"type\":\"event\"}]"

// ReserveLogicBin is the compiled bytecode used for deploying new contracts.
var ReserveLogicBin = "0x61023b610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c80632b33897c1461003a575b600080fd5b81801561004657600080fd5b5061008b600480360360a081101561005d57600080fd5b508035906001600160a01b03602082013581169160408101358216916060820135811691608001351661008d565b005b6004850154604080518082019091526002815261199960f11b6020820152906001600160a01b03161561013e5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156101035781810151838201526020016100eb565b50505050905090810190601f1680156101305780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506101476101f5565b6001860180546fffffffffffffffffffffffffffffffff19166001600160801b039290921691909117905561017a6101f5565b6001860180546001600160801b03928316600160801b0292169190911790556004850180546001600160a01b039586166001600160a01b031991821617909155600586018054948616948216949094179093556006850180549285169284169290921790915560079093018054939092169216919091179055565b6b033b2e3c9fd0803ce80000009056fea2646970667358221220c01046215f2dace4f28ebccd6f2fc9dbed64f4381ca965801a255180c5eac35f64736f6c634300060c0033"

// DeployReserveLogic deploys a new Ethereum contract, binding an instance of ReserveLogic to it.
func DeployReserveLogic(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ReserveLogic, error) {
	parsed, err := abi.JSON(strings.NewReader(ReserveLogicABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ReserveLogicBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ReserveLogic{ReserveLogicCaller: ReserveLogicCaller{contract: contract}, ReserveLogicTransactor: ReserveLogicTransactor{contract: contract}, ReserveLogicFilterer: ReserveLogicFilterer{contract: contract}}, nil
}

// ReserveLogic is an auto generated Go binding around an Ethereum contract.
type ReserveLogic struct {
	ReserveLogicCaller     // Read-only binding to the contract
	ReserveLogicTransactor // Write-only binding to the contract
	ReserveLogicFilterer   // Log filterer for contract events
}

// ReserveLogicCaller is an auto generated read-only Go binding around an Ethereum contract.
type ReserveLogicCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ReserveLogicTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ReserveLogicTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ReserveLogicFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ReserveLogicFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ReserveLogicSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ReserveLogicSession struct {
	Contract     *ReserveLogic     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ReserveLogicCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ReserveLogicCallerSession struct {
	Contract *ReserveLogicCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// ReserveLogicTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ReserveLogicTransactorSession struct {
	Contract     *ReserveLogicTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// ReserveLogicRaw is an auto generated low-level Go binding around an Ethereum contract.
type ReserveLogicRaw struct {
	Contract *ReserveLogic // Generic contract binding to access the raw methods on
}

// ReserveLogicCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ReserveLogicCallerRaw struct {
	Contract *ReserveLogicCaller // Generic read-only contract binding to access the raw methods on
}

// ReserveLogicTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ReserveLogicTransactorRaw struct {
	Contract *ReserveLogicTransactor // Generic write-only contract binding to access the raw methods on
}

// NewReserveLogic creates a new instance of ReserveLogic, bound to a specific deployed contract.
func NewReserveLogic(address common.Address, backend bind.ContractBackend) (*ReserveLogic, error) {
	contract, err := bindReserveLogic(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ReserveLogic{ReserveLogicCaller: ReserveLogicCaller{contract: contract}, ReserveLogicTransactor: ReserveLogicTransactor{contract: contract}, ReserveLogicFilterer: ReserveLogicFilterer{contract: contract}}, nil
}

// NewReserveLogicCaller creates a new read-only instance of ReserveLogic, bound to a specific deployed contract.
func NewReserveLogicCaller(address common.Address, caller bind.ContractCaller) (*ReserveLogicCaller, error) {
	contract, err := bindReserveLogic(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ReserveLogicCaller{contract: contract}, nil
}

// NewReserveLogicTransactor creates a new write-only instance of ReserveLogic, bound to a specific deployed contract.
func NewReserveLogicTransactor(address common.Address, transactor bind.ContractTransactor) (*ReserveLogicTransactor, error) {
	contract, err := bindReserveLogic(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ReserveLogicTransactor{contract: contract}, nil
}

// NewReserveLogicFilterer creates a new log filterer instance of ReserveLogic, bound to a specific deployed contract.
func NewReserveLogicFilterer(address common.Address, filterer bind.ContractFilterer) (*ReserveLogicFilterer, error) {
	contract, err := bindReserveLogic(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ReserveLogicFilterer{contract: contract}, nil
}

// bindReserveLogic binds a generic wrapper to an already deployed contract.
func bindReserveLogic(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ReserveLogicABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ReserveLogic *ReserveLogicRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ReserveLogic.Contract.ReserveLogicCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ReserveLogic *ReserveLogicRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ReserveLogic.Contract.ReserveLogicTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ReserveLogic *ReserveLogicRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ReserveLogic.Contract.ReserveLogicTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ReserveLogic *ReserveLogicCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ReserveLogic.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ReserveLogic *ReserveLogicTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ReserveLogic.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ReserveLogic *ReserveLogicTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ReserveLogic.Contract.contract.Transact(opts, method, params...)
}

// ReserveLogicReserveDataUpdatedIterator is returned from FilterReserveDataUpdated and is used to iterate over the raw logs and unpacked data for ReserveDataUpdated events raised by the ReserveLogic contract.
type ReserveLogicReserveDataUpdatedIterator struct {
	Event *ReserveLogicReserveDataUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReserveLogicReserveDataUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReserveLogicReserveDataUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReserveLogicReserveDataUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReserveLogicReserveDataUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReserveLogicReserveDataUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReserveLogicReserveDataUpdated represents a ReserveDataUpdated event raised by the ReserveLogic contract.
type ReserveLogicReserveDataUpdated struct {
	Asset               common.Address
	LiquidityRate       *big.Int
	StableBorrowRate    *big.Int
	VariableBorrowRate  *big.Int
	LiquidityIndex      *big.Int
	VariableBorrowIndex *big.Int
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterReserveDataUpdated is a free log retrieval operation binding the contract event 0x804c9b842b2748a22bb64b345453a3de7ca54a6ca45ce00d415894979e22897a.
//
// Solidity: event ReserveDataUpdated(address indexed asset, uint256 liquidityRate, uint256 stableBorrowRate, uint256 variableBorrowRate, uint256 liquidityIndex, uint256 variableBorrowIndex)
func (_ReserveLogic *ReserveLogicFilterer) FilterReserveDataUpdated(opts *bind.FilterOpts, asset []common.Address) (*ReserveLogicReserveDataUpdatedIterator, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}

	logs, sub, err := _ReserveLogic.contract.FilterLogs(opts, "ReserveDataUpdated", assetRule)
	if err != nil {
		return nil, err
	}
	return &ReserveLogicReserveDataUpdatedIterator{contract: _ReserveLogic.contract, event: "ReserveDataUpdated", logs: logs, sub: sub}, nil
}

// WatchReserveDataUpdated is a free log subscription operation binding the contract event 0x804c9b842b2748a22bb64b345453a3de7ca54a6ca45ce00d415894979e22897a.
//
// Solidity: event ReserveDataUpdated(address indexed asset, uint256 liquidityRate, uint256 stableBorrowRate, uint256 variableBorrowRate, uint256 liquidityIndex, uint256 variableBorrowIndex)
func (_ReserveLogic *ReserveLogicFilterer) WatchReserveDataUpdated(opts *bind.WatchOpts, sink chan<- *ReserveLogicReserveDataUpdated, asset []common.Address) (event.Subscription, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}

	logs, sub, err := _ReserveLogic.contract.WatchLogs(opts, "ReserveDataUpdated", assetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReserveLogicReserveDataUpdated)
				if err := _ReserveLogic.contract.UnpackLog(event, "ReserveDataUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReserveDataUpdated is a log parse operation binding the contract event 0x804c9b842b2748a22bb64b345453a3de7ca54a6ca45ce00d415894979e22897a.
//
// Solidity: event ReserveDataUpdated(address indexed asset, uint256 liquidityRate, uint256 stableBorrowRate, uint256 variableBorrowRate, uint256 liquidityIndex, uint256 variableBorrowIndex)
func (_ReserveLogic *ReserveLogicFilterer) ParseReserveDataUpdated(log types.Log) (*ReserveLogicReserveDataUpdated, error) {
	event := new(ReserveLogicReserveDataUpdated)
	if err := _ReserveLogic.contract.UnpackLog(event, "ReserveDataUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SafeERC20ABI is the input ABI used to generate the binding from.
const SafeERC20ABI = "[]"

// SafeERC20Bin is the compiled bytecode used for deploying new contracts.
var SafeERC20Bin = "0x60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206dd97159284f6965acc3f727d0320d08f1dfd7829cb8db55a8aaadc51b97d1e364736f6c634300060c0033"

// DeploySafeERC20 deploys a new Ethereum contract, binding an instance of SafeERC20 to it.
func DeploySafeERC20(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SafeERC20, error) {
	parsed, err := abi.JSON(strings.NewReader(SafeERC20ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(SafeERC20Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SafeERC20{SafeERC20Caller: SafeERC20Caller{contract: contract}, SafeERC20Transactor: SafeERC20Transactor{contract: contract}, SafeERC20Filterer: SafeERC20Filterer{contract: contract}}, nil
}

// SafeERC20 is an auto generated Go binding around an Ethereum contract.
type SafeERC20 struct {
	SafeERC20Caller     // Read-only binding to the contract
	SafeERC20Transactor // Write-only binding to the contract
	SafeERC20Filterer   // Log filterer for contract events
}

// SafeERC20Caller is an auto generated read-only Go binding around an Ethereum contract.
type SafeERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeERC20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type SafeERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeERC20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SafeERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeERC20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SafeERC20Session struct {
	Contract     *SafeERC20        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SafeERC20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SafeERC20CallerSession struct {
	Contract *SafeERC20Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// SafeERC20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SafeERC20TransactorSession struct {
	Contract     *SafeERC20Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// SafeERC20Raw is an auto generated low-level Go binding around an Ethereum contract.
type SafeERC20Raw struct {
	Contract *SafeERC20 // Generic contract binding to access the raw methods on
}

// SafeERC20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SafeERC20CallerRaw struct {
	Contract *SafeERC20Caller // Generic read-only contract binding to access the raw methods on
}

// SafeERC20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SafeERC20TransactorRaw struct {
	Contract *SafeERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewSafeERC20 creates a new instance of SafeERC20, bound to a specific deployed contract.
func NewSafeERC20(address common.Address, backend bind.ContractBackend) (*SafeERC20, error) {
	contract, err := bindSafeERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SafeERC20{SafeERC20Caller: SafeERC20Caller{contract: contract}, SafeERC20Transactor: SafeERC20Transactor{contract: contract}, SafeERC20Filterer: SafeERC20Filterer{contract: contract}}, nil
}

// NewSafeERC20Caller creates a new read-only instance of SafeERC20, bound to a specific deployed contract.
func NewSafeERC20Caller(address common.Address, caller bind.ContractCaller) (*SafeERC20Caller, error) {
	contract, err := bindSafeERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SafeERC20Caller{contract: contract}, nil
}

// NewSafeERC20Transactor creates a new write-only instance of SafeERC20, bound to a specific deployed contract.
func NewSafeERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*SafeERC20Transactor, error) {
	contract, err := bindSafeERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SafeERC20Transactor{contract: contract}, nil
}

// NewSafeERC20Filterer creates a new log filterer instance of SafeERC20, bound to a specific deployed contract.
func NewSafeERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*SafeERC20Filterer, error) {
	contract, err := bindSafeERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SafeERC20Filterer{contract: contract}, nil
}

// bindSafeERC20 binds a generic wrapper to an already deployed contract.
func bindSafeERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SafeERC20ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SafeERC20 *SafeERC20Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SafeERC20.Contract.SafeERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SafeERC20 *SafeERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SafeERC20.Contract.SafeERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SafeERC20 *SafeERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SafeERC20.Contract.SafeERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SafeERC20 *SafeERC20CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SafeERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SafeERC20 *SafeERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SafeERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SafeERC20 *SafeERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SafeERC20.Contract.contract.Transact(opts, method, params...)
}

// SafeMathABI is the input ABI used to generate the binding from.
const SafeMathABI = "[]"

// SafeMathBin is the compiled bytecode used for deploying new contracts.
var SafeMathBin = "0x60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208fafb1f813ad4c9f3f23b01c20186833388a8dd10aa6d69cd1957d7de35717c664736f6c634300060c0033"

// DeploySafeMath deploys a new Ethereum contract, binding an instance of SafeMath to it.
func DeploySafeMath(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SafeMath, error) {
	parsed, err := abi.JSON(strings.NewReader(SafeMathABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(SafeMathBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SafeMath{SafeMathCaller: SafeMathCaller{contract: contract}, SafeMathTransactor: SafeMathTransactor{contract: contract}, SafeMathFilterer: SafeMathFilterer{contract: contract}}, nil
}

// SafeMath is an auto generated Go binding around an Ethereum contract.
type SafeMath struct {
	SafeMathCaller     // Read-only binding to the contract
	SafeMathTransactor // Write-only binding to the contract
	SafeMathFilterer   // Log filterer for contract events
}

// SafeMathCaller is an auto generated read-only Go binding around an Ethereum contract.
type SafeMathCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeMathTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SafeMathTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeMathFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SafeMathFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeMathSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SafeMathSession struct {
	Contract     *SafeMath         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SafeMathCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SafeMathCallerSession struct {
	Contract *SafeMathCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// SafeMathTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SafeMathTransactorSession struct {
	Contract     *SafeMathTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// SafeMathRaw is an auto generated low-level Go binding around an Ethereum contract.
type SafeMathRaw struct {
	Contract *SafeMath // Generic contract binding to access the raw methods on
}

// SafeMathCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SafeMathCallerRaw struct {
	Contract *SafeMathCaller // Generic read-only contract binding to access the raw methods on
}

// SafeMathTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SafeMathTransactorRaw struct {
	Contract *SafeMathTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSafeMath creates a new instance of SafeMath, bound to a specific deployed contract.
func NewSafeMath(address common.Address, backend bind.ContractBackend) (*SafeMath, error) {
	contract, err := bindSafeMath(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SafeMath{SafeMathCaller: SafeMathCaller{contract: contract}, SafeMathTransactor: SafeMathTransactor{contract: contract}, SafeMathFilterer: SafeMathFilterer{contract: contract}}, nil
}

// NewSafeMathCaller creates a new read-only instance of SafeMath, bound to a specific deployed contract.
func NewSafeMathCaller(address common.Address, caller bind.ContractCaller) (*SafeMathCaller, error) {
	contract, err := bindSafeMath(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SafeMathCaller{contract: contract}, nil
}

// NewSafeMathTransactor creates a new write-only instance of SafeMath, bound to a specific deployed contract.
func NewSafeMathTransactor(address common.Address, transactor bind.ContractTransactor) (*SafeMathTransactor, error) {
	contract, err := bindSafeMath(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SafeMathTransactor{contract: contract}, nil
}

// NewSafeMathFilterer creates a new log filterer instance of SafeMath, bound to a specific deployed contract.
func NewSafeMathFilterer(address common.Address, filterer bind.ContractFilterer) (*SafeMathFilterer, error) {
	contract, err := bindSafeMath(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SafeMathFilterer{contract: contract}, nil
}

// bindSafeMath binds a generic wrapper to an already deployed contract.
func bindSafeMath(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SafeMathABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SafeMath *SafeMathRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SafeMath.Contract.SafeMathCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SafeMath *SafeMathRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SafeMath.Contract.SafeMathTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SafeMath *SafeMathRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SafeMath.Contract.SafeMathTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SafeMath *SafeMathCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SafeMath.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SafeMath *SafeMathTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SafeMath.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SafeMath *SafeMathTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SafeMath.Contract.contract.Transact(opts, method, params...)
}

// SelfdestructTransferABI is the input ABI used to generate the binding from.
const SelfdestructTransferABI = "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"destroyAndTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]"

// SelfdestructTransferBin is the compiled bytecode used for deploying new contracts.
var SelfdestructTransferBin = "0x6080604052348015600f57600080fd5b5060888061001e6000396000f3fe608060405260043610601c5760003560e01c8063785e07b3146021575b600080fd5b604460048036036020811015603557600080fd5b50356001600160a01b03166046565b005b806001600160a01b0316fffea2646970667358221220f8b58e2bd3426d1873a535f845b813fd853d2961ae64c1885b8d884c12904af664736f6c634300060c0033"

// DeploySelfdestructTransfer deploys a new Ethereum contract, binding an instance of SelfdestructTransfer to it.
func DeploySelfdestructTransfer(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SelfdestructTransfer, error) {
	parsed, err := abi.JSON(strings.NewReader(SelfdestructTransferABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(SelfdestructTransferBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SelfdestructTransfer{SelfdestructTransferCaller: SelfdestructTransferCaller{contract: contract}, SelfdestructTransferTransactor: SelfdestructTransferTransactor{contract: contract}, SelfdestructTransferFilterer: SelfdestructTransferFilterer{contract: contract}}, nil
}

// SelfdestructTransfer is an auto generated Go binding around an Ethereum contract.
type SelfdestructTransfer struct {
	SelfdestructTransferCaller     // Read-only binding to the contract
	SelfdestructTransferTransactor // Write-only binding to the contract
	SelfdestructTransferFilterer   // Log filterer for contract events
}

// SelfdestructTransferCaller is an auto generated read-only Go binding around an Ethereum contract.
type SelfdestructTransferCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SelfdestructTransferTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SelfdestructTransferTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SelfdestructTransferFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SelfdestructTransferFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SelfdestructTransferSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SelfdestructTransferSession struct {
	Contract     *SelfdestructTransfer // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// SelfdestructTransferCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SelfdestructTransferCallerSession struct {
	Contract *SelfdestructTransferCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// SelfdestructTransferTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SelfdestructTransferTransactorSession struct {
	Contract     *SelfdestructTransferTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// SelfdestructTransferRaw is an auto generated low-level Go binding around an Ethereum contract.
type SelfdestructTransferRaw struct {
	Contract *SelfdestructTransfer // Generic contract binding to access the raw methods on
}

// SelfdestructTransferCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SelfdestructTransferCallerRaw struct {
	Contract *SelfdestructTransferCaller // Generic read-only contract binding to access the raw methods on
}

// SelfdestructTransferTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SelfdestructTransferTransactorRaw struct {
	Contract *SelfdestructTransferTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSelfdestructTransfer creates a new instance of SelfdestructTransfer, bound to a specific deployed contract.
func NewSelfdestructTransfer(address common.Address, backend bind.ContractBackend) (*SelfdestructTransfer, error) {
	contract, err := bindSelfdestructTransfer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SelfdestructTransfer{SelfdestructTransferCaller: SelfdestructTransferCaller{contract: contract}, SelfdestructTransferTransactor: SelfdestructTransferTransactor{contract: contract}, SelfdestructTransferFilterer: SelfdestructTransferFilterer{contract: contract}}, nil
}

// NewSelfdestructTransferCaller creates a new read-only instance of SelfdestructTransfer, bound to a specific deployed contract.
func NewSelfdestructTransferCaller(address common.Address, caller bind.ContractCaller) (*SelfdestructTransferCaller, error) {
	contract, err := bindSelfdestructTransfer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SelfdestructTransferCaller{contract: contract}, nil
}

// NewSelfdestructTransferTransactor creates a new write-only instance of SelfdestructTransfer, bound to a specific deployed contract.
func NewSelfdestructTransferTransactor(address common.Address, transactor bind.ContractTransactor) (*SelfdestructTransferTransactor, error) {
	contract, err := bindSelfdestructTransfer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SelfdestructTransferTransactor{contract: contract}, nil
}

// NewSelfdestructTransferFilterer creates a new log filterer instance of SelfdestructTransfer, bound to a specific deployed contract.
func NewSelfdestructTransferFilterer(address common.Address, filterer bind.ContractFilterer) (*SelfdestructTransferFilterer, error) {
	contract, err := bindSelfdestructTransfer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SelfdestructTransferFilterer{contract: contract}, nil
}

// bindSelfdestructTransfer binds a generic wrapper to an already deployed contract.
func bindSelfdestructTransfer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SelfdestructTransferABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SelfdestructTransfer *SelfdestructTransferRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SelfdestructTransfer.Contract.SelfdestructTransferCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SelfdestructTransfer *SelfdestructTransferRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SelfdestructTransfer.Contract.SelfdestructTransferTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SelfdestructTransfer *SelfdestructTransferRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SelfdestructTransfer.Contract.SelfdestructTransferTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SelfdestructTransfer *SelfdestructTransferCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SelfdestructTransfer.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SelfdestructTransfer *SelfdestructTransferTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SelfdestructTransfer.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SelfdestructTransfer *SelfdestructTransferTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SelfdestructTransfer.Contract.contract.Transact(opts, method, params...)
}

// DestroyAndTransfer is a paid mutator transaction binding the contract method 0x785e07b3.
//
// Solidity: function destroyAndTransfer(address to) payable returns()
func (_SelfdestructTransfer *SelfdestructTransferTransactor) DestroyAndTransfer(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _SelfdestructTransfer.contract.Transact(opts, "destroyAndTransfer", to)
}

// DestroyAndTransfer is a paid mutator transaction binding the contract method 0x785e07b3.
//
// Solidity: function destroyAndTransfer(address to) payable returns()
func (_SelfdestructTransfer *SelfdestructTransferSession) DestroyAndTransfer(to common.Address) (*types.Transaction, error) {
	return _SelfdestructTransfer.Contract.DestroyAndTransfer(&_SelfdestructTransfer.TransactOpts, to)
}

// DestroyAndTransfer is a paid mutator transaction binding the contract method 0x785e07b3.
//
// Solidity: function destroyAndTransfer(address to) payable returns()
func (_SelfdestructTransfer *SelfdestructTransferTransactorSession) DestroyAndTransfer(to common.Address) (*types.Transaction, error) {
	return _SelfdestructTransfer.Contract.DestroyAndTransfer(&_SelfdestructTransfer.TransactOpts, to)
}

// StableAndVariableTokensHelperABI is the input ABI used to generate the binding from.
const StableAndVariableTokensHelperABI = "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressesProvider\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stableToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"variableToken\",\"type\":\"address\"}],\"name\":\"deployedContracts\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"incentivesController\",\"type\":\"address\"}],\"name\":\"initDeployment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rates\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"setOracleBorrowRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"setOracleOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// StableAndVariableTokensHelperBin is the compiled bytecode used for deploying new contracts.
var StableAndVariableTokensHelperBin = ""

// DeployStableAndVariableTokensHelper deploys a new Ethereum contract, binding an instance of StableAndVariableTokensHelper to it.
func DeployStableAndVariableTokensHelper(auth *bind.TransactOpts, backend bind.ContractBackend, _pool common.Address, _addressesProvider common.Address) (common.Address, *types.Transaction, *StableAndVariableTokensHelper, error) {
	parsed, err := abi.JSON(strings.NewReader(StableAndVariableTokensHelperABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(StableAndVariableTokensHelperBin), backend, _pool, _addressesProvider)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StableAndVariableTokensHelper{StableAndVariableTokensHelperCaller: StableAndVariableTokensHelperCaller{contract: contract}, StableAndVariableTokensHelperTransactor: StableAndVariableTokensHelperTransactor{contract: contract}, StableAndVariableTokensHelperFilterer: StableAndVariableTokensHelperFilterer{contract: contract}}, nil
}

// StableAndVariableTokensHelper is an auto generated Go binding around an Ethereum contract.
type StableAndVariableTokensHelper struct {
	StableAndVariableTokensHelperCaller     // Read-only binding to the contract
	StableAndVariableTokensHelperTransactor // Write-only binding to the contract
	StableAndVariableTokensHelperFilterer   // Log filterer for contract events
}

// StableAndVariableTokensHelperCaller is an auto generated read-only Go binding around an Ethereum contract.
type StableAndVariableTokensHelperCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StableAndVariableTokensHelperTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StableAndVariableTokensHelperTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StableAndVariableTokensHelperFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StableAndVariableTokensHelperFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StableAndVariableTokensHelperSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StableAndVariableTokensHelperSession struct {
	Contract     *StableAndVariableTokensHelper // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                  // Call options to use throughout this session
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// StableAndVariableTokensHelperCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StableAndVariableTokensHelperCallerSession struct {
	Contract *StableAndVariableTokensHelperCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                        // Call options to use throughout this session
}

// StableAndVariableTokensHelperTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StableAndVariableTokensHelperTransactorSession struct {
	Contract     *StableAndVariableTokensHelperTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                        // Transaction auth options to use throughout this session
}

// StableAndVariableTokensHelperRaw is an auto generated low-level Go binding around an Ethereum contract.
type StableAndVariableTokensHelperRaw struct {
	Contract *StableAndVariableTokensHelper // Generic contract binding to access the raw methods on
}

// StableAndVariableTokensHelperCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StableAndVariableTokensHelperCallerRaw struct {
	Contract *StableAndVariableTokensHelperCaller // Generic read-only contract binding to access the raw methods on
}

// StableAndVariableTokensHelperTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StableAndVariableTokensHelperTransactorRaw struct {
	Contract *StableAndVariableTokensHelperTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStableAndVariableTokensHelper creates a new instance of StableAndVariableTokensHelper, bound to a specific deployed contract.
func NewStableAndVariableTokensHelper(address common.Address, backend bind.ContractBackend) (*StableAndVariableTokensHelper, error) {
	contract, err := bindStableAndVariableTokensHelper(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StableAndVariableTokensHelper{StableAndVariableTokensHelperCaller: StableAndVariableTokensHelperCaller{contract: contract}, StableAndVariableTokensHelperTransactor: StableAndVariableTokensHelperTransactor{contract: contract}, StableAndVariableTokensHelperFilterer: StableAndVariableTokensHelperFilterer{contract: contract}}, nil
}

// NewStableAndVariableTokensHelperCaller creates a new read-only instance of StableAndVariableTokensHelper, bound to a specific deployed contract.
func NewStableAndVariableTokensHelperCaller(address common.Address, caller bind.ContractCaller) (*StableAndVariableTokensHelperCaller, error) {
	contract, err := bindStableAndVariableTokensHelper(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StableAndVariableTokensHelperCaller{contract: contract}, nil
}

// NewStableAndVariableTokensHelperTransactor creates a new write-only instance of StableAndVariableTokensHelper, bound to a specific deployed contract.
func NewStableAndVariableTokensHelperTransactor(address common.Address, transactor bind.ContractTransactor) (*StableAndVariableTokensHelperTransactor, error) {
	contract, err := bindStableAndVariableTokensHelper(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StableAndVariableTokensHelperTransactor{contract: contract}, nil
}

// NewStableAndVariableTokensHelperFilterer creates a new log filterer instance of StableAndVariableTokensHelper, bound to a specific deployed contract.
func NewStableAndVariableTokensHelperFilterer(address common.Address, filterer bind.ContractFilterer) (*StableAndVariableTokensHelperFilterer, error) {
	contract, err := bindStableAndVariableTokensHelper(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StableAndVariableTokensHelperFilterer{contract: contract}, nil
}

// bindStableAndVariableTokensHelper binds a generic wrapper to an already deployed contract.
func bindStableAndVariableTokensHelper(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StableAndVariableTokensHelperABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StableAndVariableTokensHelper *StableAndVariableTokensHelperRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StableAndVariableTokensHelper.Contract.StableAndVariableTokensHelperCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StableAndVariableTokensHelper *StableAndVariableTokensHelperRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StableAndVariableTokensHelper.Contract.StableAndVariableTokensHelperTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StableAndVariableTokensHelper *StableAndVariableTokensHelperRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StableAndVariableTokensHelper.Contract.StableAndVariableTokensHelperTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StableAndVariableTokensHelper *StableAndVariableTokensHelperCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StableAndVariableTokensHelper.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StableAndVariableTokensHelper *StableAndVariableTokensHelperTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StableAndVariableTokensHelper.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StableAndVariableTokensHelper *StableAndVariableTokensHelperTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StableAndVariableTokensHelper.Contract.contract.Transact(opts, method, params...)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_StableAndVariableTokensHelper *StableAndVariableTokensHelperCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StableAndVariableTokensHelper.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_StableAndVariableTokensHelper *StableAndVariableTokensHelperSession) Owner() (common.Address, error) {
	return _StableAndVariableTokensHelper.Contract.Owner(&_StableAndVariableTokensHelper.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_StableAndVariableTokensHelper *StableAndVariableTokensHelperCallerSession) Owner() (common.Address, error) {
	return _StableAndVariableTokensHelper.Contract.Owner(&_StableAndVariableTokensHelper.CallOpts)
}

// InitDeployment is a paid mutator transaction binding the contract method 0xb889bec4.
//
// Solidity: function initDeployment(address[] tokens, string[] symbols, address incentivesController) returns()
func (_StableAndVariableTokensHelper *StableAndVariableTokensHelperTransactor) InitDeployment(opts *bind.TransactOpts, tokens []common.Address, symbols []string, incentivesController common.Address) (*types.Transaction, error) {
	return _StableAndVariableTokensHelper.contract.Transact(opts, "initDeployment", tokens, symbols, incentivesController)
}

// InitDeployment is a paid mutator transaction binding the contract method 0xb889bec4.
//
// Solidity: function initDeployment(address[] tokens, string[] symbols, address incentivesController) returns()
func (_StableAndVariableTokensHelper *StableAndVariableTokensHelperSession) InitDeployment(tokens []common.Address, symbols []string, incentivesController common.Address) (*types.Transaction, error) {
	return _StableAndVariableTokensHelper.Contract.InitDeployment(&_StableAndVariableTokensHelper.TransactOpts, tokens, symbols, incentivesController)
}

// InitDeployment is a paid mutator transaction binding the contract method 0xb889bec4.
//
// Solidity: function initDeployment(address[] tokens, string[] symbols, address incentivesController) returns()
func (_StableAndVariableTokensHelper *StableAndVariableTokensHelperTransactorSession) InitDeployment(tokens []common.Address, symbols []string, incentivesController common.Address) (*types.Transaction, error) {
	return _StableAndVariableTokensHelper.Contract.InitDeployment(&_StableAndVariableTokensHelper.TransactOpts, tokens, symbols, incentivesController)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_StableAndVariableTokensHelper *StableAndVariableTokensHelperTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StableAndVariableTokensHelper.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_StableAndVariableTokensHelper *StableAndVariableTokensHelperSession) RenounceOwnership() (*types.Transaction, error) {
	return _StableAndVariableTokensHelper.Contract.RenounceOwnership(&_StableAndVariableTokensHelper.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_StableAndVariableTokensHelper *StableAndVariableTokensHelperTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _StableAndVariableTokensHelper.Contract.RenounceOwnership(&_StableAndVariableTokensHelper.TransactOpts)
}

// SetOracleBorrowRates is a paid mutator transaction binding the contract method 0xc2d30321.
//
// Solidity: function setOracleBorrowRates(address[] assets, uint256[] rates, address oracle) returns()
func (_StableAndVariableTokensHelper *StableAndVariableTokensHelperTransactor) SetOracleBorrowRates(opts *bind.TransactOpts, assets []common.Address, rates []*big.Int, oracle common.Address) (*types.Transaction, error) {
	return _StableAndVariableTokensHelper.contract.Transact(opts, "setOracleBorrowRates", assets, rates, oracle)
}

// SetOracleBorrowRates is a paid mutator transaction binding the contract method 0xc2d30321.
//
// Solidity: function setOracleBorrowRates(address[] assets, uint256[] rates, address oracle) returns()
func (_StableAndVariableTokensHelper *StableAndVariableTokensHelperSession) SetOracleBorrowRates(assets []common.Address, rates []*big.Int, oracle common.Address) (*types.Transaction, error) {
	return _StableAndVariableTokensHelper.Contract.SetOracleBorrowRates(&_StableAndVariableTokensHelper.TransactOpts, assets, rates, oracle)
}

// SetOracleBorrowRates is a paid mutator transaction binding the contract method 0xc2d30321.
//
// Solidity: function setOracleBorrowRates(address[] assets, uint256[] rates, address oracle) returns()
func (_StableAndVariableTokensHelper *StableAndVariableTokensHelperTransactorSession) SetOracleBorrowRates(assets []common.Address, rates []*big.Int, oracle common.Address) (*types.Transaction, error) {
	return _StableAndVariableTokensHelper.Contract.SetOracleBorrowRates(&_StableAndVariableTokensHelper.TransactOpts, assets, rates, oracle)
}

// SetOracleOwnership is a paid mutator transaction binding the contract method 0x563b1cb3.
//
// Solidity: function setOracleOwnership(address oracle, address admin) returns()
func (_StableAndVariableTokensHelper *StableAndVariableTokensHelperTransactor) SetOracleOwnership(opts *bind.TransactOpts, oracle common.Address, admin common.Address) (*types.Transaction, error) {
	return _StableAndVariableTokensHelper.contract.Transact(opts, "setOracleOwnership", oracle, admin)
}

// SetOracleOwnership is a paid mutator transaction binding the contract method 0x563b1cb3.
//
// Solidity: function setOracleOwnership(address oracle, address admin) returns()
func (_StableAndVariableTokensHelper *StableAndVariableTokensHelperSession) SetOracleOwnership(oracle common.Address, admin common.Address) (*types.Transaction, error) {
	return _StableAndVariableTokensHelper.Contract.SetOracleOwnership(&_StableAndVariableTokensHelper.TransactOpts, oracle, admin)
}

// SetOracleOwnership is a paid mutator transaction binding the contract method 0x563b1cb3.
//
// Solidity: function setOracleOwnership(address oracle, address admin) returns()
func (_StableAndVariableTokensHelper *StableAndVariableTokensHelperTransactorSession) SetOracleOwnership(oracle common.Address, admin common.Address) (*types.Transaction, error) {
	return _StableAndVariableTokensHelper.Contract.SetOracleOwnership(&_StableAndVariableTokensHelper.TransactOpts, oracle, admin)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_StableAndVariableTokensHelper *StableAndVariableTokensHelperTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _StableAndVariableTokensHelper.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_StableAndVariableTokensHelper *StableAndVariableTokensHelperSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _StableAndVariableTokensHelper.Contract.TransferOwnership(&_StableAndVariableTokensHelper.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_StableAndVariableTokensHelper *StableAndVariableTokensHelperTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _StableAndVariableTokensHelper.Contract.TransferOwnership(&_StableAndVariableTokensHelper.TransactOpts, newOwner)
}

// StableAndVariableTokensHelperOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the StableAndVariableTokensHelper contract.
type StableAndVariableTokensHelperOwnershipTransferredIterator struct {
	Event *StableAndVariableTokensHelperOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StableAndVariableTokensHelperOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StableAndVariableTokensHelperOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StableAndVariableTokensHelperOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StableAndVariableTokensHelperOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StableAndVariableTokensHelperOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StableAndVariableTokensHelperOwnershipTransferred represents a OwnershipTransferred event raised by the StableAndVariableTokensHelper contract.
type StableAndVariableTokensHelperOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_StableAndVariableTokensHelper *StableAndVariableTokensHelperFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*StableAndVariableTokensHelperOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _StableAndVariableTokensHelper.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &StableAndVariableTokensHelperOwnershipTransferredIterator{contract: _StableAndVariableTokensHelper.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_StableAndVariableTokensHelper *StableAndVariableTokensHelperFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *StableAndVariableTokensHelperOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _StableAndVariableTokensHelper.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StableAndVariableTokensHelperOwnershipTransferred)
				if err := _StableAndVariableTokensHelper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_StableAndVariableTokensHelper *StableAndVariableTokensHelperFilterer) ParseOwnershipTransferred(log types.Log) (*StableAndVariableTokensHelperOwnershipTransferred, error) {
	event := new(StableAndVariableTokensHelperOwnershipTransferred)
	if err := _StableAndVariableTokensHelper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StableAndVariableTokensHelperDeployedContractsIterator is returned from FilterDeployedContracts and is used to iterate over the raw logs and unpacked data for DeployedContracts events raised by the StableAndVariableTokensHelper contract.
type StableAndVariableTokensHelperDeployedContractsIterator struct {
	Event *StableAndVariableTokensHelperDeployedContracts // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StableAndVariableTokensHelperDeployedContractsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StableAndVariableTokensHelperDeployedContracts)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StableAndVariableTokensHelperDeployedContracts)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StableAndVariableTokensHelperDeployedContractsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StableAndVariableTokensHelperDeployedContractsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StableAndVariableTokensHelperDeployedContracts represents a DeployedContracts event raised by the StableAndVariableTokensHelper contract.
type StableAndVariableTokensHelperDeployedContracts struct {
	StableToken   common.Address
	VariableToken common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterDeployedContracts is a free log retrieval operation binding the contract event 0x1c1768aab1796270c7034dc781c2951065e6afb7a946269746521002443b8ea4.
//
// Solidity: event deployedContracts(address stableToken, address variableToken)
func (_StableAndVariableTokensHelper *StableAndVariableTokensHelperFilterer) FilterDeployedContracts(opts *bind.FilterOpts) (*StableAndVariableTokensHelperDeployedContractsIterator, error) {

	logs, sub, err := _StableAndVariableTokensHelper.contract.FilterLogs(opts, "deployedContracts")
	if err != nil {
		return nil, err
	}
	return &StableAndVariableTokensHelperDeployedContractsIterator{contract: _StableAndVariableTokensHelper.contract, event: "deployedContracts", logs: logs, sub: sub}, nil
}

// WatchDeployedContracts is a free log subscription operation binding the contract event 0x1c1768aab1796270c7034dc781c2951065e6afb7a946269746521002443b8ea4.
//
// Solidity: event deployedContracts(address stableToken, address variableToken)
func (_StableAndVariableTokensHelper *StableAndVariableTokensHelperFilterer) WatchDeployedContracts(opts *bind.WatchOpts, sink chan<- *StableAndVariableTokensHelperDeployedContracts) (event.Subscription, error) {

	logs, sub, err := _StableAndVariableTokensHelper.contract.WatchLogs(opts, "deployedContracts")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StableAndVariableTokensHelperDeployedContracts)
				if err := _StableAndVariableTokensHelper.contract.UnpackLog(event, "deployedContracts", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeployedContracts is a log parse operation binding the contract event 0x1c1768aab1796270c7034dc781c2951065e6afb7a946269746521002443b8ea4.
//
// Solidity: event deployedContracts(address stableToken, address variableToken)
func (_StableAndVariableTokensHelper *StableAndVariableTokensHelperFilterer) ParseDeployedContracts(log types.Log) (*StableAndVariableTokensHelperDeployedContracts, error) {
	event := new(StableAndVariableTokensHelperDeployedContracts)
	if err := _StableAndVariableTokensHelper.contract.UnpackLog(event, "deployedContracts", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StableDebtTokenABI is the input ABI used to generate the binding from.
const StableDebtTokenABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"incentivesController\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromUser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BorrowAllowanceDelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceIncrease\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"avgStableRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceIncrease\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"avgStableRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEBT_TOKEN_REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL\",\"outputs\":[{\"internalType\":\"contractILendingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNDERLYING_ASSET_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveDelegation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromUser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toUser\",\"type\":\"address\"}],\"name\":\"borrowAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAverageStableRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupplyData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalSupplyAndAvgRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalSupplyLastUpdated\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserLastUpdated\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserStableRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"principalBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// StableDebtTokenBin is the compiled bytecode used for deploying new contracts.
var StableDebtTokenBin = ""

// DeployStableDebtToken deploys a new Ethereum contract, binding an instance of StableDebtToken to it.
func DeployStableDebtToken(auth *bind.TransactOpts, backend bind.ContractBackend, pool common.Address, underlyingAsset common.Address, name string, symbol string, incentivesController common.Address) (common.Address, *types.Transaction, *StableDebtToken, error) {
	parsed, err := abi.JSON(strings.NewReader(StableDebtTokenABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(StableDebtTokenBin), backend, pool, underlyingAsset, name, symbol, incentivesController)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StableDebtToken{StableDebtTokenCaller: StableDebtTokenCaller{contract: contract}, StableDebtTokenTransactor: StableDebtTokenTransactor{contract: contract}, StableDebtTokenFilterer: StableDebtTokenFilterer{contract: contract}}, nil
}

// StableDebtToken is an auto generated Go binding around an Ethereum contract.
type StableDebtToken struct {
	StableDebtTokenCaller     // Read-only binding to the contract
	StableDebtTokenTransactor // Write-only binding to the contract
	StableDebtTokenFilterer   // Log filterer for contract events
}

// StableDebtTokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type StableDebtTokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StableDebtTokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StableDebtTokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StableDebtTokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StableDebtTokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StableDebtTokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StableDebtTokenSession struct {
	Contract     *StableDebtToken  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StableDebtTokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StableDebtTokenCallerSession struct {
	Contract *StableDebtTokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// StableDebtTokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StableDebtTokenTransactorSession struct {
	Contract     *StableDebtTokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// StableDebtTokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type StableDebtTokenRaw struct {
	Contract *StableDebtToken // Generic contract binding to access the raw methods on
}

// StableDebtTokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StableDebtTokenCallerRaw struct {
	Contract *StableDebtTokenCaller // Generic read-only contract binding to access the raw methods on
}

// StableDebtTokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StableDebtTokenTransactorRaw struct {
	Contract *StableDebtTokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStableDebtToken creates a new instance of StableDebtToken, bound to a specific deployed contract.
func NewStableDebtToken(address common.Address, backend bind.ContractBackend) (*StableDebtToken, error) {
	contract, err := bindStableDebtToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StableDebtToken{StableDebtTokenCaller: StableDebtTokenCaller{contract: contract}, StableDebtTokenTransactor: StableDebtTokenTransactor{contract: contract}, StableDebtTokenFilterer: StableDebtTokenFilterer{contract: contract}}, nil
}

// NewStableDebtTokenCaller creates a new read-only instance of StableDebtToken, bound to a specific deployed contract.
func NewStableDebtTokenCaller(address common.Address, caller bind.ContractCaller) (*StableDebtTokenCaller, error) {
	contract, err := bindStableDebtToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StableDebtTokenCaller{contract: contract}, nil
}

// NewStableDebtTokenTransactor creates a new write-only instance of StableDebtToken, bound to a specific deployed contract.
func NewStableDebtTokenTransactor(address common.Address, transactor bind.ContractTransactor) (*StableDebtTokenTransactor, error) {
	contract, err := bindStableDebtToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StableDebtTokenTransactor{contract: contract}, nil
}

// NewStableDebtTokenFilterer creates a new log filterer instance of StableDebtToken, bound to a specific deployed contract.
func NewStableDebtTokenFilterer(address common.Address, filterer bind.ContractFilterer) (*StableDebtTokenFilterer, error) {
	contract, err := bindStableDebtToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StableDebtTokenFilterer{contract: contract}, nil
}

// bindStableDebtToken binds a generic wrapper to an already deployed contract.
func bindStableDebtToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StableDebtTokenABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StableDebtToken *StableDebtTokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StableDebtToken.Contract.StableDebtTokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StableDebtToken *StableDebtTokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StableDebtToken.Contract.StableDebtTokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StableDebtToken *StableDebtTokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StableDebtToken.Contract.StableDebtTokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StableDebtToken *StableDebtTokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StableDebtToken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StableDebtToken *StableDebtTokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StableDebtToken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StableDebtToken *StableDebtTokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StableDebtToken.Contract.contract.Transact(opts, method, params...)
}

// DEBTTOKENREVISION is a free data retrieval call binding the contract method 0xb9a7b622.
//
// Solidity: function DEBT_TOKEN_REVISION() view returns(uint256)
func (_StableDebtToken *StableDebtTokenCaller) DEBTTOKENREVISION(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StableDebtToken.contract.Call(opts, &out, "DEBT_TOKEN_REVISION")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DEBTTOKENREVISION is a free data retrieval call binding the contract method 0xb9a7b622.
//
// Solidity: function DEBT_TOKEN_REVISION() view returns(uint256)
func (_StableDebtToken *StableDebtTokenSession) DEBTTOKENREVISION() (*big.Int, error) {
	return _StableDebtToken.Contract.DEBTTOKENREVISION(&_StableDebtToken.CallOpts)
}

// DEBTTOKENREVISION is a free data retrieval call binding the contract method 0xb9a7b622.
//
// Solidity: function DEBT_TOKEN_REVISION() view returns(uint256)
func (_StableDebtToken *StableDebtTokenCallerSession) DEBTTOKENREVISION() (*big.Int, error) {
	return _StableDebtToken.Contract.DEBTTOKENREVISION(&_StableDebtToken.CallOpts)
}

// POOL is a free data retrieval call binding the contract method 0x7535d246.
//
// Solidity: function POOL() view returns(address)
func (_StableDebtToken *StableDebtTokenCaller) POOL(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StableDebtToken.contract.Call(opts, &out, "POOL")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// POOL is a free data retrieval call binding the contract method 0x7535d246.
//
// Solidity: function POOL() view returns(address)
func (_StableDebtToken *StableDebtTokenSession) POOL() (common.Address, error) {
	return _StableDebtToken.Contract.POOL(&_StableDebtToken.CallOpts)
}

// POOL is a free data retrieval call binding the contract method 0x7535d246.
//
// Solidity: function POOL() view returns(address)
func (_StableDebtToken *StableDebtTokenCallerSession) POOL() (common.Address, error) {
	return _StableDebtToken.Contract.POOL(&_StableDebtToken.CallOpts)
}

// UNDERLYINGASSETADDRESS is a free data retrieval call binding the contract method 0xb16a19de.
//
// Solidity: function UNDERLYING_ASSET_ADDRESS() view returns(address)
func (_StableDebtToken *StableDebtTokenCaller) UNDERLYINGASSETADDRESS(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StableDebtToken.contract.Call(opts, &out, "UNDERLYING_ASSET_ADDRESS")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// UNDERLYINGASSETADDRESS is a free data retrieval call binding the contract method 0xb16a19de.
//
// Solidity: function UNDERLYING_ASSET_ADDRESS() view returns(address)
func (_StableDebtToken *StableDebtTokenSession) UNDERLYINGASSETADDRESS() (common.Address, error) {
	return _StableDebtToken.Contract.UNDERLYINGASSETADDRESS(&_StableDebtToken.CallOpts)
}

// UNDERLYINGASSETADDRESS is a free data retrieval call binding the contract method 0xb16a19de.
//
// Solidity: function UNDERLYING_ASSET_ADDRESS() view returns(address)
func (_StableDebtToken *StableDebtTokenCallerSession) UNDERLYINGASSETADDRESS() (common.Address, error) {
	return _StableDebtToken.Contract.UNDERLYINGASSETADDRESS(&_StableDebtToken.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_StableDebtToken *StableDebtTokenCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StableDebtToken.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_StableDebtToken *StableDebtTokenSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _StableDebtToken.Contract.Allowance(&_StableDebtToken.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_StableDebtToken *StableDebtTokenCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _StableDebtToken.Contract.Allowance(&_StableDebtToken.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_StableDebtToken *StableDebtTokenCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StableDebtToken.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_StableDebtToken *StableDebtTokenSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _StableDebtToken.Contract.BalanceOf(&_StableDebtToken.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_StableDebtToken *StableDebtTokenCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _StableDebtToken.Contract.BalanceOf(&_StableDebtToken.CallOpts, account)
}

// BorrowAllowance is a free data retrieval call binding the contract method 0x6bd76d24.
//
// Solidity: function borrowAllowance(address fromUser, address toUser) view returns(uint256)
func (_StableDebtToken *StableDebtTokenCaller) BorrowAllowance(opts *bind.CallOpts, fromUser common.Address, toUser common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StableDebtToken.contract.Call(opts, &out, "borrowAllowance", fromUser, toUser)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BorrowAllowance is a free data retrieval call binding the contract method 0x6bd76d24.
//
// Solidity: function borrowAllowance(address fromUser, address toUser) view returns(uint256)
func (_StableDebtToken *StableDebtTokenSession) BorrowAllowance(fromUser common.Address, toUser common.Address) (*big.Int, error) {
	return _StableDebtToken.Contract.BorrowAllowance(&_StableDebtToken.CallOpts, fromUser, toUser)
}

// BorrowAllowance is a free data retrieval call binding the contract method 0x6bd76d24.
//
// Solidity: function borrowAllowance(address fromUser, address toUser) view returns(uint256)
func (_StableDebtToken *StableDebtTokenCallerSession) BorrowAllowance(fromUser common.Address, toUser common.Address) (*big.Int, error) {
	return _StableDebtToken.Contract.BorrowAllowance(&_StableDebtToken.CallOpts, fromUser, toUser)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_StableDebtToken *StableDebtTokenCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _StableDebtToken.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_StableDebtToken *StableDebtTokenSession) Decimals() (uint8, error) {
	return _StableDebtToken.Contract.Decimals(&_StableDebtToken.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_StableDebtToken *StableDebtTokenCallerSession) Decimals() (uint8, error) {
	return _StableDebtToken.Contract.Decimals(&_StableDebtToken.CallOpts)
}

// GetAverageStableRate is a free data retrieval call binding the contract method 0x90f6fcf2.
//
// Solidity: function getAverageStableRate() view returns(uint256)
func (_StableDebtToken *StableDebtTokenCaller) GetAverageStableRate(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StableDebtToken.contract.Call(opts, &out, "getAverageStableRate")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAverageStableRate is a free data retrieval call binding the contract method 0x90f6fcf2.
//
// Solidity: function getAverageStableRate() view returns(uint256)
func (_StableDebtToken *StableDebtTokenSession) GetAverageStableRate() (*big.Int, error) {
	return _StableDebtToken.Contract.GetAverageStableRate(&_StableDebtToken.CallOpts)
}

// GetAverageStableRate is a free data retrieval call binding the contract method 0x90f6fcf2.
//
// Solidity: function getAverageStableRate() view returns(uint256)
func (_StableDebtToken *StableDebtTokenCallerSession) GetAverageStableRate() (*big.Int, error) {
	return _StableDebtToken.Contract.GetAverageStableRate(&_StableDebtToken.CallOpts)
}

// GetSupplyData is a free data retrieval call binding the contract method 0x79774338.
//
// Solidity: function getSupplyData() view returns(uint256, uint256, uint256, uint40)
func (_StableDebtToken *StableDebtTokenCaller) GetSupplyData(opts *bind.CallOpts) (*big.Int, *big.Int, *big.Int, *big.Int, error) {
	var out []interface{}
	err := _StableDebtToken.contract.Call(opts, &out, "getSupplyData")

	if err != nil {
		return *new(*big.Int), *new(*big.Int), *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	out3 := *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return out0, out1, out2, out3, err

}

// GetSupplyData is a free data retrieval call binding the contract method 0x79774338.
//
// Solidity: function getSupplyData() view returns(uint256, uint256, uint256, uint40)
func (_StableDebtToken *StableDebtTokenSession) GetSupplyData() (*big.Int, *big.Int, *big.Int, *big.Int, error) {
	return _StableDebtToken.Contract.GetSupplyData(&_StableDebtToken.CallOpts)
}

// GetSupplyData is a free data retrieval call binding the contract method 0x79774338.
//
// Solidity: function getSupplyData() view returns(uint256, uint256, uint256, uint40)
func (_StableDebtToken *StableDebtTokenCallerSession) GetSupplyData() (*big.Int, *big.Int, *big.Int, *big.Int, error) {
	return _StableDebtToken.Contract.GetSupplyData(&_StableDebtToken.CallOpts)
}

// GetTotalSupplyAndAvgRate is a free data retrieval call binding the contract method 0xf731e9be.
//
// Solidity: function getTotalSupplyAndAvgRate() view returns(uint256, uint256)
func (_StableDebtToken *StableDebtTokenCaller) GetTotalSupplyAndAvgRate(opts *bind.CallOpts) (*big.Int, *big.Int, error) {
	var out []interface{}
	err := _StableDebtToken.contract.Call(opts, &out, "getTotalSupplyAndAvgRate")

	if err != nil {
		return *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// GetTotalSupplyAndAvgRate is a free data retrieval call binding the contract method 0xf731e9be.
//
// Solidity: function getTotalSupplyAndAvgRate() view returns(uint256, uint256)
func (_StableDebtToken *StableDebtTokenSession) GetTotalSupplyAndAvgRate() (*big.Int, *big.Int, error) {
	return _StableDebtToken.Contract.GetTotalSupplyAndAvgRate(&_StableDebtToken.CallOpts)
}

// GetTotalSupplyAndAvgRate is a free data retrieval call binding the contract method 0xf731e9be.
//
// Solidity: function getTotalSupplyAndAvgRate() view returns(uint256, uint256)
func (_StableDebtToken *StableDebtTokenCallerSession) GetTotalSupplyAndAvgRate() (*big.Int, *big.Int, error) {
	return _StableDebtToken.Contract.GetTotalSupplyAndAvgRate(&_StableDebtToken.CallOpts)
}

// GetTotalSupplyLastUpdated is a free data retrieval call binding the contract method 0xe7484890.
//
// Solidity: function getTotalSupplyLastUpdated() view returns(uint40)
func (_StableDebtToken *StableDebtTokenCaller) GetTotalSupplyLastUpdated(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StableDebtToken.contract.Call(opts, &out, "getTotalSupplyLastUpdated")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalSupplyLastUpdated is a free data retrieval call binding the contract method 0xe7484890.
//
// Solidity: function getTotalSupplyLastUpdated() view returns(uint40)
func (_StableDebtToken *StableDebtTokenSession) GetTotalSupplyLastUpdated() (*big.Int, error) {
	return _StableDebtToken.Contract.GetTotalSupplyLastUpdated(&_StableDebtToken.CallOpts)
}

// GetTotalSupplyLastUpdated is a free data retrieval call binding the contract method 0xe7484890.
//
// Solidity: function getTotalSupplyLastUpdated() view returns(uint40)
func (_StableDebtToken *StableDebtTokenCallerSession) GetTotalSupplyLastUpdated() (*big.Int, error) {
	return _StableDebtToken.Contract.GetTotalSupplyLastUpdated(&_StableDebtToken.CallOpts)
}

// GetUserLastUpdated is a free data retrieval call binding the contract method 0x79ce6b8c.
//
// Solidity: function getUserLastUpdated(address user) view returns(uint40)
func (_StableDebtToken *StableDebtTokenCaller) GetUserLastUpdated(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StableDebtToken.contract.Call(opts, &out, "getUserLastUpdated", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetUserLastUpdated is a free data retrieval call binding the contract method 0x79ce6b8c.
//
// Solidity: function getUserLastUpdated(address user) view returns(uint40)
func (_StableDebtToken *StableDebtTokenSession) GetUserLastUpdated(user common.Address) (*big.Int, error) {
	return _StableDebtToken.Contract.GetUserLastUpdated(&_StableDebtToken.CallOpts, user)
}

// GetUserLastUpdated is a free data retrieval call binding the contract method 0x79ce6b8c.
//
// Solidity: function getUserLastUpdated(address user) view returns(uint40)
func (_StableDebtToken *StableDebtTokenCallerSession) GetUserLastUpdated(user common.Address) (*big.Int, error) {
	return _StableDebtToken.Contract.GetUserLastUpdated(&_StableDebtToken.CallOpts, user)
}

// GetUserStableRate is a free data retrieval call binding the contract method 0xe78c9b3b.
//
// Solidity: function getUserStableRate(address user) view returns(uint256)
func (_StableDebtToken *StableDebtTokenCaller) GetUserStableRate(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StableDebtToken.contract.Call(opts, &out, "getUserStableRate", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetUserStableRate is a free data retrieval call binding the contract method 0xe78c9b3b.
//
// Solidity: function getUserStableRate(address user) view returns(uint256)
func (_StableDebtToken *StableDebtTokenSession) GetUserStableRate(user common.Address) (*big.Int, error) {
	return _StableDebtToken.Contract.GetUserStableRate(&_StableDebtToken.CallOpts, user)
}

// GetUserStableRate is a free data retrieval call binding the contract method 0xe78c9b3b.
//
// Solidity: function getUserStableRate(address user) view returns(uint256)
func (_StableDebtToken *StableDebtTokenCallerSession) GetUserStableRate(user common.Address) (*big.Int, error) {
	return _StableDebtToken.Contract.GetUserStableRate(&_StableDebtToken.CallOpts, user)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_StableDebtToken *StableDebtTokenCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _StableDebtToken.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_StableDebtToken *StableDebtTokenSession) Name() (string, error) {
	return _StableDebtToken.Contract.Name(&_StableDebtToken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_StableDebtToken *StableDebtTokenCallerSession) Name() (string, error) {
	return _StableDebtToken.Contract.Name(&_StableDebtToken.CallOpts)
}

// PrincipalBalanceOf is a free data retrieval call binding the contract method 0xc634dfaa.
//
// Solidity: function principalBalanceOf(address user) view returns(uint256)
func (_StableDebtToken *StableDebtTokenCaller) PrincipalBalanceOf(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StableDebtToken.contract.Call(opts, &out, "principalBalanceOf", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PrincipalBalanceOf is a free data retrieval call binding the contract method 0xc634dfaa.
//
// Solidity: function principalBalanceOf(address user) view returns(uint256)
func (_StableDebtToken *StableDebtTokenSession) PrincipalBalanceOf(user common.Address) (*big.Int, error) {
	return _StableDebtToken.Contract.PrincipalBalanceOf(&_StableDebtToken.CallOpts, user)
}

// PrincipalBalanceOf is a free data retrieval call binding the contract method 0xc634dfaa.
//
// Solidity: function principalBalanceOf(address user) view returns(uint256)
func (_StableDebtToken *StableDebtTokenCallerSession) PrincipalBalanceOf(user common.Address) (*big.Int, error) {
	return _StableDebtToken.Contract.PrincipalBalanceOf(&_StableDebtToken.CallOpts, user)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_StableDebtToken *StableDebtTokenCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _StableDebtToken.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_StableDebtToken *StableDebtTokenSession) Symbol() (string, error) {
	return _StableDebtToken.Contract.Symbol(&_StableDebtToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_StableDebtToken *StableDebtTokenCallerSession) Symbol() (string, error) {
	return _StableDebtToken.Contract.Symbol(&_StableDebtToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_StableDebtToken *StableDebtTokenCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StableDebtToken.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_StableDebtToken *StableDebtTokenSession) TotalSupply() (*big.Int, error) {
	return _StableDebtToken.Contract.TotalSupply(&_StableDebtToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_StableDebtToken *StableDebtTokenCallerSession) TotalSupply() (*big.Int, error) {
	return _StableDebtToken.Contract.TotalSupply(&_StableDebtToken.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_StableDebtToken *StableDebtTokenTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StableDebtToken.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_StableDebtToken *StableDebtTokenSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StableDebtToken.Contract.Approve(&_StableDebtToken.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_StableDebtToken *StableDebtTokenTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StableDebtToken.Contract.Approve(&_StableDebtToken.TransactOpts, spender, amount)
}

// ApproveDelegation is a paid mutator transaction binding the contract method 0xc04a8a10.
//
// Solidity: function approveDelegation(address delegatee, uint256 amount) returns()
func (_StableDebtToken *StableDebtTokenTransactor) ApproveDelegation(opts *bind.TransactOpts, delegatee common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StableDebtToken.contract.Transact(opts, "approveDelegation", delegatee, amount)
}

// ApproveDelegation is a paid mutator transaction binding the contract method 0xc04a8a10.
//
// Solidity: function approveDelegation(address delegatee, uint256 amount) returns()
func (_StableDebtToken *StableDebtTokenSession) ApproveDelegation(delegatee common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StableDebtToken.Contract.ApproveDelegation(&_StableDebtToken.TransactOpts, delegatee, amount)
}

// ApproveDelegation is a paid mutator transaction binding the contract method 0xc04a8a10.
//
// Solidity: function approveDelegation(address delegatee, uint256 amount) returns()
func (_StableDebtToken *StableDebtTokenTransactorSession) ApproveDelegation(delegatee common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StableDebtToken.Contract.ApproveDelegation(&_StableDebtToken.TransactOpts, delegatee, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address user, uint256 amount) returns()
func (_StableDebtToken *StableDebtTokenTransactor) Burn(opts *bind.TransactOpts, user common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StableDebtToken.contract.Transact(opts, "burn", user, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address user, uint256 amount) returns()
func (_StableDebtToken *StableDebtTokenSession) Burn(user common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StableDebtToken.Contract.Burn(&_StableDebtToken.TransactOpts, user, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address user, uint256 amount) returns()
func (_StableDebtToken *StableDebtTokenTransactorSession) Burn(user common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StableDebtToken.Contract.Burn(&_StableDebtToken.TransactOpts, user, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_StableDebtToken *StableDebtTokenTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _StableDebtToken.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_StableDebtToken *StableDebtTokenSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _StableDebtToken.Contract.DecreaseAllowance(&_StableDebtToken.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_StableDebtToken *StableDebtTokenTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _StableDebtToken.Contract.DecreaseAllowance(&_StableDebtToken.TransactOpts, spender, subtractedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_StableDebtToken *StableDebtTokenTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _StableDebtToken.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_StableDebtToken *StableDebtTokenSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _StableDebtToken.Contract.IncreaseAllowance(&_StableDebtToken.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_StableDebtToken *StableDebtTokenTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _StableDebtToken.Contract.IncreaseAllowance(&_StableDebtToken.TransactOpts, spender, addedValue)
}

// Initialize is a paid mutator transaction binding the contract method 0x3118724e.
//
// Solidity: function initialize(uint8 decimals, string name, string symbol) returns()
func (_StableDebtToken *StableDebtTokenTransactor) Initialize(opts *bind.TransactOpts, decimals uint8, name string, symbol string) (*types.Transaction, error) {
	return _StableDebtToken.contract.Transact(opts, "initialize", decimals, name, symbol)
}

// Initialize is a paid mutator transaction binding the contract method 0x3118724e.
//
// Solidity: function initialize(uint8 decimals, string name, string symbol) returns()
func (_StableDebtToken *StableDebtTokenSession) Initialize(decimals uint8, name string, symbol string) (*types.Transaction, error) {
	return _StableDebtToken.Contract.Initialize(&_StableDebtToken.TransactOpts, decimals, name, symbol)
}

// Initialize is a paid mutator transaction binding the contract method 0x3118724e.
//
// Solidity: function initialize(uint8 decimals, string name, string symbol) returns()
func (_StableDebtToken *StableDebtTokenTransactorSession) Initialize(decimals uint8, name string, symbol string) (*types.Transaction, error) {
	return _StableDebtToken.Contract.Initialize(&_StableDebtToken.TransactOpts, decimals, name, symbol)
}

// Mint is a paid mutator transaction binding the contract method 0xb3f1c93d.
//
// Solidity: function mint(address user, address onBehalfOf, uint256 amount, uint256 rate) returns(bool)
func (_StableDebtToken *StableDebtTokenTransactor) Mint(opts *bind.TransactOpts, user common.Address, onBehalfOf common.Address, amount *big.Int, rate *big.Int) (*types.Transaction, error) {
	return _StableDebtToken.contract.Transact(opts, "mint", user, onBehalfOf, amount, rate)
}

// Mint is a paid mutator transaction binding the contract method 0xb3f1c93d.
//
// Solidity: function mint(address user, address onBehalfOf, uint256 amount, uint256 rate) returns(bool)
func (_StableDebtToken *StableDebtTokenSession) Mint(user common.Address, onBehalfOf common.Address, amount *big.Int, rate *big.Int) (*types.Transaction, error) {
	return _StableDebtToken.Contract.Mint(&_StableDebtToken.TransactOpts, user, onBehalfOf, amount, rate)
}

// Mint is a paid mutator transaction binding the contract method 0xb3f1c93d.
//
// Solidity: function mint(address user, address onBehalfOf, uint256 amount, uint256 rate) returns(bool)
func (_StableDebtToken *StableDebtTokenTransactorSession) Mint(user common.Address, onBehalfOf common.Address, amount *big.Int, rate *big.Int) (*types.Transaction, error) {
	return _StableDebtToken.Contract.Mint(&_StableDebtToken.TransactOpts, user, onBehalfOf, amount, rate)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_StableDebtToken *StableDebtTokenTransactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StableDebtToken.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_StableDebtToken *StableDebtTokenSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StableDebtToken.Contract.Transfer(&_StableDebtToken.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_StableDebtToken *StableDebtTokenTransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StableDebtToken.Contract.Transfer(&_StableDebtToken.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_StableDebtToken *StableDebtTokenTransactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StableDebtToken.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_StableDebtToken *StableDebtTokenSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StableDebtToken.Contract.TransferFrom(&_StableDebtToken.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_StableDebtToken *StableDebtTokenTransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StableDebtToken.Contract.TransferFrom(&_StableDebtToken.TransactOpts, sender, recipient, amount)
}

// StableDebtTokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the StableDebtToken contract.
type StableDebtTokenApprovalIterator struct {
	Event *StableDebtTokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StableDebtTokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StableDebtTokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StableDebtTokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StableDebtTokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StableDebtTokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StableDebtTokenApproval represents a Approval event raised by the StableDebtToken contract.
type StableDebtTokenApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_StableDebtToken *StableDebtTokenFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*StableDebtTokenApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _StableDebtToken.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &StableDebtTokenApprovalIterator{contract: _StableDebtToken.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_StableDebtToken *StableDebtTokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *StableDebtTokenApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _StableDebtToken.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StableDebtTokenApproval)
				if err := _StableDebtToken.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_StableDebtToken *StableDebtTokenFilterer) ParseApproval(log types.Log) (*StableDebtTokenApproval, error) {
	event := new(StableDebtTokenApproval)
	if err := _StableDebtToken.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StableDebtTokenBorrowAllowanceDelegatedIterator is returned from FilterBorrowAllowanceDelegated and is used to iterate over the raw logs and unpacked data for BorrowAllowanceDelegated events raised by the StableDebtToken contract.
type StableDebtTokenBorrowAllowanceDelegatedIterator struct {
	Event *StableDebtTokenBorrowAllowanceDelegated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StableDebtTokenBorrowAllowanceDelegatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StableDebtTokenBorrowAllowanceDelegated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StableDebtTokenBorrowAllowanceDelegated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StableDebtTokenBorrowAllowanceDelegatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StableDebtTokenBorrowAllowanceDelegatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StableDebtTokenBorrowAllowanceDelegated represents a BorrowAllowanceDelegated event raised by the StableDebtToken contract.
type StableDebtTokenBorrowAllowanceDelegated struct {
	FromUser common.Address
	ToUser   common.Address
	Asset    common.Address
	Amount   *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterBorrowAllowanceDelegated is a free log retrieval operation binding the contract event 0xda919360433220e13b51e8c211e490d148e61a3bd53de8c097194e458b97f3e1.
//
// Solidity: event BorrowAllowanceDelegated(address indexed fromUser, address indexed toUser, address asset, uint256 amount)
func (_StableDebtToken *StableDebtTokenFilterer) FilterBorrowAllowanceDelegated(opts *bind.FilterOpts, fromUser []common.Address, toUser []common.Address) (*StableDebtTokenBorrowAllowanceDelegatedIterator, error) {

	var fromUserRule []interface{}
	for _, fromUserItem := range fromUser {
		fromUserRule = append(fromUserRule, fromUserItem)
	}
	var toUserRule []interface{}
	for _, toUserItem := range toUser {
		toUserRule = append(toUserRule, toUserItem)
	}

	logs, sub, err := _StableDebtToken.contract.FilterLogs(opts, "BorrowAllowanceDelegated", fromUserRule, toUserRule)
	if err != nil {
		return nil, err
	}
	return &StableDebtTokenBorrowAllowanceDelegatedIterator{contract: _StableDebtToken.contract, event: "BorrowAllowanceDelegated", logs: logs, sub: sub}, nil
}

// WatchBorrowAllowanceDelegated is a free log subscription operation binding the contract event 0xda919360433220e13b51e8c211e490d148e61a3bd53de8c097194e458b97f3e1.
//
// Solidity: event BorrowAllowanceDelegated(address indexed fromUser, address indexed toUser, address asset, uint256 amount)
func (_StableDebtToken *StableDebtTokenFilterer) WatchBorrowAllowanceDelegated(opts *bind.WatchOpts, sink chan<- *StableDebtTokenBorrowAllowanceDelegated, fromUser []common.Address, toUser []common.Address) (event.Subscription, error) {

	var fromUserRule []interface{}
	for _, fromUserItem := range fromUser {
		fromUserRule = append(fromUserRule, fromUserItem)
	}
	var toUserRule []interface{}
	for _, toUserItem := range toUser {
		toUserRule = append(toUserRule, toUserItem)
	}

	logs, sub, err := _StableDebtToken.contract.WatchLogs(opts, "BorrowAllowanceDelegated", fromUserRule, toUserRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StableDebtTokenBorrowAllowanceDelegated)
				if err := _StableDebtToken.contract.UnpackLog(event, "BorrowAllowanceDelegated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBorrowAllowanceDelegated is a log parse operation binding the contract event 0xda919360433220e13b51e8c211e490d148e61a3bd53de8c097194e458b97f3e1.
//
// Solidity: event BorrowAllowanceDelegated(address indexed fromUser, address indexed toUser, address asset, uint256 amount)
func (_StableDebtToken *StableDebtTokenFilterer) ParseBorrowAllowanceDelegated(log types.Log) (*StableDebtTokenBorrowAllowanceDelegated, error) {
	event := new(StableDebtTokenBorrowAllowanceDelegated)
	if err := _StableDebtToken.contract.UnpackLog(event, "BorrowAllowanceDelegated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StableDebtTokenBurnIterator is returned from FilterBurn and is used to iterate over the raw logs and unpacked data for Burn events raised by the StableDebtToken contract.
type StableDebtTokenBurnIterator struct {
	Event *StableDebtTokenBurn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StableDebtTokenBurnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StableDebtTokenBurn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StableDebtTokenBurn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StableDebtTokenBurnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StableDebtTokenBurnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StableDebtTokenBurn represents a Burn event raised by the StableDebtToken contract.
type StableDebtTokenBurn struct {
	User            common.Address
	Amount          *big.Int
	CurrentBalance  *big.Int
	BalanceIncrease *big.Int
	AvgStableRate   *big.Int
	NewTotalSupply  *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterBurn is a free log retrieval operation binding the contract event 0x44bd20a79e993bdcc7cbedf54a3b4d19fb78490124b6b90d04fe3242eea579e8.
//
// Solidity: event Burn(address indexed user, uint256 amount, uint256 currentBalance, uint256 balanceIncrease, uint256 avgStableRate, uint256 newTotalSupply)
func (_StableDebtToken *StableDebtTokenFilterer) FilterBurn(opts *bind.FilterOpts, user []common.Address) (*StableDebtTokenBurnIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _StableDebtToken.contract.FilterLogs(opts, "Burn", userRule)
	if err != nil {
		return nil, err
	}
	return &StableDebtTokenBurnIterator{contract: _StableDebtToken.contract, event: "Burn", logs: logs, sub: sub}, nil
}

// WatchBurn is a free log subscription operation binding the contract event 0x44bd20a79e993bdcc7cbedf54a3b4d19fb78490124b6b90d04fe3242eea579e8.
//
// Solidity: event Burn(address indexed user, uint256 amount, uint256 currentBalance, uint256 balanceIncrease, uint256 avgStableRate, uint256 newTotalSupply)
func (_StableDebtToken *StableDebtTokenFilterer) WatchBurn(opts *bind.WatchOpts, sink chan<- *StableDebtTokenBurn, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _StableDebtToken.contract.WatchLogs(opts, "Burn", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StableDebtTokenBurn)
				if err := _StableDebtToken.contract.UnpackLog(event, "Burn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurn is a log parse operation binding the contract event 0x44bd20a79e993bdcc7cbedf54a3b4d19fb78490124b6b90d04fe3242eea579e8.
//
// Solidity: event Burn(address indexed user, uint256 amount, uint256 currentBalance, uint256 balanceIncrease, uint256 avgStableRate, uint256 newTotalSupply)
func (_StableDebtToken *StableDebtTokenFilterer) ParseBurn(log types.Log) (*StableDebtTokenBurn, error) {
	event := new(StableDebtTokenBurn)
	if err := _StableDebtToken.contract.UnpackLog(event, "Burn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StableDebtTokenMintIterator is returned from FilterMint and is used to iterate over the raw logs and unpacked data for Mint events raised by the StableDebtToken contract.
type StableDebtTokenMintIterator struct {
	Event *StableDebtTokenMint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StableDebtTokenMintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StableDebtTokenMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StableDebtTokenMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StableDebtTokenMintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StableDebtTokenMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StableDebtTokenMint represents a Mint event raised by the StableDebtToken contract.
type StableDebtTokenMint struct {
	User            common.Address
	OnBehalfOf      common.Address
	Amount          *big.Int
	CurrentBalance  *big.Int
	BalanceIncrease *big.Int
	NewRate         *big.Int
	AvgStableRate   *big.Int
	NewTotalSupply  *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterMint is a free log retrieval operation binding the contract event 0xc16f4e4ca34d790de4c656c72fd015c667d688f20be64eea360618545c4c530f.
//
// Solidity: event Mint(address indexed user, address indexed onBehalfOf, uint256 amount, uint256 currentBalance, uint256 balanceIncrease, uint256 newRate, uint256 avgStableRate, uint256 newTotalSupply)
func (_StableDebtToken *StableDebtTokenFilterer) FilterMint(opts *bind.FilterOpts, user []common.Address, onBehalfOf []common.Address) (*StableDebtTokenMintIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var onBehalfOfRule []interface{}
	for _, onBehalfOfItem := range onBehalfOf {
		onBehalfOfRule = append(onBehalfOfRule, onBehalfOfItem)
	}

	logs, sub, err := _StableDebtToken.contract.FilterLogs(opts, "Mint", userRule, onBehalfOfRule)
	if err != nil {
		return nil, err
	}
	return &StableDebtTokenMintIterator{contract: _StableDebtToken.contract, event: "Mint", logs: logs, sub: sub}, nil
}

// WatchMint is a free log subscription operation binding the contract event 0xc16f4e4ca34d790de4c656c72fd015c667d688f20be64eea360618545c4c530f.
//
// Solidity: event Mint(address indexed user, address indexed onBehalfOf, uint256 amount, uint256 currentBalance, uint256 balanceIncrease, uint256 newRate, uint256 avgStableRate, uint256 newTotalSupply)
func (_StableDebtToken *StableDebtTokenFilterer) WatchMint(opts *bind.WatchOpts, sink chan<- *StableDebtTokenMint, user []common.Address, onBehalfOf []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var onBehalfOfRule []interface{}
	for _, onBehalfOfItem := range onBehalfOf {
		onBehalfOfRule = append(onBehalfOfRule, onBehalfOfItem)
	}

	logs, sub, err := _StableDebtToken.contract.WatchLogs(opts, "Mint", userRule, onBehalfOfRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StableDebtTokenMint)
				if err := _StableDebtToken.contract.UnpackLog(event, "Mint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMint is a log parse operation binding the contract event 0xc16f4e4ca34d790de4c656c72fd015c667d688f20be64eea360618545c4c530f.
//
// Solidity: event Mint(address indexed user, address indexed onBehalfOf, uint256 amount, uint256 currentBalance, uint256 balanceIncrease, uint256 newRate, uint256 avgStableRate, uint256 newTotalSupply)
func (_StableDebtToken *StableDebtTokenFilterer) ParseMint(log types.Log) (*StableDebtTokenMint, error) {
	event := new(StableDebtTokenMint)
	if err := _StableDebtToken.contract.UnpackLog(event, "Mint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StableDebtTokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the StableDebtToken contract.
type StableDebtTokenTransferIterator struct {
	Event *StableDebtTokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StableDebtTokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StableDebtTokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StableDebtTokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StableDebtTokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StableDebtTokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StableDebtTokenTransfer represents a Transfer event raised by the StableDebtToken contract.
type StableDebtTokenTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_StableDebtToken *StableDebtTokenFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*StableDebtTokenTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _StableDebtToken.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &StableDebtTokenTransferIterator{contract: _StableDebtToken.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_StableDebtToken *StableDebtTokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *StableDebtTokenTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _StableDebtToken.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StableDebtTokenTransfer)
				if err := _StableDebtToken.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_StableDebtToken *StableDebtTokenFilterer) ParseTransfer(log types.Log) (*StableDebtTokenTransfer, error) {
	event := new(StableDebtTokenTransfer)
	if err := _StableDebtToken.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StringLibABI is the input ABI used to generate the binding from.
const StringLibABI = "[]"

// StringLibBin is the compiled bytecode used for deploying new contracts.
var StringLibBin = "0x60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220050831329d063fd702f774c3da1891ba4f93a7236bfd37bfdd9c5954bd264ad064736f6c634300060c0033"

// DeployStringLib deploys a new Ethereum contract, binding an instance of StringLib to it.
func DeployStringLib(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *StringLib, error) {
	parsed, err := abi.JSON(strings.NewReader(StringLibABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(StringLibBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StringLib{StringLibCaller: StringLibCaller{contract: contract}, StringLibTransactor: StringLibTransactor{contract: contract}, StringLibFilterer: StringLibFilterer{contract: contract}}, nil
}

// StringLib is an auto generated Go binding around an Ethereum contract.
type StringLib struct {
	StringLibCaller     // Read-only binding to the contract
	StringLibTransactor // Write-only binding to the contract
	StringLibFilterer   // Log filterer for contract events
}

// StringLibCaller is an auto generated read-only Go binding around an Ethereum contract.
type StringLibCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StringLibTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StringLibTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StringLibFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StringLibFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StringLibSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StringLibSession struct {
	Contract     *StringLib        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StringLibCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StringLibCallerSession struct {
	Contract *StringLibCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// StringLibTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StringLibTransactorSession struct {
	Contract     *StringLibTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// StringLibRaw is an auto generated low-level Go binding around an Ethereum contract.
type StringLibRaw struct {
	Contract *StringLib // Generic contract binding to access the raw methods on
}

// StringLibCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StringLibCallerRaw struct {
	Contract *StringLibCaller // Generic read-only contract binding to access the raw methods on
}

// StringLibTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StringLibTransactorRaw struct {
	Contract *StringLibTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStringLib creates a new instance of StringLib, bound to a specific deployed contract.
func NewStringLib(address common.Address, backend bind.ContractBackend) (*StringLib, error) {
	contract, err := bindStringLib(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StringLib{StringLibCaller: StringLibCaller{contract: contract}, StringLibTransactor: StringLibTransactor{contract: contract}, StringLibFilterer: StringLibFilterer{contract: contract}}, nil
}

// NewStringLibCaller creates a new read-only instance of StringLib, bound to a specific deployed contract.
func NewStringLibCaller(address common.Address, caller bind.ContractCaller) (*StringLibCaller, error) {
	contract, err := bindStringLib(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StringLibCaller{contract: contract}, nil
}

// NewStringLibTransactor creates a new write-only instance of StringLib, bound to a specific deployed contract.
func NewStringLibTransactor(address common.Address, transactor bind.ContractTransactor) (*StringLibTransactor, error) {
	contract, err := bindStringLib(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StringLibTransactor{contract: contract}, nil
}

// NewStringLibFilterer creates a new log filterer instance of StringLib, bound to a specific deployed contract.
func NewStringLibFilterer(address common.Address, filterer bind.ContractFilterer) (*StringLibFilterer, error) {
	contract, err := bindStringLib(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StringLibFilterer{contract: contract}, nil
}

// bindStringLib binds a generic wrapper to an already deployed contract.
func bindStringLib(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StringLibABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StringLib *StringLibRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StringLib.Contract.StringLibCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StringLib *StringLibRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StringLib.Contract.StringLibTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StringLib *StringLibRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StringLib.Contract.StringLibTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StringLib *StringLibCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StringLib.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StringLib *StringLibTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StringLib.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StringLib *StringLibTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StringLib.Contract.contract.Transact(opts, method, params...)
}

// UiPoolDataProviderABI is the input ABI used to generate the binding from.
const UiPoolDataProviderABI = "[{\"inputs\":[],\"name\":\"MOCK_USD_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractILendingPoolAddressesProvider\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getReservesData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseLTVasCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveLiquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveLiquidationBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"usageAsCollateralEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"borrowingEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"stableBorrowRateEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFrozen\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"liquidityIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"variableBorrowIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"liquidityRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"variableBorrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"stableBorrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint40\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"aTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableDebtTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"variableDebtTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interestRateStrategyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"availableLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPrincipalStableDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averageStableRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableDebtLastUpdateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalScaledVariableDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceInEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableRateSlope1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableRateSlope2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableRateSlope1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableRateSlope2\",\"type\":\"uint256\"}],\"internalType\":\"structIUiPoolDataProvider.AggregatedReserveData[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scaledATokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"usageAsCollateralEnabledOnUser\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"stableBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scaledVariableDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalStableDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableBorrowLastUpdateTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"structIUiPoolDataProvider.UserReserveData[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// UiPoolDataProviderBin is the compiled bytecode used for deploying new contracts.
var UiPoolDataProviderBin = "0x608060405234801561001057600080fd5b50611940806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806387e40db71461003b578063b8c0a5b114610066575b600080fd5b61004e6100493660046112a5565b61007b565b60405161005d939291906115e7565b60405180910390f35b61006e610c3a565b60405161005d91906115d3565b606080600080856001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156100ba57600080fd5b505afa1580156100ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100f291906111d7565b90506000866001600160a01b031663fca513a86040518163ffffffff1660e01b815260040160206040518083038186803b15801561012f57600080fd5b505afa158015610143573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061016791906111d7565b90506060826001600160a01b031663d1946dbc6040518163ffffffff1660e01b815260040160006040518083038186803b1580156101a457600080fd5b505afa1580156101b8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101e091908101906111fa565b90506101ea610f45565b604051634417a58360e01b81526001600160a01b03851690634417a58390610216908b906004016115d3565b60206040518083038186803b15801561022e57600080fd5b505afa158015610242573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102669190611464565b90506060825167ffffffffffffffff8111801561028257600080fd5b506040519080825280602002602001820160405280156102bc57816020015b6102a9610f58565b8152602001906001900390816102a15790505b50905060606001600160a01b038a166102d65760006102d9565b83515b67ffffffffffffffff811180156102ef57600080fd5b5060405190808252806020026020018201604052801561032957816020015b6103166110b7565b81526020019060019003908161030e5790505b50905060005b8451811015610b9457610340610f58565b83828151811061034c57fe5b6020026020010151905085828151811061036257fe5b60209081029190910101516001600160a01b031681526103806110ff565b81516040516335ea6a7560e01b81526001600160a01b038b16916335ea6a75916103ad91906004016115d3565b6101806040518083038186803b1580156103c657600080fd5b505afa1580156103da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fe9190611369565b60208101516001600160801b039081166101a085015260408083015182166101c0860152606083015182166101e08601526080830151821661020086015260a083015190911661022085015260c082015164ffffffffff1661024085015260e08201516001600160a01b03908116610260860152610100830151811661028086015261012083015181166102a086015261014083015181166102c08601528451915163b3596f0760e01b81529293508a169163b3596f07916104c2916004016115d3565b60206040518083038186803b1580156104da57600080fd5b505afa1580156104ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610512919061147f565b61038083015281516102608301516040516370a0823160e01b81526001600160a01b03909216916370a082319161054b916004016115d3565b60206040518083038186803b15801561056357600080fd5b505afa158015610577573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059b919061147f565b826102e00181815250508161028001516001600160a01b031663797743386040518163ffffffff1660e01b815260040160806040518083038186803b1580156105e357600080fd5b505afa1580156105f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061b9190611497565b64ffffffffff16610340860152610320850152506103008301526102a08201516040805163b1bf962d60e01b815290516001600160a01b039092169163b1bf962d91600480820192602092909190829003018186803b15801561067d57600080fd5b505afa158015610691573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b5919061147f565b826103600181815250508161026001516001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156106fd57600080fd5b505afa158015610711573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261073991908101906112dd565b604080840191909152805160208082019092526000815290830152805161075f90610c52565b60e0870152606086015260c085015260a08401526080830152805161078390610c7d565b1515610140860152151561012085015215156101808401521515610160830152608082015115156101008301526102c08201516107bf90610cb9565b6104008601526103e08501526103c08401526103a08301526001600160a01b038d1615610b8a5781600001518484815181106107f757fe5b6020026020010151600001906001600160a01b031690816001600160a01b0316815250508161026001516001600160a01b0316631da24f3e8e6040518263ffffffff1660e01b815260040161084c91906115d3565b60206040518083038186803b15801561086457600080fd5b505afa158015610878573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089c919061147f565b8484815181106108a857fe5b60209081029190910181015101526108c08684610e92565b8484815181106108cc57fe5b60209081029190910101519015156040909101526108ea8684610ef4565b15610b8a57816102a001516001600160a01b0316631da24f3e8e6040518263ffffffff1660e01b815260040161092091906115d3565b60206040518083038186803b15801561093857600080fd5b505afa15801561094c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610970919061147f565b84848151811061097c57fe5b602002602001015160800181815250508161028001516001600160a01b031663c634dfaa8e6040518263ffffffff1660e01b81526004016109bd91906115d3565b60206040518083038186803b1580156109d557600080fd5b505afa1580156109e9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0d919061147f565b848481518110610a1957fe5b602002602001015160a0018181525050838381518110610a3557fe5b602002602001015160a00151600014610b8a578161028001516001600160a01b031663e78c9b3b8e6040518263ffffffff1660e01b8152600401610a7991906115d3565b60206040518083038186803b158015610a9157600080fd5b505afa158015610aa5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac9919061147f565b848481518110610ad557fe5b602002602001015160600181815250508161028001516001600160a01b03166379ce6b8c8e6040518263ffffffff1660e01b8152600401610b1691906115d3565b60206040518083038186803b158015610b2e57600080fd5b505afa158015610b42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6691906114d7565b64ffffffffff16848481518110610b7957fe5b602002602001015160c00181815250505b505060010161032f565b508181866001600160a01b031663b3596f077310f7fc1f91ba351f9c629c5947ad69bd03c05b966040518263ffffffff1660e01b8152600401610bd791906115d3565b60206040518083038186803b158015610bef57600080fd5b505afa158015610c03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c27919061147f565b9850985098505050505050509250925092565b7310f7fc1f91ba351f9c629c5947ad69bd03c05b9681565b5161ffff80821692601083901c821692602081901c831692603082901c60ff169260409290921c1690565b51670100000000000000811615159167020000000000000082161515916704000000000000008116151591670800000000000000909116151590565b600080600080846001600160a01b0316637b832f586040518163ffffffff1660e01b815260040160206040518083038186803b158015610cf857600080fd5b505afa158015610d0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d30919061147f565b856001600160a01b03166365614f816040518163ffffffff1660e01b815260040160206040518083038186803b158015610d6957600080fd5b505afa158015610d7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da1919061147f565b866001600160a01b0316630bdf953f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dda57600080fd5b505afa158015610dee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e12919061147f565b876001600160a01b031663ccab01a36040518163ffffffff1660e01b815260040160206040518083038186803b158015610e4b57600080fd5b505afa158015610e5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e83919061147f565b93509350935093509193509193565b60006080821060405180604001604052806002815260200161373760f01b81525090610eda5760405162461bcd60e51b8152600401610ed19190611875565b60405180910390fd5b5050815160016002830281019190911c1615155b92915050565b60006080821060405180604001604052806002815260200161373760f01b81525090610f335760405162461bcd60e51b8152600401610ed19190611875565b50509051600160029092021c16151590565b6040518060200160405280600081525090565b60405180610420016040528060006001600160a01b031681526020016060815260200160608152602001600081526020016000815260200160008152602001600081526020016000815260200160001515815260200160001515815260200160001515815260200160001515815260200160001515815260200160006001600160801b0316815260200160006001600160801b0316815260200160006001600160801b0316815260200160006001600160801b0316815260200160006001600160801b03168152602001600064ffffffffff16815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060e0016040528060006001600160a01b0316815260200160008152602001600015158152602001600081526020016000815260200160008152602001600081525090565b604051806101800160405280611113610f45565b815260006020820181905260408201819052606082018190526080820181905260a0820181905260c0820181905260e082018190526101008201819052610120820181905261014082018190526101609091015290565b8051610eee816118df565b600060208284031215611186578081fd5b6111906020611888565b9151825250919050565b80516001600160801b0381168114610eee57600080fd5b805164ffffffffff81168114610eee57600080fd5b805160ff81168114610eee57600080fd5b6000602082840312156111e8578081fd5b81516111f3816118df565b9392505050565b6000602080838503121561120c578182fd5b825167ffffffffffffffff80821115611223578384fd5b818501915085601f830112611236578384fd5b815181811115611244578485fd5b8381029150611254848301611888565b8181528481019084860184860187018a101561126e578788fd5b8795505b83861015611298576112848a8261116a565b835260019590950194918601918601611272565b5098975050505050505050565b600080604083850312156112b7578081fd5b82356112c2816118df565b915060208301356112d2816118df565b809150509250929050565b6000602082840312156112ee578081fd5b815167ffffffffffffffff80821115611305578283fd5b818401915084601f830112611318578283fd5b815181811115611326578384fd5b611339601f8201601f1916602001611888565b915080825285602082850101111561134f578384fd5b6113608160208401602086016118af565b50949350505050565b600061018080838503121561137c578182fd5b61138581611888565b90506113918484611175565b81526113a0846020850161119a565b60208201526113b2846040850161119a565b60408201526113c4846060850161119a565b60608201526113d6846080850161119a565b60808201526113e88460a0850161119a565b60a08201526113fa8460c085016111b1565b60c082015261140c8460e0850161116a565b60e08201526101006114208582860161116a565b908201526101206114338585830161116a565b908201526101406114468585830161116a565b90820152610160611459858583016111c6565b908201529392505050565b600060208284031215611475578081fd5b6111f38383611175565b600060208284031215611490578081fd5b5051919050565b600080600080608085870312156114ac578182fd5b84519350602085015192506040850151915060608501516114cc816118f7565b939692955090935050565b6000602082840312156114e8578081fd5b81516111f3816118f7565b6001600160a01b03169052565b6000815180845260208085019450808401835b8381101561157e5781516115288882516114f3565b8381015184890152604080820151611542828b0182611589565b5050606081810151908901526080808201519089015260a0808201519089015260c0908101519088015260e09096019590820190600101611513565b509495945050505050565b15159052565b600081518084526115a78160208601602086016118af565b601f01601f19169290920160200192915050565b6001600160801b03169052565b64ffffffffff169052565b6001600160a01b0391909116815260200190565b606080825284518282018190526000919060809081850190602080820287018401818b01875b8481101561184c57607f198a8403018652815161042061162e8583516114f3565b8582015181878701526116438287018261158f565b9150506040808301518683038288015261165d838261158f565b92505050898201518a860152888201518986015260a080830151818701525060c080830151818701525060e0808301518187015250610100808301516116a582880182611589565b5050610120808301516116ba82880182611589565b5050610140808301516116cf82880182611589565b5050610160808301516116e482880182611589565b5050610180808301516116f982880182611589565b50506101a08083015161170e828801826115bb565b50506101c080830151611723828801826115bb565b50506101e080830151611738828801826115bb565b50506102008083015161174d828801826115bb565b505061022080830151611762828801826115bb565b505061024080830151611777828801826115c8565b50506102608083015161178c828801826114f3565b5050610280808301516117a1828801826114f3565b50506102a0808301516117b6828801826114f3565b50506102c0808301516117cb828801826114f3565b50506102e08281015190860152610300808301519086015261032080830151908601526103408083015190860152610360808301519086015261038080830151908601526103a080830151908601526103c080830151908601526103e08083015190860152610400918201519190940152948301949083019060010161160d565b50508781038289015261185f818b611500565b9650505050505050826040830152949350505050565b6000602082526111f3602083018461158f565b60405181810167ffffffffffffffff811182821017156118a757600080fd5b604052919050565b60005b838110156118ca5781810151838201526020016118b2565b838111156118d9576000848401525b50505050565b6001600160a01b03811681146118f457600080fd5b50565b64ffffffffff811681146118f457600080fdfea2646970667358221220825a4bd9a5ae9238cf3755346b9ed5c5ede67eabd76fae76db3c31e9c721b8b164736f6c634300060c0033"

// DeployUiPoolDataProvider deploys a new Ethereum contract, binding an instance of UiPoolDataProvider to it.
func DeployUiPoolDataProvider(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *UiPoolDataProvider, error) {
	parsed, err := abi.JSON(strings.NewReader(UiPoolDataProviderABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(UiPoolDataProviderBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &UiPoolDataProvider{UiPoolDataProviderCaller: UiPoolDataProviderCaller{contract: contract}, UiPoolDataProviderTransactor: UiPoolDataProviderTransactor{contract: contract}, UiPoolDataProviderFilterer: UiPoolDataProviderFilterer{contract: contract}}, nil
}

// UiPoolDataProvider is an auto generated Go binding around an Ethereum contract.
type UiPoolDataProvider struct {
	UiPoolDataProviderCaller     // Read-only binding to the contract
	UiPoolDataProviderTransactor // Write-only binding to the contract
	UiPoolDataProviderFilterer   // Log filterer for contract events
}

// UiPoolDataProviderCaller is an auto generated read-only Go binding around an Ethereum contract.
type UiPoolDataProviderCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UiPoolDataProviderTransactor is an auto generated write-only Go binding around an Ethereum contract.
type UiPoolDataProviderTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UiPoolDataProviderFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type UiPoolDataProviderFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UiPoolDataProviderSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type UiPoolDataProviderSession struct {
	Contract     *UiPoolDataProvider // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// UiPoolDataProviderCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type UiPoolDataProviderCallerSession struct {
	Contract *UiPoolDataProviderCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// UiPoolDataProviderTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type UiPoolDataProviderTransactorSession struct {
	Contract     *UiPoolDataProviderTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// UiPoolDataProviderRaw is an auto generated low-level Go binding around an Ethereum contract.
type UiPoolDataProviderRaw struct {
	Contract *UiPoolDataProvider // Generic contract binding to access the raw methods on
}

// UiPoolDataProviderCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type UiPoolDataProviderCallerRaw struct {
	Contract *UiPoolDataProviderCaller // Generic read-only contract binding to access the raw methods on
}

// UiPoolDataProviderTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type UiPoolDataProviderTransactorRaw struct {
	Contract *UiPoolDataProviderTransactor // Generic write-only contract binding to access the raw methods on
}

// NewUiPoolDataProvider creates a new instance of UiPoolDataProvider, bound to a specific deployed contract.
func NewUiPoolDataProvider(address common.Address, backend bind.ContractBackend) (*UiPoolDataProvider, error) {
	contract, err := bindUiPoolDataProvider(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &UiPoolDataProvider{UiPoolDataProviderCaller: UiPoolDataProviderCaller{contract: contract}, UiPoolDataProviderTransactor: UiPoolDataProviderTransactor{contract: contract}, UiPoolDataProviderFilterer: UiPoolDataProviderFilterer{contract: contract}}, nil
}

// NewUiPoolDataProviderCaller creates a new read-only instance of UiPoolDataProvider, bound to a specific deployed contract.
func NewUiPoolDataProviderCaller(address common.Address, caller bind.ContractCaller) (*UiPoolDataProviderCaller, error) {
	contract, err := bindUiPoolDataProvider(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &UiPoolDataProviderCaller{contract: contract}, nil
}

// NewUiPoolDataProviderTransactor creates a new write-only instance of UiPoolDataProvider, bound to a specific deployed contract.
func NewUiPoolDataProviderTransactor(address common.Address, transactor bind.ContractTransactor) (*UiPoolDataProviderTransactor, error) {
	contract, err := bindUiPoolDataProvider(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &UiPoolDataProviderTransactor{contract: contract}, nil
}

// NewUiPoolDataProviderFilterer creates a new log filterer instance of UiPoolDataProvider, bound to a specific deployed contract.
func NewUiPoolDataProviderFilterer(address common.Address, filterer bind.ContractFilterer) (*UiPoolDataProviderFilterer, error) {
	contract, err := bindUiPoolDataProvider(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &UiPoolDataProviderFilterer{contract: contract}, nil
}

// bindUiPoolDataProvider binds a generic wrapper to an already deployed contract.
func bindUiPoolDataProvider(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(UiPoolDataProviderABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UiPoolDataProvider *UiPoolDataProviderRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _UiPoolDataProvider.Contract.UiPoolDataProviderCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UiPoolDataProvider *UiPoolDataProviderRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UiPoolDataProvider.Contract.UiPoolDataProviderTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UiPoolDataProvider *UiPoolDataProviderRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UiPoolDataProvider.Contract.UiPoolDataProviderTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UiPoolDataProvider *UiPoolDataProviderCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _UiPoolDataProvider.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UiPoolDataProvider *UiPoolDataProviderTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UiPoolDataProvider.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UiPoolDataProvider *UiPoolDataProviderTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UiPoolDataProvider.Contract.contract.Transact(opts, method, params...)
}

// MOCKUSDADDRESS is a free data retrieval call binding the contract method 0xb8c0a5b1.
//
// Solidity: function MOCK_USD_ADDRESS() view returns(address)
func (_UiPoolDataProvider *UiPoolDataProviderCaller) MOCKUSDADDRESS(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _UiPoolDataProvider.contract.Call(opts, &out, "MOCK_USD_ADDRESS")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MOCKUSDADDRESS is a free data retrieval call binding the contract method 0xb8c0a5b1.
//
// Solidity: function MOCK_USD_ADDRESS() view returns(address)
func (_UiPoolDataProvider *UiPoolDataProviderSession) MOCKUSDADDRESS() (common.Address, error) {
	return _UiPoolDataProvider.Contract.MOCKUSDADDRESS(&_UiPoolDataProvider.CallOpts)
}

// MOCKUSDADDRESS is a free data retrieval call binding the contract method 0xb8c0a5b1.
//
// Solidity: function MOCK_USD_ADDRESS() view returns(address)
func (_UiPoolDataProvider *UiPoolDataProviderCallerSession) MOCKUSDADDRESS() (common.Address, error) {
	return _UiPoolDataProvider.Contract.MOCKUSDADDRESS(&_UiPoolDataProvider.CallOpts)
}

// GetReservesData is a free data retrieval call binding the contract method 0x87e40db7.
//
// Solidity: function getReservesData(address provider, address user) view returns((address,string,string,uint256,uint256,uint256,uint256,uint256,bool,bool,bool,bool,bool,uint128,uint128,uint128,uint128,uint128,uint40,address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)[], (address,uint256,bool,uint256,uint256,uint256,uint256)[], uint256)
func (_UiPoolDataProvider *UiPoolDataProviderCaller) GetReservesData(opts *bind.CallOpts, provider common.Address, user common.Address) ([]IUiPoolDataProviderAggregatedReserveData, []IUiPoolDataProviderUserReserveData, *big.Int, error) {
	var out []interface{}
	err := _UiPoolDataProvider.contract.Call(opts, &out, "getReservesData", provider, user)

	if err != nil {
		return *new([]IUiPoolDataProviderAggregatedReserveData), *new([]IUiPoolDataProviderUserReserveData), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]IUiPoolDataProviderAggregatedReserveData)).(*[]IUiPoolDataProviderAggregatedReserveData)
	out1 := *abi.ConvertType(out[1], new([]IUiPoolDataProviderUserReserveData)).(*[]IUiPoolDataProviderUserReserveData)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return out0, out1, out2, err

}

// GetReservesData is a free data retrieval call binding the contract method 0x87e40db7.
//
// Solidity: function getReservesData(address provider, address user) view returns((address,string,string,uint256,uint256,uint256,uint256,uint256,bool,bool,bool,bool,bool,uint128,uint128,uint128,uint128,uint128,uint40,address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)[], (address,uint256,bool,uint256,uint256,uint256,uint256)[], uint256)
func (_UiPoolDataProvider *UiPoolDataProviderSession) GetReservesData(provider common.Address, user common.Address) ([]IUiPoolDataProviderAggregatedReserveData, []IUiPoolDataProviderUserReserveData, *big.Int, error) {
	return _UiPoolDataProvider.Contract.GetReservesData(&_UiPoolDataProvider.CallOpts, provider, user)
}

// GetReservesData is a free data retrieval call binding the contract method 0x87e40db7.
//
// Solidity: function getReservesData(address provider, address user) view returns((address,string,string,uint256,uint256,uint256,uint256,uint256,bool,bool,bool,bool,bool,uint128,uint128,uint128,uint128,uint128,uint40,address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)[], (address,uint256,bool,uint256,uint256,uint256,uint256)[], uint256)
func (_UiPoolDataProvider *UiPoolDataProviderCallerSession) GetReservesData(provider common.Address, user common.Address) ([]IUiPoolDataProviderAggregatedReserveData, []IUiPoolDataProviderUserReserveData, *big.Int, error) {
	return _UiPoolDataProvider.Contract.GetReservesData(&_UiPoolDataProvider.CallOpts, provider, user)
}

// UpgradeabilityProxyABI is the input ABI used to generate the binding from.
const UpgradeabilityProxyABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"}]"

// UpgradeabilityProxyBin is the compiled bytecode used for deploying new contracts.
var UpgradeabilityProxyBin = "0x608060405260405161037b38038061037b8339818101604052604081101561002657600080fd5b81516020830180516040519294929383019291908464010000000082111561004d57600080fd5b90830190602082018581111561006257600080fd5b825164010000000081118282018810171561007c57600080fd5b82525081516020918201929091019080838360005b838110156100a9578181015183820152602001610091565b50505050905090810190601f1680156100d65780820380516001836020036101000a031916815260200191505b50604052506100e3915050565b6100ec826101ab565b8051156101a4576000826001600160a01b0316826040518082805190602001908083835b6020831061012f5780518252601f199092019160209182019101610110565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d806000811461018f576040519150601f19603f3d011682016040523d82523d6000602084013e610194565b606091505b50509050806101a257600080fd5b505b5050610259565b6101be8161021d60201b6100201760201c565b6101f95760405162461bcd60e51b815260040180806020018281038252603b815260200180610340603b913960400191505060405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061025157508115155b949350505050565b60d9806102676000396000f3fe6080604052600a600c565b005b6012601e565b601e601a605b565b6080565b565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590605357508115155b949350505050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b3660008037600080366000845af43d6000803e808015609e573d6000f35b3d6000fdfea2646970667358221220b63a46c8d24b7b2d59c46f67ab42d2367dc8a0ad87dfe6c2367c0418b42f4afb64736f6c634300060c003343616e6e6f742073657420612070726f787920696d706c656d656e746174696f6e20746f2061206e6f6e2d636f6e74726163742061646472657373"

// DeployUpgradeabilityProxy deploys a new Ethereum contract, binding an instance of UpgradeabilityProxy to it.
func DeployUpgradeabilityProxy(auth *bind.TransactOpts, backend bind.ContractBackend, _logic common.Address, _data []byte) (common.Address, *types.Transaction, *UpgradeabilityProxy, error) {
	parsed, err := abi.JSON(strings.NewReader(UpgradeabilityProxyABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(UpgradeabilityProxyBin), backend, _logic, _data)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &UpgradeabilityProxy{UpgradeabilityProxyCaller: UpgradeabilityProxyCaller{contract: contract}, UpgradeabilityProxyTransactor: UpgradeabilityProxyTransactor{contract: contract}, UpgradeabilityProxyFilterer: UpgradeabilityProxyFilterer{contract: contract}}, nil
}

// UpgradeabilityProxy is an auto generated Go binding around an Ethereum contract.
type UpgradeabilityProxy struct {
	UpgradeabilityProxyCaller     // Read-only binding to the contract
	UpgradeabilityProxyTransactor // Write-only binding to the contract
	UpgradeabilityProxyFilterer   // Log filterer for contract events
}

// UpgradeabilityProxyCaller is an auto generated read-only Go binding around an Ethereum contract.
type UpgradeabilityProxyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UpgradeabilityProxyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type UpgradeabilityProxyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UpgradeabilityProxyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type UpgradeabilityProxyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UpgradeabilityProxySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type UpgradeabilityProxySession struct {
	Contract     *UpgradeabilityProxy // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// UpgradeabilityProxyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type UpgradeabilityProxyCallerSession struct {
	Contract *UpgradeabilityProxyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// UpgradeabilityProxyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type UpgradeabilityProxyTransactorSession struct {
	Contract     *UpgradeabilityProxyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// UpgradeabilityProxyRaw is an auto generated low-level Go binding around an Ethereum contract.
type UpgradeabilityProxyRaw struct {
	Contract *UpgradeabilityProxy // Generic contract binding to access the raw methods on
}

// UpgradeabilityProxyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type UpgradeabilityProxyCallerRaw struct {
	Contract *UpgradeabilityProxyCaller // Generic read-only contract binding to access the raw methods on
}

// UpgradeabilityProxyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type UpgradeabilityProxyTransactorRaw struct {
	Contract *UpgradeabilityProxyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewUpgradeabilityProxy creates a new instance of UpgradeabilityProxy, bound to a specific deployed contract.
func NewUpgradeabilityProxy(address common.Address, backend bind.ContractBackend) (*UpgradeabilityProxy, error) {
	contract, err := bindUpgradeabilityProxy(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &UpgradeabilityProxy{UpgradeabilityProxyCaller: UpgradeabilityProxyCaller{contract: contract}, UpgradeabilityProxyTransactor: UpgradeabilityProxyTransactor{contract: contract}, UpgradeabilityProxyFilterer: UpgradeabilityProxyFilterer{contract: contract}}, nil
}

// NewUpgradeabilityProxyCaller creates a new read-only instance of UpgradeabilityProxy, bound to a specific deployed contract.
func NewUpgradeabilityProxyCaller(address common.Address, caller bind.ContractCaller) (*UpgradeabilityProxyCaller, error) {
	contract, err := bindUpgradeabilityProxy(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &UpgradeabilityProxyCaller{contract: contract}, nil
}

// NewUpgradeabilityProxyTransactor creates a new write-only instance of UpgradeabilityProxy, bound to a specific deployed contract.
func NewUpgradeabilityProxyTransactor(address common.Address, transactor bind.ContractTransactor) (*UpgradeabilityProxyTransactor, error) {
	contract, err := bindUpgradeabilityProxy(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &UpgradeabilityProxyTransactor{contract: contract}, nil
}

// NewUpgradeabilityProxyFilterer creates a new log filterer instance of UpgradeabilityProxy, bound to a specific deployed contract.
func NewUpgradeabilityProxyFilterer(address common.Address, filterer bind.ContractFilterer) (*UpgradeabilityProxyFilterer, error) {
	contract, err := bindUpgradeabilityProxy(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &UpgradeabilityProxyFilterer{contract: contract}, nil
}

// bindUpgradeabilityProxy binds a generic wrapper to an already deployed contract.
func bindUpgradeabilityProxy(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(UpgradeabilityProxyABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UpgradeabilityProxy *UpgradeabilityProxyRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _UpgradeabilityProxy.Contract.UpgradeabilityProxyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UpgradeabilityProxy *UpgradeabilityProxyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UpgradeabilityProxy.Contract.UpgradeabilityProxyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UpgradeabilityProxy *UpgradeabilityProxyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UpgradeabilityProxy.Contract.UpgradeabilityProxyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UpgradeabilityProxy *UpgradeabilityProxyCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _UpgradeabilityProxy.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UpgradeabilityProxy *UpgradeabilityProxyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UpgradeabilityProxy.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UpgradeabilityProxy *UpgradeabilityProxyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UpgradeabilityProxy.Contract.contract.Transact(opts, method, params...)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_UpgradeabilityProxy *UpgradeabilityProxyTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _UpgradeabilityProxy.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_UpgradeabilityProxy *UpgradeabilityProxySession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _UpgradeabilityProxy.Contract.Fallback(&_UpgradeabilityProxy.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_UpgradeabilityProxy *UpgradeabilityProxyTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _UpgradeabilityProxy.Contract.Fallback(&_UpgradeabilityProxy.TransactOpts, calldata)
}

// UpgradeabilityProxyUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the UpgradeabilityProxy contract.
type UpgradeabilityProxyUpgradedIterator struct {
	Event *UpgradeabilityProxyUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UpgradeabilityProxyUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UpgradeabilityProxyUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UpgradeabilityProxyUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UpgradeabilityProxyUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UpgradeabilityProxyUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UpgradeabilityProxyUpgraded represents a Upgraded event raised by the UpgradeabilityProxy contract.
type UpgradeabilityProxyUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_UpgradeabilityProxy *UpgradeabilityProxyFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*UpgradeabilityProxyUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _UpgradeabilityProxy.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &UpgradeabilityProxyUpgradedIterator{contract: _UpgradeabilityProxy.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_UpgradeabilityProxy *UpgradeabilityProxyFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *UpgradeabilityProxyUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _UpgradeabilityProxy.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UpgradeabilityProxyUpgraded)
				if err := _UpgradeabilityProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_UpgradeabilityProxy *UpgradeabilityProxyFilterer) ParseUpgraded(log types.Log) (*UpgradeabilityProxyUpgraded, error) {
	event := new(UpgradeabilityProxyUpgraded)
	if err := _UpgradeabilityProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// UserConfigurationABI is the input ABI used to generate the binding from.
const UserConfigurationABI = "[]"

// UserConfigurationBin is the compiled bytecode used for deploying new contracts.
var UserConfigurationBin = "0x60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205c2f5fdef0e746b418432089e7cb4f50eb1f1e3a1143fed0cc703af1447e0e8a64736f6c634300060c0033"

// DeployUserConfiguration deploys a new Ethereum contract, binding an instance of UserConfiguration to it.
func DeployUserConfiguration(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *UserConfiguration, error) {
	parsed, err := abi.JSON(strings.NewReader(UserConfigurationABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(UserConfigurationBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &UserConfiguration{UserConfigurationCaller: UserConfigurationCaller{contract: contract}, UserConfigurationTransactor: UserConfigurationTransactor{contract: contract}, UserConfigurationFilterer: UserConfigurationFilterer{contract: contract}}, nil
}

// UserConfiguration is an auto generated Go binding around an Ethereum contract.
type UserConfiguration struct {
	UserConfigurationCaller     // Read-only binding to the contract
	UserConfigurationTransactor // Write-only binding to the contract
	UserConfigurationFilterer   // Log filterer for contract events
}

// UserConfigurationCaller is an auto generated read-only Go binding around an Ethereum contract.
type UserConfigurationCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UserConfigurationTransactor is an auto generated write-only Go binding around an Ethereum contract.
type UserConfigurationTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UserConfigurationFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type UserConfigurationFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UserConfigurationSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type UserConfigurationSession struct {
	Contract     *UserConfiguration // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// UserConfigurationCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type UserConfigurationCallerSession struct {
	Contract *UserConfigurationCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// UserConfigurationTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type UserConfigurationTransactorSession struct {
	Contract     *UserConfigurationTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// UserConfigurationRaw is an auto generated low-level Go binding around an Ethereum contract.
type UserConfigurationRaw struct {
	Contract *UserConfiguration // Generic contract binding to access the raw methods on
}

// UserConfigurationCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type UserConfigurationCallerRaw struct {
	Contract *UserConfigurationCaller // Generic read-only contract binding to access the raw methods on
}

// UserConfigurationTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type UserConfigurationTransactorRaw struct {
	Contract *UserConfigurationTransactor // Generic write-only contract binding to access the raw methods on
}

// NewUserConfiguration creates a new instance of UserConfiguration, bound to a specific deployed contract.
func NewUserConfiguration(address common.Address, backend bind.ContractBackend) (*UserConfiguration, error) {
	contract, err := bindUserConfiguration(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &UserConfiguration{UserConfigurationCaller: UserConfigurationCaller{contract: contract}, UserConfigurationTransactor: UserConfigurationTransactor{contract: contract}, UserConfigurationFilterer: UserConfigurationFilterer{contract: contract}}, nil
}

// NewUserConfigurationCaller creates a new read-only instance of UserConfiguration, bound to a specific deployed contract.
func NewUserConfigurationCaller(address common.Address, caller bind.ContractCaller) (*UserConfigurationCaller, error) {
	contract, err := bindUserConfiguration(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &UserConfigurationCaller{contract: contract}, nil
}

// NewUserConfigurationTransactor creates a new write-only instance of UserConfiguration, bound to a specific deployed contract.
func NewUserConfigurationTransactor(address common.Address, transactor bind.ContractTransactor) (*UserConfigurationTransactor, error) {
	contract, err := bindUserConfiguration(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &UserConfigurationTransactor{contract: contract}, nil
}

// NewUserConfigurationFilterer creates a new log filterer instance of UserConfiguration, bound to a specific deployed contract.
func NewUserConfigurationFilterer(address common.Address, filterer bind.ContractFilterer) (*UserConfigurationFilterer, error) {
	contract, err := bindUserConfiguration(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &UserConfigurationFilterer{contract: contract}, nil
}

// bindUserConfiguration binds a generic wrapper to an already deployed contract.
func bindUserConfiguration(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(UserConfigurationABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UserConfiguration *UserConfigurationRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _UserConfiguration.Contract.UserConfigurationCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UserConfiguration *UserConfigurationRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UserConfiguration.Contract.UserConfigurationTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UserConfiguration *UserConfigurationRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UserConfiguration.Contract.UserConfigurationTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UserConfiguration *UserConfigurationCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _UserConfiguration.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UserConfiguration *UserConfigurationTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UserConfiguration.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UserConfiguration *UserConfigurationTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UserConfiguration.Contract.contract.Transact(opts, method, params...)
}

// ValidationLogicABI is the input ABI used to generate the binding from.
const ValidationLogicABI = "[{\"inputs\":[],\"name\":\"REBALANCE_UP_LIQUIDITY_RATE_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REBALANCE_UP_USAGE_RATIO_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// ValidationLogicBin is the compiled bytecode used for deploying new contracts.
var ValidationLogicBin = "0x6120a0610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061009d5760003560e01c8063721a92f911610070578063721a92f9146100fb578063a8695b1d1461010e578063abfcc86a14610121578063d09db04a14610129578063fa0c21491461013c5761009d565b80630eca322b146100a2578063548cad09146100b75780635494eb8a146100ca5780635fa297e5146100e8575b600080fd5b6100b56100b0366004611e80565b61014f565b005b6100b56100c5366004611dd8565b610217565b6100d261050d565b6040516100df919061203b565b60405180910390f35b6100b56100f6366004611d6e565b61051d565b6100b5610109366004611c3c565b6106c2565b6100b561011c366004611e3f565b610ba8565b6100d2610e41565b6100b5610137366004611ce0565b610e47565b6100b561014a366004611ea1565b610fe5565b60008061015b8461112b565b50506040805180820190915260018152603160f81b60208201529193509150836101a15760405162461bcd60e51b81526004016101989190611f70565b60405180910390fd5b506040805180820190915260018152601960f91b6020820152826101d85760405162461bcd60e51b81526004016101989190611f70565b506040805180820190915260018152603360f81b602082015281156102105760405162461bcd60e51b81526004016101989190611f70565b5050505050565b60006102228661112b565b505050905080604051806040016040528060018152602001601960f91b815250906102605760405162461bcd60e51b81526004016101989190611f70565b506000610356610351856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156102a257600080fd5b505afa1580156102b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102da9190611eff565b876001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561031357600080fd5b505afa158015610327573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034b9190611eff565b90611163565b611191565b905060006103d9876001600160a01b03166370a08231866040518263ffffffff1660e01b81526004016103899190611f17565b60206040518083038186803b1580156103a157600080fd5b505afa1580156103b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103519190611eff565b9050600082156103fc576103f76103f08385611163565b84906111e1565b6103ff565b60005b60028a015460078b0154604080516380031e3760e01b815290519394506fffffffffffffffffffffffffffffffff909216926000926001600160a01b03909216916380031e37916004808301926020929190829003018186803b15801561046557600080fd5b505afa158015610479573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049d9190611eff565b90506b0311d253316c79d37600000083101580156104c657506104c281610fa061128c565b8211155b60405180604001604052806002815260200161191960f11b815250906104ff5760405162461bcd60e51b81526004016101989190611f70565b505050505050505050505050565b6b0311d253316c79d37600000081565b6004808901546040516370a0823160e01b81526000926001600160a01b03909216916370a082319161055191339101611f17565b60206040518083038186803b15801561056957600080fd5b505afa15801561057d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a19190611eff565b90506000811160405180604001604052806002815260200161313960f01b815250906105e05760405162461bcd60e51b81526004016101989190611f70565b50868061067d5750604051633985c10960e21b815273__$a872879373de5e6d0c13a5337f6761f341$__9063e61704249061062d908b90339086908c908c908c908c908c90600401611f2b565b60206040518083038186803b15801561064557600080fd5b505af4158015610659573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067d9190611d52565b60405180604001604052806002815260200161032360f41b815250906106b65760405162461bcd60e51b81526004016101989190611f70565b50505050505050505050565b6106ca611b0c565b6106d38c61112b565b1515610220850152151561020084015215156101e083015215156101c082018190526040805180820190915260018152601960f91b60208201529061072b5760405162461bcd60e51b81526004016101989190611f70565b50806101e0015115604051806040016040528060018152602001603360f81b8152509061076b5760405162461bcd60e51b81526004016101989190611f70565b506040805180820190915260018152603160f81b60208201528a6107a25760405162461bcd60e51b81526004016101989190611f70565b50806102000151604051806040016040528060018152602001603760f81b815250906107e15760405162461bcd60e51b81526004016101989190611f70565b5087600214806107f15750876001145b604051806040016040528060018152602001600760fb1b815250906108295760405162461bcd60e51b81526004016101989190611f70565b50604080516020810190915285548152610849908c9088908787876112fe565b61016086015260408086019190915260208086019290925260c085019290925260a08401839052815180830190925260018252603960f81b90820152906108a35760405162461bcd60e51b81526004016101989190611f70565b50670de0b6b3a76400008161016001511160405180604001604052806002815260200161031360f41b815250906108ed5760405162461bcd60e51b81526004016101989190611f70565b50610913816020015161090d8b8460c0015161116390919063ffffffff16565b906117c5565b6080820181905260a0820151604080518082019091526002815261313160f01b60208201529111156109585760405162461bcd60e51b81526004016101989190611f70565b506001816101800151600281111561096c57fe5b1415610b995780610220015160405180604001604052806002815260200161189960f11b815250906109b15760405162461bcd60e51b81526004016101989190611f70565b5060078c01546040805160208101909152865481526109d991600160a01b900460ff16611853565b15806109eb57506109e98c6118ab565b155b80610a7557506004808d01546040516370a0823160e01b81526001600160a01b03909116916370a0823191610a22918f9101611f17565b60206040518083038186803b158015610a3a57600080fd5b505afa158015610a4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a729190611eff565b8a115b60405180604001604052806002815260200161313360f01b81525090610aae5760405162461bcd60e51b81526004016101989190611f70565b508c6001600160a01b03166370a082318d60040160009054906101000a90046001600160a01b03166040518263ffffffff1660e01b8152600401610af29190611f17565b60206040518083038186803b158015610b0a57600080fd5b505afa158015610b1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b429190611eff565b6101208201819052600090610b57908961128c565b9050808b1115604051806040016040528060028152602001610c4d60f21b81525090610b965760405162461bcd60e51b81526004016101989190611f70565b50505b50505050505050505050505050565b60008080610bb58861112b565b9350509250925082604051806040016040528060018152602001601960f91b81525090610bf55760405162461bcd60e51b81526004016101989190611f70565b506040805180820190915260018152603360f81b60208201528215610c2d5760405162461bcd60e51b81526004016101989190611f70565b506001846002811115610c3c57fe5b1415610c7f57604080518082019091526002815261313760f01b602082015286610c795760405162461bcd60e51b81526004016101989190611f70565b50610e37565b6002846002811115610c8d57fe5b1415610e0857604080518082019091526002815261062760f31b602082015285610cca5760405162461bcd60e51b81526004016101989190611f70565b50604080518082019091526002815261189960f11b602082015281610d025760405162461bcd60e51b81526004016101989190611f70565b506007880154604080516020810190915288548152610d2a91600160a01b900460ff16611853565b1580610d3c5750610d3a886118ab565b155b80610dcf57506004808901546040516370a0823160e01b81526001600160a01b03909116916370a0823191610d7391339101611f17565b60206040518083038186803b158015610d8b57600080fd5b505afa158015610d9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc39190611eff565b610dcd8787611163565b115b60405180604001604052806002815260200161313360f01b81525090610c795760405162461bcd60e51b81526004016101989190611f70565b60408051808201825260018152600760fb1b6020820152905162461bcd60e51b81526101989190600401611f70565b5050505050505050565b610fa081565b6040805180820190915260018152603160f81b602082015287610e7d5760405162461bcd60e51b81526004016101989190611f70565b506040805180820190915260018152603560f81b602082015286881115610eb75760405162461bcd60e51b81526004016101989190611f70565b506001600160a01b0388166000908152602086905260408120610ed99061112b565b505050905080604051806040016040528060018152602001601960f91b81525090610f175760405162461bcd60e51b81526004016101989190611f70565b50604051633985c10960e21b815273__$a872879373de5e6d0c13a5337f6761f341$__9063e617042490610f5d908c9033908d908c908c908c908c908c90600401611f2b565b60206040518083038186803b158015610f7557600080fd5b505af4158015610f89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fad9190611d52565b604051806040016040528060018152602001601b60f91b815250906106b65760405162461bcd60e51b81526004016101989190611f70565b6000610ff0876118b3565b905080604051806040016040528060018152602001601960f91b8152509061102b5760405162461bcd60e51b81526004016101989190611f70565b506040805180820190915260018152603160f81b6020820152866110625760405162461bcd60e51b81526004016101989190611f70565b5060008311801561107e5750600185600281111561107c57fe5b145b8061109f575060008211801561109f5750600285600281111561109d57fe5b145b60405180604001604052806002815260200161313560f01b815250906110d85760405162461bcd60e51b81526004016101989190611f70565b50600019861415806110f25750336001600160a01b038516145b60405180604001604052806002815260200161189b60f11b81525090610e375760405162461bcd60e51b81526004016101989190611f70565b54600160381b811615159167020000000000000082161515916704000000000000008116151591670800000000000000909116151590565b6000828201838110156111885760405162461bcd60e51b815260040161019890611fc3565b90505b92915050565b6000633b9aca0082810290839082041460405180604001604052806002815260200161068760f31b815250906111da5760405162461bcd60e51b81526004016101989190611f70565b5092915050565b604080518082019091526002815261035360f41b60208201526000908261121b5760405162461bcd60e51b81526004016101989190611f70565b5060408051808201909152600280825261068760f31b60208301528304906b033b2e3c9fd0803ce80000008219048511156112695760405162461bcd60e51b81526004016101989190611f70565b5082816b033b2e3c9fd0803ce80000008602018161128357fe5b04949350505050565b6000821580611299575081155b156112a65750600061118b565b8161138819816112b257fe5b0483111560405180604001604052806002815260200161068760f31b815250906112ef5760405162461bcd60e51b81526004016101989190611f70565b50506127109102611388010490565b600080600080600061130e611ba2565b6113178a6118bf565b156113355760008060008060001995509550955095509550506117b7565b600060e08201525b878160e0015110156117165760e0810151611359908b906118c4565b61136257611706565b60e0810151600090815260208a81526040808320546001600160a01b03166101e085018190528352908d9052902061139981611915565b506080860181905260c08601929092525060a0840191909152600a0a60208301526101e082015160405163b3596f0760e01b81526001600160a01b038a169163b3596f07916113eb9190600401611f17565b60206040518083038186803b15801561140357600080fd5b505afa158015611417573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143b9190611eff565b825260c08201511580159061145b575060e082015161145b908c90611853565b1561157f578060040160009054906101000a90046001600160a01b03166001600160a01b03166370a082318e6040518263ffffffff1660e01b81526004016114a39190611f17565b60206040518083038186803b1580156114bb57600080fd5b505afa1580156114cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f39190611eff565b6040830181905260208301518351600092611518929161151291611940565b9061197a565b61012084015190915061152b9082611163565b61012084015260a083015161155190611545908390611940565b61016085015190611163565b61016084015260c08301516115779061156b908390611940565b61018085015190611163565b610180840152505b60e082015161158f908c906119bc565b15611704578060050160009054906101000a90046001600160a01b03166001600160a01b03166370a082318e6040518263ffffffff1660e01b81526004016115d79190611f17565b60206040518083038186803b1580156115ef57600080fd5b505afa158015611603573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116279190611eff565b8260600181815250506116d18160060160009054906101000a90046001600160a01b03166001600160a01b03166370a082318f6040518263ffffffff1660e01b81526004016116769190611f17565b60206040518083038186803b15801561168e57600080fd5b505afa1580156116a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c69190611eff565b606084015190611163565b60608301819052602083015183516116fd926116f1929161151291611940565b61014084015190611163565b6101408301525b505b60e081018051600101905261133d565b60008161012001511161172a57600061173f565b61012081015161016082015161173f9161197a565b61016082015261012081015161175657600061176b565b61012081015161018082015161176b9161197a565b610180820181905261012082015161014083015161178892611a0d565b610100820181905261012082015161014083015161016084015161018090940151919850965091945090925090505b965096509650965096915050565b604080518082019091526002815261035360f41b6020820152600090826117ff5760405162461bcd60e51b81526004016101989190611f70565b5060408051808201909152600280825261068760f31b60208301528304906127108219048511156118435760405162461bcd60e51b81526004016101989190611f70565b5082816127108602018161128357fe5b60006080821060405180604001604052806002815260200161373760f01b815250906118925760405162461bcd60e51b81526004016101989190611f70565b5050815160016002830281019190911c16151592915050565b5461ffff1690565b54600160381b16151590565b511590565b60006080821060405180604001604052806002815260200161373760f01b815250906119035760405162461bcd60e51b81526004016101989190611f70565b50509051600360029092021c16151590565b5461ffff80821692601083901c821692602081901c831692603082901c60ff169260409290921c1690565b60008261194f5750600061118b565b8282028284828161195c57fe5b04146111885760405162461bcd60e51b815260040161019890611ffa565b600061118883836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611a3b565b60006080821060405180604001604052806002815260200161373760f01b815250906119fb5760405162461bcd60e51b81526004016101989190611f70565b50509051600160029092021c16151590565b600082611a1d5750600019611a34565b611a3183611a2b868561128c565b90611a72565b90505b9392505050565b60008183611a5c5760405162461bcd60e51b81526004016101989190611f70565b506000838581611a6857fe5b0495945050505050565b604080518082019091526002815261035360f41b602082015260009082611aac5760405162461bcd60e51b81526004016101989190611f70565b5060408051808201909152600280825261068760f31b6020830152830490670de0b6b3a7640000821904851115611af65760405162461bcd60e51b81526004016101989190611f70565b508281670de0b6b3a76400008602018161128357fe5b60405180610240016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006002811115611b7957fe5b815260006020820181905260408201819052606082018190526080820181905260a09091015290565b604051806102400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160001515815260200160006001600160a01b031681526020016000151581526020016000151581525090565b6000806000806000806000806000806000806101808d8f031215611c5e578788fd5b8c35611c6981612044565b9b5060208d01359a5060408d0135611c8081612044565b995060608d0135985060808d0135975060a08d0135965060c08d0135955060e08d013594506101008d013593506101208d013592506101408d013591506101608d0135611ccc81612044565b809150509295989b509295989b509295989b565b600080600080600080600080610100898b031215611cfc578384fd5b8835611d0781612044565b97506020890135965060408901359550606089013594506080890135935060a0890135925060c0890135915060e0890135611d4181612044565b809150509295985092959890939650565b600060208284031215611d63578081fd5b81516111888161205c565b600080600080600080600080610100898b031215611d8a578384fd5b883597506020890135611d9c81612044565b96506040890135611dac8161205c565b9550606089013594506080890135935060a0890135925060c0890135915060e0890135611d4181612044565b600080600080600060a08688031215611def578081fd5b853594506020860135611e0181612044565b93506040860135611e1181612044565b92506060860135611e2181612044565b91506080860135611e3181612044565b809150509295509295909350565b600080600080600060a08688031215611e56578081fd5b85359450602086013593506040860135925060608601359150608086013560038110611e31578182fd5b60008060408385031215611e92578182fd5b50508035926020909101359150565b60008060008060008060c08789031215611eb9578384fd5b8635955060208701359450604087013560038110611ed5578485fd5b93506060870135611ee581612044565b9598949750929560808101359460a0909101359350915050565b600060208284031215611f10578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6001600160a01b0398891681529688166020880152604087019590955260608601939093529054608085015260a084015260c083015290911660e08201526101000190565b6000602080835283518082850152825b81811015611f9c57858101830151858201604001528201611f80565b81811115611fad5783604083870101525b50601f01601f1916929092016040019392505050565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b90815260200190565b6001600160a01b038116811461205957600080fd5b50565b801515811461205957600080fdfea264697066735822122059d0e2b33c36cff509d17ee7f43a0b14173689ad0ecdbbc8e9255d4bb4ab751864736f6c634300060c0033"

// DeployValidationLogic deploys a new Ethereum contract, binding an instance of ValidationLogic to it.
func DeployValidationLogic(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ValidationLogic, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidationLogicABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	genericLogicAddr, _, _, _ := DeployGenericLogic(auth, backend)
	ValidationLogicBin = strings.Replace(ValidationLogicBin, "__$a872879373de5e6d0c13a5337f6761f341$__", genericLogicAddr.String()[2:], -1)

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ValidationLogicBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidationLogic{ValidationLogicCaller: ValidationLogicCaller{contract: contract}, ValidationLogicTransactor: ValidationLogicTransactor{contract: contract}, ValidationLogicFilterer: ValidationLogicFilterer{contract: contract}}, nil
}

// ValidationLogic is an auto generated Go binding around an Ethereum contract.
type ValidationLogic struct {
	ValidationLogicCaller     // Read-only binding to the contract
	ValidationLogicTransactor // Write-only binding to the contract
	ValidationLogicFilterer   // Log filterer for contract events
}

// ValidationLogicCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidationLogicCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidationLogicTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidationLogicTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidationLogicFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidationLogicFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidationLogicSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidationLogicSession struct {
	Contract     *ValidationLogic  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ValidationLogicCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidationLogicCallerSession struct {
	Contract *ValidationLogicCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// ValidationLogicTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidationLogicTransactorSession struct {
	Contract     *ValidationLogicTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// ValidationLogicRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidationLogicRaw struct {
	Contract *ValidationLogic // Generic contract binding to access the raw methods on
}

// ValidationLogicCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidationLogicCallerRaw struct {
	Contract *ValidationLogicCaller // Generic read-only contract binding to access the raw methods on
}

// ValidationLogicTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidationLogicTransactorRaw struct {
	Contract *ValidationLogicTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidationLogic creates a new instance of ValidationLogic, bound to a specific deployed contract.
func NewValidationLogic(address common.Address, backend bind.ContractBackend) (*ValidationLogic, error) {
	contract, err := bindValidationLogic(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidationLogic{ValidationLogicCaller: ValidationLogicCaller{contract: contract}, ValidationLogicTransactor: ValidationLogicTransactor{contract: contract}, ValidationLogicFilterer: ValidationLogicFilterer{contract: contract}}, nil
}

// NewValidationLogicCaller creates a new read-only instance of ValidationLogic, bound to a specific deployed contract.
func NewValidationLogicCaller(address common.Address, caller bind.ContractCaller) (*ValidationLogicCaller, error) {
	contract, err := bindValidationLogic(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidationLogicCaller{contract: contract}, nil
}

// NewValidationLogicTransactor creates a new write-only instance of ValidationLogic, bound to a specific deployed contract.
func NewValidationLogicTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidationLogicTransactor, error) {
	contract, err := bindValidationLogic(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidationLogicTransactor{contract: contract}, nil
}

// NewValidationLogicFilterer creates a new log filterer instance of ValidationLogic, bound to a specific deployed contract.
func NewValidationLogicFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidationLogicFilterer, error) {
	contract, err := bindValidationLogic(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidationLogicFilterer{contract: contract}, nil
}

// bindValidationLogic binds a generic wrapper to an already deployed contract.
func bindValidationLogic(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidationLogicABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidationLogic *ValidationLogicRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidationLogic.Contract.ValidationLogicCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidationLogic *ValidationLogicRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidationLogic.Contract.ValidationLogicTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidationLogic *ValidationLogicRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidationLogic.Contract.ValidationLogicTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidationLogic *ValidationLogicCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidationLogic.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidationLogic *ValidationLogicTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidationLogic.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidationLogic *ValidationLogicTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidationLogic.Contract.contract.Transact(opts, method, params...)
}

// REBALANCEUPLIQUIDITYRATETHRESHOLD is a free data retrieval call binding the contract method 0xabfcc86a.
//
// Solidity: function REBALANCE_UP_LIQUIDITY_RATE_THRESHOLD() view returns(uint256)
func (_ValidationLogic *ValidationLogicCaller) REBALANCEUPLIQUIDITYRATETHRESHOLD(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidationLogic.contract.Call(opts, &out, "REBALANCE_UP_LIQUIDITY_RATE_THRESHOLD")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// REBALANCEUPLIQUIDITYRATETHRESHOLD is a free data retrieval call binding the contract method 0xabfcc86a.
//
// Solidity: function REBALANCE_UP_LIQUIDITY_RATE_THRESHOLD() view returns(uint256)
func (_ValidationLogic *ValidationLogicSession) REBALANCEUPLIQUIDITYRATETHRESHOLD() (*big.Int, error) {
	return _ValidationLogic.Contract.REBALANCEUPLIQUIDITYRATETHRESHOLD(&_ValidationLogic.CallOpts)
}

// REBALANCEUPLIQUIDITYRATETHRESHOLD is a free data retrieval call binding the contract method 0xabfcc86a.
//
// Solidity: function REBALANCE_UP_LIQUIDITY_RATE_THRESHOLD() view returns(uint256)
func (_ValidationLogic *ValidationLogicCallerSession) REBALANCEUPLIQUIDITYRATETHRESHOLD() (*big.Int, error) {
	return _ValidationLogic.Contract.REBALANCEUPLIQUIDITYRATETHRESHOLD(&_ValidationLogic.CallOpts)
}

// REBALANCEUPUSAGERATIOTHRESHOLD is a free data retrieval call binding the contract method 0x5494eb8a.
//
// Solidity: function REBALANCE_UP_USAGE_RATIO_THRESHOLD() view returns(uint256)
func (_ValidationLogic *ValidationLogicCaller) REBALANCEUPUSAGERATIOTHRESHOLD(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidationLogic.contract.Call(opts, &out, "REBALANCE_UP_USAGE_RATIO_THRESHOLD")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// REBALANCEUPUSAGERATIOTHRESHOLD is a free data retrieval call binding the contract method 0x5494eb8a.
//
// Solidity: function REBALANCE_UP_USAGE_RATIO_THRESHOLD() view returns(uint256)
func (_ValidationLogic *ValidationLogicSession) REBALANCEUPUSAGERATIOTHRESHOLD() (*big.Int, error) {
	return _ValidationLogic.Contract.REBALANCEUPUSAGERATIOTHRESHOLD(&_ValidationLogic.CallOpts)
}

// REBALANCEUPUSAGERATIOTHRESHOLD is a free data retrieval call binding the contract method 0x5494eb8a.
//
// Solidity: function REBALANCE_UP_USAGE_RATIO_THRESHOLD() view returns(uint256)
func (_ValidationLogic *ValidationLogicCallerSession) REBALANCEUPUSAGERATIOTHRESHOLD() (*big.Int, error) {
	return _ValidationLogic.Contract.REBALANCEUPUSAGERATIOTHRESHOLD(&_ValidationLogic.CallOpts)
}

// VariableDebtTokenABI is the input ABI used to generate the binding from.
const VariableDebtTokenABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"incentivesController\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromUser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BorrowAllowanceDelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEBT_TOKEN_REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL\",\"outputs\":[{\"internalType\":\"contractILendingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNDERLYING_ASSET_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveDelegation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromUser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toUser\",\"type\":\"address\"}],\"name\":\"borrowAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getScaledUserBalanceAndSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"scaledBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scaledTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// VariableDebtTokenBin is the compiled bytecode used for deploying new contracts.
var VariableDebtTokenBin = "0x60e060405260006006553480156200001657600080fd5b5060405162001a0838038062001a08833981810160405260a08110156200003c57600080fd5b815160208301516040808501805191519395929483019291846401000000008211156200006857600080fd5b9083019060208201858111156200007e57600080fd5b82516401000000008111828201881017156200009957600080fd5b82525081516020918201929091019080838360005b83811015620000c8578181015183820152602001620000ae565b50505050905090810190601f168015620000f65780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200011a57600080fd5b9083019060208201858111156200013057600080fd5b82516401000000008111828201881017156200014b57600080fd5b82525081516020918201929091019080838360005b838110156200017a57818101518382015260200162000160565b50505050905090810190601f168015620001a85780820380516001836020036101000a031916815260200191505b5060405260200180519060200190929190505050848484848482826012838360039080519060200190620001de92919062000241565b508251620001f490600490602086019062000241565b506005805460ff90931660ff19909316929092179091556001600160601b0319606091821b811660805297811b881660c0529590951b90951660a05250620002dd98505050505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200028457805160ff1916838001178555620002b4565b82800160010185558215620002b4579182015b82811115620002b457825182559160200191906001019062000297565b50620002c2929150620002c6565b5090565b5b80821115620002c25760008155600101620002c7565b60805160601c60a05160601c60c05160601c6116c862000340600039806106ca52806109515280610a185280610acd5280610dbc5250806106f952806109805280610a9d5280610d71528061110e525080611332528061135952506116c86000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80637535d246116100b8578063b1bf962d1161007c578063b1bf962d146104f0578063b3f1c93d146104f8578063b9a7b62214610534578063c04a8a101461053c578063dd62ed3e14610568578063f5298aca1461059657610142565b80637535d2461461049057806395d89b41146104b4578063a457c2d714610410578063a9059cbb146104bc578063b16a19de146104e857610142565b806323b872dd1161010a57806323b872dd146102835780633118724e146102b9578063313ce567146103f257806339509351146104105780636bd76d241461043c57806370a082311461046a57610142565b806306fdde0314610147578063095ea7b3146101c45780630afbcdc91461020457806318160ddd146102435780631da24f3e1461025d575b600080fd5b61014f6105c8565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610189578181015183820152602001610171565b50505050905090810190601f1680156101b65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101f0600480360360408110156101da57600080fd5b506001600160a01b03813516906020013561065e565b604080519115158252519081900360200190f35b61022a6004803603602081101561021a57600080fd5b50356001600160a01b03166106a6565b6040805192835260208301919091528051918290030190f35b61024b6106c3565b60408051918252519081900360200190f35b61024b6004803603602081101561027357600080fd5b50356001600160a01b0316610794565b6101f06004803603606081101561029957600080fd5b506001600160a01b038135811691602081013590911690604001356107a7565b6103f0600480360360608110156102cf57600080fd5b60ff82351691908101906040810160208201356401000000008111156102f457600080fd5b82018360208201111561030657600080fd5b8035906020019184600183028401116401000000008311171561032857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561037b57600080fd5b82018360208201111561038d57600080fd5b803590602001918460018302840111640100000000831117156103af57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506107ef945050505050565b005b6103fa6108aa565b6040805160ff9092168252519081900360200190f35b6101f06004803603604081101561042657600080fd5b506001600160a01b0381351690602001356108b3565b61024b6004803603604081101561045257600080fd5b506001600160a01b0381358116916020013516610902565b61024b6004803603602081101561048057600080fd5b50356001600160a01b031661092f565b610498610a16565b604080516001600160a01b039092168252519081900360200190f35b61014f610a3a565b6101f0600480360360408110156104d257600080fd5b506001600160a01b0381351690602001356107a7565b610498610a9b565b61024b610abf565b6101f06004803603608081101561050e57600080fd5b506001600160a01b03813581169160208101359091169060408101359060600135610ac9565b61024b610cfb565b6103f06004803603604081101561055257600080fd5b506001600160a01b038135169060200135610d00565b61024b6004803603604081101561057e57600080fd5b506001600160a01b03813581169160200135166108b3565b6103f0600480360360608110156105ac57600080fd5b506001600160a01b038135169060208101359060400135610dba565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106545780601f1061062957610100808354040283529160200191610654565b820191906000526020600020905b81548152906001019060200180831161063757829003601f168201915b5050505050905090565b6040805162461bcd60e51b81526020600482015260166024820152751054141493d5905317d393d517d4d5541413d495115160521b6044820152905160009181900360640190fd5b6000806106b283610f67565b6106ba610f82565b91509150915091565b600061078f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663386497fd7f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561075557600080fd5b505afa158015610769573d6000803e3d6000fd5b505050506040513d602081101561077f57600080fd5b5051610789610f82565b90610f88565b905090565b600061079f82610f67565b90505b919050565b6040805162461bcd60e51b81526020600482015260166024820152751514905394d1915497d393d517d4d5541413d495115160521b6044820152905160009181900360640190fd5b60006107f9611046565b60075490915060ff1680610810575061081061104b565b8061081c575060065481115b6108575760405162461bcd60e51b815260040180806020018281038252602e815260200180611644602e913960400191505060405180910390fd5b60075460ff16158015610877576007805460ff1916600117905560068290555b61088084611051565b61088983611068565b6108928561107b565b80156108a3576007805460ff191690555b5050505050565b60055460ff1690565b6040805162461bcd60e51b815260206004820152601760248201527f414c4c4f57414e43455f4e4f545f535550504f525445440000000000000000006044820152905160009181900360640190fd5b6001600160a01b038083166000908152603a60209081526040808320938516835292905220545b92915050565b60008061093b83610f67565b90508061094c5760009150506107a2565b610a0f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663386497fd7f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156109dc57600080fd5b505afa1580156109f0573d6000803e3d6000fd5b505050506040513d6020811015610a0657600080fd5b50518290610f88565b9392505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106545780601f1061062957610100808354040283529160200191610654565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061078f610f82565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610afd611091565b6001600160a01b03161460405180604001604052806002815260200161323960f01b81525090610bab5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610b70578181015183820152602001610b58565b50505050905090810190601f168015610b9d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50836001600160a01b0316856001600160a01b031614610bd057610bd0848685611095565b6000610bdb85610f67565b90506000610be98585611172565b6040805180820190915260028152611a9b60f11b602082015290915081610c515760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b70578181015183820152602001610b58565b50610c5c8682611279565b6040805186815290516001600160a01b038816916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3856001600160a01b0316876001600160a01b03167f2f00e3cdd69a77be7ed215ec7b2a36784dd158f921fca79ac29deffa353fe6ee8787604051808381526020018281526020019250505060405180910390a3501595945050505050565b600181565b80603a6000610d0d611091565b6001600160a01b0390811682526020808301939093526040918201600090812091871680825291909352912091909155610d45611091565b6001600160a01b03167fda919360433220e13b51e8c211e490d148e61a3bd53de8c097194e458b97f3e17f00000000000000000000000000000000000000000000000000000000000000008460405180836001600160a01b031681526020018281526020019250505060405180910390a35050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610dec611091565b6001600160a01b03161460405180604001604052806002815260200161323960f01b81525090610e5d5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b70578181015183820152602001610b58565b506000610e6a8383611172565b60408051808201909152600281526106a760f31b602082015290915081610ed25760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b70578181015183820152602001610b58565b50610edd84826113f5565b6040805184815290516000916001600160a01b038716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3604080518481526020810184905281516001600160a01b038716927f49995e5dd6158cf69ad3e9777c46755a1a826a446c6416992167462dad033b2a928290030190a250505050565b6001600160a01b031660009081526020819052604090205490565b60025490565b6000821580610f95575081155b15610fa257506000610929565b816b019d971e4fe8401e740000001981610fb857fe5b0483111560405180604001604052806002815260200161068760f31b815250906110235760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b70578181015183820152602001610b58565b50506b033b2e3c9fd0803ce800000091026b019d971e4fe8401e74000000010490565b600190565b303b1590565b805161106490600390602084019061158e565b5050565b805161106490600490602084019061158e565b6005805460ff191660ff92909216919091179055565b3390565b6040805180820182526002815261353960f01b6020808301919091526001600160a01b038087166000908152603a835284812091871681529152918220546110de918490611493565b6001600160a01b038086166000818152603a602090815260408083208986168085529083529281902086905580517f000000000000000000000000000000000000000000000000000000000000000090951685529084018590528051949550909391927fda919360433220e13b51e8c211e490d148e61a3bd53de8c097194e458b97f3e1929081900390910190a350505050565b604080518082019091526002815261035360f41b6020820152600090826111da5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b70578181015183820152602001610b58565b5060408051808201909152600280825261068760f31b60208301528304906b033b2e3c9fd0803ce80000008219048511156112565760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b70578181015183820152602001610b58565b5082816b033b2e3c9fd0803ce80000008602018161127057fe5b04949350505050565b6001600160a01b0382166112d4576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6112e0600083836114ed565b6002546112ed81836114f2565b6002556001600160a01b03831660009081526020819052604090205461131381846114f2565b6001600160a01b038086166000908152602081905260409020919091557f000000000000000000000000000000000000000000000000000000000000000016156113ef577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166331873e2e8584846040518463ffffffff1660e01b815260040180846001600160a01b031681526020018381526020018281526020019350505050600060405180830381600087803b1580156113d657600080fd5b505af11580156113ea573d6000803e3d6000fd5b505050505b50505050565b6001600160a01b03821661143a5760405162461bcd60e51b81526004018080602001828103825260218152602001806116726021913960400191505060405180910390fd5b611446826000836114ed565b600254611453818361154c565b6002556001600160a01b03831660009081526020818152604091829020548251606081019093526022808452909261131392869290611622908301398391905b600081848411156114e55760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b70578181015183820152602001610b58565b505050900390565b505050565b600082820183811015610a0f576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000610a0f83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611493565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106115cf57805160ff19168380011785556115fc565b828001600101855582156115fc579182015b828111156115fc5782518255916020019190600101906115e1565b5061160892915061160c565b5090565b5b80821115611608576000815560010161160d56fe45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a656445524332303a206275726e2066726f6d20746865207a65726f2061646472657373a2646970667358221220db5816d76af2e3038bd82c9348166da58f0ecabf19cc160ead3a0c8b1bdbaa0664736f6c634300060c0033"

// DeployVariableDebtToken deploys a new Ethereum contract, binding an instance of VariableDebtToken to it.
func DeployVariableDebtToken(auth *bind.TransactOpts, backend bind.ContractBackend, pool common.Address, underlyingAsset common.Address, name string, symbol string, incentivesController common.Address) (common.Address, *types.Transaction, *VariableDebtToken, error) {
	parsed, err := abi.JSON(strings.NewReader(VariableDebtTokenABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(VariableDebtTokenBin), backend, pool, underlyingAsset, name, symbol, incentivesController)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &VariableDebtToken{VariableDebtTokenCaller: VariableDebtTokenCaller{contract: contract}, VariableDebtTokenTransactor: VariableDebtTokenTransactor{contract: contract}, VariableDebtTokenFilterer: VariableDebtTokenFilterer{contract: contract}}, nil
}

// VariableDebtToken is an auto generated Go binding around an Ethereum contract.
type VariableDebtToken struct {
	VariableDebtTokenCaller     // Read-only binding to the contract
	VariableDebtTokenTransactor // Write-only binding to the contract
	VariableDebtTokenFilterer   // Log filterer for contract events
}

// VariableDebtTokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type VariableDebtTokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VariableDebtTokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type VariableDebtTokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VariableDebtTokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type VariableDebtTokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VariableDebtTokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type VariableDebtTokenSession struct {
	Contract     *VariableDebtToken // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// VariableDebtTokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type VariableDebtTokenCallerSession struct {
	Contract *VariableDebtTokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// VariableDebtTokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type VariableDebtTokenTransactorSession struct {
	Contract     *VariableDebtTokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// VariableDebtTokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type VariableDebtTokenRaw struct {
	Contract *VariableDebtToken // Generic contract binding to access the raw methods on
}

// VariableDebtTokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type VariableDebtTokenCallerRaw struct {
	Contract *VariableDebtTokenCaller // Generic read-only contract binding to access the raw methods on
}

// VariableDebtTokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type VariableDebtTokenTransactorRaw struct {
	Contract *VariableDebtTokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewVariableDebtToken creates a new instance of VariableDebtToken, bound to a specific deployed contract.
func NewVariableDebtToken(address common.Address, backend bind.ContractBackend) (*VariableDebtToken, error) {
	contract, err := bindVariableDebtToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &VariableDebtToken{VariableDebtTokenCaller: VariableDebtTokenCaller{contract: contract}, VariableDebtTokenTransactor: VariableDebtTokenTransactor{contract: contract}, VariableDebtTokenFilterer: VariableDebtTokenFilterer{contract: contract}}, nil
}

// NewVariableDebtTokenCaller creates a new read-only instance of VariableDebtToken, bound to a specific deployed contract.
func NewVariableDebtTokenCaller(address common.Address, caller bind.ContractCaller) (*VariableDebtTokenCaller, error) {
	contract, err := bindVariableDebtToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &VariableDebtTokenCaller{contract: contract}, nil
}

// NewVariableDebtTokenTransactor creates a new write-only instance of VariableDebtToken, bound to a specific deployed contract.
func NewVariableDebtTokenTransactor(address common.Address, transactor bind.ContractTransactor) (*VariableDebtTokenTransactor, error) {
	contract, err := bindVariableDebtToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &VariableDebtTokenTransactor{contract: contract}, nil
}

// NewVariableDebtTokenFilterer creates a new log filterer instance of VariableDebtToken, bound to a specific deployed contract.
func NewVariableDebtTokenFilterer(address common.Address, filterer bind.ContractFilterer) (*VariableDebtTokenFilterer, error) {
	contract, err := bindVariableDebtToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &VariableDebtTokenFilterer{contract: contract}, nil
}

// bindVariableDebtToken binds a generic wrapper to an already deployed contract.
func bindVariableDebtToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(VariableDebtTokenABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_VariableDebtToken *VariableDebtTokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _VariableDebtToken.Contract.VariableDebtTokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_VariableDebtToken *VariableDebtTokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VariableDebtToken.Contract.VariableDebtTokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_VariableDebtToken *VariableDebtTokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _VariableDebtToken.Contract.VariableDebtTokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_VariableDebtToken *VariableDebtTokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _VariableDebtToken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_VariableDebtToken *VariableDebtTokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VariableDebtToken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_VariableDebtToken *VariableDebtTokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _VariableDebtToken.Contract.contract.Transact(opts, method, params...)
}

// DEBTTOKENREVISION is a free data retrieval call binding the contract method 0xb9a7b622.
//
// Solidity: function DEBT_TOKEN_REVISION() view returns(uint256)
func (_VariableDebtToken *VariableDebtTokenCaller) DEBTTOKENREVISION(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _VariableDebtToken.contract.Call(opts, &out, "DEBT_TOKEN_REVISION")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DEBTTOKENREVISION is a free data retrieval call binding the contract method 0xb9a7b622.
//
// Solidity: function DEBT_TOKEN_REVISION() view returns(uint256)
func (_VariableDebtToken *VariableDebtTokenSession) DEBTTOKENREVISION() (*big.Int, error) {
	return _VariableDebtToken.Contract.DEBTTOKENREVISION(&_VariableDebtToken.CallOpts)
}

// DEBTTOKENREVISION is a free data retrieval call binding the contract method 0xb9a7b622.
//
// Solidity: function DEBT_TOKEN_REVISION() view returns(uint256)
func (_VariableDebtToken *VariableDebtTokenCallerSession) DEBTTOKENREVISION() (*big.Int, error) {
	return _VariableDebtToken.Contract.DEBTTOKENREVISION(&_VariableDebtToken.CallOpts)
}

// POOL is a free data retrieval call binding the contract method 0x7535d246.
//
// Solidity: function POOL() view returns(address)
func (_VariableDebtToken *VariableDebtTokenCaller) POOL(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _VariableDebtToken.contract.Call(opts, &out, "POOL")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// POOL is a free data retrieval call binding the contract method 0x7535d246.
//
// Solidity: function POOL() view returns(address)
func (_VariableDebtToken *VariableDebtTokenSession) POOL() (common.Address, error) {
	return _VariableDebtToken.Contract.POOL(&_VariableDebtToken.CallOpts)
}

// POOL is a free data retrieval call binding the contract method 0x7535d246.
//
// Solidity: function POOL() view returns(address)
func (_VariableDebtToken *VariableDebtTokenCallerSession) POOL() (common.Address, error) {
	return _VariableDebtToken.Contract.POOL(&_VariableDebtToken.CallOpts)
}

// UNDERLYINGASSETADDRESS is a free data retrieval call binding the contract method 0xb16a19de.
//
// Solidity: function UNDERLYING_ASSET_ADDRESS() view returns(address)
func (_VariableDebtToken *VariableDebtTokenCaller) UNDERLYINGASSETADDRESS(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _VariableDebtToken.contract.Call(opts, &out, "UNDERLYING_ASSET_ADDRESS")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// UNDERLYINGASSETADDRESS is a free data retrieval call binding the contract method 0xb16a19de.
//
// Solidity: function UNDERLYING_ASSET_ADDRESS() view returns(address)
func (_VariableDebtToken *VariableDebtTokenSession) UNDERLYINGASSETADDRESS() (common.Address, error) {
	return _VariableDebtToken.Contract.UNDERLYINGASSETADDRESS(&_VariableDebtToken.CallOpts)
}

// UNDERLYINGASSETADDRESS is a free data retrieval call binding the contract method 0xb16a19de.
//
// Solidity: function UNDERLYING_ASSET_ADDRESS() view returns(address)
func (_VariableDebtToken *VariableDebtTokenCallerSession) UNDERLYINGASSETADDRESS() (common.Address, error) {
	return _VariableDebtToken.Contract.UNDERLYINGASSETADDRESS(&_VariableDebtToken.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_VariableDebtToken *VariableDebtTokenCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _VariableDebtToken.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_VariableDebtToken *VariableDebtTokenSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _VariableDebtToken.Contract.Allowance(&_VariableDebtToken.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_VariableDebtToken *VariableDebtTokenCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _VariableDebtToken.Contract.Allowance(&_VariableDebtToken.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address user) view returns(uint256)
func (_VariableDebtToken *VariableDebtTokenCaller) BalanceOf(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _VariableDebtToken.contract.Call(opts, &out, "balanceOf", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address user) view returns(uint256)
func (_VariableDebtToken *VariableDebtTokenSession) BalanceOf(user common.Address) (*big.Int, error) {
	return _VariableDebtToken.Contract.BalanceOf(&_VariableDebtToken.CallOpts, user)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address user) view returns(uint256)
func (_VariableDebtToken *VariableDebtTokenCallerSession) BalanceOf(user common.Address) (*big.Int, error) {
	return _VariableDebtToken.Contract.BalanceOf(&_VariableDebtToken.CallOpts, user)
}

// BorrowAllowance is a free data retrieval call binding the contract method 0x6bd76d24.
//
// Solidity: function borrowAllowance(address fromUser, address toUser) view returns(uint256)
func (_VariableDebtToken *VariableDebtTokenCaller) BorrowAllowance(opts *bind.CallOpts, fromUser common.Address, toUser common.Address) (*big.Int, error) {
	var out []interface{}
	err := _VariableDebtToken.contract.Call(opts, &out, "borrowAllowance", fromUser, toUser)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BorrowAllowance is a free data retrieval call binding the contract method 0x6bd76d24.
//
// Solidity: function borrowAllowance(address fromUser, address toUser) view returns(uint256)
func (_VariableDebtToken *VariableDebtTokenSession) BorrowAllowance(fromUser common.Address, toUser common.Address) (*big.Int, error) {
	return _VariableDebtToken.Contract.BorrowAllowance(&_VariableDebtToken.CallOpts, fromUser, toUser)
}

// BorrowAllowance is a free data retrieval call binding the contract method 0x6bd76d24.
//
// Solidity: function borrowAllowance(address fromUser, address toUser) view returns(uint256)
func (_VariableDebtToken *VariableDebtTokenCallerSession) BorrowAllowance(fromUser common.Address, toUser common.Address) (*big.Int, error) {
	return _VariableDebtToken.Contract.BorrowAllowance(&_VariableDebtToken.CallOpts, fromUser, toUser)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_VariableDebtToken *VariableDebtTokenCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _VariableDebtToken.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_VariableDebtToken *VariableDebtTokenSession) Decimals() (uint8, error) {
	return _VariableDebtToken.Contract.Decimals(&_VariableDebtToken.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_VariableDebtToken *VariableDebtTokenCallerSession) Decimals() (uint8, error) {
	return _VariableDebtToken.Contract.Decimals(&_VariableDebtToken.CallOpts)
}

// GetScaledUserBalanceAndSupply is a free data retrieval call binding the contract method 0x0afbcdc9.
//
// Solidity: function getScaledUserBalanceAndSupply(address user) view returns(uint256, uint256)
func (_VariableDebtToken *VariableDebtTokenCaller) GetScaledUserBalanceAndSupply(opts *bind.CallOpts, user common.Address) (*big.Int, *big.Int, error) {
	var out []interface{}
	err := _VariableDebtToken.contract.Call(opts, &out, "getScaledUserBalanceAndSupply", user)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// GetScaledUserBalanceAndSupply is a free data retrieval call binding the contract method 0x0afbcdc9.
//
// Solidity: function getScaledUserBalanceAndSupply(address user) view returns(uint256, uint256)
func (_VariableDebtToken *VariableDebtTokenSession) GetScaledUserBalanceAndSupply(user common.Address) (*big.Int, *big.Int, error) {
	return _VariableDebtToken.Contract.GetScaledUserBalanceAndSupply(&_VariableDebtToken.CallOpts, user)
}

// GetScaledUserBalanceAndSupply is a free data retrieval call binding the contract method 0x0afbcdc9.
//
// Solidity: function getScaledUserBalanceAndSupply(address user) view returns(uint256, uint256)
func (_VariableDebtToken *VariableDebtTokenCallerSession) GetScaledUserBalanceAndSupply(user common.Address) (*big.Int, *big.Int, error) {
	return _VariableDebtToken.Contract.GetScaledUserBalanceAndSupply(&_VariableDebtToken.CallOpts, user)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_VariableDebtToken *VariableDebtTokenCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _VariableDebtToken.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_VariableDebtToken *VariableDebtTokenSession) Name() (string, error) {
	return _VariableDebtToken.Contract.Name(&_VariableDebtToken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_VariableDebtToken *VariableDebtTokenCallerSession) Name() (string, error) {
	return _VariableDebtToken.Contract.Name(&_VariableDebtToken.CallOpts)
}

// ScaledBalanceOf is a free data retrieval call binding the contract method 0x1da24f3e.
//
// Solidity: function scaledBalanceOf(address user) view returns(uint256)
func (_VariableDebtToken *VariableDebtTokenCaller) ScaledBalanceOf(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _VariableDebtToken.contract.Call(opts, &out, "scaledBalanceOf", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ScaledBalanceOf is a free data retrieval call binding the contract method 0x1da24f3e.
//
// Solidity: function scaledBalanceOf(address user) view returns(uint256)
func (_VariableDebtToken *VariableDebtTokenSession) ScaledBalanceOf(user common.Address) (*big.Int, error) {
	return _VariableDebtToken.Contract.ScaledBalanceOf(&_VariableDebtToken.CallOpts, user)
}

// ScaledBalanceOf is a free data retrieval call binding the contract method 0x1da24f3e.
//
// Solidity: function scaledBalanceOf(address user) view returns(uint256)
func (_VariableDebtToken *VariableDebtTokenCallerSession) ScaledBalanceOf(user common.Address) (*big.Int, error) {
	return _VariableDebtToken.Contract.ScaledBalanceOf(&_VariableDebtToken.CallOpts, user)
}

// ScaledTotalSupply is a free data retrieval call binding the contract method 0xb1bf962d.
//
// Solidity: function scaledTotalSupply() view returns(uint256)
func (_VariableDebtToken *VariableDebtTokenCaller) ScaledTotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _VariableDebtToken.contract.Call(opts, &out, "scaledTotalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ScaledTotalSupply is a free data retrieval call binding the contract method 0xb1bf962d.
//
// Solidity: function scaledTotalSupply() view returns(uint256)
func (_VariableDebtToken *VariableDebtTokenSession) ScaledTotalSupply() (*big.Int, error) {
	return _VariableDebtToken.Contract.ScaledTotalSupply(&_VariableDebtToken.CallOpts)
}

// ScaledTotalSupply is a free data retrieval call binding the contract method 0xb1bf962d.
//
// Solidity: function scaledTotalSupply() view returns(uint256)
func (_VariableDebtToken *VariableDebtTokenCallerSession) ScaledTotalSupply() (*big.Int, error) {
	return _VariableDebtToken.Contract.ScaledTotalSupply(&_VariableDebtToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_VariableDebtToken *VariableDebtTokenCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _VariableDebtToken.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_VariableDebtToken *VariableDebtTokenSession) Symbol() (string, error) {
	return _VariableDebtToken.Contract.Symbol(&_VariableDebtToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_VariableDebtToken *VariableDebtTokenCallerSession) Symbol() (string, error) {
	return _VariableDebtToken.Contract.Symbol(&_VariableDebtToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_VariableDebtToken *VariableDebtTokenCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _VariableDebtToken.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_VariableDebtToken *VariableDebtTokenSession) TotalSupply() (*big.Int, error) {
	return _VariableDebtToken.Contract.TotalSupply(&_VariableDebtToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_VariableDebtToken *VariableDebtTokenCallerSession) TotalSupply() (*big.Int, error) {
	return _VariableDebtToken.Contract.TotalSupply(&_VariableDebtToken.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_VariableDebtToken *VariableDebtTokenTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _VariableDebtToken.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_VariableDebtToken *VariableDebtTokenSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _VariableDebtToken.Contract.Approve(&_VariableDebtToken.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_VariableDebtToken *VariableDebtTokenTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _VariableDebtToken.Contract.Approve(&_VariableDebtToken.TransactOpts, spender, amount)
}

// ApproveDelegation is a paid mutator transaction binding the contract method 0xc04a8a10.
//
// Solidity: function approveDelegation(address delegatee, uint256 amount) returns()
func (_VariableDebtToken *VariableDebtTokenTransactor) ApproveDelegation(opts *bind.TransactOpts, delegatee common.Address, amount *big.Int) (*types.Transaction, error) {
	return _VariableDebtToken.contract.Transact(opts, "approveDelegation", delegatee, amount)
}

// ApproveDelegation is a paid mutator transaction binding the contract method 0xc04a8a10.
//
// Solidity: function approveDelegation(address delegatee, uint256 amount) returns()
func (_VariableDebtToken *VariableDebtTokenSession) ApproveDelegation(delegatee common.Address, amount *big.Int) (*types.Transaction, error) {
	return _VariableDebtToken.Contract.ApproveDelegation(&_VariableDebtToken.TransactOpts, delegatee, amount)
}

// ApproveDelegation is a paid mutator transaction binding the contract method 0xc04a8a10.
//
// Solidity: function approveDelegation(address delegatee, uint256 amount) returns()
func (_VariableDebtToken *VariableDebtTokenTransactorSession) ApproveDelegation(delegatee common.Address, amount *big.Int) (*types.Transaction, error) {
	return _VariableDebtToken.Contract.ApproveDelegation(&_VariableDebtToken.TransactOpts, delegatee, amount)
}

// Burn is a paid mutator transaction binding the contract method 0xf5298aca.
//
// Solidity: function burn(address user, uint256 amount, uint256 index) returns()
func (_VariableDebtToken *VariableDebtTokenTransactor) Burn(opts *bind.TransactOpts, user common.Address, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _VariableDebtToken.contract.Transact(opts, "burn", user, amount, index)
}

// Burn is a paid mutator transaction binding the contract method 0xf5298aca.
//
// Solidity: function burn(address user, uint256 amount, uint256 index) returns()
func (_VariableDebtToken *VariableDebtTokenSession) Burn(user common.Address, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _VariableDebtToken.Contract.Burn(&_VariableDebtToken.TransactOpts, user, amount, index)
}

// Burn is a paid mutator transaction binding the contract method 0xf5298aca.
//
// Solidity: function burn(address user, uint256 amount, uint256 index) returns()
func (_VariableDebtToken *VariableDebtTokenTransactorSession) Burn(user common.Address, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _VariableDebtToken.Contract.Burn(&_VariableDebtToken.TransactOpts, user, amount, index)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_VariableDebtToken *VariableDebtTokenTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _VariableDebtToken.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_VariableDebtToken *VariableDebtTokenSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _VariableDebtToken.Contract.DecreaseAllowance(&_VariableDebtToken.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_VariableDebtToken *VariableDebtTokenTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _VariableDebtToken.Contract.DecreaseAllowance(&_VariableDebtToken.TransactOpts, spender, subtractedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_VariableDebtToken *VariableDebtTokenTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _VariableDebtToken.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_VariableDebtToken *VariableDebtTokenSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _VariableDebtToken.Contract.IncreaseAllowance(&_VariableDebtToken.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_VariableDebtToken *VariableDebtTokenTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _VariableDebtToken.Contract.IncreaseAllowance(&_VariableDebtToken.TransactOpts, spender, addedValue)
}

// Initialize is a paid mutator transaction binding the contract method 0x3118724e.
//
// Solidity: function initialize(uint8 decimals, string name, string symbol) returns()
func (_VariableDebtToken *VariableDebtTokenTransactor) Initialize(opts *bind.TransactOpts, decimals uint8, name string, symbol string) (*types.Transaction, error) {
	return _VariableDebtToken.contract.Transact(opts, "initialize", decimals, name, symbol)
}

// Initialize is a paid mutator transaction binding the contract method 0x3118724e.
//
// Solidity: function initialize(uint8 decimals, string name, string symbol) returns()
func (_VariableDebtToken *VariableDebtTokenSession) Initialize(decimals uint8, name string, symbol string) (*types.Transaction, error) {
	return _VariableDebtToken.Contract.Initialize(&_VariableDebtToken.TransactOpts, decimals, name, symbol)
}

// Initialize is a paid mutator transaction binding the contract method 0x3118724e.
//
// Solidity: function initialize(uint8 decimals, string name, string symbol) returns()
func (_VariableDebtToken *VariableDebtTokenTransactorSession) Initialize(decimals uint8, name string, symbol string) (*types.Transaction, error) {
	return _VariableDebtToken.Contract.Initialize(&_VariableDebtToken.TransactOpts, decimals, name, symbol)
}

// Mint is a paid mutator transaction binding the contract method 0xb3f1c93d.
//
// Solidity: function mint(address user, address onBehalfOf, uint256 amount, uint256 index) returns(bool)
func (_VariableDebtToken *VariableDebtTokenTransactor) Mint(opts *bind.TransactOpts, user common.Address, onBehalfOf common.Address, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _VariableDebtToken.contract.Transact(opts, "mint", user, onBehalfOf, amount, index)
}

// Mint is a paid mutator transaction binding the contract method 0xb3f1c93d.
//
// Solidity: function mint(address user, address onBehalfOf, uint256 amount, uint256 index) returns(bool)
func (_VariableDebtToken *VariableDebtTokenSession) Mint(user common.Address, onBehalfOf common.Address, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _VariableDebtToken.Contract.Mint(&_VariableDebtToken.TransactOpts, user, onBehalfOf, amount, index)
}

// Mint is a paid mutator transaction binding the contract method 0xb3f1c93d.
//
// Solidity: function mint(address user, address onBehalfOf, uint256 amount, uint256 index) returns(bool)
func (_VariableDebtToken *VariableDebtTokenTransactorSession) Mint(user common.Address, onBehalfOf common.Address, amount *big.Int, index *big.Int) (*types.Transaction, error) {
	return _VariableDebtToken.Contract.Mint(&_VariableDebtToken.TransactOpts, user, onBehalfOf, amount, index)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_VariableDebtToken *VariableDebtTokenTransactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _VariableDebtToken.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_VariableDebtToken *VariableDebtTokenSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _VariableDebtToken.Contract.Transfer(&_VariableDebtToken.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_VariableDebtToken *VariableDebtTokenTransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _VariableDebtToken.Contract.Transfer(&_VariableDebtToken.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_VariableDebtToken *VariableDebtTokenTransactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _VariableDebtToken.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_VariableDebtToken *VariableDebtTokenSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _VariableDebtToken.Contract.TransferFrom(&_VariableDebtToken.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_VariableDebtToken *VariableDebtTokenTransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _VariableDebtToken.Contract.TransferFrom(&_VariableDebtToken.TransactOpts, sender, recipient, amount)
}

// VariableDebtTokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the VariableDebtToken contract.
type VariableDebtTokenApprovalIterator struct {
	Event *VariableDebtTokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VariableDebtTokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VariableDebtTokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VariableDebtTokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VariableDebtTokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VariableDebtTokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VariableDebtTokenApproval represents a Approval event raised by the VariableDebtToken contract.
type VariableDebtTokenApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_VariableDebtToken *VariableDebtTokenFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*VariableDebtTokenApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _VariableDebtToken.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &VariableDebtTokenApprovalIterator{contract: _VariableDebtToken.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_VariableDebtToken *VariableDebtTokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *VariableDebtTokenApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _VariableDebtToken.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VariableDebtTokenApproval)
				if err := _VariableDebtToken.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_VariableDebtToken *VariableDebtTokenFilterer) ParseApproval(log types.Log) (*VariableDebtTokenApproval, error) {
	event := new(VariableDebtTokenApproval)
	if err := _VariableDebtToken.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VariableDebtTokenBorrowAllowanceDelegatedIterator is returned from FilterBorrowAllowanceDelegated and is used to iterate over the raw logs and unpacked data for BorrowAllowanceDelegated events raised by the VariableDebtToken contract.
type VariableDebtTokenBorrowAllowanceDelegatedIterator struct {
	Event *VariableDebtTokenBorrowAllowanceDelegated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VariableDebtTokenBorrowAllowanceDelegatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VariableDebtTokenBorrowAllowanceDelegated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VariableDebtTokenBorrowAllowanceDelegated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VariableDebtTokenBorrowAllowanceDelegatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VariableDebtTokenBorrowAllowanceDelegatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VariableDebtTokenBorrowAllowanceDelegated represents a BorrowAllowanceDelegated event raised by the VariableDebtToken contract.
type VariableDebtTokenBorrowAllowanceDelegated struct {
	FromUser common.Address
	ToUser   common.Address
	Asset    common.Address
	Amount   *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterBorrowAllowanceDelegated is a free log retrieval operation binding the contract event 0xda919360433220e13b51e8c211e490d148e61a3bd53de8c097194e458b97f3e1.
//
// Solidity: event BorrowAllowanceDelegated(address indexed fromUser, address indexed toUser, address asset, uint256 amount)
func (_VariableDebtToken *VariableDebtTokenFilterer) FilterBorrowAllowanceDelegated(opts *bind.FilterOpts, fromUser []common.Address, toUser []common.Address) (*VariableDebtTokenBorrowAllowanceDelegatedIterator, error) {

	var fromUserRule []interface{}
	for _, fromUserItem := range fromUser {
		fromUserRule = append(fromUserRule, fromUserItem)
	}
	var toUserRule []interface{}
	for _, toUserItem := range toUser {
		toUserRule = append(toUserRule, toUserItem)
	}

	logs, sub, err := _VariableDebtToken.contract.FilterLogs(opts, "BorrowAllowanceDelegated", fromUserRule, toUserRule)
	if err != nil {
		return nil, err
	}
	return &VariableDebtTokenBorrowAllowanceDelegatedIterator{contract: _VariableDebtToken.contract, event: "BorrowAllowanceDelegated", logs: logs, sub: sub}, nil
}

// WatchBorrowAllowanceDelegated is a free log subscription operation binding the contract event 0xda919360433220e13b51e8c211e490d148e61a3bd53de8c097194e458b97f3e1.
//
// Solidity: event BorrowAllowanceDelegated(address indexed fromUser, address indexed toUser, address asset, uint256 amount)
func (_VariableDebtToken *VariableDebtTokenFilterer) WatchBorrowAllowanceDelegated(opts *bind.WatchOpts, sink chan<- *VariableDebtTokenBorrowAllowanceDelegated, fromUser []common.Address, toUser []common.Address) (event.Subscription, error) {

	var fromUserRule []interface{}
	for _, fromUserItem := range fromUser {
		fromUserRule = append(fromUserRule, fromUserItem)
	}
	var toUserRule []interface{}
	for _, toUserItem := range toUser {
		toUserRule = append(toUserRule, toUserItem)
	}

	logs, sub, err := _VariableDebtToken.contract.WatchLogs(opts, "BorrowAllowanceDelegated", fromUserRule, toUserRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VariableDebtTokenBorrowAllowanceDelegated)
				if err := _VariableDebtToken.contract.UnpackLog(event, "BorrowAllowanceDelegated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBorrowAllowanceDelegated is a log parse operation binding the contract event 0xda919360433220e13b51e8c211e490d148e61a3bd53de8c097194e458b97f3e1.
//
// Solidity: event BorrowAllowanceDelegated(address indexed fromUser, address indexed toUser, address asset, uint256 amount)
func (_VariableDebtToken *VariableDebtTokenFilterer) ParseBorrowAllowanceDelegated(log types.Log) (*VariableDebtTokenBorrowAllowanceDelegated, error) {
	event := new(VariableDebtTokenBorrowAllowanceDelegated)
	if err := _VariableDebtToken.contract.UnpackLog(event, "BorrowAllowanceDelegated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VariableDebtTokenBurnIterator is returned from FilterBurn and is used to iterate over the raw logs and unpacked data for Burn events raised by the VariableDebtToken contract.
type VariableDebtTokenBurnIterator struct {
	Event *VariableDebtTokenBurn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VariableDebtTokenBurnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VariableDebtTokenBurn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VariableDebtTokenBurn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VariableDebtTokenBurnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VariableDebtTokenBurnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VariableDebtTokenBurn represents a Burn event raised by the VariableDebtToken contract.
type VariableDebtTokenBurn struct {
	User   common.Address
	Amount *big.Int
	Index  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBurn is a free log retrieval operation binding the contract event 0x49995e5dd6158cf69ad3e9777c46755a1a826a446c6416992167462dad033b2a.
//
// Solidity: event Burn(address indexed user, uint256 amount, uint256 index)
func (_VariableDebtToken *VariableDebtTokenFilterer) FilterBurn(opts *bind.FilterOpts, user []common.Address) (*VariableDebtTokenBurnIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _VariableDebtToken.contract.FilterLogs(opts, "Burn", userRule)
	if err != nil {
		return nil, err
	}
	return &VariableDebtTokenBurnIterator{contract: _VariableDebtToken.contract, event: "Burn", logs: logs, sub: sub}, nil
}

// WatchBurn is a free log subscription operation binding the contract event 0x49995e5dd6158cf69ad3e9777c46755a1a826a446c6416992167462dad033b2a.
//
// Solidity: event Burn(address indexed user, uint256 amount, uint256 index)
func (_VariableDebtToken *VariableDebtTokenFilterer) WatchBurn(opts *bind.WatchOpts, sink chan<- *VariableDebtTokenBurn, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _VariableDebtToken.contract.WatchLogs(opts, "Burn", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VariableDebtTokenBurn)
				if err := _VariableDebtToken.contract.UnpackLog(event, "Burn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurn is a log parse operation binding the contract event 0x49995e5dd6158cf69ad3e9777c46755a1a826a446c6416992167462dad033b2a.
//
// Solidity: event Burn(address indexed user, uint256 amount, uint256 index)
func (_VariableDebtToken *VariableDebtTokenFilterer) ParseBurn(log types.Log) (*VariableDebtTokenBurn, error) {
	event := new(VariableDebtTokenBurn)
	if err := _VariableDebtToken.contract.UnpackLog(event, "Burn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VariableDebtTokenMintIterator is returned from FilterMint and is used to iterate over the raw logs and unpacked data for Mint events raised by the VariableDebtToken contract.
type VariableDebtTokenMintIterator struct {
	Event *VariableDebtTokenMint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VariableDebtTokenMintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VariableDebtTokenMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VariableDebtTokenMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VariableDebtTokenMintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VariableDebtTokenMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VariableDebtTokenMint represents a Mint event raised by the VariableDebtToken contract.
type VariableDebtTokenMint struct {
	From       common.Address
	OnBehalfOf common.Address
	Value      *big.Int
	Index      *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterMint is a free log retrieval operation binding the contract event 0x2f00e3cdd69a77be7ed215ec7b2a36784dd158f921fca79ac29deffa353fe6ee.
//
// Solidity: event Mint(address indexed from, address indexed onBehalfOf, uint256 value, uint256 index)
func (_VariableDebtToken *VariableDebtTokenFilterer) FilterMint(opts *bind.FilterOpts, from []common.Address, onBehalfOf []common.Address) (*VariableDebtTokenMintIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var onBehalfOfRule []interface{}
	for _, onBehalfOfItem := range onBehalfOf {
		onBehalfOfRule = append(onBehalfOfRule, onBehalfOfItem)
	}

	logs, sub, err := _VariableDebtToken.contract.FilterLogs(opts, "Mint", fromRule, onBehalfOfRule)
	if err != nil {
		return nil, err
	}
	return &VariableDebtTokenMintIterator{contract: _VariableDebtToken.contract, event: "Mint", logs: logs, sub: sub}, nil
}

// WatchMint is a free log subscription operation binding the contract event 0x2f00e3cdd69a77be7ed215ec7b2a36784dd158f921fca79ac29deffa353fe6ee.
//
// Solidity: event Mint(address indexed from, address indexed onBehalfOf, uint256 value, uint256 index)
func (_VariableDebtToken *VariableDebtTokenFilterer) WatchMint(opts *bind.WatchOpts, sink chan<- *VariableDebtTokenMint, from []common.Address, onBehalfOf []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var onBehalfOfRule []interface{}
	for _, onBehalfOfItem := range onBehalfOf {
		onBehalfOfRule = append(onBehalfOfRule, onBehalfOfItem)
	}

	logs, sub, err := _VariableDebtToken.contract.WatchLogs(opts, "Mint", fromRule, onBehalfOfRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VariableDebtTokenMint)
				if err := _VariableDebtToken.contract.UnpackLog(event, "Mint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMint is a log parse operation binding the contract event 0x2f00e3cdd69a77be7ed215ec7b2a36784dd158f921fca79ac29deffa353fe6ee.
//
// Solidity: event Mint(address indexed from, address indexed onBehalfOf, uint256 value, uint256 index)
func (_VariableDebtToken *VariableDebtTokenFilterer) ParseMint(log types.Log) (*VariableDebtTokenMint, error) {
	event := new(VariableDebtTokenMint)
	if err := _VariableDebtToken.contract.UnpackLog(event, "Mint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VariableDebtTokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the VariableDebtToken contract.
type VariableDebtTokenTransferIterator struct {
	Event *VariableDebtTokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VariableDebtTokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VariableDebtTokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VariableDebtTokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VariableDebtTokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VariableDebtTokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VariableDebtTokenTransfer represents a Transfer event raised by the VariableDebtToken contract.
type VariableDebtTokenTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_VariableDebtToken *VariableDebtTokenFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*VariableDebtTokenTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _VariableDebtToken.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &VariableDebtTokenTransferIterator{contract: _VariableDebtToken.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_VariableDebtToken *VariableDebtTokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *VariableDebtTokenTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _VariableDebtToken.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VariableDebtTokenTransfer)
				if err := _VariableDebtToken.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_VariableDebtToken *VariableDebtTokenFilterer) ParseTransfer(log types.Log) (*VariableDebtTokenTransfer, error) {
	event := new(VariableDebtTokenTransfer)
	if err := _VariableDebtToken.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VersionedInitializableABI is the input ABI used to generate the binding from.
const VersionedInitializableABI = "[]"

// VersionedInitializable is an auto generated Go binding around an Ethereum contract.
type VersionedInitializable struct {
	VersionedInitializableCaller     // Read-only binding to the contract
	VersionedInitializableTransactor // Write-only binding to the contract
	VersionedInitializableFilterer   // Log filterer for contract events
}

// VersionedInitializableCaller is an auto generated read-only Go binding around an Ethereum contract.
type VersionedInitializableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VersionedInitializableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type VersionedInitializableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VersionedInitializableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type VersionedInitializableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VersionedInitializableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type VersionedInitializableSession struct {
	Contract     *VersionedInitializable // Generic contract binding to set the session for
	CallOpts     bind.CallOpts           // Call options to use throughout this session
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// VersionedInitializableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type VersionedInitializableCallerSession struct {
	Contract *VersionedInitializableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                 // Call options to use throughout this session
}

// VersionedInitializableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type VersionedInitializableTransactorSession struct {
	Contract     *VersionedInitializableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                 // Transaction auth options to use throughout this session
}

// VersionedInitializableRaw is an auto generated low-level Go binding around an Ethereum contract.
type VersionedInitializableRaw struct {
	Contract *VersionedInitializable // Generic contract binding to access the raw methods on
}

// VersionedInitializableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type VersionedInitializableCallerRaw struct {
	Contract *VersionedInitializableCaller // Generic read-only contract binding to access the raw methods on
}

// VersionedInitializableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type VersionedInitializableTransactorRaw struct {
	Contract *VersionedInitializableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewVersionedInitializable creates a new instance of VersionedInitializable, bound to a specific deployed contract.
func NewVersionedInitializable(address common.Address, backend bind.ContractBackend) (*VersionedInitializable, error) {
	contract, err := bindVersionedInitializable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &VersionedInitializable{VersionedInitializableCaller: VersionedInitializableCaller{contract: contract}, VersionedInitializableTransactor: VersionedInitializableTransactor{contract: contract}, VersionedInitializableFilterer: VersionedInitializableFilterer{contract: contract}}, nil
}

// NewVersionedInitializableCaller creates a new read-only instance of VersionedInitializable, bound to a specific deployed contract.
func NewVersionedInitializableCaller(address common.Address, caller bind.ContractCaller) (*VersionedInitializableCaller, error) {
	contract, err := bindVersionedInitializable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &VersionedInitializableCaller{contract: contract}, nil
}

// NewVersionedInitializableTransactor creates a new write-only instance of VersionedInitializable, bound to a specific deployed contract.
func NewVersionedInitializableTransactor(address common.Address, transactor bind.ContractTransactor) (*VersionedInitializableTransactor, error) {
	contract, err := bindVersionedInitializable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &VersionedInitializableTransactor{contract: contract}, nil
}

// NewVersionedInitializableFilterer creates a new log filterer instance of VersionedInitializable, bound to a specific deployed contract.
func NewVersionedInitializableFilterer(address common.Address, filterer bind.ContractFilterer) (*VersionedInitializableFilterer, error) {
	contract, err := bindVersionedInitializable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &VersionedInitializableFilterer{contract: contract}, nil
}

// bindVersionedInitializable binds a generic wrapper to an already deployed contract.
func bindVersionedInitializable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(VersionedInitializableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_VersionedInitializable *VersionedInitializableRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _VersionedInitializable.Contract.VersionedInitializableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_VersionedInitializable *VersionedInitializableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VersionedInitializable.Contract.VersionedInitializableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_VersionedInitializable *VersionedInitializableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _VersionedInitializable.Contract.VersionedInitializableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_VersionedInitializable *VersionedInitializableCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _VersionedInitializable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_VersionedInitializable *VersionedInitializableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VersionedInitializable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_VersionedInitializable *VersionedInitializableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _VersionedInitializable.Contract.contract.Transact(opts, method, params...)
}

// WETH9ABI is the input ABI used to generate the binding from.
const WETH9ABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]"

// WETH9Bin is the compiled bytecode used for deploying new contracts.
var WETH9Bin = "0x60c0604052600d60808190526c2bb930b83832b21022ba3432b960991b60a090815261002e916000919061007a565b50604080518082019091526004808252630ae8aa8960e31b602090920191825261005a9160019161007a565b506002805460ff1916601217905534801561007457600080fd5b5061010d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100bb57805160ff19168380011785556100e8565b828001600101855582156100e8579182015b828111156100e85782518255916020019190600101906100cd565b506100f49291506100f8565b5090565b5b808211156100f457600081556001016100f9565b6106fa8061011c6000396000f3fe6080604052600436106100a05760003560e01c8063313ce56711610064578063313ce5671461021f57806370a082311461024a57806395d89b411461027d578063a9059cbb14610292578063d0e30db0146102cb578063dd62ed3e146102d3576100af565b806306fdde03146100b4578063095ea7b31461013e57806318160ddd1461018b57806323b872dd146101b25780632e1a7d4d146101f5576100af565b366100af576100ad61030e565b005b600080fd5b3480156100c057600080fd5b506100c961035d565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101035781810151838201526020016100eb565b50505050905090810190601f1680156101305780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561014a57600080fd5b506101776004803603604081101561016157600080fd5b506001600160a01b0381351690602001356103eb565b604080519115158252519081900360200190f35b34801561019757600080fd5b506101a0610451565b60408051918252519081900360200190f35b3480156101be57600080fd5b50610177600480360360608110156101d557600080fd5b506001600160a01b03813581169160208101359091169060400135610455565b34801561020157600080fd5b506100ad6004803603602081101561021857600080fd5b5035610589565b34801561022b57600080fd5b5061023461061e565b6040805160ff9092168252519081900360200190f35b34801561025657600080fd5b506101a06004803603602081101561026d57600080fd5b50356001600160a01b0316610627565b34801561028957600080fd5b506100c9610639565b34801561029e57600080fd5b50610177600480360360408110156102b557600080fd5b506001600160a01b038135169060200135610693565b6100ad61030e565b3480156102df57600080fd5b506101a0600480360360408110156102f657600080fd5b506001600160a01b03813581169160200135166106a7565b33600081815260036020908152604091829020805434908101909155825190815291517fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9281900390910190a2565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103e35780601f106103b8576101008083540402835291602001916103e3565b820191906000526020600020905b8154815290600101906020018083116103c657829003601f168201915b505050505081565b3360008181526004602090815260408083206001600160a01b038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b4790565b6001600160a01b03831660009081526003602052604081205482111561047a57600080fd5b6001600160a01b03841633148015906104b857506001600160a01b038416600090815260046020908152604080832033845290915290205460001914155b15610518576001600160a01b03841660009081526004602090815260408083203384529091529020548211156104ed57600080fd5b6001600160a01b03841660009081526004602090815260408083203384529091529020805483900390555b6001600160a01b03808516600081815260036020908152604080832080548890039055938716808352918490208054870190558351868152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35060019392505050565b336000908152600360205260409020548111156105a557600080fd5b33600081815260036020526040808220805485900390555183156108fc0291849190818181858888f193505050501580156105e4573d6000803e3d6000fd5b5060408051828152905133917f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65919081900360200190a250565b60025460ff1681565b60036020526000908152604090205481565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103e35780601f106103b8576101008083540402835291602001916103e3565b60006106a0338484610455565b9392505050565b60046020908152600092835260408084209091529082529020548156fea2646970667358221220c6dca0f41109d125e07b9b5e642aa0cec21cdb37f383336c70a3fdddfbd9d69364736f6c634300060c0033"

// DeployWETH9 deploys a new Ethereum contract, binding an instance of WETH9 to it.
func DeployWETH9(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *WETH9, error) {
	parsed, err := abi.JSON(strings.NewReader(WETH9ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(WETH9Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &WETH9{WETH9Caller: WETH9Caller{contract: contract}, WETH9Transactor: WETH9Transactor{contract: contract}, WETH9Filterer: WETH9Filterer{contract: contract}}, nil
}

// WETH9 is an auto generated Go binding around an Ethereum contract.
type WETH9 struct {
	WETH9Caller     // Read-only binding to the contract
	WETH9Transactor // Write-only binding to the contract
	WETH9Filterer   // Log filterer for contract events
}

// WETH9Caller is an auto generated read-only Go binding around an Ethereum contract.
type WETH9Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WETH9Transactor is an auto generated write-only Go binding around an Ethereum contract.
type WETH9Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WETH9Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type WETH9Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WETH9Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type WETH9Session struct {
	Contract     *WETH9            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// WETH9CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type WETH9CallerSession struct {
	Contract *WETH9Caller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// WETH9TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type WETH9TransactorSession struct {
	Contract     *WETH9Transactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// WETH9Raw is an auto generated low-level Go binding around an Ethereum contract.
type WETH9Raw struct {
	Contract *WETH9 // Generic contract binding to access the raw methods on
}

// WETH9CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type WETH9CallerRaw struct {
	Contract *WETH9Caller // Generic read-only contract binding to access the raw methods on
}

// WETH9TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type WETH9TransactorRaw struct {
	Contract *WETH9Transactor // Generic write-only contract binding to access the raw methods on
}

// NewWETH9 creates a new instance of WETH9, bound to a specific deployed contract.
func NewWETH9(address common.Address, backend bind.ContractBackend) (*WETH9, error) {
	contract, err := bindWETH9(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &WETH9{WETH9Caller: WETH9Caller{contract: contract}, WETH9Transactor: WETH9Transactor{contract: contract}, WETH9Filterer: WETH9Filterer{contract: contract}}, nil
}

// NewWETH9Caller creates a new read-only instance of WETH9, bound to a specific deployed contract.
func NewWETH9Caller(address common.Address, caller bind.ContractCaller) (*WETH9Caller, error) {
	contract, err := bindWETH9(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &WETH9Caller{contract: contract}, nil
}

// NewWETH9Transactor creates a new write-only instance of WETH9, bound to a specific deployed contract.
func NewWETH9Transactor(address common.Address, transactor bind.ContractTransactor) (*WETH9Transactor, error) {
	contract, err := bindWETH9(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &WETH9Transactor{contract: contract}, nil
}

// NewWETH9Filterer creates a new log filterer instance of WETH9, bound to a specific deployed contract.
func NewWETH9Filterer(address common.Address, filterer bind.ContractFilterer) (*WETH9Filterer, error) {
	contract, err := bindWETH9(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &WETH9Filterer{contract: contract}, nil
}

// bindWETH9 binds a generic wrapper to an already deployed contract.
func bindWETH9(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(WETH9ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WETH9 *WETH9Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _WETH9.Contract.WETH9Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WETH9 *WETH9Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WETH9.Contract.WETH9Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WETH9 *WETH9Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WETH9.Contract.WETH9Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WETH9 *WETH9CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _WETH9.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WETH9 *WETH9TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WETH9.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WETH9 *WETH9TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WETH9.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address , address ) view returns(uint256)
func (_WETH9 *WETH9Caller) Allowance(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _WETH9.contract.Call(opts, &out, "allowance", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address , address ) view returns(uint256)
func (_WETH9 *WETH9Session) Allowance(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _WETH9.Contract.Allowance(&_WETH9.CallOpts, arg0, arg1)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address , address ) view returns(uint256)
func (_WETH9 *WETH9CallerSession) Allowance(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _WETH9.Contract.Allowance(&_WETH9.CallOpts, arg0, arg1)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_WETH9 *WETH9Caller) BalanceOf(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _WETH9.contract.Call(opts, &out, "balanceOf", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_WETH9 *WETH9Session) BalanceOf(arg0 common.Address) (*big.Int, error) {
	return _WETH9.Contract.BalanceOf(&_WETH9.CallOpts, arg0)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_WETH9 *WETH9CallerSession) BalanceOf(arg0 common.Address) (*big.Int, error) {
	return _WETH9.Contract.BalanceOf(&_WETH9.CallOpts, arg0)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_WETH9 *WETH9Caller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _WETH9.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_WETH9 *WETH9Session) Decimals() (uint8, error) {
	return _WETH9.Contract.Decimals(&_WETH9.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_WETH9 *WETH9CallerSession) Decimals() (uint8, error) {
	return _WETH9.Contract.Decimals(&_WETH9.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_WETH9 *WETH9Caller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _WETH9.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_WETH9 *WETH9Session) Name() (string, error) {
	return _WETH9.Contract.Name(&_WETH9.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_WETH9 *WETH9CallerSession) Name() (string, error) {
	return _WETH9.Contract.Name(&_WETH9.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_WETH9 *WETH9Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _WETH9.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_WETH9 *WETH9Session) Symbol() (string, error) {
	return _WETH9.Contract.Symbol(&_WETH9.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_WETH9 *WETH9CallerSession) Symbol() (string, error) {
	return _WETH9.Contract.Symbol(&_WETH9.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_WETH9 *WETH9Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _WETH9.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_WETH9 *WETH9Session) TotalSupply() (*big.Int, error) {
	return _WETH9.Contract.TotalSupply(&_WETH9.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_WETH9 *WETH9CallerSession) TotalSupply() (*big.Int, error) {
	return _WETH9.Contract.TotalSupply(&_WETH9.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address guy, uint256 wad) returns(bool)
func (_WETH9 *WETH9Transactor) Approve(opts *bind.TransactOpts, guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _WETH9.contract.Transact(opts, "approve", guy, wad)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address guy, uint256 wad) returns(bool)
func (_WETH9 *WETH9Session) Approve(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _WETH9.Contract.Approve(&_WETH9.TransactOpts, guy, wad)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address guy, uint256 wad) returns(bool)
func (_WETH9 *WETH9TransactorSession) Approve(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _WETH9.Contract.Approve(&_WETH9.TransactOpts, guy, wad)
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() payable returns()
func (_WETH9 *WETH9Transactor) Deposit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WETH9.contract.Transact(opts, "deposit")
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() payable returns()
func (_WETH9 *WETH9Session) Deposit() (*types.Transaction, error) {
	return _WETH9.Contract.Deposit(&_WETH9.TransactOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() payable returns()
func (_WETH9 *WETH9TransactorSession) Deposit() (*types.Transaction, error) {
	return _WETH9.Contract.Deposit(&_WETH9.TransactOpts)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_WETH9 *WETH9Transactor) Transfer(opts *bind.TransactOpts, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _WETH9.contract.Transact(opts, "transfer", dst, wad)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_WETH9 *WETH9Session) Transfer(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _WETH9.Contract.Transfer(&_WETH9.TransactOpts, dst, wad)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_WETH9 *WETH9TransactorSession) Transfer(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _WETH9.Contract.Transfer(&_WETH9.TransactOpts, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_WETH9 *WETH9Transactor) TransferFrom(opts *bind.TransactOpts, src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _WETH9.contract.Transact(opts, "transferFrom", src, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_WETH9 *WETH9Session) TransferFrom(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _WETH9.Contract.TransferFrom(&_WETH9.TransactOpts, src, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_WETH9 *WETH9TransactorSession) TransferFrom(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _WETH9.Contract.TransferFrom(&_WETH9.TransactOpts, src, dst, wad)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 wad) returns()
func (_WETH9 *WETH9Transactor) Withdraw(opts *bind.TransactOpts, wad *big.Int) (*types.Transaction, error) {
	return _WETH9.contract.Transact(opts, "withdraw", wad)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 wad) returns()
func (_WETH9 *WETH9Session) Withdraw(wad *big.Int) (*types.Transaction, error) {
	return _WETH9.Contract.Withdraw(&_WETH9.TransactOpts, wad)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 wad) returns()
func (_WETH9 *WETH9TransactorSession) Withdraw(wad *big.Int) (*types.Transaction, error) {
	return _WETH9.Contract.Withdraw(&_WETH9.TransactOpts, wad)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_WETH9 *WETH9Transactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WETH9.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_WETH9 *WETH9Session) Receive() (*types.Transaction, error) {
	return _WETH9.Contract.Receive(&_WETH9.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_WETH9 *WETH9TransactorSession) Receive() (*types.Transaction, error) {
	return _WETH9.Contract.Receive(&_WETH9.TransactOpts)
}

// WETH9ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the WETH9 contract.
type WETH9ApprovalIterator struct {
	Event *WETH9Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WETH9ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WETH9Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WETH9Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WETH9ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WETH9ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WETH9Approval represents a Approval event raised by the WETH9 contract.
type WETH9Approval struct {
	Src common.Address
	Guy common.Address
	Wad *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed src, address indexed guy, uint256 wad)
func (_WETH9 *WETH9Filterer) FilterApproval(opts *bind.FilterOpts, src []common.Address, guy []common.Address) (*WETH9ApprovalIterator, error) {

	var srcRule []interface{}
	for _, srcItem := range src {
		srcRule = append(srcRule, srcItem)
	}
	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _WETH9.contract.FilterLogs(opts, "Approval", srcRule, guyRule)
	if err != nil {
		return nil, err
	}
	return &WETH9ApprovalIterator{contract: _WETH9.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed src, address indexed guy, uint256 wad)
func (_WETH9 *WETH9Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *WETH9Approval, src []common.Address, guy []common.Address) (event.Subscription, error) {

	var srcRule []interface{}
	for _, srcItem := range src {
		srcRule = append(srcRule, srcItem)
	}
	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _WETH9.contract.WatchLogs(opts, "Approval", srcRule, guyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WETH9Approval)
				if err := _WETH9.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed src, address indexed guy, uint256 wad)
func (_WETH9 *WETH9Filterer) ParseApproval(log types.Log) (*WETH9Approval, error) {
	event := new(WETH9Approval)
	if err := _WETH9.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WETH9DepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the WETH9 contract.
type WETH9DepositIterator struct {
	Event *WETH9Deposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WETH9DepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WETH9Deposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WETH9Deposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WETH9DepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WETH9DepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WETH9Deposit represents a Deposit event raised by the WETH9 contract.
type WETH9Deposit struct {
	Dst common.Address
	Wad *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c.
//
// Solidity: event Deposit(address indexed dst, uint256 wad)
func (_WETH9 *WETH9Filterer) FilterDeposit(opts *bind.FilterOpts, dst []common.Address) (*WETH9DepositIterator, error) {

	var dstRule []interface{}
	for _, dstItem := range dst {
		dstRule = append(dstRule, dstItem)
	}

	logs, sub, err := _WETH9.contract.FilterLogs(opts, "Deposit", dstRule)
	if err != nil {
		return nil, err
	}
	return &WETH9DepositIterator{contract: _WETH9.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c.
//
// Solidity: event Deposit(address indexed dst, uint256 wad)
func (_WETH9 *WETH9Filterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *WETH9Deposit, dst []common.Address) (event.Subscription, error) {

	var dstRule []interface{}
	for _, dstItem := range dst {
		dstRule = append(dstRule, dstItem)
	}

	logs, sub, err := _WETH9.contract.WatchLogs(opts, "Deposit", dstRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WETH9Deposit)
				if err := _WETH9.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c.
//
// Solidity: event Deposit(address indexed dst, uint256 wad)
func (_WETH9 *WETH9Filterer) ParseDeposit(log types.Log) (*WETH9Deposit, error) {
	event := new(WETH9Deposit)
	if err := _WETH9.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WETH9TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the WETH9 contract.
type WETH9TransferIterator struct {
	Event *WETH9Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WETH9TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WETH9Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WETH9Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WETH9TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WETH9TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WETH9Transfer represents a Transfer event raised by the WETH9 contract.
type WETH9Transfer struct {
	Src common.Address
	Dst common.Address
	Wad *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed src, address indexed dst, uint256 wad)
func (_WETH9 *WETH9Filterer) FilterTransfer(opts *bind.FilterOpts, src []common.Address, dst []common.Address) (*WETH9TransferIterator, error) {

	var srcRule []interface{}
	for _, srcItem := range src {
		srcRule = append(srcRule, srcItem)
	}
	var dstRule []interface{}
	for _, dstItem := range dst {
		dstRule = append(dstRule, dstItem)
	}

	logs, sub, err := _WETH9.contract.FilterLogs(opts, "Transfer", srcRule, dstRule)
	if err != nil {
		return nil, err
	}
	return &WETH9TransferIterator{contract: _WETH9.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed src, address indexed dst, uint256 wad)
func (_WETH9 *WETH9Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *WETH9Transfer, src []common.Address, dst []common.Address) (event.Subscription, error) {

	var srcRule []interface{}
	for _, srcItem := range src {
		srcRule = append(srcRule, srcItem)
	}
	var dstRule []interface{}
	for _, dstItem := range dst {
		dstRule = append(dstRule, dstItem)
	}

	logs, sub, err := _WETH9.contract.WatchLogs(opts, "Transfer", srcRule, dstRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WETH9Transfer)
				if err := _WETH9.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed src, address indexed dst, uint256 wad)
func (_WETH9 *WETH9Filterer) ParseTransfer(log types.Log) (*WETH9Transfer, error) {
	event := new(WETH9Transfer)
	if err := _WETH9.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WETH9WithdrawalIterator is returned from FilterWithdrawal and is used to iterate over the raw logs and unpacked data for Withdrawal events raised by the WETH9 contract.
type WETH9WithdrawalIterator struct {
	Event *WETH9Withdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WETH9WithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WETH9Withdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WETH9Withdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WETH9WithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WETH9WithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WETH9Withdrawal represents a Withdrawal event raised by the WETH9 contract.
type WETH9Withdrawal struct {
	Src common.Address
	Wad *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterWithdrawal is a free log retrieval operation binding the contract event 0x7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65.
//
// Solidity: event Withdrawal(address indexed src, uint256 wad)
func (_WETH9 *WETH9Filterer) FilterWithdrawal(opts *bind.FilterOpts, src []common.Address) (*WETH9WithdrawalIterator, error) {

	var srcRule []interface{}
	for _, srcItem := range src {
		srcRule = append(srcRule, srcItem)
	}

	logs, sub, err := _WETH9.contract.FilterLogs(opts, "Withdrawal", srcRule)
	if err != nil {
		return nil, err
	}
	return &WETH9WithdrawalIterator{contract: _WETH9.contract, event: "Withdrawal", logs: logs, sub: sub}, nil
}

// WatchWithdrawal is a free log subscription operation binding the contract event 0x7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65.
//
// Solidity: event Withdrawal(address indexed src, uint256 wad)
func (_WETH9 *WETH9Filterer) WatchWithdrawal(opts *bind.WatchOpts, sink chan<- *WETH9Withdrawal, src []common.Address) (event.Subscription, error) {

	var srcRule []interface{}
	for _, srcItem := range src {
		srcRule = append(srcRule, srcItem)
	}

	logs, sub, err := _WETH9.contract.WatchLogs(opts, "Withdrawal", srcRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WETH9Withdrawal)
				if err := _WETH9.contract.UnpackLog(event, "Withdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawal is a log parse operation binding the contract event 0x7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65.
//
// Solidity: event Withdrawal(address indexed src, uint256 wad)
func (_WETH9 *WETH9Filterer) ParseWithdrawal(log types.Log) (*WETH9Withdrawal, error) {
	event := new(WETH9Withdrawal)
	if err := _WETH9.contract.UnpackLog(event, "Withdrawal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WETH9MockedABI is the input ABI used to generate the binding from.
const WETH9MockedABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]"

// WETH9MockedBin is the compiled bytecode used for deploying new contracts.
var WETH9MockedBin = "0x60c0604052600d60808190526c2bb930b83832b21022ba3432b960991b60a090815261002e916000919061007a565b50604080518082019091526004808252630ae8aa8960e31b602090920191825261005a9160019161007a565b506002805460ff1916601217905534801561007457600080fd5b5061010d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100bb57805160ff19168380011785556100e8565b828001600101855582156100e8579182015b828111156100e85782518255916020019190600101906100cd565b506100f49291506100f8565b5090565b5b808211156100f457600081556001016100f9565b6107808061011c6000396000f3fe6080604052600436106100ab5760003560e01c806370a082311161006457806370a082311461025557806395d89b4114610288578063a0712d681461029d578063a9059cbb146102c7578063d0e30db014610300578063dd62ed3e14610308576100ba565b806306fdde03146100bf578063095ea7b31461014957806318160ddd1461019657806323b872dd146101bd5780632e1a7d4d14610200578063313ce5671461022a576100ba565b366100ba576100b8610343565b005b600080fd5b3480156100cb57600080fd5b506100d4610392565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561010e5781810151838201526020016100f6565b50505050905090810190601f16801561013b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015557600080fd5b506101826004803603604081101561016c57600080fd5b506001600160a01b038135169060200135610420565b604080519115158252519081900360200190f35b3480156101a257600080fd5b506101ab610486565b60408051918252519081900360200190f35b3480156101c957600080fd5b50610182600480360360608110156101e057600080fd5b506001600160a01b0381358116916020810135909116906040013561048a565b34801561020c57600080fd5b506100b86004803603602081101561022357600080fd5b50356105be565b34801561023657600080fd5b5061023f610653565b6040805160ff9092168252519081900360200190f35b34801561026157600080fd5b506101ab6004803603602081101561027857600080fd5b50356001600160a01b031661065c565b34801561029457600080fd5b506100d461066e565b3480156102a957600080fd5b50610182600480360360208110156102c057600080fd5b50356106c8565b3480156102d357600080fd5b50610182600480360360408110156102ea57600080fd5b506001600160a01b038135169060200135610719565b6100b8610343565b34801561031457600080fd5b506101ab6004803603604081101561032b57600080fd5b506001600160a01b038135811691602001351661072d565b33600081815260036020908152604091829020805434908101909155825190815291517fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9281900390910190a2565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104185780601f106103ed57610100808354040283529160200191610418565b820191906000526020600020905b8154815290600101906020018083116103fb57829003601f168201915b505050505081565b3360008181526004602090815260408083206001600160a01b038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b4790565b6001600160a01b0383166000908152600360205260408120548211156104af57600080fd5b6001600160a01b03841633148015906104ed57506001600160a01b038416600090815260046020908152604080832033845290915290205460001914155b1561054d576001600160a01b038416600090815260046020908152604080832033845290915290205482111561052257600080fd5b6001600160a01b03841660009081526004602090815260408083203384529091529020805483900390555b6001600160a01b03808516600081815260036020908152604080832080548890039055938716808352918490208054870190558351868152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35060019392505050565b336000908152600360205260409020548111156105da57600080fd5b33600081815260036020526040808220805485900390555183156108fc0291849190818181858888f19350505050158015610619573d6000803e3d6000fd5b5060408051828152905133917f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65919081900360200190a250565b60025460ff1681565b60036020526000908152604090205481565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104185780601f106103ed57610100808354040283529160200191610418565b3360008181526003602090815260408083208054860190558051858152905192939284927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef928290030190a3919050565b600061072633848461048a565b9392505050565b60046020908152600092835260408084209091529082529020548156fea2646970667358221220c63a860e3831f769f0730fbbd0fe8faf6745d5b340b98ac72493fba7ecab1a5264736f6c634300060c0033"

// DeployWETH9Mocked deploys a new Ethereum contract, binding an instance of WETH9Mocked to it.
func DeployWETH9Mocked(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *WETH9Mocked, error) {
	parsed, err := abi.JSON(strings.NewReader(WETH9MockedABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(WETH9MockedBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &WETH9Mocked{WETH9MockedCaller: WETH9MockedCaller{contract: contract}, WETH9MockedTransactor: WETH9MockedTransactor{contract: contract}, WETH9MockedFilterer: WETH9MockedFilterer{contract: contract}}, nil
}

// WETH9Mocked is an auto generated Go binding around an Ethereum contract.
type WETH9Mocked struct {
	WETH9MockedCaller     // Read-only binding to the contract
	WETH9MockedTransactor // Write-only binding to the contract
	WETH9MockedFilterer   // Log filterer for contract events
}

// WETH9MockedCaller is an auto generated read-only Go binding around an Ethereum contract.
type WETH9MockedCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WETH9MockedTransactor is an auto generated write-only Go binding around an Ethereum contract.
type WETH9MockedTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WETH9MockedFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type WETH9MockedFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WETH9MockedSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type WETH9MockedSession struct {
	Contract     *WETH9Mocked      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// WETH9MockedCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type WETH9MockedCallerSession struct {
	Contract *WETH9MockedCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// WETH9MockedTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type WETH9MockedTransactorSession struct {
	Contract     *WETH9MockedTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// WETH9MockedRaw is an auto generated low-level Go binding around an Ethereum contract.
type WETH9MockedRaw struct {
	Contract *WETH9Mocked // Generic contract binding to access the raw methods on
}

// WETH9MockedCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type WETH9MockedCallerRaw struct {
	Contract *WETH9MockedCaller // Generic read-only contract binding to access the raw methods on
}

// WETH9MockedTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type WETH9MockedTransactorRaw struct {
	Contract *WETH9MockedTransactor // Generic write-only contract binding to access the raw methods on
}

// NewWETH9Mocked creates a new instance of WETH9Mocked, bound to a specific deployed contract.
func NewWETH9Mocked(address common.Address, backend bind.ContractBackend) (*WETH9Mocked, error) {
	contract, err := bindWETH9Mocked(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &WETH9Mocked{WETH9MockedCaller: WETH9MockedCaller{contract: contract}, WETH9MockedTransactor: WETH9MockedTransactor{contract: contract}, WETH9MockedFilterer: WETH9MockedFilterer{contract: contract}}, nil
}

// NewWETH9MockedCaller creates a new read-only instance of WETH9Mocked, bound to a specific deployed contract.
func NewWETH9MockedCaller(address common.Address, caller bind.ContractCaller) (*WETH9MockedCaller, error) {
	contract, err := bindWETH9Mocked(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &WETH9MockedCaller{contract: contract}, nil
}

// NewWETH9MockedTransactor creates a new write-only instance of WETH9Mocked, bound to a specific deployed contract.
func NewWETH9MockedTransactor(address common.Address, transactor bind.ContractTransactor) (*WETH9MockedTransactor, error) {
	contract, err := bindWETH9Mocked(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &WETH9MockedTransactor{contract: contract}, nil
}

// NewWETH9MockedFilterer creates a new log filterer instance of WETH9Mocked, bound to a specific deployed contract.
func NewWETH9MockedFilterer(address common.Address, filterer bind.ContractFilterer) (*WETH9MockedFilterer, error) {
	contract, err := bindWETH9Mocked(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &WETH9MockedFilterer{contract: contract}, nil
}

// bindWETH9Mocked binds a generic wrapper to an already deployed contract.
func bindWETH9Mocked(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(WETH9MockedABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WETH9Mocked *WETH9MockedRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _WETH9Mocked.Contract.WETH9MockedCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WETH9Mocked *WETH9MockedRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WETH9Mocked.Contract.WETH9MockedTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WETH9Mocked *WETH9MockedRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WETH9Mocked.Contract.WETH9MockedTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WETH9Mocked *WETH9MockedCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _WETH9Mocked.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WETH9Mocked *WETH9MockedTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WETH9Mocked.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WETH9Mocked *WETH9MockedTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WETH9Mocked.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address , address ) view returns(uint256)
func (_WETH9Mocked *WETH9MockedCaller) Allowance(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _WETH9Mocked.contract.Call(opts, &out, "allowance", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address , address ) view returns(uint256)
func (_WETH9Mocked *WETH9MockedSession) Allowance(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _WETH9Mocked.Contract.Allowance(&_WETH9Mocked.CallOpts, arg0, arg1)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address , address ) view returns(uint256)
func (_WETH9Mocked *WETH9MockedCallerSession) Allowance(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _WETH9Mocked.Contract.Allowance(&_WETH9Mocked.CallOpts, arg0, arg1)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_WETH9Mocked *WETH9MockedCaller) BalanceOf(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _WETH9Mocked.contract.Call(opts, &out, "balanceOf", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_WETH9Mocked *WETH9MockedSession) BalanceOf(arg0 common.Address) (*big.Int, error) {
	return _WETH9Mocked.Contract.BalanceOf(&_WETH9Mocked.CallOpts, arg0)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_WETH9Mocked *WETH9MockedCallerSession) BalanceOf(arg0 common.Address) (*big.Int, error) {
	return _WETH9Mocked.Contract.BalanceOf(&_WETH9Mocked.CallOpts, arg0)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_WETH9Mocked *WETH9MockedCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _WETH9Mocked.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_WETH9Mocked *WETH9MockedSession) Decimals() (uint8, error) {
	return _WETH9Mocked.Contract.Decimals(&_WETH9Mocked.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_WETH9Mocked *WETH9MockedCallerSession) Decimals() (uint8, error) {
	return _WETH9Mocked.Contract.Decimals(&_WETH9Mocked.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_WETH9Mocked *WETH9MockedCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _WETH9Mocked.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_WETH9Mocked *WETH9MockedSession) Name() (string, error) {
	return _WETH9Mocked.Contract.Name(&_WETH9Mocked.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_WETH9Mocked *WETH9MockedCallerSession) Name() (string, error) {
	return _WETH9Mocked.Contract.Name(&_WETH9Mocked.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_WETH9Mocked *WETH9MockedCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _WETH9Mocked.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_WETH9Mocked *WETH9MockedSession) Symbol() (string, error) {
	return _WETH9Mocked.Contract.Symbol(&_WETH9Mocked.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_WETH9Mocked *WETH9MockedCallerSession) Symbol() (string, error) {
	return _WETH9Mocked.Contract.Symbol(&_WETH9Mocked.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_WETH9Mocked *WETH9MockedCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _WETH9Mocked.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_WETH9Mocked *WETH9MockedSession) TotalSupply() (*big.Int, error) {
	return _WETH9Mocked.Contract.TotalSupply(&_WETH9Mocked.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_WETH9Mocked *WETH9MockedCallerSession) TotalSupply() (*big.Int, error) {
	return _WETH9Mocked.Contract.TotalSupply(&_WETH9Mocked.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address guy, uint256 wad) returns(bool)
func (_WETH9Mocked *WETH9MockedTransactor) Approve(opts *bind.TransactOpts, guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _WETH9Mocked.contract.Transact(opts, "approve", guy, wad)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address guy, uint256 wad) returns(bool)
func (_WETH9Mocked *WETH9MockedSession) Approve(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _WETH9Mocked.Contract.Approve(&_WETH9Mocked.TransactOpts, guy, wad)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address guy, uint256 wad) returns(bool)
func (_WETH9Mocked *WETH9MockedTransactorSession) Approve(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _WETH9Mocked.Contract.Approve(&_WETH9Mocked.TransactOpts, guy, wad)
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() payable returns()
func (_WETH9Mocked *WETH9MockedTransactor) Deposit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WETH9Mocked.contract.Transact(opts, "deposit")
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() payable returns()
func (_WETH9Mocked *WETH9MockedSession) Deposit() (*types.Transaction, error) {
	return _WETH9Mocked.Contract.Deposit(&_WETH9Mocked.TransactOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() payable returns()
func (_WETH9Mocked *WETH9MockedTransactorSession) Deposit() (*types.Transaction, error) {
	return _WETH9Mocked.Contract.Deposit(&_WETH9Mocked.TransactOpts)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 value) returns(bool)
func (_WETH9Mocked *WETH9MockedTransactor) Mint(opts *bind.TransactOpts, value *big.Int) (*types.Transaction, error) {
	return _WETH9Mocked.contract.Transact(opts, "mint", value)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 value) returns(bool)
func (_WETH9Mocked *WETH9MockedSession) Mint(value *big.Int) (*types.Transaction, error) {
	return _WETH9Mocked.Contract.Mint(&_WETH9Mocked.TransactOpts, value)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 value) returns(bool)
func (_WETH9Mocked *WETH9MockedTransactorSession) Mint(value *big.Int) (*types.Transaction, error) {
	return _WETH9Mocked.Contract.Mint(&_WETH9Mocked.TransactOpts, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_WETH9Mocked *WETH9MockedTransactor) Transfer(opts *bind.TransactOpts, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _WETH9Mocked.contract.Transact(opts, "transfer", dst, wad)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_WETH9Mocked *WETH9MockedSession) Transfer(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _WETH9Mocked.Contract.Transfer(&_WETH9Mocked.TransactOpts, dst, wad)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_WETH9Mocked *WETH9MockedTransactorSession) Transfer(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _WETH9Mocked.Contract.Transfer(&_WETH9Mocked.TransactOpts, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_WETH9Mocked *WETH9MockedTransactor) TransferFrom(opts *bind.TransactOpts, src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _WETH9Mocked.contract.Transact(opts, "transferFrom", src, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_WETH9Mocked *WETH9MockedSession) TransferFrom(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _WETH9Mocked.Contract.TransferFrom(&_WETH9Mocked.TransactOpts, src, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_WETH9Mocked *WETH9MockedTransactorSession) TransferFrom(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _WETH9Mocked.Contract.TransferFrom(&_WETH9Mocked.TransactOpts, src, dst, wad)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 wad) returns()
func (_WETH9Mocked *WETH9MockedTransactor) Withdraw(opts *bind.TransactOpts, wad *big.Int) (*types.Transaction, error) {
	return _WETH9Mocked.contract.Transact(opts, "withdraw", wad)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 wad) returns()
func (_WETH9Mocked *WETH9MockedSession) Withdraw(wad *big.Int) (*types.Transaction, error) {
	return _WETH9Mocked.Contract.Withdraw(&_WETH9Mocked.TransactOpts, wad)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 wad) returns()
func (_WETH9Mocked *WETH9MockedTransactorSession) Withdraw(wad *big.Int) (*types.Transaction, error) {
	return _WETH9Mocked.Contract.Withdraw(&_WETH9Mocked.TransactOpts, wad)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_WETH9Mocked *WETH9MockedTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WETH9Mocked.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_WETH9Mocked *WETH9MockedSession) Receive() (*types.Transaction, error) {
	return _WETH9Mocked.Contract.Receive(&_WETH9Mocked.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_WETH9Mocked *WETH9MockedTransactorSession) Receive() (*types.Transaction, error) {
	return _WETH9Mocked.Contract.Receive(&_WETH9Mocked.TransactOpts)
}

// WETH9MockedApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the WETH9Mocked contract.
type WETH9MockedApprovalIterator struct {
	Event *WETH9MockedApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WETH9MockedApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WETH9MockedApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WETH9MockedApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WETH9MockedApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WETH9MockedApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WETH9MockedApproval represents a Approval event raised by the WETH9Mocked contract.
type WETH9MockedApproval struct {
	Src common.Address
	Guy common.Address
	Wad *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed src, address indexed guy, uint256 wad)
func (_WETH9Mocked *WETH9MockedFilterer) FilterApproval(opts *bind.FilterOpts, src []common.Address, guy []common.Address) (*WETH9MockedApprovalIterator, error) {

	var srcRule []interface{}
	for _, srcItem := range src {
		srcRule = append(srcRule, srcItem)
	}
	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _WETH9Mocked.contract.FilterLogs(opts, "Approval", srcRule, guyRule)
	if err != nil {
		return nil, err
	}
	return &WETH9MockedApprovalIterator{contract: _WETH9Mocked.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed src, address indexed guy, uint256 wad)
func (_WETH9Mocked *WETH9MockedFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *WETH9MockedApproval, src []common.Address, guy []common.Address) (event.Subscription, error) {

	var srcRule []interface{}
	for _, srcItem := range src {
		srcRule = append(srcRule, srcItem)
	}
	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _WETH9Mocked.contract.WatchLogs(opts, "Approval", srcRule, guyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WETH9MockedApproval)
				if err := _WETH9Mocked.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed src, address indexed guy, uint256 wad)
func (_WETH9Mocked *WETH9MockedFilterer) ParseApproval(log types.Log) (*WETH9MockedApproval, error) {
	event := new(WETH9MockedApproval)
	if err := _WETH9Mocked.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WETH9MockedDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the WETH9Mocked contract.
type WETH9MockedDepositIterator struct {
	Event *WETH9MockedDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WETH9MockedDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WETH9MockedDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WETH9MockedDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WETH9MockedDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WETH9MockedDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WETH9MockedDeposit represents a Deposit event raised by the WETH9Mocked contract.
type WETH9MockedDeposit struct {
	Dst common.Address
	Wad *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c.
//
// Solidity: event Deposit(address indexed dst, uint256 wad)
func (_WETH9Mocked *WETH9MockedFilterer) FilterDeposit(opts *bind.FilterOpts, dst []common.Address) (*WETH9MockedDepositIterator, error) {

	var dstRule []interface{}
	for _, dstItem := range dst {
		dstRule = append(dstRule, dstItem)
	}

	logs, sub, err := _WETH9Mocked.contract.FilterLogs(opts, "Deposit", dstRule)
	if err != nil {
		return nil, err
	}
	return &WETH9MockedDepositIterator{contract: _WETH9Mocked.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c.
//
// Solidity: event Deposit(address indexed dst, uint256 wad)
func (_WETH9Mocked *WETH9MockedFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *WETH9MockedDeposit, dst []common.Address) (event.Subscription, error) {

	var dstRule []interface{}
	for _, dstItem := range dst {
		dstRule = append(dstRule, dstItem)
	}

	logs, sub, err := _WETH9Mocked.contract.WatchLogs(opts, "Deposit", dstRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WETH9MockedDeposit)
				if err := _WETH9Mocked.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c.
//
// Solidity: event Deposit(address indexed dst, uint256 wad)
func (_WETH9Mocked *WETH9MockedFilterer) ParseDeposit(log types.Log) (*WETH9MockedDeposit, error) {
	event := new(WETH9MockedDeposit)
	if err := _WETH9Mocked.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WETH9MockedTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the WETH9Mocked contract.
type WETH9MockedTransferIterator struct {
	Event *WETH9MockedTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WETH9MockedTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WETH9MockedTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WETH9MockedTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WETH9MockedTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WETH9MockedTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WETH9MockedTransfer represents a Transfer event raised by the WETH9Mocked contract.
type WETH9MockedTransfer struct {
	Src common.Address
	Dst common.Address
	Wad *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed src, address indexed dst, uint256 wad)
func (_WETH9Mocked *WETH9MockedFilterer) FilterTransfer(opts *bind.FilterOpts, src []common.Address, dst []common.Address) (*WETH9MockedTransferIterator, error) {

	var srcRule []interface{}
	for _, srcItem := range src {
		srcRule = append(srcRule, srcItem)
	}
	var dstRule []interface{}
	for _, dstItem := range dst {
		dstRule = append(dstRule, dstItem)
	}

	logs, sub, err := _WETH9Mocked.contract.FilterLogs(opts, "Transfer", srcRule, dstRule)
	if err != nil {
		return nil, err
	}
	return &WETH9MockedTransferIterator{contract: _WETH9Mocked.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed src, address indexed dst, uint256 wad)
func (_WETH9Mocked *WETH9MockedFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *WETH9MockedTransfer, src []common.Address, dst []common.Address) (event.Subscription, error) {

	var srcRule []interface{}
	for _, srcItem := range src {
		srcRule = append(srcRule, srcItem)
	}
	var dstRule []interface{}
	for _, dstItem := range dst {
		dstRule = append(dstRule, dstItem)
	}

	logs, sub, err := _WETH9Mocked.contract.WatchLogs(opts, "Transfer", srcRule, dstRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WETH9MockedTransfer)
				if err := _WETH9Mocked.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed src, address indexed dst, uint256 wad)
func (_WETH9Mocked *WETH9MockedFilterer) ParseTransfer(log types.Log) (*WETH9MockedTransfer, error) {
	event := new(WETH9MockedTransfer)
	if err := _WETH9Mocked.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WETH9MockedWithdrawalIterator is returned from FilterWithdrawal and is used to iterate over the raw logs and unpacked data for Withdrawal events raised by the WETH9Mocked contract.
type WETH9MockedWithdrawalIterator struct {
	Event *WETH9MockedWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WETH9MockedWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WETH9MockedWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WETH9MockedWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WETH9MockedWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WETH9MockedWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WETH9MockedWithdrawal represents a Withdrawal event raised by the WETH9Mocked contract.
type WETH9MockedWithdrawal struct {
	Src common.Address
	Wad *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterWithdrawal is a free log retrieval operation binding the contract event 0x7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65.
//
// Solidity: event Withdrawal(address indexed src, uint256 wad)
func (_WETH9Mocked *WETH9MockedFilterer) FilterWithdrawal(opts *bind.FilterOpts, src []common.Address) (*WETH9MockedWithdrawalIterator, error) {

	var srcRule []interface{}
	for _, srcItem := range src {
		srcRule = append(srcRule, srcItem)
	}

	logs, sub, err := _WETH9Mocked.contract.FilterLogs(opts, "Withdrawal", srcRule)
	if err != nil {
		return nil, err
	}
	return &WETH9MockedWithdrawalIterator{contract: _WETH9Mocked.contract, event: "Withdrawal", logs: logs, sub: sub}, nil
}

// WatchWithdrawal is a free log subscription operation binding the contract event 0x7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65.
//
// Solidity: event Withdrawal(address indexed src, uint256 wad)
func (_WETH9Mocked *WETH9MockedFilterer) WatchWithdrawal(opts *bind.WatchOpts, sink chan<- *WETH9MockedWithdrawal, src []common.Address) (event.Subscription, error) {

	var srcRule []interface{}
	for _, srcItem := range src {
		srcRule = append(srcRule, srcItem)
	}

	logs, sub, err := _WETH9Mocked.contract.WatchLogs(opts, "Withdrawal", srcRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WETH9MockedWithdrawal)
				if err := _WETH9Mocked.contract.UnpackLog(event, "Withdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawal is a log parse operation binding the contract event 0x7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65.
//
// Solidity: event Withdrawal(address indexed src, uint256 wad)
func (_WETH9Mocked *WETH9MockedFilterer) ParseWithdrawal(log types.Log) (*WETH9MockedWithdrawal, error) {
	event := new(WETH9MockedWithdrawal)
	if err := _WETH9Mocked.contract.UnpackLog(event, "Withdrawal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WETHGatewayABI is the input ABI used to generate the binding from.
const WETHGatewayABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interesRateMode\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"borrowETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyEtherTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAWETHAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLendingPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWETHAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateMode\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"}],\"name\":\"repayETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]"

// WETHGatewayBin is the compiled bytecode used for deploying new contracts.
var WETHGatewayBin = "0x60e06040523480156200001157600080fd5b50604051620018f5380380620018f5833981016040819052620000349162000259565b600062000040620001cf565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160601b0319606083811b821660805282901b1660a0526040516335ea6a7560e01b815281906001600160a01b038216906335ea6a7590620000d4908690600401620003d6565b6101806040518083038186803b158015620000ee57600080fd5b505afa15801562000103573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001299190620002c0565b60e0015160601b6001600160601b03191660c05260405163095ea7b360e01b81526001600160a01b0384169063095ea7b3906200016f90859060001990600401620003ea565b602060405180830381600087803b1580156200018a57600080fd5b505af11580156200019f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001c5919062000297565b5050505062000443565b3390565b80516001600160a01b0381168114620001eb57600080fd5b92915050565b60006020828403121562000203578081fd5b6200020f602062000403565b9151825250919050565b80516001600160801b0381168114620001eb57600080fd5b805164ffffffffff81168114620001eb57600080fd5b805160ff81168114620001eb57600080fd5b600080604083850312156200026c578182fd5b825162000279816200042a565b60208401519092506200028c816200042a565b809150509250929050565b600060208284031215620002a9578081fd5b81518015158114620002b9578182fd5b9392505050565b6000610180808385031215620002d4578182fd5b620002df8162000403565b9050620002ed8484620001f1565b8152620002fe846020850162000219565b602082015262000312846040850162000219565b604082015262000326846060850162000219565b60608201526200033a846080850162000219565b60808201526200034e8460a0850162000219565b60a0820152620003628460c0850162000231565b60c0820152620003768460e08501620001d3565b60e08201526101006200038c85828601620001d3565b90820152610120620003a185858301620001d3565b90820152610140620003b685858301620001d3565b90820152610160620003cb8585830162000247565b908201529392505050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6040518181016001600160401b03811182821017156200042257600080fd5b604052919050565b6001600160a01b03811681146200044057600080fd5b50565b60805160601c60a05160601c60c05160601c611428620004cd6000398061027a528061032652806105055250806103c952806105af528061064552806106fd5280610a035280610ba552508060bb52806103f6528061048c528061052952806105df528061072a52806107a152806108df5280610a325280610b1f5280610bd552506114286000f3fe6080604052600436106100ab5760003560e01c80638da5cb5b116100645780638da5cb5b146101c3578063a3d5b255146101d8578063affa8817146101f8578063eed88b8d1461020d578063f2fde38b1461022d578063f538ba511461024d57610103565b806336118b521461011b5780633a21afac1461013b57806358c22be7146101665780635f36a74214610179578063715018a61461018e5780637d5155fd146101a357610103565b3661010357336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101015760405162461bcd60e51b81526004016100f8906112d4565b60405180910390fd5b005b60405162461bcd60e51b81526004016100f890611260565b34801561012757600080fd5b5061010161013636600461108b565b610260565b34801561014757600080fd5b50610150610503565b60405161015d9190611160565b60405180910390f35b610101610174366004610ef8565b610527565b34801561018557600080fd5b50610150610643565b34801561019a57600080fd5b50610101610667565b3480156101af57600080fd5b506101016101be3660046110f2565b6106e6565b3480156101cf57600080fd5b50610150610819565b3480156101e457600080fd5b506101016101f3366004610eb8565b610828565b34801561020457600080fd5b506101506108dd565b34801561021957600080fd5b50610101610228366004610f2d565b610901565b34801561023957600080fd5b50610101610248366004610e95565b610944565b61010161025b3660046110ba565b6109fa565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906102af903390600401611160565b60206040518083038186803b1580156102c757600080fd5b505afa1580156102db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ff9190611073565b90508260001981141561030f5750805b6040516323b872dd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906323b872dd9061035f90339030908690600401611174565b602060405180830381600087803b15801561037957600080fd5b505af115801561038d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b19190610f58565b50604051631a4ca37b60e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906369328dec90610422907f000000000000000000000000000000000000000000000000000000000000000090859030906004016111b1565b602060405180830381600087803b15801561043c57600080fd5b505af1158015610450573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104749190611073565b50604051632e1a7d4d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d906104c19084906004016113aa565b600060405180830381600087803b1580156104db57600080fd5b505af11580156104ef573d6000803e3d6000fd5b505050506104fd8382610c66565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561058257600080fd5b505af1158015610596573d6000803e3d6000fd5b505060405163e8eda9df60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016935063e8eda9df925061060d91507f0000000000000000000000000000000000000000000000000000000000000000903490879087906004016111d4565b600060405180830381600087803b15801561062757600080fd5b505af115801561063b573d6000803e3d6000fd5b505050505050565b7f000000000000000000000000000000000000000000000000000000000000000090565b61066f610cf3565b6000546001600160a01b0390811691161461069c5760405162461bcd60e51b81526004016100f890611301565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60405163a415bcad60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a415bcad9061075a907f000000000000000000000000000000000000000000000000000000000000000090879087908790339060040161122c565b600060405180830381600087803b15801561077457600080fd5b505af1158015610788573d6000803e3d6000fd5b5050604051632e1a7d4d60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169250632e1a7d4d91506107d89086906004016113aa565b600060405180830381600087803b1580156107f257600080fd5b505af1158015610806573d6000803e3d6000fd5b505050506108143384610c66565b505050565b6000546001600160a01b031690565b610830610cf3565b6000546001600160a01b0390811691161461085d5760405162461bcd60e51b81526004016100f890611301565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb9061088b9085908590600401611198565b602060405180830381600087803b1580156108a557600080fd5b505af11580156108b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fd9190610f58565b7f000000000000000000000000000000000000000000000000000000000000000090565b610909610cf3565b6000546001600160a01b039081169116146109365760405162461bcd60e51b81526004016100f890611301565b6109408282610c66565b5050565b61094c610cf3565b6000546001600160a01b039081169116146109795760405162461bcd60e51b81526004016100f890611301565b6001600160a01b03811661099f5760405162461bcd60e51b81526004016100f89061128e565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600080610ac3837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166335ea6a757f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401610a6d9190611160565b6101806040518083038186803b158015610a8657600080fd5b505afa158015610a9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abe9190610f78565b610cf7565b909250905060006001856002811115610ad857fe5b6002811115610ae357fe5b14610aee5781610af0565b825b905080861015610afd5750845b80341015610b1d5760405162461bcd60e51b81526004016100f890611363565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015610b7857600080fd5b505af1158015610b8c573d6000803e3d6000fd5b505060405163573ade8160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016935063573ade819250610c0391507f00000000000000000000000000000000000000000000000000000000000000009034908a908a90600401611201565b602060405180830381600087803b158015610c1d57600080fd5b505af1158015610c31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c559190611073565b508034111561063b5761063b338234035b604080516000808252602082019092526001600160a01b038416908390604051610c909190611127565b60006040518083038185875af1925050503d8060008114610ccd576040519150601f19603f3d011682016040523d82523d6000602084013e610cd2565b606091505b50509050806108145760405162461bcd60e51b81526004016100f890611336565b3390565b6000808261010001516001600160a01b03166370a08231856040518263ffffffff1660e01b8152600401610d2b9190611160565b60206040518083038186803b158015610d4357600080fd5b505afa158015610d57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7b9190611073565b8361012001516001600160a01b03166370a08231866040518263ffffffff1660e01b8152600401610dac9190611160565b60206040518083038186803b158015610dc457600080fd5b505afa158015610dd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfc9190611073565b915091509250929050565b8051610e12816113da565b92915050565b600060208284031215610e29578081fd5b610e3360206113b3565b9151825250919050565b80516fffffffffffffffffffffffffffffffff81168114610e1257600080fd5b803561ffff81168114610e1257600080fd5b805164ffffffffff81168114610e1257600080fd5b805160ff81168114610e1257600080fd5b600060208284031215610ea6578081fd5b8135610eb1816113da565b9392505050565b600080600060608486031215610ecc578182fd5b8335610ed7816113da565b92506020840135610ee7816113da565b929592945050506040919091013590565b60008060408385031215610f0a578182fd5b8235610f15816113da565b9150610f248460208501610e5d565b90509250929050565b60008060408385031215610f3f578182fd5b8235610f4a816113da565b946020939093013593505050565b600060208284031215610f69578081fd5b81518015158114610eb1578182fd5b6000610180808385031215610f8b578182fd5b610f94816113b3565b9050610fa08484610e18565b8152610faf8460208501610e3d565b6020820152610fc18460408501610e3d565b6040820152610fd38460608501610e3d565b6060820152610fe58460808501610e3d565b6080820152610ff78460a08501610e3d565b60a08201526110098460c08501610e6f565b60c082015261101b8460e08501610e07565b60e082015261010061102f85828601610e07565b9082015261012061104285858301610e07565b9082015261014061105585858301610e07565b9082015261016061106885858301610e84565b908201529392505050565b600060208284031215611084578081fd5b5051919050565b6000806040838503121561109d578182fd5b8235915060208301356110af816113da565b809150509250929050565b6000806000606084860312156110ce578283fd5b833592506020840135915060408401356110e7816113da565b809150509250925092565b600080600060608486031215611106578283fd5b833592506020840135915061111e8560408601610e5d565b90509250925092565b60008251815b81811015611147576020818601810151858301520161112d565b818111156111555782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0393841681526020810192909252909116604082015260600190565b6001600160a01b03948516815260208101939093529216604082015261ffff909116606082015260800190565b6001600160a01b03948516815260208101939093526040830191909152909116606082015260800190565b6001600160a01b0395861681526020810194909452604084019290925261ffff166060830152909116608082015260a00190565b60208082526014908201527311985b1b189858dac81b9bdd08185b1b1bddd95960621b604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b602080825260139082015272149958d95a5d99481b9bdd08185b1b1bddd959606a1b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526013908201527211551217d514905394d1915497d19052531151606a1b604082015260600190565b60208082526027908201527f6d73672e76616c7565206973206c657373207468616e2072657061796d656e7460408201526608185b5bdd5b9d60ca1b606082015260800190565b90815260200190565b60405181810167ffffffffffffffff811182821017156113d257600080fd5b604052919050565b6001600160a01b03811681146113ef57600080fd5b5056fea2646970667358221220972aaa3cbc25e0dd72d596ad7b71ceb3afbbc0e6694a31bb878e5d06ede0d3e764736f6c634300060c0033"

// DeployWETHGateway deploys a new Ethereum contract, binding an instance of WETHGateway to it.
func DeployWETHGateway(auth *bind.TransactOpts, backend bind.ContractBackend, weth common.Address, pool common.Address) (common.Address, *types.Transaction, *WETHGateway, error) {
	parsed, err := abi.JSON(strings.NewReader(WETHGatewayABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(WETHGatewayBin), backend, weth, pool)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &WETHGateway{WETHGatewayCaller: WETHGatewayCaller{contract: contract}, WETHGatewayTransactor: WETHGatewayTransactor{contract: contract}, WETHGatewayFilterer: WETHGatewayFilterer{contract: contract}}, nil
}

// WETHGateway is an auto generated Go binding around an Ethereum contract.
type WETHGateway struct {
	WETHGatewayCaller     // Read-only binding to the contract
	WETHGatewayTransactor // Write-only binding to the contract
	WETHGatewayFilterer   // Log filterer for contract events
}

// WETHGatewayCaller is an auto generated read-only Go binding around an Ethereum contract.
type WETHGatewayCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WETHGatewayTransactor is an auto generated write-only Go binding around an Ethereum contract.
type WETHGatewayTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WETHGatewayFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type WETHGatewayFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WETHGatewaySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type WETHGatewaySession struct {
	Contract     *WETHGateway      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// WETHGatewayCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type WETHGatewayCallerSession struct {
	Contract *WETHGatewayCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// WETHGatewayTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type WETHGatewayTransactorSession struct {
	Contract     *WETHGatewayTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// WETHGatewayRaw is an auto generated low-level Go binding around an Ethereum contract.
type WETHGatewayRaw struct {
	Contract *WETHGateway // Generic contract binding to access the raw methods on
}

// WETHGatewayCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type WETHGatewayCallerRaw struct {
	Contract *WETHGatewayCaller // Generic read-only contract binding to access the raw methods on
}

// WETHGatewayTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type WETHGatewayTransactorRaw struct {
	Contract *WETHGatewayTransactor // Generic write-only contract binding to access the raw methods on
}

// NewWETHGateway creates a new instance of WETHGateway, bound to a specific deployed contract.
func NewWETHGateway(address common.Address, backend bind.ContractBackend) (*WETHGateway, error) {
	contract, err := bindWETHGateway(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &WETHGateway{WETHGatewayCaller: WETHGatewayCaller{contract: contract}, WETHGatewayTransactor: WETHGatewayTransactor{contract: contract}, WETHGatewayFilterer: WETHGatewayFilterer{contract: contract}}, nil
}

// NewWETHGatewayCaller creates a new read-only instance of WETHGateway, bound to a specific deployed contract.
func NewWETHGatewayCaller(address common.Address, caller bind.ContractCaller) (*WETHGatewayCaller, error) {
	contract, err := bindWETHGateway(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &WETHGatewayCaller{contract: contract}, nil
}

// NewWETHGatewayTransactor creates a new write-only instance of WETHGateway, bound to a specific deployed contract.
func NewWETHGatewayTransactor(address common.Address, transactor bind.ContractTransactor) (*WETHGatewayTransactor, error) {
	contract, err := bindWETHGateway(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &WETHGatewayTransactor{contract: contract}, nil
}

// NewWETHGatewayFilterer creates a new log filterer instance of WETHGateway, bound to a specific deployed contract.
func NewWETHGatewayFilterer(address common.Address, filterer bind.ContractFilterer) (*WETHGatewayFilterer, error) {
	contract, err := bindWETHGateway(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &WETHGatewayFilterer{contract: contract}, nil
}

// bindWETHGateway binds a generic wrapper to an already deployed contract.
func bindWETHGateway(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(WETHGatewayABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WETHGateway *WETHGatewayRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _WETHGateway.Contract.WETHGatewayCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WETHGateway *WETHGatewayRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WETHGateway.Contract.WETHGatewayTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WETHGateway *WETHGatewayRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WETHGateway.Contract.WETHGatewayTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WETHGateway *WETHGatewayCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _WETHGateway.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WETHGateway *WETHGatewayTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WETHGateway.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WETHGateway *WETHGatewayTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WETHGateway.Contract.contract.Transact(opts, method, params...)
}

// GetAWETHAddress is a free data retrieval call binding the contract method 0x3a21afac.
//
// Solidity: function getAWETHAddress() view returns(address)
func (_WETHGateway *WETHGatewayCaller) GetAWETHAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _WETHGateway.contract.Call(opts, &out, "getAWETHAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAWETHAddress is a free data retrieval call binding the contract method 0x3a21afac.
//
// Solidity: function getAWETHAddress() view returns(address)
func (_WETHGateway *WETHGatewaySession) GetAWETHAddress() (common.Address, error) {
	return _WETHGateway.Contract.GetAWETHAddress(&_WETHGateway.CallOpts)
}

// GetAWETHAddress is a free data retrieval call binding the contract method 0x3a21afac.
//
// Solidity: function getAWETHAddress() view returns(address)
func (_WETHGateway *WETHGatewayCallerSession) GetAWETHAddress() (common.Address, error) {
	return _WETHGateway.Contract.GetAWETHAddress(&_WETHGateway.CallOpts)
}

// GetLendingPoolAddress is a free data retrieval call binding the contract method 0x5f36a742.
//
// Solidity: function getLendingPoolAddress() view returns(address)
func (_WETHGateway *WETHGatewayCaller) GetLendingPoolAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _WETHGateway.contract.Call(opts, &out, "getLendingPoolAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetLendingPoolAddress is a free data retrieval call binding the contract method 0x5f36a742.
//
// Solidity: function getLendingPoolAddress() view returns(address)
func (_WETHGateway *WETHGatewaySession) GetLendingPoolAddress() (common.Address, error) {
	return _WETHGateway.Contract.GetLendingPoolAddress(&_WETHGateway.CallOpts)
}

// GetLendingPoolAddress is a free data retrieval call binding the contract method 0x5f36a742.
//
// Solidity: function getLendingPoolAddress() view returns(address)
func (_WETHGateway *WETHGatewayCallerSession) GetLendingPoolAddress() (common.Address, error) {
	return _WETHGateway.Contract.GetLendingPoolAddress(&_WETHGateway.CallOpts)
}

// GetWETHAddress is a free data retrieval call binding the contract method 0xaffa8817.
//
// Solidity: function getWETHAddress() view returns(address)
func (_WETHGateway *WETHGatewayCaller) GetWETHAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _WETHGateway.contract.Call(opts, &out, "getWETHAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetWETHAddress is a free data retrieval call binding the contract method 0xaffa8817.
//
// Solidity: function getWETHAddress() view returns(address)
func (_WETHGateway *WETHGatewaySession) GetWETHAddress() (common.Address, error) {
	return _WETHGateway.Contract.GetWETHAddress(&_WETHGateway.CallOpts)
}

// GetWETHAddress is a free data retrieval call binding the contract method 0xaffa8817.
//
// Solidity: function getWETHAddress() view returns(address)
func (_WETHGateway *WETHGatewayCallerSession) GetWETHAddress() (common.Address, error) {
	return _WETHGateway.Contract.GetWETHAddress(&_WETHGateway.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_WETHGateway *WETHGatewayCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _WETHGateway.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_WETHGateway *WETHGatewaySession) Owner() (common.Address, error) {
	return _WETHGateway.Contract.Owner(&_WETHGateway.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_WETHGateway *WETHGatewayCallerSession) Owner() (common.Address, error) {
	return _WETHGateway.Contract.Owner(&_WETHGateway.CallOpts)
}

// BorrowETH is a paid mutator transaction binding the contract method 0x7d5155fd.
//
// Solidity: function borrowETH(uint256 amount, uint256 interesRateMode, uint16 referralCode) returns()
func (_WETHGateway *WETHGatewayTransactor) BorrowETH(opts *bind.TransactOpts, amount *big.Int, interesRateMode *big.Int, referralCode uint16) (*types.Transaction, error) {
	return _WETHGateway.contract.Transact(opts, "borrowETH", amount, interesRateMode, referralCode)
}

// BorrowETH is a paid mutator transaction binding the contract method 0x7d5155fd.
//
// Solidity: function borrowETH(uint256 amount, uint256 interesRateMode, uint16 referralCode) returns()
func (_WETHGateway *WETHGatewaySession) BorrowETH(amount *big.Int, interesRateMode *big.Int, referralCode uint16) (*types.Transaction, error) {
	return _WETHGateway.Contract.BorrowETH(&_WETHGateway.TransactOpts, amount, interesRateMode, referralCode)
}

// BorrowETH is a paid mutator transaction binding the contract method 0x7d5155fd.
//
// Solidity: function borrowETH(uint256 amount, uint256 interesRateMode, uint16 referralCode) returns()
func (_WETHGateway *WETHGatewayTransactorSession) BorrowETH(amount *big.Int, interesRateMode *big.Int, referralCode uint16) (*types.Transaction, error) {
	return _WETHGateway.Contract.BorrowETH(&_WETHGateway.TransactOpts, amount, interesRateMode, referralCode)
}

// DepositETH is a paid mutator transaction binding the contract method 0x58c22be7.
//
// Solidity: function depositETH(address onBehalfOf, uint16 referralCode) payable returns()
func (_WETHGateway *WETHGatewayTransactor) DepositETH(opts *bind.TransactOpts, onBehalfOf common.Address, referralCode uint16) (*types.Transaction, error) {
	return _WETHGateway.contract.Transact(opts, "depositETH", onBehalfOf, referralCode)
}

// DepositETH is a paid mutator transaction binding the contract method 0x58c22be7.
//
// Solidity: function depositETH(address onBehalfOf, uint16 referralCode) payable returns()
func (_WETHGateway *WETHGatewaySession) DepositETH(onBehalfOf common.Address, referralCode uint16) (*types.Transaction, error) {
	return _WETHGateway.Contract.DepositETH(&_WETHGateway.TransactOpts, onBehalfOf, referralCode)
}

// DepositETH is a paid mutator transaction binding the contract method 0x58c22be7.
//
// Solidity: function depositETH(address onBehalfOf, uint16 referralCode) payable returns()
func (_WETHGateway *WETHGatewayTransactorSession) DepositETH(onBehalfOf common.Address, referralCode uint16) (*types.Transaction, error) {
	return _WETHGateway.Contract.DepositETH(&_WETHGateway.TransactOpts, onBehalfOf, referralCode)
}

// EmergencyEtherTransfer is a paid mutator transaction binding the contract method 0xeed88b8d.
//
// Solidity: function emergencyEtherTransfer(address to, uint256 amount) returns()
func (_WETHGateway *WETHGatewayTransactor) EmergencyEtherTransfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _WETHGateway.contract.Transact(opts, "emergencyEtherTransfer", to, amount)
}

// EmergencyEtherTransfer is a paid mutator transaction binding the contract method 0xeed88b8d.
//
// Solidity: function emergencyEtherTransfer(address to, uint256 amount) returns()
func (_WETHGateway *WETHGatewaySession) EmergencyEtherTransfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _WETHGateway.Contract.EmergencyEtherTransfer(&_WETHGateway.TransactOpts, to, amount)
}

// EmergencyEtherTransfer is a paid mutator transaction binding the contract method 0xeed88b8d.
//
// Solidity: function emergencyEtherTransfer(address to, uint256 amount) returns()
func (_WETHGateway *WETHGatewayTransactorSession) EmergencyEtherTransfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _WETHGateway.Contract.EmergencyEtherTransfer(&_WETHGateway.TransactOpts, to, amount)
}

// EmergencyTokenTransfer is a paid mutator transaction binding the contract method 0xa3d5b255.
//
// Solidity: function emergencyTokenTransfer(address token, address to, uint256 amount) returns()
func (_WETHGateway *WETHGatewayTransactor) EmergencyTokenTransfer(opts *bind.TransactOpts, token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _WETHGateway.contract.Transact(opts, "emergencyTokenTransfer", token, to, amount)
}

// EmergencyTokenTransfer is a paid mutator transaction binding the contract method 0xa3d5b255.
//
// Solidity: function emergencyTokenTransfer(address token, address to, uint256 amount) returns()
func (_WETHGateway *WETHGatewaySession) EmergencyTokenTransfer(token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _WETHGateway.Contract.EmergencyTokenTransfer(&_WETHGateway.TransactOpts, token, to, amount)
}

// EmergencyTokenTransfer is a paid mutator transaction binding the contract method 0xa3d5b255.
//
// Solidity: function emergencyTokenTransfer(address token, address to, uint256 amount) returns()
func (_WETHGateway *WETHGatewayTransactorSession) EmergencyTokenTransfer(token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _WETHGateway.Contract.EmergencyTokenTransfer(&_WETHGateway.TransactOpts, token, to, amount)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_WETHGateway *WETHGatewayTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WETHGateway.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_WETHGateway *WETHGatewaySession) RenounceOwnership() (*types.Transaction, error) {
	return _WETHGateway.Contract.RenounceOwnership(&_WETHGateway.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_WETHGateway *WETHGatewayTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _WETHGateway.Contract.RenounceOwnership(&_WETHGateway.TransactOpts)
}

// RepayETH is a paid mutator transaction binding the contract method 0xf538ba51.
//
// Solidity: function repayETH(uint256 amount, uint256 rateMode, address onBehalfOf) payable returns()
func (_WETHGateway *WETHGatewayTransactor) RepayETH(opts *bind.TransactOpts, amount *big.Int, rateMode *big.Int, onBehalfOf common.Address) (*types.Transaction, error) {
	return _WETHGateway.contract.Transact(opts, "repayETH", amount, rateMode, onBehalfOf)
}

// RepayETH is a paid mutator transaction binding the contract method 0xf538ba51.
//
// Solidity: function repayETH(uint256 amount, uint256 rateMode, address onBehalfOf) payable returns()
func (_WETHGateway *WETHGatewaySession) RepayETH(amount *big.Int, rateMode *big.Int, onBehalfOf common.Address) (*types.Transaction, error) {
	return _WETHGateway.Contract.RepayETH(&_WETHGateway.TransactOpts, amount, rateMode, onBehalfOf)
}

// RepayETH is a paid mutator transaction binding the contract method 0xf538ba51.
//
// Solidity: function repayETH(uint256 amount, uint256 rateMode, address onBehalfOf) payable returns()
func (_WETHGateway *WETHGatewayTransactorSession) RepayETH(amount *big.Int, rateMode *big.Int, onBehalfOf common.Address) (*types.Transaction, error) {
	return _WETHGateway.Contract.RepayETH(&_WETHGateway.TransactOpts, amount, rateMode, onBehalfOf)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_WETHGateway *WETHGatewayTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _WETHGateway.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_WETHGateway *WETHGatewaySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _WETHGateway.Contract.TransferOwnership(&_WETHGateway.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_WETHGateway *WETHGatewayTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _WETHGateway.Contract.TransferOwnership(&_WETHGateway.TransactOpts, newOwner)
}

// WithdrawETH is a paid mutator transaction binding the contract method 0x36118b52.
//
// Solidity: function withdrawETH(uint256 amount, address to) returns()
func (_WETHGateway *WETHGatewayTransactor) WithdrawETH(opts *bind.TransactOpts, amount *big.Int, to common.Address) (*types.Transaction, error) {
	return _WETHGateway.contract.Transact(opts, "withdrawETH", amount, to)
}

// WithdrawETH is a paid mutator transaction binding the contract method 0x36118b52.
//
// Solidity: function withdrawETH(uint256 amount, address to) returns()
func (_WETHGateway *WETHGatewaySession) WithdrawETH(amount *big.Int, to common.Address) (*types.Transaction, error) {
	return _WETHGateway.Contract.WithdrawETH(&_WETHGateway.TransactOpts, amount, to)
}

// WithdrawETH is a paid mutator transaction binding the contract method 0x36118b52.
//
// Solidity: function withdrawETH(uint256 amount, address to) returns()
func (_WETHGateway *WETHGatewayTransactorSession) WithdrawETH(amount *big.Int, to common.Address) (*types.Transaction, error) {
	return _WETHGateway.Contract.WithdrawETH(&_WETHGateway.TransactOpts, amount, to)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_WETHGateway *WETHGatewayTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _WETHGateway.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_WETHGateway *WETHGatewaySession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _WETHGateway.Contract.Fallback(&_WETHGateway.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_WETHGateway *WETHGatewayTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _WETHGateway.Contract.Fallback(&_WETHGateway.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_WETHGateway *WETHGatewayTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WETHGateway.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_WETHGateway *WETHGatewaySession) Receive() (*types.Transaction, error) {
	return _WETHGateway.Contract.Receive(&_WETHGateway.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_WETHGateway *WETHGatewayTransactorSession) Receive() (*types.Transaction, error) {
	return _WETHGateway.Contract.Receive(&_WETHGateway.TransactOpts)
}

// WETHGatewayOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the WETHGateway contract.
type WETHGatewayOwnershipTransferredIterator struct {
	Event *WETHGatewayOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WETHGatewayOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WETHGatewayOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WETHGatewayOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WETHGatewayOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WETHGatewayOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WETHGatewayOwnershipTransferred represents a OwnershipTransferred event raised by the WETHGateway contract.
type WETHGatewayOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_WETHGateway *WETHGatewayFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*WETHGatewayOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _WETHGateway.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &WETHGatewayOwnershipTransferredIterator{contract: _WETHGateway.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_WETHGateway *WETHGatewayFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *WETHGatewayOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _WETHGateway.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WETHGatewayOwnershipTransferred)
				if err := _WETHGateway.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_WETHGateway *WETHGatewayFilterer) ParseOwnershipTransferred(log types.Log) (*WETHGatewayOwnershipTransferred, error) {
	event := new(WETHGatewayOwnershipTransferred)
	if err := _WETHGateway.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WadRayMathABI is the input ABI used to generate the binding from.
const WadRayMathABI = "[]"

// WadRayMathBin is the compiled bytecode used for deploying new contracts.
var WadRayMathBin = "0x60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e39e2b746313b63c491c7292ee2112d39a57523252865378b0c720b9af06af2764736f6c634300060c0033"

// DeployWadRayMath deploys a new Ethereum contract, binding an instance of WadRayMath to it.
func DeployWadRayMath(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *WadRayMath, error) {
	parsed, err := abi.JSON(strings.NewReader(WadRayMathABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(WadRayMathBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &WadRayMath{WadRayMathCaller: WadRayMathCaller{contract: contract}, WadRayMathTransactor: WadRayMathTransactor{contract: contract}, WadRayMathFilterer: WadRayMathFilterer{contract: contract}}, nil
}

// WadRayMath is an auto generated Go binding around an Ethereum contract.
type WadRayMath struct {
	WadRayMathCaller     // Read-only binding to the contract
	WadRayMathTransactor // Write-only binding to the contract
	WadRayMathFilterer   // Log filterer for contract events
}

// WadRayMathCaller is an auto generated read-only Go binding around an Ethereum contract.
type WadRayMathCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WadRayMathTransactor is an auto generated write-only Go binding around an Ethereum contract.
type WadRayMathTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WadRayMathFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type WadRayMathFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WadRayMathSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type WadRayMathSession struct {
	Contract     *WadRayMath       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// WadRayMathCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type WadRayMathCallerSession struct {
	Contract *WadRayMathCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// WadRayMathTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type WadRayMathTransactorSession struct {
	Contract     *WadRayMathTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// WadRayMathRaw is an auto generated low-level Go binding around an Ethereum contract.
type WadRayMathRaw struct {
	Contract *WadRayMath // Generic contract binding to access the raw methods on
}

// WadRayMathCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type WadRayMathCallerRaw struct {
	Contract *WadRayMathCaller // Generic read-only contract binding to access the raw methods on
}

// WadRayMathTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type WadRayMathTransactorRaw struct {
	Contract *WadRayMathTransactor // Generic write-only contract binding to access the raw methods on
}

// NewWadRayMath creates a new instance of WadRayMath, bound to a specific deployed contract.
func NewWadRayMath(address common.Address, backend bind.ContractBackend) (*WadRayMath, error) {
	contract, err := bindWadRayMath(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &WadRayMath{WadRayMathCaller: WadRayMathCaller{contract: contract}, WadRayMathTransactor: WadRayMathTransactor{contract: contract}, WadRayMathFilterer: WadRayMathFilterer{contract: contract}}, nil
}

// NewWadRayMathCaller creates a new read-only instance of WadRayMath, bound to a specific deployed contract.
func NewWadRayMathCaller(address common.Address, caller bind.ContractCaller) (*WadRayMathCaller, error) {
	contract, err := bindWadRayMath(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &WadRayMathCaller{contract: contract}, nil
}

// NewWadRayMathTransactor creates a new write-only instance of WadRayMath, bound to a specific deployed contract.
func NewWadRayMathTransactor(address common.Address, transactor bind.ContractTransactor) (*WadRayMathTransactor, error) {
	contract, err := bindWadRayMath(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &WadRayMathTransactor{contract: contract}, nil
}

// NewWadRayMathFilterer creates a new log filterer instance of WadRayMath, bound to a specific deployed contract.
func NewWadRayMathFilterer(address common.Address, filterer bind.ContractFilterer) (*WadRayMathFilterer, error) {
	contract, err := bindWadRayMath(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &WadRayMathFilterer{contract: contract}, nil
}

// bindWadRayMath binds a generic wrapper to an already deployed contract.
func bindWadRayMath(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(WadRayMathABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WadRayMath *WadRayMathRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _WadRayMath.Contract.WadRayMathCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WadRayMath *WadRayMathRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WadRayMath.Contract.WadRayMathTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WadRayMath *WadRayMathRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WadRayMath.Contract.WadRayMathTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WadRayMath *WadRayMathCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _WadRayMath.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WadRayMath *WadRayMathTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WadRayMath.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WadRayMath *WadRayMathTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WadRayMath.Contract.contract.Transact(opts, method, params...)
}

// WalletBalanceProviderABI is the input ABI used to generate the binding from.
const WalletBalanceProviderABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"batchBalanceOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserWalletBalances\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]"

// WalletBalanceProviderBin is the compiled bytecode used for deploying new contracts.
var WalletBalanceProviderBin = "0x608060405234801561001057600080fd5b50610a63806100206000396000f3fe6080604052600436106100385760003560e01c80630240534314610072578063b59b28ef146100a9578063f7888aec146100d65761006d565b3661006d5761004633610103565b61006b5760405162461bcd60e51b8152600401610062906109c9565b60405180910390fd5b005b600080fd5b34801561007e57600080fd5b5061009261008d366004610758565b61013f565b6040516100a092919061092f565b60405180910390f35b3480156100b557600080fd5b506100c96100c4366004610790565b6104b1565b6040516100a0919061098f565b3480156100e257600080fd5b506100f66100f1366004610758565b61058d565b6040516100a091906109e5565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061013757508115155b949350505050565b6060806000846001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561017d57600080fd5b505afa158015610191573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b5919061073c565b90506060816001600160a01b031663d1946dbc6040518163ffffffff1660e01b815260040160006040518083038186803b1580156101f257600080fd5b505afa158015610206573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261022e91908101906107f9565b90506060815160010167ffffffffffffffff8111801561024d57600080fd5b50604051908082528060200260200182016040528015610277578160200160208202803683370190505b50905060005b82518110156102c65782818151811061029257fe5b60200260200101518282815181106102a657fe5b6001600160a01b039092166020928302919091019091015260010161027d565b5073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee818351815181106102e957fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506060815167ffffffffffffffff8111801561032357600080fd5b5060405190808252806020026020018201604052801561034d578160200160208202803683370190505b50905060005b835181101561046b576103646106b9565b856001600160a01b031663c44b11f785848151811061037f57fe5b60200260200101516040518263ffffffff1660e01b81526004016103a3919061091b565b60206040518083038186803b1580156103bb57600080fd5b505afa1580156103cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f391906108a4565b905060006104008261067d565b50505090508061042b57600084848151811061041857fe5b6020026020010181815250505050610463565b6104488a86858151811061043b57fe5b602002602001015161058d565b84848151811061045457fe5b60200260200101818152505050505b600101610353565b5061048a8773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee61058d565b8184518151811061049757fe5b6020908102919091010152909450925050505b9250929050565b60608084830267ffffffffffffffff811180156104cd57600080fd5b506040519080825280602002602001820160405280156104f7578160200160208202803683370190505b50905060005b858110156105835760005b8481101561057a5761055588888481811061051f57fe5b90506020020160208101906105349190610719565b87878481811061054057fe5b90506020020160208101906100f19190610719565b83518490848802840190811061056757fe5b6020908102919091010152600101610508565b506001016104fd565b5095945050505050565b60006001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156105c557506001600160a01b03821631610677565b6105d7826001600160a01b0316610103565b1561065f576040516370a0823160e01b81526001600160a01b038316906370a082319061060890869060040161091b565b60206040518083038186803b15801561062057600080fd5b505afa158015610634573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065891906108c9565b9050610677565b60405162461bcd60e51b8152600401610062906109a2565b92915050565b51670100000000000000811615159167020000000000000082161515916704000000000000008116151591670800000000000000909116151590565b6040518060200160405280600081525090565b805161067781610a15565b60008083601f8401126106e8578182fd5b50813567ffffffffffffffff8111156106ff578182fd5b60208301915083602080830285010111156104aa57600080fd5b60006020828403121561072a578081fd5b813561073581610a15565b9392505050565b60006020828403121561074d578081fd5b815161073581610a15565b6000806040838503121561076a578081fd5b823561077581610a15565b9150602083013561078581610a15565b809150509250929050565b600080600080604085870312156107a5578182fd5b843567ffffffffffffffff808211156107bc578384fd5b6107c8888389016106d7565b909650945060208701359150808211156107e0578384fd5b506107ed878288016106d7565b95989497509550505050565b6000602080838503121561080b578182fd5b825167ffffffffffffffff80821115610822578384fd5b818501915085601f830112610835578384fd5b815181811115610843578485fd5b83810291506108538483016109ee565b8181528481019084860184860187018a101561086d578788fd5b8795505b83861015610897576108838a826106cc565b835260019590950194918601918601610871565b5098975050505050505050565b6000602082840312156108b5578081fd5b6108bf60206109ee565b9151825250919050565b6000602082840312156108da578081fd5b5051919050565b6000815180845260208085019450808401835b83811015610910578151875295820195908201906001016108f4565b509495945050505050565b6001600160a01b0391909116815260200190565b604080825283519082018190526000906020906060840190828701845b828110156109715781516001600160a01b03168452928401929084019060010161094c565b5050508381038285015261098581866108e1565b9695505050505050565b60006020825261073560208301846108e1565b6020808252600d908201526c24a72b20a624a22faa27a5a2a760991b604082015260600190565b602080825260029082015261191960f11b604082015260600190565b90815260200190565b60405181810167ffffffffffffffff81118282101715610a0d57600080fd5b604052919050565b6001600160a01b0381168114610a2a57600080fd5b5056fea264697066735822122038ee76e5eeaf2682115cdf35d71889ced097b1086959d7321c6d037a3588946464736f6c634300060c0033"

// DeployWalletBalanceProvider deploys a new Ethereum contract, binding an instance of WalletBalanceProvider to it.
func DeployWalletBalanceProvider(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *WalletBalanceProvider, error) {
	parsed, err := abi.JSON(strings.NewReader(WalletBalanceProviderABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(WalletBalanceProviderBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &WalletBalanceProvider{WalletBalanceProviderCaller: WalletBalanceProviderCaller{contract: contract}, WalletBalanceProviderTransactor: WalletBalanceProviderTransactor{contract: contract}, WalletBalanceProviderFilterer: WalletBalanceProviderFilterer{contract: contract}}, nil
}

// WalletBalanceProvider is an auto generated Go binding around an Ethereum contract.
type WalletBalanceProvider struct {
	WalletBalanceProviderCaller     // Read-only binding to the contract
	WalletBalanceProviderTransactor // Write-only binding to the contract
	WalletBalanceProviderFilterer   // Log filterer for contract events
}

// WalletBalanceProviderCaller is an auto generated read-only Go binding around an Ethereum contract.
type WalletBalanceProviderCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WalletBalanceProviderTransactor is an auto generated write-only Go binding around an Ethereum contract.
type WalletBalanceProviderTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WalletBalanceProviderFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type WalletBalanceProviderFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WalletBalanceProviderSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type WalletBalanceProviderSession struct {
	Contract     *WalletBalanceProvider // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// WalletBalanceProviderCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type WalletBalanceProviderCallerSession struct {
	Contract *WalletBalanceProviderCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// WalletBalanceProviderTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type WalletBalanceProviderTransactorSession struct {
	Contract     *WalletBalanceProviderTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// WalletBalanceProviderRaw is an auto generated low-level Go binding around an Ethereum contract.
type WalletBalanceProviderRaw struct {
	Contract *WalletBalanceProvider // Generic contract binding to access the raw methods on
}

// WalletBalanceProviderCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type WalletBalanceProviderCallerRaw struct {
	Contract *WalletBalanceProviderCaller // Generic read-only contract binding to access the raw methods on
}

// WalletBalanceProviderTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type WalletBalanceProviderTransactorRaw struct {
	Contract *WalletBalanceProviderTransactor // Generic write-only contract binding to access the raw methods on
}

// NewWalletBalanceProvider creates a new instance of WalletBalanceProvider, bound to a specific deployed contract.
func NewWalletBalanceProvider(address common.Address, backend bind.ContractBackend) (*WalletBalanceProvider, error) {
	contract, err := bindWalletBalanceProvider(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &WalletBalanceProvider{WalletBalanceProviderCaller: WalletBalanceProviderCaller{contract: contract}, WalletBalanceProviderTransactor: WalletBalanceProviderTransactor{contract: contract}, WalletBalanceProviderFilterer: WalletBalanceProviderFilterer{contract: contract}}, nil
}

// NewWalletBalanceProviderCaller creates a new read-only instance of WalletBalanceProvider, bound to a specific deployed contract.
func NewWalletBalanceProviderCaller(address common.Address, caller bind.ContractCaller) (*WalletBalanceProviderCaller, error) {
	contract, err := bindWalletBalanceProvider(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &WalletBalanceProviderCaller{contract: contract}, nil
}

// NewWalletBalanceProviderTransactor creates a new write-only instance of WalletBalanceProvider, bound to a specific deployed contract.
func NewWalletBalanceProviderTransactor(address common.Address, transactor bind.ContractTransactor) (*WalletBalanceProviderTransactor, error) {
	contract, err := bindWalletBalanceProvider(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &WalletBalanceProviderTransactor{contract: contract}, nil
}

// NewWalletBalanceProviderFilterer creates a new log filterer instance of WalletBalanceProvider, bound to a specific deployed contract.
func NewWalletBalanceProviderFilterer(address common.Address, filterer bind.ContractFilterer) (*WalletBalanceProviderFilterer, error) {
	contract, err := bindWalletBalanceProvider(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &WalletBalanceProviderFilterer{contract: contract}, nil
}

// bindWalletBalanceProvider binds a generic wrapper to an already deployed contract.
func bindWalletBalanceProvider(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(WalletBalanceProviderABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WalletBalanceProvider *WalletBalanceProviderRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _WalletBalanceProvider.Contract.WalletBalanceProviderCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WalletBalanceProvider *WalletBalanceProviderRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WalletBalanceProvider.Contract.WalletBalanceProviderTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WalletBalanceProvider *WalletBalanceProviderRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WalletBalanceProvider.Contract.WalletBalanceProviderTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WalletBalanceProvider *WalletBalanceProviderCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _WalletBalanceProvider.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WalletBalanceProvider *WalletBalanceProviderTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WalletBalanceProvider.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WalletBalanceProvider *WalletBalanceProviderTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WalletBalanceProvider.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0xf7888aec.
//
// Solidity: function balanceOf(address user, address token) view returns(uint256)
func (_WalletBalanceProvider *WalletBalanceProviderCaller) BalanceOf(opts *bind.CallOpts, user common.Address, token common.Address) (*big.Int, error) {
	var out []interface{}
	err := _WalletBalanceProvider.contract.Call(opts, &out, "balanceOf", user, token)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0xf7888aec.
//
// Solidity: function balanceOf(address user, address token) view returns(uint256)
func (_WalletBalanceProvider *WalletBalanceProviderSession) BalanceOf(user common.Address, token common.Address) (*big.Int, error) {
	return _WalletBalanceProvider.Contract.BalanceOf(&_WalletBalanceProvider.CallOpts, user, token)
}

// BalanceOf is a free data retrieval call binding the contract method 0xf7888aec.
//
// Solidity: function balanceOf(address user, address token) view returns(uint256)
func (_WalletBalanceProvider *WalletBalanceProviderCallerSession) BalanceOf(user common.Address, token common.Address) (*big.Int, error) {
	return _WalletBalanceProvider.Contract.BalanceOf(&_WalletBalanceProvider.CallOpts, user, token)
}

// BatchBalanceOf is a free data retrieval call binding the contract method 0xb59b28ef.
//
// Solidity: function batchBalanceOf(address[] users, address[] tokens) view returns(uint256[])
func (_WalletBalanceProvider *WalletBalanceProviderCaller) BatchBalanceOf(opts *bind.CallOpts, users []common.Address, tokens []common.Address) ([]*big.Int, error) {
	var out []interface{}
	err := _WalletBalanceProvider.contract.Call(opts, &out, "batchBalanceOf", users, tokens)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// BatchBalanceOf is a free data retrieval call binding the contract method 0xb59b28ef.
//
// Solidity: function batchBalanceOf(address[] users, address[] tokens) view returns(uint256[])
func (_WalletBalanceProvider *WalletBalanceProviderSession) BatchBalanceOf(users []common.Address, tokens []common.Address) ([]*big.Int, error) {
	return _WalletBalanceProvider.Contract.BatchBalanceOf(&_WalletBalanceProvider.CallOpts, users, tokens)
}

// BatchBalanceOf is a free data retrieval call binding the contract method 0xb59b28ef.
//
// Solidity: function batchBalanceOf(address[] users, address[] tokens) view returns(uint256[])
func (_WalletBalanceProvider *WalletBalanceProviderCallerSession) BatchBalanceOf(users []common.Address, tokens []common.Address) ([]*big.Int, error) {
	return _WalletBalanceProvider.Contract.BatchBalanceOf(&_WalletBalanceProvider.CallOpts, users, tokens)
}

// GetUserWalletBalances is a free data retrieval call binding the contract method 0x02405343.
//
// Solidity: function getUserWalletBalances(address provider, address user) view returns(address[], uint256[])
func (_WalletBalanceProvider *WalletBalanceProviderCaller) GetUserWalletBalances(opts *bind.CallOpts, provider common.Address, user common.Address) ([]common.Address, []*big.Int, error) {
	var out []interface{}
	err := _WalletBalanceProvider.contract.Call(opts, &out, "getUserWalletBalances", provider, user)

	if err != nil {
		return *new([]common.Address), *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	out1 := *abi.ConvertType(out[1], new([]*big.Int)).(*[]*big.Int)

	return out0, out1, err

}

// GetUserWalletBalances is a free data retrieval call binding the contract method 0x02405343.
//
// Solidity: function getUserWalletBalances(address provider, address user) view returns(address[], uint256[])
func (_WalletBalanceProvider *WalletBalanceProviderSession) GetUserWalletBalances(provider common.Address, user common.Address) ([]common.Address, []*big.Int, error) {
	return _WalletBalanceProvider.Contract.GetUserWalletBalances(&_WalletBalanceProvider.CallOpts, provider, user)
}

// GetUserWalletBalances is a free data retrieval call binding the contract method 0x02405343.
//
// Solidity: function getUserWalletBalances(address provider, address user) view returns(address[], uint256[])
func (_WalletBalanceProvider *WalletBalanceProviderCallerSession) GetUserWalletBalances(provider common.Address, user common.Address) ([]common.Address, []*big.Int, error) {
	return _WalletBalanceProvider.Contract.GetUserWalletBalances(&_WalletBalanceProvider.CallOpts, provider, user)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_WalletBalanceProvider *WalletBalanceProviderTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WalletBalanceProvider.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_WalletBalanceProvider *WalletBalanceProviderSession) Receive() (*types.Transaction, error) {
	return _WalletBalanceProvider.Contract.Receive(&_WalletBalanceProvider.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_WalletBalanceProvider *WalletBalanceProviderTransactorSession) Receive() (*types.Transaction, error) {
	return _WalletBalanceProvider.Contract.Receive(&_WalletBalanceProvider.TransactOpts)
}
