type Query {

  GetSupply(symbol: String!): Supply

  GetSupplies(symbol: String!): [Supply]

  GetxcFeed(
    filter: String!
    QuoteAssets: [Asset!]
    Exchanges: [String]
    BlockSizeSeconds: Int!
    BlockShiftSeconds: Int
    StartTime: Time!
    EndTime: Time!
  ): [FilterPoint]

  GetChart(
    filter: String!
    BlockDurationSeconds: Int!
    BlockShiftSeconds: Int
    Symbol: String!
    StartTime: Time!
    EndTime: Time!
    Exchanges: [String!]
    Address: String
    BlockChain: String
  ): [FilterPoint]

  GetChartMeta(
    filter: String!
    BlockDurationSeconds: Int!
    BlockShiftSeconds: Int
    Symbol: String!
    StartTime: Time!
    EndTime: Time!
    Exchanges: [String!]
    Address: String
    BlockChain: String
  ): FilterPointMeta

  GetFeed(
    Filter: String!
    BlockSizeSeconds: Int!
    BlockShiftSeconds: Int
    StartTime: Time
    EndTime: Time
    FeedSelection: [FeedSelection!]
  ): [FilterPointExtended]

  GetVWALP(
    Quotetokenblockchain: String!
	  Quotetokenaddress: String!
	  BaseAssets: [Asset!]
	  Exchanges: [String]
	  BlockDurationSeconds: Int!
	  EndTime: Time
	  BasisPoints: Int!
  ): VWALP

  GetNFT(Address: String!, Blockchain: String!, TokenID: String!): NFT

  GetNFTTrades(
    Address: String!
    Blockchain: String!
    TokenID: String!
  ): [NFTTrade]

  GetNFTOffers(
    Address: String!
    Blockchain: String!
    TokenID: String!
  ): [NFTOffer]

  GetNFTBids(
    Address: String!,
    Blockchain: String!,
    TokenID: String!
  ): [NFTBid]

}

input FeedSelection {
  Address: String
  Blockchain: String
  LiquidityThreshold: Float
  Exchangepairs: [Exchangepair!]
}

input Exchangepair {
  Exchange: String
  Pairs: [String]
  LiquidityThreshold: Float
}

scalar Time

type FilterPointMeta {
  Max: Float
  Min: Float
  Points: [FilterPoint]
}

input Asset {
  Address: String
  BlockChain: String
}

type Supply {
  Symbol: String
  Name: String
  Supply: Float
  Source: String
  CirculatingSupply: Float
  Time: Time
}

type ChartPoint {
  Time: Time
  Exchange: String
  Value: Float
}

type VWALP {
  Symbol: String
  Value: Float
  Time: Time
}

type FilterPoint {
  Symbol: String
  Value: Float
  Name: String
  Time: Time
  Address: String
  Blockchain :String
  FirstTrade: Trade
  LastTrade: Trade
}

type FilterPointExtended {
  Name: String
  Symbol: String
  Time: Time
  Value: Float
  Address: String
  Blockchain: String
  Pools: [String!]
  Pairs: [String!]
  TradesCount: Int
}

type Trade {
  Price: Float
  Pair: String
  Volume: Float
  Symbol: String
  EstimatedUSDPrice: Float
}

type NFT {
  Address: String
  Blockchain: String
  CreationTime: Time
  CreatorAddress: String
  URI: String
  TokenID: String
}

type NFTTrade {
  Address: String
  Blockchain: String
  TokenID: String
  Price: String
  FromAddress: String
  ToAddress: String
  CurrencyAddress: String
  CurrencySymbol: String
  CurrencyDecimals: Int
  BlockNumber: Int
  Timestamp: Time
  TxHash: String
  Exchange: String
}

type NFTOffer {
  Address: String
  Blockchain: String
  TokenID: String
  StartValue: String
  EndValue: String
  Duration: Int
  AuctionType: String
  FromAddress: String
  CurrencyAddress: String
  CurrencySymbol: String
  CurrencyDecimals: Int
  Blocknumber: Int
  Timestamp: Time
  TxHash: String
  Exchange: String
}

type NFTBid {
  Address: String
  Blockchain: String
  TokenID: String
  BidValue: String
  FromAddress: String
  CurrencyAddress: String
  CurrencySymbol: String
  CurrencyDecimals: Int
  Blocknumber: Int
  Timestamp: Time
  TxHash: String
  Exchange: String
}
